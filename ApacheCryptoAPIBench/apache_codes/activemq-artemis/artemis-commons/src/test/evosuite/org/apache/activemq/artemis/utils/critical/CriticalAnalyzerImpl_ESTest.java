/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:22:07 GMT 2022
 */

package org.apache.activemq.artemis.utils.critical;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.critical.CriticalAction;
import org.apache.activemq.artemis.utils.critical.CriticalAnalyzer;
import org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl;
import org.apache.activemq.artemis.utils.critical.CriticalComponent;
import org.apache.activemq.artemis.utils.critical.CriticalComponentImpl;
import org.apache.activemq.artemis.utils.critical.EmptyCriticalAnalyzer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CriticalAnalyzerImpl_ESTest extends CriticalAnalyzerImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      criticalAnalyzerImpl0.start();
      criticalAnalyzerImpl0.setTimeout(1L, timeUnit0);
      assertTrue(criticalAnalyzerImpl0.isStarted());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      criticalAnalyzerImpl0.start();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      criticalAnalyzerImpl0.setCheckTime(1087L, timeUnit0);
      assertTrue(criticalAnalyzerImpl0.isStarted());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      criticalAnalyzerImpl0.start();
      boolean boolean0 = criticalAnalyzerImpl0.isStarted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      criticalAnalyzerImpl0.setTimeout((-292L), timeUnit0);
      long long0 = criticalAnalyzerImpl0.getTimeout(timeUnit0);
      assertEquals((-292L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      CriticalComponentImpl criticalComponentImpl0 = new CriticalComponentImpl(criticalAnalyzerImpl0, 5);
      criticalAnalyzerImpl0.add(criticalComponentImpl0);
      criticalAnalyzerImpl0.getNumberOfComponents();
      assertTrue(criticalAnalyzerImpl0.isMeasuring());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CriticalAnalyzer criticalAnalyzer0 = criticalAnalyzerImpl0.setCheckTime(0L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      criticalAnalyzer0.setTimeout(1L, timeUnit1);
      long long0 = criticalAnalyzerImpl0.getCheckTimeNanoSeconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      criticalAnalyzerImpl0.setCheckTime((-20L), timeUnit0);
      long long0 = criticalAnalyzerImpl0.getCheckTimeNanoSeconds();
      assertEquals((-20000L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      criticalAnalyzerImpl0.start();
      criticalAnalyzerImpl0.addAction((CriticalAction) null);
      assertTrue(criticalAnalyzerImpl0.isStarted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      criticalAnalyzerImpl0.setCheckTime(0L, timeUnit0);
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.setTimeout(0L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.setCheckTime(0L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.remove((CriticalComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.getTimeout((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      CriticalComponentImpl criticalComponentImpl0 = new CriticalComponentImpl(criticalAnalyzerImpl0, 2394);
      criticalComponentImpl0.isExpired(0);
      criticalComponentImpl0.isExpired((-1L));
      criticalComponentImpl0.isExpired(60000000000L);
      criticalAnalyzerImpl0.add(criticalComponentImpl0);
      criticalAnalyzerImpl0.check();
      // Undeclared exception!
      criticalAnalyzerImpl0.check();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      CriticalComponentImpl criticalComponentImpl0 = new CriticalComponentImpl(emptyCriticalAnalyzer0, 0);
      criticalAnalyzerImpl0.add(criticalComponentImpl0);
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.check();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.add((CriticalComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      criticalAnalyzerImpl0.getTimeout(timeUnit0);
      long long0 = criticalAnalyzerImpl0.getTimeout(timeUnit0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      long long0 = criticalAnalyzerImpl0.getTimeout(timeUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      boolean boolean0 = criticalAnalyzerImpl0.isMeasuring();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      criticalAnalyzerImpl0.setTimeout(10, timeUnit0);
      CriticalAnalyzer criticalAnalyzer0 = criticalAnalyzerImpl0.setCheckTime(0L, timeUnit0);
      long long0 = criticalAnalyzer0.getCheckTimeNanoSeconds();
      assertEquals(5000000L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      long long0 = criticalAnalyzerImpl0.getCheckTimeNanoSeconds();
      assertEquals(60000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      CriticalAction criticalAction0 = mock(CriticalAction.class, new ViolatedAssumptionAnswer());
      CriticalAnalyzer criticalAnalyzer0 = criticalAnalyzerImpl0.addAction(criticalAction0);
      assertFalse(criticalAnalyzer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      int int0 = criticalAnalyzerImpl0.getNumberOfComponents();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      boolean boolean0 = criticalAnalyzerImpl0.isStarted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      criticalAnalyzerImpl0.stop();
      assertFalse(criticalAnalyzerImpl0.isStarted());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      criticalAnalyzerImpl0.start();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        criticalAnalyzerImpl0.setCheckTime(0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      criticalAnalyzerImpl0.setCheckTime((-217L), timeUnit0);
      CriticalAnalyzer criticalAnalyzer0 = criticalAnalyzerImpl0.setTimeout(120000000L, timeUnit0);
      assertFalse(criticalAnalyzer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      criticalAnalyzerImpl0.clear();
      assertFalse(criticalAnalyzerImpl0.isStarted());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CriticalAnalyzerImpl criticalAnalyzerImpl0 = new CriticalAnalyzerImpl();
      CriticalComponentImpl criticalComponentImpl0 = new CriticalComponentImpl(criticalAnalyzerImpl0, 1728);
      criticalAnalyzerImpl0.remove(criticalComponentImpl0);
      assertTrue(criticalAnalyzerImpl0.isMeasuring());
  }
}
