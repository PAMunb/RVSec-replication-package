/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:23:10 GMT 2022
 */

package org.apache.activemq.artemis.utils.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.utils.collections.LinkedListImpl;
import org.apache.activemq.artemis.utils.collections.LinkedListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinkedListImpl_ESTest extends LinkedListImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedListImpl.Node<Integer> linkedListImpl_Node0 = new LinkedListImpl.Node<Integer>();
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImpl0.addHead(linkedListImpl_Node0);
      LinkedListIterator<Object> linkedListIterator0 = linkedListImpl0.iterator();
      linkedListImpl0.addHead(linkedListIterator0);
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.poll();
      assertEquals(1, linkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      Integer integer0 = new Integer((-139));
      linkedListImpl0.addTail(integer0);
      int int0 = linkedListImpl0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImpl0.iterator();
      int int0 = linkedListImpl0.numIters();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      // Undeclared exception!
      try { 
        linkedListImpl0.addTail((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Only HEAD nodes are allowed to hold null values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      // Undeclared exception!
      try { 
        linkedListImpl0.addHead((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Only HEAD nodes are allowed to hold null values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedListImpl.Node<Integer> linkedListImpl_Node0 = new LinkedListImpl.Node<Integer>();
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImpl0.addHead(linkedListImpl_Node0);
      linkedListImpl0.addTail(linkedListImpl_Node0);
      assertEquals(2, linkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedListImpl.Node<Integer> linkedListImpl_Node0 = new LinkedListImpl.Node<Integer>();
      String string0 = linkedListImpl_Node0.toString();
      assertEquals("Intrusive Node", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImpl0.iterator();
      linkedListImpl0.addHead(linkedListImpl0);
      linkedListImpl0.iterator();
      linkedListImpl0.poll();
      assertEquals(2, linkedListImpl0.numIters());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedListImpl<Integer> linkedListImpl0 = new LinkedListImpl<Integer>();
      LinkedListImpl<Object> linkedListImpl1 = new LinkedListImpl<Object>();
      linkedListImpl1.addHead(linkedListImpl0);
      linkedListImpl1.addTail(linkedListImpl0);
      linkedListImpl1.poll();
      assertEquals(1, linkedListImpl1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedListImpl.Node<Integer> linkedListImpl_Node0 = new LinkedListImpl.Node<Integer>();
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImpl0.addTail(linkedListImpl_Node0);
      linkedListImpl0.toString();
      assertEquals(1, linkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      Object object0 = linkedListImpl0.poll();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      int int0 = linkedListImpl0.numIters();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      linkedListImpl0.iterator();
      assertEquals(11, linkedListImpl0.numIters());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedListImpl<Integer> linkedListImpl0 = new LinkedListImpl<Integer>();
      linkedListImpl0.clear();
      assertEquals(0, linkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      int int0 = linkedListImpl0.size();
      assertEquals(0, int0);
  }
}
