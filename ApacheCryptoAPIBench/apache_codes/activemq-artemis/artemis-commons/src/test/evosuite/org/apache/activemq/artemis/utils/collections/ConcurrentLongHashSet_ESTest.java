/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:21:07 GMT 2022
 */

package org.apache.activemq.artemis.utils.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentLongHashSet_ESTest extends ConcurrentLongHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-1252);
      int int1 = 3904;
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet((-1252), 3904);
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.contains(int0);
      int int2 = concurrentLongHashSet0.size();
      concurrentLongHashSet0.contains(int0);
      concurrentLongHashSet0.add(int0);
      ConcurrentLongHashSet.hash(int1);
      long long0 = 0L;
      concurrentLongHashSet0.contains(long0);
      concurrentLongHashSet0.add(int1);
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.contains(int0);
      ConcurrentLongHashSet.hash(int2);
      long long1 = (-584L);
      ConcurrentLongHashSet.checkBiggerEqualZero(long1);
      concurrentLongHashSet0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2270;
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(2270);
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.isEmpty();
      long long0 = 458L;
      ConcurrentLongHashSet.checkBiggerEqualZero(458L);
      concurrentLongHashSet0.remove(2270);
      concurrentLongHashSet0.add(1027L);
      concurrentLongHashSet0.remove(458L);
      concurrentLongHashSet0.items();
      ConcurrentLongHashSet.checkBiggerEqualZero(458L);
      concurrentLongHashSet0.items();
      // Undeclared exception!
      concurrentLongHashSet0.items();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(3567);
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      concurrentLongHashSet0.add(3567);
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong0);
      concurrentLongHashSet0.size();
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong1 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong2 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.add(0L);
      concurrentLongHashSet0.add(0L);
      ConcurrentLongHashSet.checkBiggerEqualZero(0L);
      concurrentLongHashSet0.add(0L);
      ConcurrentLongHashSet.checkBiggerEqualZero(0L);
      ConcurrentLongHashSet.alignToPowerOfTwo(875);
      ConcurrentLongHashSet.hash(0L);
      concurrentLongHashSet0.contains(875);
      concurrentLongHashSet0.items();
      ConcurrentLongHashSet.checkBiggerEqualZero(0L);
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.isEmpty();
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = null;
      // Undeclared exception!
      try { 
        concurrentLongHashSet0.remove((-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(1, 1);
      concurrentLongHashSet0.remove(0L);
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong0);
      concurrentLongHashSet0.add(1);
      concurrentLongHashSet0.contains(0L);
      concurrentLongHashSet0.remove(0L);
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.contains(0L);
      concurrentLongHashSet0.getUsedBucketCount();
      concurrentLongHashSet0.clear();
      ConcurrentLongHashSet.alignToPowerOfTwo(1);
      ConcurrentLongHashSet.hash(1);
      ConcurrentLongHashSet.alignToPowerOfTwo(1);
      concurrentLongHashSet0.remove(0L);
      concurrentLongHashSet0.forEach((ConcurrentLongHashSet.ConsumerLong) null);
      concurrentLongHashSet0.clear();
      ConcurrentLongHashSet.hash(2861L);
      concurrentLongHashSet0.add(1);
      concurrentLongHashSet0.contains(0L);
      concurrentLongHashSet0.remove(0L);
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong1 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong1);
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.clear();
      // Undeclared exception!
      try { 
        ConcurrentLongHashSet.checkBiggerEqualZero((-2224L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(330);
      ConcurrentLongHashSet.checkBiggerEqualZero(330);
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.add(330);
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong0);
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.remove(330);
      ConcurrentLongHashSet.signSafeMod(330, 330);
      concurrentLongHashSet0.contains(330);
      concurrentLongHashSet0.remove(0L);
      concurrentLongHashSet0.capacity();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.add(1293L);
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong1 = null;
      concurrentLongHashSet0.isEmpty();
      // Undeclared exception!
      try { 
        concurrentLongHashSet0.forEach((ConcurrentLongHashSet.ConsumerLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet$Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(759);
      concurrentLongHashSet0.add(759);
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.remove(759);
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.contains(759);
      concurrentLongHashSet0.size();
      ConcurrentLongHashSet.alignToPowerOfTwo(0);
      concurrentLongHashSet0.getUsedBucketCount();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentLongHashSet.signSafeMod((-1750L), (-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentLongHashSet.signSafeMod(1133L, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet();
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.clear();
      concurrentLongHashSet0.items();
      int int0 = 1076;
      // Undeclared exception!
      try { 
        concurrentLongHashSet0.add((-2117L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(0, 309);
      assertNotNull(concurrentLongHashSet0);
      assertEquals(309L, concurrentLongHashSet0.capacity());
      
      long long0 = ConcurrentLongHashSet.hash(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ConcurrentLongHashSet.alignToPowerOfTwo(0);
      assertEquals(Integer.MAX_VALUE, int0);
      
      ConcurrentLongHashSet concurrentLongHashSet0 = null;
      try {
        concurrentLongHashSet0 = new ConcurrentLongHashSet((-3903), (-844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(0);
      assertNotNull(concurrentLongHashSet0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      concurrentLongHashSet0.clear();
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      boolean boolean0 = concurrentLongHashSet0.isEmpty();
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertTrue(boolean0);
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean1 = concurrentLongHashSet0.add(0);
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = concurrentLongHashSet0.isEmpty();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long long0 = (-1285L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        ConcurrentLongHashSet.checkBiggerEqualZero((-4049L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(524, 1);
      assertNotNull(concurrentLongHashSet0);
      assertEquals(1024L, concurrentLongHashSet0.capacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = null;
      try {
        concurrentLongHashSet0 = new ConcurrentLongHashSet(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet((-333));
      assertNotNull(concurrentLongHashSet0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      long long0 = concurrentLongHashSet0.capacity();
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertEquals(16L, long0);
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(long0));
      
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      ConcurrentLongHashSet.checkBiggerEqualZero(0L);
      concurrentLongHashSet0.clear();
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      // Undeclared exception!
      try { 
        concurrentLongHashSet0.remove((-1362L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = ConcurrentLongHashSet.hash(654L);
      assertEquals((-8011248707083186298L), long0);
      
      int int0 = 1162;
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(1162);
      assertNotNull(concurrentLongHashSet0);
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      
      int int1 = concurrentLongHashSet0.size();
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = concurrentLongHashSet0.add(0);
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentLongHashSet0.isEmpty();
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.contains(long0));
      
      boolean boolean2 = concurrentLongHashSet0.contains(1162);
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = concurrentLongHashSet0.contains(654L);
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = concurrentLongHashSet0.remove(1279L);
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = concurrentLongHashSet0.isEmpty();
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      boolean boolean6 = concurrentLongHashSet0.isEmpty();
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      long long1 = concurrentLongHashSet0.capacity();
      assertEquals(2048L, concurrentLongHashSet0.capacity());
      assertFalse(long1 == long0);
      assertEquals(2048L, long1);
      
      // Undeclared exception!
      try { 
        concurrentLongHashSet0.contains((-8011248707083186298L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet((-1013));
      assertNotNull(concurrentLongHashSet0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      boolean boolean0 = concurrentLongHashSet0.add(2989L);
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertTrue(boolean0);
      
      concurrentLongHashSet0.clear();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      
      concurrentLongHashSet0.clear();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      
      boolean boolean1 = concurrentLongHashSet0.remove(1L);
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = concurrentLongHashSet0.size();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ConcurrentLongHashSet.checkBiggerEqualZero((-913L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(2);
      assertNotNull(concurrentLongHashSet0);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      boolean boolean0 = concurrentLongHashSet0.remove(2);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertFalse(boolean0);
      
      boolean boolean1 = concurrentLongHashSet0.contains(846L);
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = concurrentLongHashSet0.size();
      assertEquals(16L, concurrentLongHashSet0.capacity());
      assertEquals(0, int0);
      
      concurrentLongHashSet0.clear();
      assertEquals(16L, concurrentLongHashSet0.capacity());
      
      boolean boolean2 = concurrentLongHashSet0.add(2);
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = concurrentLongHashSet0.size();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = concurrentLongHashSet0.size();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.contains(846L));
      
      boolean boolean3 = concurrentLongHashSet0.add(3361L);
      assertEquals(18L, concurrentLongHashSet0.capacity());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = concurrentLongHashSet0.contains(2);
      assertEquals(18L, concurrentLongHashSet0.capacity());
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = concurrentLongHashSet0.remove(2);
      assertEquals(18L, concurrentLongHashSet0.capacity());
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5);
      
      boolean boolean6 = concurrentLongHashSet0.add(0L);
      assertEquals(19L, concurrentLongHashSet0.capacity());
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6);
      
      ConcurrentLongHashSet.checkBiggerEqualZero(3361L);
      Set<Long> set1 = concurrentLongHashSet0.items();
      assertNotNull(set1);
      assertEquals(19L, concurrentLongHashSet0.capacity());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertNotSame(set1, set0);
      assertFalse(set1.contains(846L));
      assertTrue(set1.contains(3361L));
      assertFalse(set1.equals((Object)set0));
      
      boolean boolean7 = concurrentLongHashSet0.isEmpty();
      assertEquals(19L, concurrentLongHashSet0.capacity());
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7);
      
      boolean boolean8 = concurrentLongHashSet0.isEmpty();
      assertEquals(19L, concurrentLongHashSet0.capacity());
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8);
      
      int int3 = ConcurrentLongHashSet.signSafeMod(2, 1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      long long0 = concurrentLongHashSet0.getUsedBucketCount();
      assertEquals(19L, concurrentLongHashSet0.capacity());
      assertEquals(2L, long0);
      
      concurrentLongHashSet0.clear();
      assertEquals(19L, concurrentLongHashSet0.capacity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet();
      assertNotNull(concurrentLongHashSet0);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      concurrentLongHashSet0.forEach((ConcurrentLongHashSet.ConsumerLong) null);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet((-1250), 2791);
      assertNotNull(concurrentLongHashSet0);
      assertEquals(2791L, concurrentLongHashSet0.capacity());
      
      boolean boolean0 = concurrentLongHashSet0.remove(0L);
      assertFalse(boolean0);
      
      int int0 = concurrentLongHashSet0.size();
      assertEquals(2791L, concurrentLongHashSet0.capacity());
      assertEquals(0, int0);
      
      int int1 = concurrentLongHashSet0.size();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = ConcurrentLongHashSet.alignToPowerOfTwo(0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(Integer.MAX_VALUE, int2);
      
      concurrentLongHashSet0.clear();
      assertEquals(2791L, concurrentLongHashSet0.capacity());
      
      boolean boolean1 = concurrentLongHashSet0.remove(0L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = concurrentLongHashSet0.capacity();
      assertEquals(2791L, concurrentLongHashSet0.capacity());
      assertEquals(2791L, long0);
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(2791L, concurrentLongHashSet0.capacity());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(0L));
      
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong1 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = concurrentLongHashSet0.contains(0L);
      assertEquals(2791L, concurrentLongHashSet0.capacity());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet();
      assertNotNull(concurrentLongHashSet0);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      long long0 = 2932L;
      int int0 = concurrentLongHashSet0.size();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertEquals(0, int0);
      
      int int1 = concurrentLongHashSet0.size();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = concurrentLongHashSet0.add(2932L);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(boolean0);
      
      int int2 = concurrentLongHashSet0.size();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      long long1 = concurrentLongHashSet0.capacity();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertFalse(long1 == long0);
      assertEquals(512L, long1);
      
      concurrentLongHashSet0.clear();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      boolean boolean1 = concurrentLongHashSet0.add(1);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = concurrentLongHashSet0.isEmpty();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      concurrentLongHashSet0.clear();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      boolean boolean3 = concurrentLongHashSet0.add(0);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      concurrentLongHashSet0.clear();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      concurrentLongHashSet0.clear();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      long long2 = concurrentLongHashSet0.getUsedBucketCount();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      
      boolean boolean4 = concurrentLongHashSet0.isEmpty();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      int int3 = concurrentLongHashSet0.size();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      Set<Long> set0 = concurrentLongHashSet0.items();
      assertNotNull(set0);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(long2));
      
      ConcurrentLongHashSet.checkBiggerEqualZero(1413L);
      boolean boolean5 = concurrentLongHashSet0.remove(1413L);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = concurrentLongHashSet0.add(1996L);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6);
      
      ConcurrentLongHashSet.ConsumerLong concurrentLongHashSet_ConsumerLong0 = mock(ConcurrentLongHashSet.ConsumerLong.class, new ViolatedAssumptionAnswer());
      boolean boolean7 = concurrentLongHashSet0.isEmpty();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      concurrentLongHashSet0.forEach(concurrentLongHashSet_ConsumerLong0);
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      concurrentLongHashSet0.clear();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      ConcurrentLongHashSet.checkBiggerEqualZero(0L);
      concurrentLongHashSet0.clear();
      assertEquals(512L, concurrentLongHashSet0.capacity());
      
      // Undeclared exception!
      try { 
        ConcurrentLongHashSet.checkBiggerEqualZero((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentLongHashSet concurrentLongHashSet0 = new ConcurrentLongHashSet(0);
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.add(0);
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.size();
      concurrentLongHashSet0.add(0L);
      concurrentLongHashSet0.remove(0);
      concurrentLongHashSet0.isEmpty();
      concurrentLongHashSet0.add(0L);
      concurrentLongHashSet0.getUsedBucketCount();
      concurrentLongHashSet0.items();
      concurrentLongHashSet0.capacity();
      concurrentLongHashSet0.size();
      int int0 = concurrentLongHashSet0.size();
      assertEquals(17L, concurrentLongHashSet0.capacity());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = ConcurrentLongHashSet.hash((-1766L));
      assertEquals(1050271847614905801L, long0);
  }
}
