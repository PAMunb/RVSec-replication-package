/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:26:15 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidKeyException;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.BadPaddingException;
import org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSensitiveStringCodec_ESTest extends DefaultSensitiveStringCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.decode("-26f2bf262021aa17");
      assertEquals("two-way", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "one-way");
      defaultSensitiveStringCodec0.init(hashMap0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        defaultSensitiveStringCodec0.verify(charArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$PBKDF2Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "one-way");
      defaultSensitiveStringCodec0.init(hashMap0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        defaultSensitiveStringCodec0.verify(charArray0, ":");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$PBKDF2Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        DefaultSensitiveStringCodec.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.init((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("key", "Use: java -cp <classPath> org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec password-to-encode");
      defaultSensitiveStringCodec0.init(hashMap0);
      try { 
        defaultSensitiveStringCodec0.encode("algorithm");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.encode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.encode(defaultSensitiveStringCodec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("key", "-5e08405c76f6a55bd1136a57a4bba4b390d23551bbab6c502f2701c0b0a9182f57c1870f154d8e45");
      defaultSensitiveStringCodec0.init(hashMap0);
      try { 
        defaultSensitiveStringCodec0.decode("-5e08405c76f6a55bd1136a57a4bba4b390d23551bbab6c502f2701c0b0a9182f57c1870f154d8e45");
        fail("Expecting exception: InvalidKeyException");
      
      } catch(InvalidKeyException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode(defaultSensitiveStringCodec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "key");
      try { 
        defaultSensitiveStringCodec0.init(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid algorithm: key
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.decode("22fa49a8d8fa115d");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode("two-way");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must be encrypted.
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        DefaultSensitiveStringCodec.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        DefaultSensitiveStringCodec.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid algorithm: DYNAMOSA
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "two-way");
      defaultSensitiveStringCodec0.init(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "one-way");
      defaultSensitiveStringCodec0.init(hashMap0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        defaultSensitiveStringCodec0.verify(charArray0, "algorithm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"algorithm\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "one-way");
      defaultSensitiveStringCodec0.init(hashMap0);
      String string0 = defaultSensitiveStringCodec0.encode("two-way");
      assertEquals("1024:000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F:9615AB4329D6598CA9C0476726D3EFED28E423F096684AE61736C8897F501B7CA385EE099E20BE729FF8EE44310DC3495235D86EEF2C25EB1D0D8CC24BC2D56D", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("algorithm", "one-way");
      defaultSensitiveStringCodec0.init(hashMap0);
      try { 
        defaultSensitiveStringCodec0.decode((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Algorithm doesn't support decoding
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$PBKDF2Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      char[] charArray0 = new char[6];
      boolean boolean0 = defaultSensitiveStringCodec0.verify(charArray0, "two-way");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode("4");
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.encode("two-way");
      assertEquals("-26f2bf262021aa17", string0);
  }
}
