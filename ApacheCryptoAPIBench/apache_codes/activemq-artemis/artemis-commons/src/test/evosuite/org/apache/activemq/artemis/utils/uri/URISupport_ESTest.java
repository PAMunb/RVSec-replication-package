/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:16:14 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import org.apache.activemq.artemis.api.core.SimpleString;
import org.apache.activemq.artemis.utils.uri.URISupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class URISupport_ESTest extends URISupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("URI did not contain a matching parenthesis.", 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // character at indicated position is not a parenthesis
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URI uRI0 = MockURI.URI("decrement", "", (String) null, "decrement");
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      Map<String, String> map0 = URISupport.parseQuery("a`ny,4_YXyyG");
      URI uRI2 = URISupport.applyParameters(uRI1, map0, "");
      URI uRI3 = URISupport.applyParameters(uRI2, map0);
      assertEquals("?a%2560ny,4_YXyyG=null?a%2560ny,4_YXyyG=null&a%60ny,4_YXyyG=null#decrement", uRI3.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.URI("//io.netty.buffer.AdvancedLeakAwareCompositeByteBuf", "//io.netty.buffer.AdvancedLeakAwareCompositeByteBuf", "//io.netty.buffer.AdvancedLeakAwareCompositeByteBuf", "//io.netty.buffer.AdvancedLeakAwareCompositeByteBuf", "//io.netty.buffer.AdvancedLeakAwareCompositeByteBuf");
      URI uRI1 = URISupport.stripScheme(uRI0);
      assertTrue(uRI1.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = URISupport.stripPrefix("YW'C", "cU|q_W`@[eACs7JvQ\"r");
      assertEquals("YW'C", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      URI uRI2 = URISupport.removeQuery(uRI1);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.create("?");
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      URI uRI2 = URISupport.createURIWithQuery(uRI1, (String) null);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      URI uRI2 = URISupport.createRemainingURI(uRI1, map0);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("?X+8>gXT'.`");
      boolean boolean0 = URISupport.containsQuery(simpleString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = URISupport.containsQuery("v-\"V&?l:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = URISupport.containsQuery("EZiDZxX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.create("e:p_/5-wvlv;WG8-H");
      URI uRI1 = URISupport.changeScheme(uRI0, "e:p_/5-wvlv;WG8-H");
      assertEquals("e:p_/5-wvlv;WG8-H:", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = URISupport.changeScheme(uRI0, "io.netty.buffer.UnpooledUnsafeDirectByteBuf");
      assertNull(uRI1.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URISupport.changeScheme(uRI0, (String) null);
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = URISupport.applyParameters((URI) null, (Map<String, String>) null, "BvqlV>");
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      URI uRI2 = URISupport.applyParameters(uRI1, map0);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      StringBuilder stringBuilder0 = new StringBuilder(358);
      StringBuilder stringBuilder1 = URISupport.appendParameters(stringBuilder0, map0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "Not a matching number of '(' and ')' parenthesis");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI1);
      URI uRI2 = uRISupport_CompositeData0.toURI();
      try { 
        URISupport.stripScheme(uRI2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in query at index 17: (/tmp/foo.bar?Not a matching number of '(' and ')' parenthesis)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.stripScheme((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.stripPrefix((String) null, "vuHK'@4/sP86/\"pu(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.removeQuery((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseParameters((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.URI("ppc64", ",eVPzNi+dQ=", "", (String) null, (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("riterIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %sriterIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s", ",eVPzNi+dQ=");
      URI uRI1 = URISupport.applyParameters(uRI0, (Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        URISupport.parseParameters(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"d)\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseComposite((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.isCompositeURI((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("", 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch((String) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.createURIWithQuery((URI) null, "2$DtI'N(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        URISupport.createRemainingURI(uRI0, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.createQueryString((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer((-16));
      hashMap0.put("j6G&9\"FW~kOd,g*Y", integer0);
      // Undeclared exception!
      try { 
        URISupport.createQueryString(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.containsQuery((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.changeScheme((URI) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, 0, (String) null, (String) null, "leak");
      Map<String, String> map0 = URISupport.parseQuery("leak");
      // Undeclared exception!
      try { 
        URISupport.applyParameters(uRI0, map0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("`cQ52[{+");
      // Undeclared exception!
      try { 
        URISupport.applyParameters((URI) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis(")");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis("2Gq(.WKM<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis("'nM3 ad$H");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = URISupport.stripPrefix("", "UTF-8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = URISupport.stripPrefix("writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s", "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = URISupport.indexOfParenthesisMatch("writerIndex(%d) + minWrit.bleBytes(%d) exceeds maxCapacity(%d): %s", 58);
      assertEquals(61, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      boolean boolean0 = URISupport.isCompositeURI(uRI0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URI uRI0 = MockURI.create("(");
      boolean boolean0 = URISupport.isCompositeURI(uRI0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      boolean boolean0 = URISupport.isCompositeURI(uRI1);
      assertEquals("ftp:(foo.bar)", uRI1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "");
      assertEquals("ftp://foo.bar", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URI uRI0 = MockURI.URI("//()", ",eVPzNi+dQ=", "", "", "");
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "riterIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %sriterIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s");
      assertEquals("//()://,eVPzNi+dQ=?riterIndex(%25d)%20+%20minWritableBytes(%25d)%20exceeds%20maxCapacity(%25d):%20%25sriterIndex(%25d)%20+%20minWritableBytes(%25d)%20exceeds%20maxCapacity(%25d):%20%25s#", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      URI uRI1 = URISupport.applyParameters(uRI0, map0, "");
      assertFalse(uRI1.isOpaque());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s");
      // Undeclared exception!
      try { 
        URISupport.appendParameters((StringBuilder) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringBuilder stringBuilder0 = URISupport.appendParameters((StringBuilder) null, hashMap0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URISupport.CompositeData uRISupport_CompositeData0 = new URISupport.CompositeData();
      Map<String, String> map0 = uRISupport_CompositeData0.getParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      URI uRI1 = URISupport.createRemainingURI(uRI0, map0);
      assertNotSame(uRI1, uRI0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("QZ*M7Cx", "QZ*M7Cx");
      hashMap0.put("!O-gafH'e2%", "!O-gafH'e2%");
      String string0 = URISupport.createQueryString(hashMap0);
      assertEquals("%21O-gafH%27e2%25=%21O-gafH%27e2%25&QZ*M7Cx=QZ*M7Cx", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      String string0 = URISupport.createQueryString(map0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      URI uRI0 = MockURI.URI("*WYMY7UH");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      assertNull(uRISupport_CompositeData0.getScheme());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URI uRI0 = MockURI.URI("//()", "//()", "//()");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      assertEquals("://()", uRISupport_CompositeData0.getPath());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("T6!)4oMXYQh[#>", "");
      URI uRI1 = URISupport.applyParameters(uRI0, (Map<String, String>) hashMap0);
      try { 
        URISupport.parseComposite(uRI1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Not a matching number of '(' and ')' parenthesis: ftp://foo.bar?%7FT6!)4oMXYQh[%23%3E=
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "Not a matching number of '(' and ')' parenthesis");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI1);
      URI uRI2 = uRISupport_CompositeData0.toURI();
      Map<String, String> map0 = URISupport.parseParameters(uRI2);
      assertEquals("file:(/tmp/foo.bar?Not%20a%20matching%20number%20of%20'('%20and%20')'%20parenthesis)", uRI2.toString());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      try { 
        URISupport.indexOfParenthesisMatch("(/", 0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // URI did not contain a matching parenthesis.: (/
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("////ppc64?riterIndex(%25d)%20+%20minWritableBytes(%25d)%20exceeds%20maxCapacity(%25d):%20%25sriterIndex(%25d)%20+%20minWritableBytes(%25d)%20exceeds%20maxCapacity(%25d):%20%25s?riterIndex(%d) + minW~itableBytes(%d) exceeds maxCapacity(%d): %sriterIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s", 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // character at indicated position is not a parenthesis
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("//?://foo.bar", 58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid position for first parenthesis: 58
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch((String) null, (-267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid position for first parenthesis: -267
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      URI uRI0 = MockURI.URI("0!YEEq");
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "0!YEEq");
      URI uRI2 = URISupport.removeQuery(uRI1);
      assertEquals("0!YEEq", uRI2.toString());
      assertEquals("0!YEEq?0!YEEq", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "B<kYoK");
      Map<String, String> map0 = URISupport.parseParameters(uRI1);
      URI uRI2 = URISupport.applyParameters(uRI0, map0, "?");
      assertEquals("http://foo.bar", uRI2.toString());
      assertEquals("B%3CkYoK", uRI1.getRawQuery());
      assertEquals(1, map0.size());
      assertNotSame(uRI2, uRI0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      URI uRI0 = MockURI.URI("O?wc)tQ4k0xhF", "O?wc)tQ4k0xhF", (String) null, "O?wc)tQ4k0xhF");
      Map<String, String> map0 = URISupport.parseQuery("O?wc)tQ4k0xhF");
      URI uRI1 = URISupport.applyParameters(uRI0, map0, "");
      assertEquals("wc)tQ4k0xhF://O?wc)tQ4k0xhF?wc)tQ4k0xhF://O?wc)tQ4k0xhF&wc)tQ4k0xhF=null", uRI1.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      URI uRI0 = MockURI.create("//()");
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "////()://,eVPzNi+dQ=");
      Map<String, String> map0 = URISupport.parseParameters(uRI1);
      URI uRI2 = URISupport.createRemainingURI(uRI0, map0);
      assertEquals("//()?%252F%252F%252F%252F%2528%2529%253A%252F%252F%252CeVPzNi+dQ=", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("/");
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = URISupport.applyParameters(uRI0, map0, "/");
      Map<String, String> map1 = URISupport.parseParameters(uRI1);
      assertEquals("ftp://foo.bar?=null", uRI1.toString());
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseQuery("=n6%2t)!<({=`Invalid position for first parenthesis: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"2t\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("");
      URI uRI0 = URISupport.applyParameters((URI) null, map0);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      URI uRI0 = MockURI.URI("ppc64", ",eVPzNi+dQ=", "", ",eVPzNi+dQ=", ",eVPzNi+dQ=");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      assertEquals("ppc64:(,eVPzNi+dQ=?,eVPzNi+dQ=)#,eVPzNi+dQ=", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      URI uRI0 = MockURI.URI("//(C)", "//(C)", "//(C)", "//(C)", "//(C)");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      // Undeclared exception!
      try { 
        uRISupport_CompositeData0.toURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      URISupport uRISupport0 = new URISupport();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      URI uRI0 = MockURI.URI("0!YEEq");
      try { 
        URISupport.changeScheme(uRI0, "0!YEEq");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 0!YEEq:0!YEEq
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URISupport.stripScheme(uRI0);
      assertEquals("/tmp/foo.bar", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool((-2086));
      SimpleString simpleString0 = SimpleString.toSimpleString("io.netty.leakDetection.level", simpleString_StringSimpleStringPool0);
      boolean boolean0 = URISupport.containsQuery(simpleString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.containsQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      URISupport.CompositeData uRISupport_CompositeData0 = new URISupport.CompositeData();
      String string0 = uRISupport_CompositeData0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      Map<String, String> map0 = URISupport.parseParameters(uRI1);
      URI uRI2 = URISupport.applyParameters(uRI1, map0, "///tmp/foo.bar?nef=RTfw");
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
      assertSame(uRI2, uRI1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      URISupport.CompositeData uRISupport_CompositeData0 = new URISupport.CompositeData();
      URI[] uRIArray0 = uRISupport_CompositeData0.getComponents();
      assertNull(uRIArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      String string0 = uRISupport_CompositeData0.getScheme();
      assertEquals("file", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      String string0 = uRISupport_CompositeData0.getHost();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      URISupport.CompositeData uRISupport_CompositeData0 = new URISupport.CompositeData();
      String string0 = uRISupport_CompositeData0.getFragment();
      assertNull(string0);
  }
}
