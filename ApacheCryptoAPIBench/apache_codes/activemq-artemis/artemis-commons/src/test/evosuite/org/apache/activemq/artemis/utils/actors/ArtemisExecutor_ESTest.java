/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:25:50 GMT 2022
 */

package org.apache.activemq.artemis.utils.actors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.activemq.artemis.utils.actors.ArtemisExecutor;
import org.apache.activemq.artemis.utils.actors.OrderedExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArtemisExecutor_ESTest extends ArtemisExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      orderedExecutor0.remaining();
      orderedExecutor0.inHandler();
      forkJoinPool0.shutdownNow();
      orderedExecutor0.shutdownNow();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      orderedExecutor0.shutdown((long) 0, timeUnit0);
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(forkJoinPool0);
      forkJoinPool0.hasQueuedSubmissions();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "U");
      MockThread.interrupted();
      orderedExecutor0.doTask(mockThread0);
      orderedExecutor0.shutdownNow((Consumer<? super Runnable>) null);
      orderedExecutor0.isFlushed();
      orderedExecutor0.isFlushed();
      orderedExecutor0.shutdown();
      orderedExecutor0.isFlushed();
      artemisExecutor0.isFlushed();
      orderedExecutor0.isFlushed();
      orderedExecutor0.flush(0, timeUnit0);
      ArtemisExecutor.delegate(orderedExecutor0);
      artemisExecutor0.shutdownNow();
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      artemisExecutor0.flush((-125L), timeUnit1);
      orderedExecutor0.toString();
      String string0 = orderedExecutor0.toString();
      String string1 = orderedExecutor0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(scheduledThreadPoolExecutor0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = artemisExecutor0.shutdownNow(consumer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate((Executor) null);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        artemisExecutor0.flush(0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.actors.ArtemisExecutor$1", e);
      }
  }
}
