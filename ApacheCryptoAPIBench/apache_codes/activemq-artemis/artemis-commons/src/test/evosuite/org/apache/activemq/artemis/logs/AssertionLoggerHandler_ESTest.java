/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:20:51 GMT 2022
 */

package org.apache.activemq.artemis.logs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.logging.ErrorManager;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import org.apache.activemq.artemis.logs.AssertionLoggerHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.logging.MockFileHandler;
import org.evosuite.runtime.mock.java.util.logging.MockLogRecord;
import org.jboss.logmanager.ExtLogRecord;
import org.jboss.logmanager.filters.DenyAllFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssertionLoggerHandler_ESTest extends AssertionLoggerHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.startCapture();
      Level level0 = Level.SEVERE;
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertNotNull(level0);
      
      String string0 = level0.getLocalizedName();
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("SEVERE", string0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.NO_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "SEVERE", extLogRecord_FormatStyle0, "rg.jboss.logmanagerExtHandler");
      //  // Unstable assertion: assertNotNull(extLogRecord0);
      
      ExtLogRecord extLogRecord1 = new ExtLogRecord(extLogRecord0);
      //  // Unstable assertion: assertNotNull(extLogRecord1);
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      
      ExtLogRecord extLogRecord2 = ExtLogRecord.wrap(extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord1, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord1, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord2, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord2, extLogRecord1);
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord0.getMessage());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("rg.jboss.logmanagerExtHandler", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals(0L, extLogRecord1.getSequenceNumber());
      //  // Unstable assertion: assertEquals("rg.jboss.logmanagerExtHandler", extLogRecord1.getLoggerClassName());
      //  // Unstable assertion: assertEquals(0, extLogRecord1.getThreadID());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getNdc());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord1.getMessage());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord1.getFormatStyle());
      //  // Unstable assertion: assertNull(extLogRecord1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord1.getLoggerName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord1.getMillis());
      //  // Unstable assertion: assertEquals(0, extLogRecord2.getThreadID());
      //  // Unstable assertion: assertEquals("rg.jboss.logmanagerExtHandler", extLogRecord2.getLoggerClassName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord2.getFormatStyle());
      //  // Unstable assertion: assertEquals(0L, extLogRecord2.getSequenceNumber());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord2.getMillis());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord2.getMessage());
      //  // Unstable assertion: assertEquals("", extLogRecord2.getNdc());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord2.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord2.getLoggerName());
      //  // Unstable assertion: assertNull(extLogRecord2.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(extLogRecord2);
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      //  // Unstable assertion: assertFalse(extLogRecord2.equals((Object)extLogRecord0));
      
      assertionLoggerHandler0.doPublish(extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord1, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord1, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord2, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord2, extLogRecord1);
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord0.getMessage());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("rg.jboss.logmanagerExtHandler", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals(0L, extLogRecord1.getSequenceNumber());
      //  // Unstable assertion: assertEquals("rg.jboss.logmanagerExtHandler", extLogRecord1.getLoggerClassName());
      //  // Unstable assertion: assertEquals(0, extLogRecord1.getThreadID());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getNdc());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord1.getMessage());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord1.getFormatStyle());
      //  // Unstable assertion: assertNull(extLogRecord1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord1.getLoggerName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord1.getMillis());
      //  // Unstable assertion: assertEquals(0, extLogRecord2.getThreadID());
      //  // Unstable assertion: assertEquals("rg.jboss.logmanagerExtHandler", extLogRecord2.getLoggerClassName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord2.getFormatStyle());
      //  // Unstable assertion: assertEquals(0L, extLogRecord2.getSequenceNumber());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord2.getMillis());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord2.getMessage());
      //  // Unstable assertion: assertEquals("", extLogRecord2.getNdc());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord2.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord2.getLoggerName());
      //  // Unstable assertion: assertNull(extLogRecord2.getResourceBundleName());
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord2));
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      //  // Unstable assertion: assertFalse(extLogRecord2.equals((Object)extLogRecord0));
      
      Level level1 = Level.OFF;
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, level1.intValue());
      //  // Unstable assertion: assertEquals("OFF", level1.getName());
      //  // Unstable assertion: assertEquals("OFF", level1.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(level1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level1);
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, level1.intValue());
      //  // Unstable assertion: assertEquals("OFF", level1.getName());
      //  // Unstable assertion: assertEquals("OFF", level1.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SEVERE";
      stringArray0[1] = "rg.jboss.logmanagerExtHandler";
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(2, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertNotNull(assertionLoggerHandler0);
      
      AssertionLoggerHandler.clear();
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      
      assertionLoggerHandler0.close();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      
      Level level0 = assertionLoggerHandler0.getLevel();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertEquals("ALL", level0.getName());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, level0.intValue());
      //  // Unstable assertion: assertEquals("ALL", level0.toString());
      //  // Unstable assertion: assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertEquals("ALL", level0.getName());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(Integer.MIN_VALUE, level0.intValue());
      //  // Unstable assertion: assertEquals("ALL", level0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Level level1 = Level.WARNING;
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals("WARNING", level1.getName());
      //  // Unstable assertion: assertEquals("WARNING", level1.toString());
      //  // Unstable assertion: assertEquals(900, level1.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(level1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.MESSAGE_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level1, "62-?(}", extLogRecord_FormatStyle0, "62-?(}");
      //  // Unstable assertion: assertNotNull(extLogRecord0);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      
      ExtLogRecord extLogRecord1 = new ExtLogRecord(extLogRecord0);
      //  // Unstable assertion: assertNotNull(extLogRecord1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      
      assertionLoggerHandler0.doPublish(extLogRecord1);
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord1, extLogRecord0);
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertEquals("WARNING", level1.getName());
      //  // Unstable assertion: assertEquals("WARNING", level1.toString());
      //  // Unstable assertion: assertEquals(900, level1.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("62-?(}", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertEquals("62-?(}", extLogRecord0.getMessage());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord1.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getNdc());
      //  // Unstable assertion: assertEquals(0L, extLogRecord1.getSequenceNumber());
      //  // Unstable assertion: assertNull(extLogRecord1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("62-?(}", extLogRecord1.getMessage());
      //  // Unstable assertion: assertNull(extLogRecord1.getLoggerName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      //  // Unstable assertion: assertEquals(0, extLogRecord1.getThreadID());
      //  // Unstable assertion: assertEquals("62-?(}", extLogRecord1.getLoggerClassName());
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "62-?(}";
      stringArray0[1] = "62-?(}";
      stringArray0[2] = "62-?(}";
      stringArray0[3] = "62-?(}";
      stringArray0[4] = "62-?(}";
      stringArray0[5] = "62-?(}";
      stringArray0[6] = "62-?(}";
      boolean boolean1 = AssertionLoggerHandler.findText((-2932L), stringArray0);
      //  // Unstable assertion: assertEquals(7, stringArray0.length);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AssertionLoggerHandler.startCapture();
      AssertionLoggerHandler.clear();
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ErrorManager errorManager0 = assertionLoggerHandler0.getErrorManager();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(errorManager0);
      
      Level level0 = Level.FINER;
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertNotNull(level0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "H]v", "H]v");
      assertNotNull(extLogRecord0);
      
      extLogRecord0.setNdc("H]v");
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("H]v", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("H]v", extLogRecord0.getLoggerClassName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("H]v", extLogRecord0.getMessage());
      
      String string0 = extLogRecord0.getSourceMethodName();
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("H]v", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("H]v", extLogRecord0.getLoggerClassName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("H]v", extLogRecord0.getMessage());
      assertNotNull(string0);
      assertEquals("<unknown>", string0);
      
      extLogRecord0.disableCallerCalculation();
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("H]v", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("H]v", extLogRecord0.getLoggerClassName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("H]v", extLogRecord0.getMessage());
      
      assertionLoggerHandler0.publish(extLogRecord0);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("H]v", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("H]v", extLogRecord0.getLoggerClassName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("H]v", extLogRecord0.getMessage());
      
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String string1 = level0.getLocalizedName();
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertNotNull(string1);
      assertEquals("FINER", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertTrue(boolean0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertEquals("FINER", level0.getName());
      assertEquals(400, level0.intValue());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINER", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("H]v", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("H]v", extLogRecord0.getLoggerClassName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("H]v", extLogRecord0.getMessage());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<unknown>";
      stringArray0[1] = "FINER";
      stringArray0[2] = "<unknown>";
      stringArray0[3] = "H]v";
      stringArray0[4] = "<unknown>";
      stringArray0[5] = "FINER";
      stringArray0[6] = "FINER";
      boolean boolean1 = AssertionLoggerHandler.findText((-1L), stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.startCapture();
      Level level0 = Level.SEVERE;
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(level0);
      
      String string0 = level0.getLocalizedName();
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("SEVERE", string0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.NO_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "SEVERE", extLogRecord_FormatStyle0, "org.jboss.logmanager.ExtHandler");
      //  // Unstable assertion: assertNotNull(extLogRecord0);
      
      ExtLogRecord extLogRecord1 = new ExtLogRecord(extLogRecord0);
      //  // Unstable assertion: assertNotNull(extLogRecord1);
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      
      ExtLogRecord extLogRecord2 = ExtLogRecord.wrap(extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord1, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord1, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord2, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord2, extLogRecord1);
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord0.getMessage());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.ExtHandler", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertEquals(0L, extLogRecord1.getSequenceNumber());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getNdc());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord1.getMillis());
      //  // Unstable assertion: assertEquals(0, extLogRecord1.getThreadID());
      //  // Unstable assertion: assertNull(extLogRecord1.getLoggerName());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.ExtHandler", extLogRecord1.getLoggerClassName());
      //  // Unstable assertion: assertNull(extLogRecord1.getResourceBundleName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord1.getFormatStyle());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord1.getMessage());
      //  // Unstable assertion: assertEquals(0, extLogRecord2.getThreadID());
      //  // Unstable assertion: assertNull(extLogRecord2.getResourceBundleName());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.ExtHandler", extLogRecord2.getLoggerClassName());
      //  // Unstable assertion: assertNull(extLogRecord2.getLoggerName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord2.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord2.getNdc());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord2.getMessage());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord2.getThreadName());
      //  // Unstable assertion: assertEquals(0L, extLogRecord2.getSequenceNumber());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord2.getFormatStyle());
      //  // Unstable assertion: assertNotNull(extLogRecord2);
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      //  // Unstable assertion: assertFalse(extLogRecord2.equals((Object)extLogRecord0));
      
      assertionLoggerHandler0.doPublish(extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord0, extLogRecord1);
      //  // Unstable assertion: assertNotSame(extLogRecord1, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord1, extLogRecord2);
      //  // Unstable assertion: assertNotSame(extLogRecord2, extLogRecord0);
      //  // Unstable assertion: assertSame(extLogRecord2, extLogRecord1);
      //  // Unstable assertion: assertEquals("SEVERE", level0.getName());
      //  // Unstable assertion: assertEquals("SEVERE", level0.toString());
      //  // Unstable assertion: assertEquals(1000, level0.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord0.getMessage());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.ExtHandler", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertEquals(0L, extLogRecord1.getSequenceNumber());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getNdc());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord1.getMillis());
      //  // Unstable assertion: assertEquals(0, extLogRecord1.getThreadID());
      //  // Unstable assertion: assertNull(extLogRecord1.getLoggerName());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.ExtHandler", extLogRecord1.getLoggerClassName());
      //  // Unstable assertion: assertNull(extLogRecord1.getResourceBundleName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord1.getFormatStyle());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord1.getMessage());
      //  // Unstable assertion: assertEquals(0, extLogRecord2.getThreadID());
      //  // Unstable assertion: assertNull(extLogRecord2.getResourceBundleName());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.ExtHandler", extLogRecord2.getLoggerClassName());
      //  // Unstable assertion: assertNull(extLogRecord2.getLoggerName());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord2.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord2.getNdc());
      //  // Unstable assertion: assertEquals("SEVERE", extLogRecord2.getMessage());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord2.getThreadName());
      //  // Unstable assertion: assertEquals(0L, extLogRecord2.getSequenceNumber());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord2.getFormatStyle());
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord2));
      //  // Unstable assertion: assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      //  // Unstable assertion: assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      //  // Unstable assertion: assertFalse(extLogRecord2.equals((Object)extLogRecord0));
      
      Level level1 = Level.OFF;
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals("OFF", level1.getName());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, level1.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("OFF", level1.toString());
      //  // Unstable assertion: assertNotNull(level1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level1);
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals("OFF", level1.getName());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, level1.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("OFF", level1.toString());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AssertionLoggerHandler.startCapture();
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNotNull(assertionLoggerHandler0);
      
      assertionLoggerHandler0.setAutoFlush(true);
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Kmx57k";
      stringArray0[1] = "nw&t67 (!QMQ!y";
      stringArray0[2] = "control";
      Level level0 = Level.FINE;
      //  // Unstable assertion: assertEquals("FINE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(500, level0.intValue());
      //  // Unstable assertion: assertEquals("FINE", level0.getName());
      //  // Unstable assertion: assertNotNull(level0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.NO_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "", extLogRecord_FormatStyle0, "3+ul");
      //  // Unstable assertion: assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertEquals("FINE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(500, level0.intValue());
      //  // Unstable assertion: assertEquals("FINE", level0.getName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getMessage());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals("3+ul", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      
      boolean boolean0 = AssertionLoggerHandler.findText(0L, stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean0);
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.close();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = AssertionLoggerHandler.findText((-1963L), (String[]) null);
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = ExtLogRecord.wrap((LogRecord) null);
      assertNull(extLogRecord0);
      
      assertionLoggerHandler0.doPublish((ExtLogRecord) null);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      AssertionLoggerHandler.findText(1490L, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AssertionLoggerHandler.startCapture();
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.clear();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.activemq.artemis.logs.AssertionLoggerHandler";
      stringArray0[1] = "";
      stringArray0[2] = "";
      boolean boolean0 = AssertionLoggerHandler.findText(0L, stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      AssertionLoggerHandler.stopCapture();
      boolean boolean3 = AssertionLoggerHandler.findText(0L, stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean3);
      //  // Unstable assertion: assertTrue(boolean3 == boolean2);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertTrue(boolean3 == boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNotNull(assertionLoggerHandler0);
      
      DenyAllFilter denyAllFilter0 = DenyAllFilter.getInstance();
      //  // Unstable assertion: assertNotNull(denyAllFilter0);
      
      assertionLoggerHandler0.setFilter(denyAllFilter0);
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      assertionLoggerHandler0.disableAccess();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      assertionLoggerHandler0.flush();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      Level level0 = Level.FINER;
      //  // Unstable assertion: assertEquals("FINER", level0.getName());
      //  // Unstable assertion: assertEquals(400, level0.intValue());
      //  // Unstable assertion: assertEquals("FINER", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(level0);
      
      String string0 = level0.getLocalizedName();
      //  // Unstable assertion: assertEquals("FINER", level0.getName());
      //  // Unstable assertion: assertEquals(400, level0.intValue());
      //  // Unstable assertion: assertEquals("FINER", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("FINER", string0);
      
      boolean boolean4 = AssertionLoggerHandler.hasLevel(level0);
      //  // Unstable assertion: assertEquals("FINER", level0.getName());
      //  // Unstable assertion: assertEquals(400, level0.intValue());
      //  // Unstable assertion: assertEquals("FINER", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertFalse(boolean4);
      //  // Unstable assertion: assertTrue(boolean4 == boolean0);
      //  // Unstable assertion: assertTrue(boolean4 == boolean3);
      //  // Unstable assertion: assertTrue(boolean4 == boolean2);
      //  // Unstable assertion: assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = AssertionLoggerHandler.findText(0L, stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean5);
      //  // Unstable assertion: assertTrue(boolean5 == boolean0);
      //  // Unstable assertion: assertTrue(boolean5 == boolean4);
      //  // Unstable assertion: assertTrue(boolean5 == boolean2);
      //  // Unstable assertion: assertTrue(boolean5 == boolean1);
      //  // Unstable assertion: assertTrue(boolean5 == boolean3);
      
      boolean boolean6 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean6);
      //  // Unstable assertion: assertTrue(boolean6 == boolean3);
      //  // Unstable assertion: assertTrue(boolean6 == boolean0);
      //  // Unstable assertion: assertTrue(boolean6 == boolean4);
      //  // Unstable assertion: assertTrue(boolean6 == boolean1);
      //  // Unstable assertion: assertTrue(boolean6 == boolean5);
      //  // Unstable assertion: assertTrue(boolean6 == boolean2);
      
      Level level1 = Level.parse("FINER");
      //  // Unstable assertion: assertSame(level1, level0);
      //  // Unstable assertion: assertEquals(400, level1.intValue());
      //  // Unstable assertion: assertEquals("FINER", level1.getName());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("FINER", level1.toString());
      //  // Unstable assertion: assertNotNull(level1);
      
      assertionLoggerHandler0.flush();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      boolean boolean7 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean7);
      //  // Unstable assertion: assertTrue(boolean7 == boolean0);
      //  // Unstable assertion: assertTrue(boolean7 == boolean4);
      //  // Unstable assertion: assertTrue(boolean7 == boolean3);
      //  // Unstable assertion: assertTrue(boolean7 == boolean6);
      //  // Unstable assertion: assertTrue(boolean7 == boolean5);
      //  // Unstable assertion: assertTrue(boolean7 == boolean1);
      //  // Unstable assertion: assertTrue(boolean7 == boolean2);
      
      boolean boolean8 = AssertionLoggerHandler.hasLevel(level0);
      //  // Unstable assertion: assertSame(level0, level1);
      //  // Unstable assertion: assertEquals("FINER", level0.getName());
      //  // Unstable assertion: assertEquals(400, level0.intValue());
      //  // Unstable assertion: assertEquals("FINER", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertFalse(boolean8);
      //  // Unstable assertion: assertTrue(boolean8 == boolean2);
      //  // Unstable assertion: assertTrue(boolean8 == boolean4);
      //  // Unstable assertion: assertTrue(boolean8 == boolean6);
      //  // Unstable assertion: assertTrue(boolean8 == boolean7);
      //  // Unstable assertion: assertTrue(boolean8 == boolean1);
      //  // Unstable assertion: assertTrue(boolean8 == boolean3);
      //  // Unstable assertion: assertTrue(boolean8 == boolean0);
      //  // Unstable assertion: assertTrue(boolean8 == boolean5);
      
      AssertionLoggerHandler.startCapture();
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.MESSAGE_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level1, (String) null, extLogRecord_FormatStyle0, "");
      //  // Unstable assertion: assertNotNull(extLogRecord0);
      
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      //  // Unstable assertion: assertSame(level1, level0);
      //  // Unstable assertion: assertSame(extLogRecord0, extLogRecord1);
      //  // Unstable assertion: assertSame(extLogRecord1, extLogRecord0);
      //  // Unstable assertion: assertEquals(400, level1.intValue());
      //  // Unstable assertion: assertEquals("FINER", level1.getName());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("FINER", level1.toString());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord0.getMessage());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getLoggerClassName());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertEquals(0L, extLogRecord1.getSequenceNumber());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getLoggerClassName());
      //  // Unstable assertion: assertEquals(0, extLogRecord1.getThreadID());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      //  // Unstable assertion: assertEquals("", extLogRecord1.getNdc());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord1.getMillis());
      //  // Unstable assertion: assertNull(extLogRecord1.getMessage());
      //  // Unstable assertion: assertNull(extLogRecord1.getLoggerName());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      //  // Unstable assertion: assertNull(extLogRecord1.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(extLogRecord1);
      
      // Undeclared exception!
      try { 
        assertionLoggerHandler0.doPublish(extLogRecord1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Level level0 = Level.CONFIG;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertEquals("CONFIG", level0.getName());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertEquals("CONFIG", level0.getName());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      level0.getLocalizedName();
      MockFileHandler mockFileHandler0 = new MockFileHandler("Q`[rSWHe73LV", false);
      assertionLoggerHandler0.flush();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&A^RDf}0e/pB7UBs";
      stringArray0[1] = "&A^RDf}0e/pB7UBs";
      stringArray0[2] = "4CtlBhmyQ";
      stringArray0[3] = "org.jboss.logmanager.WrappedExtLogRecord";
      stringArray0[4] = ",E_^5UMazb?qKFR";
      stringArray0[5] = "!9";
      stringArray0[6] = "";
      stringArray0[7] = "Table is full!";
      stringArray0[8] = "?Zk6]Lr";
      // Undeclared exception!
      AssertionLoggerHandler.findText(245L, stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNotNull(assertionLoggerHandler0);
      
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      
      AssertionLoggerHandler.startCapture();
      Level level0 = Level.CONFIG;
      assertEquals("CONFIG", level0.toString());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertNotNull(level0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.PRINTF;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, (String) null, extLogRecord_FormatStyle0, (String) null);
      assertNotNull(extLogRecord0);
      
      // Undeclared exception!
      try { 
        assertionLoggerHandler0.doPublish(extLogRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.jboss.logmanager.filters.DenyAllFilter";
      stringArray0[1] = "xDOZmEv01)";
      stringArray0[2] = "org.apache.activemq.artemis.logs.AssertionLoggerHandler";
      stringArray0[3] = "?\"2";
      boolean boolean0 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(4, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertNotNull(assertionLoggerHandler0);
      
      assertionLoggerHandler0.flush();
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      
      Level level0 = Level.FINE;
      //  // Unstable assertion: assertEquals(500, level0.intValue());
      //  // Unstable assertion: assertEquals("FINE", level0.getName());
      //  // Unstable assertion: assertEquals("FINE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertNotNull(level0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.PRINTF;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "F{kZ4VK?j", extLogRecord_FormatStyle0, "org.jboss.logmanager.filters.InvertFilter");
      //  // Unstable assertion: assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isAutoFlush());
      //  // Unstable assertion: assertNull(assertionLoggerHandler0.getEncoding());
      //  // Unstable assertion: assertTrue(assertionLoggerHandler0.isEnabled());
      //  // Unstable assertion: assertEquals(500, level0.intValue());
      //  // Unstable assertion: assertEquals("FINE", level0.getName());
      //  // Unstable assertion: assertEquals("FINE", level0.toString());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      //  // Unstable assertion: assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      //  // Unstable assertion: assertEquals(ExtLogRecord.FormatStyle.PRINTF, extLogRecord0.getFormatStyle());
      //  // Unstable assertion: assertEquals(0L, extLogRecord0.getSequenceNumber());
      //  // Unstable assertion: assertEquals(1392409281320L, extLogRecord0.getMillis());
      //  // Unstable assertion: assertEquals("", extLogRecord0.getNdc());
      //  // Unstable assertion: assertEquals("F{kZ4VK?j", extLogRecord0.getMessage());
      //  // Unstable assertion: assertNull(extLogRecord0.getResourceBundleName());
      //  // Unstable assertion: assertEquals(0, extLogRecord0.getThreadID());
      //  // Unstable assertion: assertNull(extLogRecord0.getLoggerName());
      //  // Unstable assertion: assertEquals("org.jboss.logmanager.filters.InvertFilter", extLogRecord0.getLoggerClassName());
      
      Level level1 = Level.CONFIG;
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals("CONFIG", level1.toString());
      //  // Unstable assertion: assertEquals(700, level1.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("CONFIG", level1.getName());
      //  // Unstable assertion: assertNotNull(level1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level1);
      //  // Unstable assertion: assertNotSame(level1, level0);
      //  // Unstable assertion: assertEquals("CONFIG", level1.toString());
      //  // Unstable assertion: assertEquals(700, level1.intValue());
      //  // Unstable assertion: assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      //  // Unstable assertion: assertEquals("CONFIG", level1.getName());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(level1.equals((Object)level0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      //  // Unstable assertion: assertEquals(4, stringArray0.length);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      System.setCurrentTimeMillis(1392409281253L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotNull(assertionLoggerHandler0);
      
      Level level0 = assertionLoggerHandler0.getLevel();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(Integer.MIN_VALUE, level0.intValue());
      assertEquals("ALL", level0.toString());
      assertEquals("ALL", level0.getName());
      assertNotNull(level0);
      
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "");
      assertNotNull(mockLogRecord0);
      
      // Undeclared exception!
      try { 
        ExtLogRecord.wrap(mockLogRecord0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.logmanager.WrappedExtLogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = AssertionLoggerHandler.findText(0L, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      assertionLoggerHandler0.disableAccess();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      AssertionLoggerHandler.stopCapture();
      assertionLoggerHandler0.close();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String string0 = "org.apache.activemq.artemis.logs.AssertionLoggerHandler";
      assertionLoggerHandler0.setAutoFlush(false);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertFalse(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      try { 
        Level.parse("org.apache.activemq.artemis.logs.AssertionLoggerHandler");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"org.apache.activemq.artemis.logs.AssertionLoggerHandler\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xKkQ^OJ1j";
      stringArray0[1] = "";
      stringArray0[2] = "@}w=-.";
      stringArray0[3] = ")8\rvwzF2K&*t7R";
      stringArray0[4] = "";
      assertionLoggerHandler0.setAutoFlush(false);
      Level level0 = Level.WARNING;
      assertionLoggerHandler0.setLevel(level0);
      stringArray0[5] = "]r^p.x";
      stringArray0[6] = "WRITE_FAILURE";
      stringArray0[7] = "W>6/hg%y+rKHZ";
      stringArray0[8] = "<7n";
      AssertionLoggerHandler.findText(stringArray0);
      assertionLoggerHandler0.close();
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, ")14%=", "");
      assertionLoggerHandler0.doPublish(extLogRecord0);
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      AssertionLoggerHandler.findText(stringArray0);
      AssertionLoggerHandler.clear();
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.startCapture();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jboss.logmfAagepfilters.LvelChangingFilter";
      AssertionLoggerHandler.findText(stringArray0);
      boolean boolean0 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean0);
  }
}
