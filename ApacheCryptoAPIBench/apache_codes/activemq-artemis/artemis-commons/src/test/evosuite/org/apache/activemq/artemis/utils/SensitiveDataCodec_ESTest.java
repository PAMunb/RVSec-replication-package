/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:25:58 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.BadPaddingException;
import org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec;
import org.apache.activemq.artemis.utils.MaskPasswordResolvingTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SensitiveDataCodec_ESTest extends SensitiveDataCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MaskPasswordResolvingTest.SimplePasswordCodec maskPasswordResolvingTest_SimplePasswordCodec0 = new MaskPasswordResolvingTest.SimplePasswordCodec();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = maskPasswordResolvingTest_SimplePasswordCodec0.encode(hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.encode("one-way");
      assertEquals("-6ebe545df9e5e187", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.decode("-26f2bf262021aa17");
      assertEquals("two-way", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.init((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.encode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      Object object0 = new Object();
      try { 
        defaultSensitiveStringCodec0.encode(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode("b");
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MaskPasswordResolvingTest.SimplePasswordCodec maskPasswordResolvingTest_SimplePasswordCodec0 = new MaskPasswordResolvingTest.SimplePasswordCodec();
      try { 
        maskPasswordResolvingTest_SimplePasswordCodec0.decode((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // I don't know the password null
         //
         verifyException("org.apache.activemq.artemis.utils.MaskPasswordResolvingTest$SimplePasswordCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      Object object0 = new Object();
      try { 
        defaultSensitiveStringCodec0.decode(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MaskPasswordResolvingTest.SimplePasswordCodec maskPasswordResolvingTest_SimplePasswordCodec0 = new MaskPasswordResolvingTest.SimplePasswordCodec();
      maskPasswordResolvingTest_SimplePasswordCodec0.init((Map<String, String>) null);
  }
}
