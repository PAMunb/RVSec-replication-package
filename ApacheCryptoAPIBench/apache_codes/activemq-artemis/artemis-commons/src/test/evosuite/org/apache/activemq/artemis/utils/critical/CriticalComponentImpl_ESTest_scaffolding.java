/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Apr 16 13:22:28 GMT 2022
 */

package org.apache.activemq.artemis.utils.critical;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CriticalComponentImpl_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.activemq.artemis.utils.critical.CriticalComponentImpl"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons"); 
    java.lang.System.setProperty("user.home", "/home/pedro"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "pedro"); 
    java.lang.System.setProperty("user.timezone", "America/Sao_Paulo"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CriticalComponentImpl_ESTest_scaffolding.class.getClassLoader() ,
      "org.jboss.logmanager.CopyOnWriteWeakMap$Node",
      "org.jboss.logging.LoggerProvider",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent",
      "org.jboss.logging.JBossLogRecord",
      "org.jboss.logging.JDKLoggerProvider",
      "org.jboss.logmanager.ExtLogRecord$FormatStyle",
      "org.jboss.logmanager.CopyOnWriteMap",
      "org.apache.activemq.artemis.utils.ActiveMQThreadFactory$1",
      "org.jboss.logmanager.LoggingMXBeanImpl",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent$3",
      "org.apache.activemq.artemis.core.server.ActiveMQComponent",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent$1",
      "org.jboss.logmanager.ConfigurationLocator",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent$2",
      "org.jboss.logmanager.AtomicArray",
      "org.jboss.logging.AbstractMdcLoggerProvider",
      "org.apache.activemq.artemis.utils.collections.ConcurrentHashSet",
      "org.apache.activemq.artemis.utils.collections.ConcurrentSet",
      "org.jboss.logging.Slf4jLogger",
      "org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl$1",
      "org.apache.activemq.artemis.utils.critical.CriticalComponent",
      "org.jboss.logmanager.Configurator",
      "org.jboss.logmanager.LogManager$1",
      "org.apache.activemq.artemis.utils.ReusableLatch$CountSync",
      "org.jboss.logmanager.LogContext",
      "org.jboss.logmanager.FastCopyHashMap",
      "org.jboss.logmanager.LogContext$1",
      "org.jboss.logging.AbstractLoggerProvider",
      "org.apache.activemq.artemis.utils.ReusableLatch",
      "org.jboss.logging.LoggerProviders$1",
      "org.apache.activemq.artemis.utils.critical.CriticalAnalyzer",
      "org.jboss.logging.Logger",
      "org.jboss.logmanager.LogContext$LazyHolder",
      "org.apache.activemq.artemis.utils.ActiveMQThreadFactory$ThreadCreateAction",
      "org.jboss.logmanager.ExtLogRecord",
      "org.jboss.logmanager.LogContext$StrongLevelRef",
      "org.jboss.logging.JDKLevel",
      "org.jboss.logging.BasicLogger",
      "org.jboss.logmanager.LogManager",
      "org.jboss.logmanager.CopyOnWriteWeakMap",
      "org.apache.activemq.artemis.utils.critical.EmptyCriticalAnalyzer",
      "org.apache.activemq.artemis.utils.critical.CriticalAction",
      "org.jboss.logmanager.LogContextSelector",
      "org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl",
      "org.jboss.logging.Slf4jLoggerProvider",
      "org.jboss.logging.LoggerProviders",
      "org.jboss.logmanager.Logger",
      "org.jboss.logging.Slf4jLocationAwareLogger",
      "org.jboss.logging.Slf4jLocationAwareLogger$1",
      "org.jboss.logmanager.LogContext$LevelRef",
      "org.jboss.logmanager.WrappedExtLogRecord",
      "org.jboss.logmanager.FastCopyHashMap$Entry",
      "org.apache.activemq.artemis.utils.critical.CriticalMeasure",
      "org.jboss.logging.JDKLogger",
      "org.jboss.logmanager.LoggerNode",
      "org.jboss.logging.Logger$Level",
      "org.jboss.logmanager.Logger$AttachmentKey",
      "org.jboss.logmanager.Level",
      "org.jboss.logmanager.CopyOnWriteWeakMap$Queue",
      "org.apache.activemq.artemis.utils.critical.CriticalComponentImpl",
      "org.apache.activemq.artemis.utils.ActiveMQThreadFactory",
      "org.jboss.logmanager.Protectable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.activemq.artemis.utils.critical.CriticalAction", false, CriticalComponentImpl_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CriticalComponentImpl_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.activemq.artemis.utils.critical.CriticalComponentImpl",
      "org.apache.activemq.artemis.utils.critical.EmptyCriticalAnalyzer",
      "org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl",
      "org.jboss.logging.Logger",
      "org.jboss.logging.LoggerProviders$1",
      "org.jboss.logging.AbstractLoggerProvider",
      "org.jboss.logging.Slf4jLoggerProvider",
      "org.jboss.logging.Slf4jLocationAwareLogger",
      "org.jboss.logging.Logger$Level",
      "org.jboss.logging.Slf4jLocationAwareLogger$1",
      "org.jboss.logging.LoggerProviders",
      "org.apache.activemq.artemis.utils.collections.ConcurrentHashSet",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent",
      "org.apache.activemq.artemis.utils.critical.CriticalAnalyzerImpl$1",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent$2",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent$3",
      "org.apache.activemq.artemis.utils.critical.CriticalMeasure",
      "org.apache.activemq.artemis.utils.ActiveMQThreadFactory",
      "org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent$1",
      "org.apache.activemq.artemis.utils.ReusableLatch",
      "org.apache.activemq.artemis.utils.ReusableLatch$CountSync",
      "org.apache.activemq.artemis.utils.ActiveMQThreadFactory$ThreadCreateAction",
      "org.apache.activemq.artemis.utils.ActiveMQThreadFactory$1"
    );
  }
}
