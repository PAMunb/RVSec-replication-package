/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:06:37 GMT 2022
 */

package org.apache.activemq.artemis.utils.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.stream.Stream;
import org.apache.activemq.artemis.utils.collections.ConcurrentHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcurrentHashSet_ESTest extends ConcurrentHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Stream<Object> stream0 = concurrentHashSet0.stream();
      concurrentHashSet0.addIfAbsent(stream0);
      int int0 = concurrentHashSet0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Iterator<Integer> iterator0 = concurrentHashSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer(3888);
      boolean boolean0 = concurrentHashSet0.addIfAbsent(integer0);
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentHashSet0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.add(concurrentHashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentHashSet1.contains(concurrentHashSet0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3888);
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet0.contains(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.addIfAbsent((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer(3888);
      boolean boolean0 = concurrentHashSet0.addIfAbsent(integer0);
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentHashSet0.addIfAbsent(integer0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Integer integer0 = new Integer(139);
      boolean boolean0 = concurrentHashSet0.add(integer0);
      boolean boolean1 = concurrentHashSet0.remove(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = concurrentHashSet0.add(integer0);
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentHashSet0.add(integer0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      boolean boolean0 = concurrentHashSet0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      concurrentHashSet0.clear();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      int int0 = concurrentHashSet0.size();
      assertFalse(concurrentHashSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.remove(concurrentHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
