/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 14 13:52:12 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.SimpleFutureImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleFutureImpl_ESTest extends SimpleFutureImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleFutureImpl<Object> simpleFutureImpl0 = new SimpleFutureImpl<Object>();
      MockThrowable mockThrowable0 = new MockThrowable(";>VA|");
      MockThrowable mockThrowable1 = new MockThrowable(";>VA|", mockThrowable0);
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      simpleFutureImpl0.fail(mockThrowable2);
      boolean boolean0 = simpleFutureImpl0.isDone();
      SimpleFutureImpl<String> simpleFutureImpl1 = new SimpleFutureImpl<String>();
      boolean boolean1 = simpleFutureImpl1.isDone();
      assertFalse(simpleFutureImpl1.isCancelled());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleFutureImpl<Object> simpleFutureImpl0 = new SimpleFutureImpl<Object>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      simpleFutureImpl0.get((-3033L), timeUnit0);
      boolean boolean0 = simpleFutureImpl0.isCancelled();
      boolean boolean1 = simpleFutureImpl0.isDone();
      assertTrue(boolean1 == boolean0);
      
      SimpleFutureImpl<String> simpleFutureImpl1 = new SimpleFutureImpl<String>();
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      simpleFutureImpl1.get(906L, timeUnit1);
      assertFalse(simpleFutureImpl1.isCancelled());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleFutureImpl<Object> simpleFutureImpl0 = new SimpleFutureImpl<Object>();
      Integer integer0 = new Integer(0);
      simpleFutureImpl0.set(integer0);
      simpleFutureImpl0.set((Object) null);
      simpleFutureImpl0.get();
      SimpleFutureImpl<String> simpleFutureImpl1 = new SimpleFutureImpl<String>();
      Throwable throwable0 = simpleFutureImpl1.exception;
      MockThrowable mockThrowable0 = new MockThrowable((String) null, (Throwable) null);
      simpleFutureImpl0.fail(mockThrowable0);
      boolean boolean0 = simpleFutureImpl0.isCancelled();
      assertFalse(boolean0);
      
      simpleFutureImpl1.set("~E");
      simpleFutureImpl1.set("");
      assertFalse(simpleFutureImpl1.isCancelled());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleFutureImpl<String> simpleFutureImpl0 = new SimpleFutureImpl<String>();
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      simpleFutureImpl0.fail(mockThrowable1);
      simpleFutureImpl0.cancel(false);
      simpleFutureImpl0.isCancelled();
      simpleFutureImpl0.set((String) null);
      assertTrue(simpleFutureImpl0.isCancelled());
      
      SimpleFutureImpl<Integer> simpleFutureImpl1 = new SimpleFutureImpl<Integer>();
      boolean boolean0 = simpleFutureImpl1.isCancelled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleFutureImpl<String> simpleFutureImpl0 = new SimpleFutureImpl<String>();
      boolean boolean0 = true;
      simpleFutureImpl0.canceled = true;
      MockThrowable mockThrowable0 = new MockThrowable("0,T|B4");
      simpleFutureImpl0.fail(mockThrowable0);
      simpleFutureImpl0.set("");
      simpleFutureImpl0.isCancelled();
      SimpleFutureImpl<Integer> simpleFutureImpl1 = new SimpleFutureImpl<Integer>();
      simpleFutureImpl1.isDone();
      SimpleFutureImpl<Object> simpleFutureImpl2 = new SimpleFutureImpl<Object>();
      simpleFutureImpl2.fail(mockThrowable0);
      simpleFutureImpl2.cancel(true);
      try { 
        simpleFutureImpl2.get();
        fail("Expecting exception: ExecutionException");
      
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 0,T|B4
         //
         verifyException("org.apache.activemq.artemis.utils.SimpleFutureImpl", e);
      }
  }
}
