/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:14:32 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.time.ZoneId;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.apache.activemq.artemis.utils.uri.BeanSupport;
import org.apache.commons.beanutils.converters.SqlTimestampConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanSupport_ESTest extends BeanSupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = BeanSupport.copyData("", "org.apache.commons.beanutils.converters.");
      assertEquals("org.apache.commons.beanutils.converters.", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = BeanSupport.setData((String) null, (Map<String, Object>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(3078);
      Properties properties0 = BeanSupport.getProperties(integer0, (Properties) null);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(1L);
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties(long0, properties0);
      assertTrue(properties1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = BeanSupport.encodeURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = BeanSupport.decodeURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties("pW8}r", properties0);
      BeanSupport.setProperties((Object) properties0, properties1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.setProperties("", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        BeanSupport.setProperties((AbstractMap.SimpleImmutableEntry<Double, Integer>) null, properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        BeanSupport.setData(uRI0, (HashMap<String, Object>) hashMap0, (Set<String>) set0, (Map<String, String>) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(23);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap hashMap2 = (HashMap)BeanSupport.setData(uRI0, (Object) hashMap0, (Map<String, String>) hashMap1);
      assertFalse(hashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BeanSupport.setData((URI) null, (Object) null, (Map<String, String>) map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        BeanSupport.setData(uRI0, (AbstractMap.SimpleEntry<String, Locale.LanguageRange>) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, (HashMap<String, Object>) hashMap0, (Set<String>) linkedHashSet0, (Map<String, String>) map0, (Map<String, Object>) hashMap0);
      try { 
        BeanSupport.setData((Object) map0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Float float0 = Float.valueOf((float) 0);
      hashMap0.put("e'Z(.NHxR^*", float0);
      try { 
        BeanSupport.setData(integer0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("org.apache.commons.beanutils.expression.DefaultResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale("userInfo", "userInfo");
      Properties properties0 = new Properties();
      try { 
        BeanSupport.getProperties(locale0, properties0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.getProperties("!eg+", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        BeanSupport.getProperties((Long) null, properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = new Locale(" failed.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[6] = (Object) locale0;
      try { 
        BeanSupport.getData(linkedList0, objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        BeanSupport.getData((List<String>) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.encodeURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.decodeURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.decodeURI("cu%^!&7e^S4=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"^!\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(65);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleImmutableEntry0);
      try { 
        BeanSupport.copyData(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry1);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        BeanSupport.copyData((Object) null, (Object) "W1ngJNB>z&\"P!7rM?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No destination bean specified
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = BeanSupport.encodeURI("host");
      assertEquals("host", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("UTF-8");
      Properties properties0 = new Properties();
      BeanSupport.getProperties(locale_LanguageRange0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("userInfo");
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) uRI0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      //  // Unstable assertion: assertEquals("opaque=java.lang.Boolean%400000000001&scheme=java.lang.String%400000000002&schemeSpecificPart=java.lang.String%400000000003&path=java.lang.String%400000000004&rawPath=java.lang.String%400000000004&port=java.lang.Integer%400000000005&rawSchemeSpecificPart=java.lang.String%400000000003&absolute=java.lang.Boolean%400000000006&rawAuthority=java.lang.String%400000000007&authority=java.lang.String%400000000007&host=java.lang.String%400000000008", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) hashMap0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(23);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("userInfo");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("userInfo", "userInfo");
      BeanSupport.setData(uRI0, (HashMap<String, Object>) hashMap0, (Set<String>) linkedHashSet0, (Map<String, String>) hashMap1, (Map<String, Object>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Properties properties0 = new Properties();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Properties properties1 = BeanSupport.getProperties((Object) uRI0, properties0);
      Set<String> set0 = properties1.stringPropertyNames();
      BeanSupport.setData(uRI0, (HashMap<String, Object>) hashMap1, (Set<String>) set0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(11, properties0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Properties properties0 = new Properties();
      BeanSupport.getProperties((Object) sqlTimestampConverter0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Float float0 = new Float((-1880.2476935838574));
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties(float0, properties0);
      Double double0 = new Double((-1880.2476935838574));
      BeanSupport.setProperties(double0, properties1);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Properties properties0 = new Properties();
      Object object0 = BeanSupport.setProperties((Object) sqlTimestampConverter0, properties0);
      assertSame(object0, sqlTimestampConverter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, "empty=java.lang.Boolean%400000000001&empty=java.lang.Boolean%400000000002&empty=java.lang.Boolean%400000000003&empty=java.lang.Boolean%400000000004&empty=java.lang.Boolean%400000000005", map0);
      BeanSupport.setData(uRI0, (Object) "empty=java.lang.Boolean%400000000001&empty=java.lang.Boolean%400000000002&empty=java.lang.Boolean%400000000003&empty=java.lang.Boolean%400000000004&empty=java.lang.Boolean%400000000005", map0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BeanSupport.setData(uRI0, pipedInputStream0, map0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) sqlTimestampConverter0;
      String string0 = BeanSupport.getData((List<String>) null, objectArray0);
      assertEquals("useDefault=java.lang.Boolean%400000000015", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Double double0 = new Double((-3235.6979));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double1 = BeanSupport.setData(double0, (Map<String, Object>) hashMap0);
      assertEquals((-3235.6979), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = BeanSupport.decodeURI("go@YNncA{Lq'Z");
      assertEquals("go@YNncA{Lq'Z", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanSupport beanSupport0 = new BeanSupport();
  }
}
