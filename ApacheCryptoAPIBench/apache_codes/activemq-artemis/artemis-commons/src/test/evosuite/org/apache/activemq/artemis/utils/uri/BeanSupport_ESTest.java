/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:19:54 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.time.ZoneId;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.apache.activemq.artemis.utils.uri.BeanSupport;
import org.apache.commons.beanutils.converters.BooleanConverter;
import org.apache.commons.beanutils.converters.FileConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanSupport_ESTest extends BeanSupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      BooleanConverter booleanConverter0 = new BooleanConverter(boolean0);
      Object object0 = new Object();
      Object object1 = BeanSupport.copyData(object0, (Object) booleanConverter0);
      assertSame(booleanConverter0, object1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = BeanSupport.setData((Object) null, (Map<String, Object>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Properties properties0 = BeanSupport.getProperties((Object) boolean0, (Properties) null);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("gF})c!ok&d[RVUGKOWI");
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties(boolean0, properties0);
      assertEquals(0, properties1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = BeanSupport.encodeURI("host");
      assertEquals("host", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = BeanSupport.decodeURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.setProperties("9L~", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        BeanSupport.setProperties((String) null, properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        BeanSupport.setData(uRI0, hashMap0, set0, (Map<String, String>) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Properties properties0 = new Properties();
      URI uRI0 = MockURI.aFTPURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BeanSupport.setData(uRI0, (Object) properties0, map0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't convert value 'foo.bar' to type class java.lang.Object
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        BeanSupport.setData((URI) null, (Object) null, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BeanSupport.setData(uRI0, (List<AbstractMap.SimpleImmutableEntry>) null, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BeanSupport.setData(uRI0, hashMap0, (Set<String>) linkedHashSet0, map0, (Map<String, Object>) hashMap0);
      try { 
        BeanSupport.setData((Object) map0, (Map<String, Object>) hashMap0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't convert value 'Asia/Shanghai' to type class java.lang.Object
         //
         verifyException("org.apache.commons.beanutils.converters.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.getProperties((Object) "JST", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        BeanSupport.getProperties((Object) null, properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("first");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) locale0;
      try { 
        BeanSupport.getData(list0, objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        BeanSupport.getData(linkedList0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.encodeURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.decodeURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.decodeURI("xr.%Zk&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"Zk\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("  setProperty(");
      AbstractMap.SimpleImmutableEntry<Boolean, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, Object>(boolean0, "  setProperty(");
      try { 
        BeanSupport.copyData(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        BeanSupport.copyData((Object) "(s@0y)x+Fb", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No origin bean specified
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put(properties0, "ib");
      try { 
        BeanSupport.copyData((Object) properties0, (Object) properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Properties cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = BeanSupport.encodeURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("CTT");
      Properties properties0 = new Properties();
      BeanSupport.getProperties((Object) locale_LanguageRange0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[11];
      linkedList0.add("first");
      objectArray0[10] = (Object) linkedList0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      assertEquals("empty=java.lang.Boolean%400000000006", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) hashMap0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      //  // Unstable assertion: assertEquals("ISO3Language=java.lang.String%400000000001&country=java.lang.String%400000000002&displayName=java.lang.String%400000000003&displayVariant=java.lang.String%400000000002&language=java.lang.String%400000000004&displayLanguage=java.lang.String%400000000005&script=java.lang.String%400000000002&displayCountry=java.lang.String%400000000002&ISO3Country=java.lang.String%400000000002&variant=java.lang.String%400000000002&displayScript=java.lang.String%400000000002", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("SST");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, hashMap0, (Set<String>) linkedHashSet0, map0, (Map<String, Object>) hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(28, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("userInfo");
      BeanSupport.setData(uRI0, hashMap0, (Set<String>) linkedHashSet0, map0, (Map<String, Object>) hashMap0);
      assertEquals(29, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("port");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, hashMap0, (Set<String>) linkedHashSet0, map0, (Map<String, Object>) hashMap0);
      assertEquals(29, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("host");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BeanSupport.setData(uRI0, hashMap0, (Set<String>) linkedHashSet0, map0, (Map<String, Object>) hashMap0);
      assertEquals(29, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Properties properties0 = new Properties();
      BeanSupport.getProperties((Object) uRI0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(8, properties0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Properties properties0 = new Properties();
      BeanSupport.getProperties((Object) locale0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(11, properties0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      BeanSupport.getProperties("b", properties0);
      BeanSupport.setProperties("", properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      Locale locale0 = new Locale("t0[9s3og6s|cw4s7qvE");
      Object object0 = BeanSupport.setProperties((Object) locale0, properties0);
      assertSame(object0, locale0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = new Locale("t0[9s3og6s|cw4s7qvE");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Locale locale1 = BeanSupport.setData(locale0, (Map<String, Object>) hashMap0);
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      Class<String> class0 = String.class;
      BeanSupport.registerConverter(fileConverter0, class0);
      assertFalse(fileConverter0.isUseDefault());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = BeanSupport.decodeURI("p-L~r)?bk]X");
      assertEquals("p-L~r)?bk]X", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BeanSupport beanSupport0 = new BeanSupport();
  }
}
