/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:22:30 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.utils.uri.FluentPropertyBeanIntrospectorWithIgnores;
import org.apache.commons.beanutils.IntrospectionContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FluentPropertyBeanIntrospectorWithIgnores_ESTest extends FluentPropertyBeanIntrospectorWithIgnores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = FluentPropertyBeanIntrospectorWithIgnores.isIgnored("Adding ignore on ", "?uP|j7&uy5R#XlU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FluentPropertyBeanIntrospectorWithIgnores.addIgnore("", (String) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FluentPropertyBeanIntrospectorWithIgnores fluentPropertyBeanIntrospectorWithIgnores0 = new FluentPropertyBeanIntrospectorWithIgnores();
      IntrospectionContext introspectionContext0 = mock(IntrospectionContext.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(introspectionContext0).getTargetClass();
      fluentPropertyBeanIntrospectorWithIgnores0.introspect(introspectionContext0);
      assertEquals("set", fluentPropertyBeanIntrospectorWithIgnores0.getWriteMethodPrefix());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = FluentPropertyBeanIntrospectorWithIgnores.isIgnored("settoUnsignedLong", "settoUnsignedLong");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FluentPropertyBeanIntrospectorWithIgnores fluentPropertyBeanIntrospectorWithIgnores0 = new FluentPropertyBeanIntrospectorWithIgnores();
      IntrospectionContext introspectionContext0 = mock(IntrospectionContext.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(introspectionContext0).getTargetClass();
      // Undeclared exception!
      try { 
        fluentPropertyBeanIntrospectorWithIgnores0.introspect(introspectionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }
}
