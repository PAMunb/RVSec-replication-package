/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:19:53 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import org.apache.activemq.artemis.utils.uri.URIFactory;
import org.apache.activemq.artemis.utils.uri.URISchema;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class URIFactory_ESTest extends URIFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = MockURI.URI("value3", "value3", "value3");
      URISchema<Object, String> uRISchema0 = (URISchema<Object, String>) mock(URISchema.class, new ViolatedAssumptionAnswer());
      doReturn("value3").when(uRISchema0).getSchemaName();
      doReturn((Object) null).when(uRISchema0).newObject(any(java.net.URI.class) , anyMap() , anyString());
      uRIFactory0.registerSchema(uRISchema0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object object0 = uRIFactory0.newObject(uRI0, (Map<String, String>) hashMap0, ">UrZp");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = MockURI.URI("value3", "value3", "value3");
      URISchema<Object, String> uRISchema0 = (URISchema<Object, String>) mock(URISchema.class, new ViolatedAssumptionAnswer());
      doReturn("value3").when(uRISchema0).getSchemaName();
      doReturn((Object) null).when(uRISchema0).newObject(any(java.net.URI.class) , anyString());
      uRIFactory0.registerSchema(uRISchema0);
      Object object0 = uRIFactory0.newObject(uRI0, "value3");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URIFactory<Object, Object> uRIFactory0 = new URIFactory<Object, Object>();
      URI uRI0 = MockURI.create("");
      uRIFactory0.setDefaultURI(uRI0);
      URI uRI1 = uRIFactory0.getDefaultURI();
      assertNull(uRI1.getRawUserInfo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URIFactory<String, String> uRIFactory1 = new URIFactory<String, String>();
      URI uRI0 = uRIFactory1.expandURI("somT:guy");
      uRIFactory0.setDefaultURI(uRI0);
      URI uRI1 = uRIFactory0.getDefaultURI();
      assertSame(uRI1, uRI0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = uRIFactory0.expandURI("(fruit://some:guy@fair-market:3030?color=green&fluentName=something");
      assertEquals(3030, uRI0.getPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = MockURI.URI("value3", "value3", "value3");
      URISchema<Object, String> uRISchema0 = (URISchema<Object, String>) mock(URISchema.class, new ViolatedAssumptionAnswer());
      doReturn("value3").when(uRISchema0).getSchemaName();
      doReturn((URI) null).when(uRISchema0).newURI(any());
      uRIFactory0.registerSchema(uRISchema0);
      URI uRI1 = uRIFactory0.createSchema("value3", uRI0);
      assertNull(uRI1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = MockURI.create("(o)_+Xa@r@Ja");
      URISchema<Object, String> uRISchema0 = (URISchema<Object, String>) mock(URISchema.class, new ViolatedAssumptionAnswer());
      doReturn("apples&bananas with &host=3344").when(uRISchema0).getSchemaName();
      doReturn(uRI0).when(uRISchema0).newURI(any());
      uRIFactory0.registerSchema(uRISchema0);
      URI uRI1 = uRIFactory0.createSchema("apples&bananas with &host=3344", "apples&bananas with &host=3344");
      assertFalse(uRI1.isOpaque());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URIFactory<String, Object> uRIFactory0 = new URIFactory<String, Object>();
      // Undeclared exception!
      try { 
        uRIFactory0.removeSchema((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URIFactory<String, Integer> uRIFactory0 = new URIFactory<String, Integer>();
      try { 
        uRIFactory0.populateObject("(=,", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URIFactory<Integer, Object> uRIFactory0 = new URIFactory<Integer, Object>();
      try { 
        uRIFactory0.newObject("V`{,", (Object) "V`{,");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 1: V`{,
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URIFactory<String, String> uRIFactory0 = new URIFactory<String, String>();
      try { 
        uRIFactory0.expandURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URIFactory<String, Integer> uRIFactory0 = new URIFactory<String, Integer>();
      try { 
        uRIFactory0.expandURI("(cX/cOjk)4<YM#6Nd");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 8: cX/cOjk4<YM#6Nd
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URIFactory<String, String> uRIFactory0 = new URIFactory<String, String>();
      try { 
        uRIFactory0.expandURI("(,DPx,<&=f;p=");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in fragment at index 5: #DPx,<&=f&p=
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URIFactory<String, Integer> uRIFactory0 = new URIFactory<String, Integer>();
      try { 
        uRIFactory0.expandURI("(c?/cOjk)4<YMI6Nd");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in query at index 8: c?/cOjk&<YMI6Nd
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URIFactory<Integer, Integer> uRIFactory0 = new URIFactory<Integer, Integer>();
      try { 
        uRIFactory0.expandURI("(,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URIFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      try { 
        uRIFactory0.createSchema("N[>A^DMX}!|vWJP>=]_", "value3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Schema N[>A^DMX}!|vWJP>=]_ not found
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URIFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URIFactory<String, Object> uRIFactory0 = new URIFactory<String, Object>();
      try { 
        uRIFactory0.populateObject(uRI0, "OC\"? DM'922c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Schema ftp not found
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URIFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = MockURI.URI("value3", "value3", "value3");
      URISchema<Object, String> uRISchema0 = (URISchema<Object, String>) mock(URISchema.class, new ViolatedAssumptionAnswer());
      doReturn("value3").when(uRISchema0).getSchemaName();
      uRIFactory0.registerSchema(uRISchema0);
      Integer integer0 = new Integer((-42305054));
      uRIFactory0.populateObject(uRI0, (Object) integer0);
      assertNull(uRI0.getRawUserInfo());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URI uRI0 = MockURI.URI("key2", "key2", "apples&bananas with &host=3344");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        uRIFactory0.newObject(uRI0, (Map<String, String>) hashMap0, "apples&bananas with &host=3344");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Schema key2 not found
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URIFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URIFactory<Integer, Object> uRIFactory0 = new URIFactory<Integer, Object>();
      try { 
        uRIFactory0.newObject(uRI0, (Object) "faUY`~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Schema http not found
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URIFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URIFactory<Object, Integer> uRIFactory0 = new URIFactory<Object, Integer>();
      uRIFactory0.removeSchema("N[>A^DMX}!|vWJP>=]_");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URIFactory<String, Integer> uRIFactory0 = new URIFactory<String, Integer>();
      Integer integer0 = new Integer((-1463));
      try { 
        uRIFactory0.newObject("T", integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URIFactory<Object, String> uRIFactory0 = new URIFactory<Object, String>();
      URISchema<Object, String> uRISchema0 = (URISchema<Object, String>) mock(URISchema.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRISchema0).getSchemaName();
      // Undeclared exception!
      try { 
        uRIFactory0.registerSchema(uRISchema0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URIFactory<Object, Object> uRIFactory0 = new URIFactory<Object, Object>();
      URI uRI0 = uRIFactory0.expandURI("");
      assertNull(uRI0.getHost());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URIFactory<Object, Object> uRIFactory0 = new URIFactory<Object, Object>();
      URI uRI0 = uRIFactory0.getDefaultURI();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URIFactory<Integer, Integer> uRIFactory0 = new URIFactory<Integer, Integer>();
      Integer integer0 = new Integer((-63));
      try { 
        uRIFactory0.populateObject("eHrl*a+fN]x74?OS2U", integer0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 9: eHrl*a+fN]x74?OS2U
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
}
