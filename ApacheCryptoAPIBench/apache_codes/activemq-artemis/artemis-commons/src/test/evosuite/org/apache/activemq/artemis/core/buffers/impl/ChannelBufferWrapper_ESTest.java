/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:20:54 GMT 2022
 */

package org.apache.activemq.artemis.core.buffers.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.buffer.UnpooledHeapByteBuf;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.MappedByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.ShortBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
import org.apache.activemq.artemis.api.core.SimpleString;
import org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper;
import org.apache.activemq.artemis.utils.AbstractByteBufPool;
import org.apache.activemq.artemis.utils.AbstractPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChannelBufferWrapper_ESTest extends ChannelBufferWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      int int0 = pooledByteBufAllocator0.calculateNewCapacity(0, 0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getInt(2507);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      assertNotNull(compositeByteBuf0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false, true);
      assertNotNull(channelBufferWrapper0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      int int0 = channelBufferWrapper0.readerIndex();
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, int0);
      
      channelBufferWrapper0.writeBoolean(false);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2147483646, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      boolean boolean0 = channelBufferWrapper0.readBoolean();
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2147483646, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertFalse(boolean0);
      
      channelBufferWrapper0.setFloat(0, 224);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2147483646, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-1);
      byte byte0 = (byte)41;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 536870912;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeFloat(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      
      ByteBuf byteBuf0 = emptyByteBuf0.touch((Object) unpooledByteBufAllocator0);
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      
      String string0 = unpooledByteBufAllocator0.toString();
      assertNotNull(string0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("UnpooledByteBufAllocator(directByDefault: true)", string0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.slice();
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      
      int int0 = 0;
      activeMQBuffer0.release();
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      
      byte[] byteArray0 = new byte[0];
      int int1 = 0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1);
      
      channelBufferWrapper0.setBytes(0, activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      
      channelBufferWrapper0.getBytes(0, byteArray0, (-1830), 0);
      assertEquals(0, byteArray0.length);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.toByteBuffer((-1830), (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -1830
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      assertNotNull(compositeByteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      int int0 = channelBufferWrapper0.readerIndex();
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, int0);
      
      channelBufferWrapper0.writeBoolean(false);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483646, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      boolean boolean0 = channelBufferWrapper0.readBoolean();
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483646, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertFalse(boolean0);
      
      long long0 = channelBufferWrapper0.getLong(0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483646, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setFloat(2030, 2030);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.ReadOnlyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(512, 512);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      channelBufferWrapper0.writeLong(512);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      
      channelBufferWrapper0.writeBytes(byteBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(847);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      float float0 = channelBufferWrapper0.getFloat(0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals((-1.1350479E-19F), float0, 0.01F);
      
      double double0 = channelBufferWrapper0.getDouble(1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(9.21057529547047E-280, double0, 0.01);
      
      SimpleString simpleString0 = SimpleString.toSimpleString("B4<8rzCCeXf&6u_");
      assertNotNull(simpleString0);
      assertEquals(34, simpleString0.sizeof());
      assertFalse(simpleString0.isEmpty());
      assertEquals(15, simpleString0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      boolean boolean0 = false;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      channelBufferWrapper0.discardReadBytes();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      byte[] byteArray0 = new byte[0];
      channelBufferWrapper0.readBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      // Undeclared exception!
      try { 
        pooledByteBufAllocator0.buffer((-906));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -906 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(Integer.MAX_VALUE);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(0, int0);
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf2.isDirect());
      assertFalse(byteBuf2.hasArray());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertEquals(1, byteBuf2.nioBufferCount());
      
      ByteBuf byteBuf3 = byteBuf1.setZero(1, 1);
      assertNotNull(byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertSame(byteBuf3, byteBuf1);
      assertSame(byteBuf3, byteBuf0);
      assertSame(byteBuf3, byteBuf2);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf3.maxCapacity());
      assertTrue(byteBuf3.isDirect());
      assertEquals(1291, byteBuf3.capacity());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      assertEquals(1, byteBuf3.nioBufferCount());
      assertEquals(1, byteBuf3.refCnt());
      assertFalse(byteBuf3.hasArray());
      assertFalse(byteBuf3.hasMemoryAddress());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf2, true, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf2.isDirect());
      assertFalse(byteBuf2.hasArray());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertEquals(1, byteBuf2.nioBufferCount());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setByte((-1141), (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1141
         //
         verifyException("java.nio.DirectByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-26);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, false);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeLong(8L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-906);
      int int1 = 788;
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      channelBufferWrapper0.discardReadBytes();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      channelBufferWrapper0.resetWriterIndex();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      channelBufferWrapper0.setShort(0, (short)252);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      channelBufferWrapper0.resetReaderIndex();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes((ActiveMQBuffer) null, (int) (byte) (-12));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1, 1);
      assertNotNull(unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.capacity(0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.markReaderIndex();
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(0, byteBuf1.capacity());
      assertEquals(1, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.maxWritableBytes());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      
      channelBufferWrapper0.getBytes(0, byteBuffer0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setDouble((-603), (byte)101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readUTF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 4095;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(4095, byteArray0, 4095, 144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(1, (ActiveMQBuffer) channelBufferWrapper1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readNullableSimpleString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedInt(536870904);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeString("U_-@7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.UTF8Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = 0;
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      channelBufferWrapper1.setDouble(523, (-1.0));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      channelBufferWrapper0.getBytes(1025, activeMQBuffer0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(channelBufferWrapper1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer1, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(activeMQBuffer1, (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimumReadableBytes: -18 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setShort(1, (short)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(512, 512);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      
      channelBufferWrapper0.writeLong(512);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = channelBufferWrapper0.readShort();
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals((short)0, short0);
      
      int int1 = channelBufferWrapper0.readUnsignedShort();
      assertFalse(int1 == int0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C@C/lw?$5yg%(A");
      assertFalse(boolean0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readerIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(1319);
      assertNotNull(compositeByteBuf0);
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1319, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      int int0 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        activeMQBuffer0.writeBytes(byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(1) exceeds maxCapacity(0): UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1, 1);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer(1);
      assertNotNull(compositeByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.capacity(0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      int int0 = (-1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(4) exceeds maxCapacity(1): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/1)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-26);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, false);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes((int) (byte) (-11), (ActiveMQBuffer) channelBufferWrapper1, (-370), (int) (byte) (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -11
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertFalse(byteBuf2.hasArray());
      assertFalse(byteBuf2.hasMemoryAddress());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      int int1 = 0;
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.slice(0, 0);
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ByteBuf byteBuf3 = byteBuf1.setZero(1, 1);
      assertNotNull(byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf3, byteBuf1);
      assertSame(byteBuf3, byteBuf2);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertSame(byteBuf3, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf3.refCnt());
      assertEquals(1, byteBuf3.nioBufferCount());
      assertFalse(byteBuf3.hasMemoryAddress());
      assertFalse(byteBuf3.hasArray());
      assertEquals(1291, byteBuf3.maxCapacity());
      assertTrue(byteBuf3.isDirect());
      assertEquals(1291, byteBuf3.capacity());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      
      int int2 = 4095;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2286);
      assertNotNull(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=2286 cap=2286]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(2286, byteBuffer0.remaining());
      assertEquals(2286, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2286, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(1, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(512, 512);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      channelBufferWrapper0.writeLong(16L);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      
      short short0 = channelBufferWrapper0.readShort();
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals((short)0, short0);
      
      long long0 = channelBufferWrapper0.readUnsignedInt();
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = emptyByteBuf0.readRetainedSlice(0);
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.copy();
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        channelBufferWrapper0.capacity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      String string0 = unpooledByteBufAllocator0.toString();
      assertNotNull(string0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("UnpooledByteBufAllocator(directByDefault: true)", string0);
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(698);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ByteBuf byteBuf1 = unpooledByteBufAllocator0.directBuffer();
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertNotSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      SimpleString simpleString0 = SimpleString.toSimpleString("B4<8rzCCeXf&6u_");
      assertNotNull(simpleString0);
      assertEquals(15, simpleString0.length());
      assertEquals(34, simpleString0.sizeof());
      assertFalse(simpleString0.isEmpty());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, true);
      assertNotNull(channelBufferWrapper0);
      assertTrue(byteBuf0.equals((Object)byteBuf1));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      channelBufferWrapper0.writeInt(0);
      assertFalse(byteBuf0.equals((Object)byteBuf1));
      assertNotSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      short short0 = channelBufferWrapper0.getUnsignedByte(1);
      assertFalse(byteBuf0.equals((Object)byteBuf1));
      assertNotSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals((short)0, short0);
      
      // Undeclared exception!
      try { 
        ChannelBufferWrapper.unwrap((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 4095, 4095);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(4095, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(4095, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(4095, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(1530, 40);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(4095, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(4095, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(4095, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxWritableBytes());
      assertEquals(4095, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, true);
      assertNotNull(channelBufferWrapper0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(4095, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(4095, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(4095, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxWritableBytes());
      assertEquals(4095, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      channelBufferWrapper0.writeShort((short) (-3513));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(4093, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(4095, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(4095, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(4093, byteBuf0.maxWritableBytes());
      assertEquals(4095, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 0;
      ByteBuf byteBuf0 = emptyByteBuf0.ensureWritable(0);
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.arrayOffset());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.hasArray());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isWritable());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.arrayOffset());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.hasArray());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isWritable());
      
      String string0 = "q9";
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeString("q9");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertFalse(byteBuf2.hasArray());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      channelBufferWrapper1.setBytes(0, (ActiveMQBuffer) channelBufferWrapper0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      channelBufferWrapper0.getBytes(1025, activeMQBuffer0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper1.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer1, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      channelBufferWrapper0.readBytes(activeMQBuffer1, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      ActiveMQBuffer activeMQBuffer2 = channelBufferWrapper0.slice(0, 0);
      assertNotNull(activeMQBuffer2);
      assertFalse(activeMQBuffer2.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer2.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer2.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer2.equals((Object)channelBufferWrapper0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertNotSame(activeMQBuffer2, channelBufferWrapper1);
      assertNotSame(activeMQBuffer2, activeMQBuffer0);
      assertNotSame(activeMQBuffer2, activeMQBuffer1);
      assertNotSame(activeMQBuffer2, channelBufferWrapper0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      ByteBuf byteBuf3 = byteBuf1.setZero(1, 1);
      assertNotNull(byteBuf3);
      assertSame(byteBuf3, byteBuf0);
      assertSame(byteBuf3, byteBuf2);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertSame(byteBuf3, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, byteBuf3.capacity());
      assertEquals(1291, byteBuf3.maxCapacity());
      assertFalse(byteBuf3.hasMemoryAddress());
      assertEquals(1, byteBuf3.nioBufferCount());
      assertEquals(1, byteBuf3.refCnt());
      assertFalse(byteBuf3.hasArray());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      assertTrue(byteBuf3.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      
      int int1 = activeMQBuffer1.skipBytes(0);
      assertTrue(int1 == int0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer2));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer2));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, activeMQBuffer2);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        activeMQBuffer1.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -347
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.release();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes((ActiveMQBuffer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 25, 36);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(25, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(36, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(36, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.markWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(25, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(36, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(36, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(36, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(36, byteBuf0.maxWritableBytes());
      assertEquals(25, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(25, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(36, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(36, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(36, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(36, byteBuf0.maxWritableBytes());
      assertEquals(25, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      
      long long0 = channelBufferWrapper0.getUnsignedInt(1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(25, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(36, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(36, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(36, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(36, byteBuf0.maxWritableBytes());
      assertEquals(25, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertFalse(byteBuf2.hasArray());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1291, byteBuf2.maxCapacity());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      channelBufferWrapper1.setDouble(523, (-1.0));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      channelBufferWrapper0.getBytes(1025, activeMQBuffer0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(channelBufferWrapper1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer1, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      channelBufferWrapper0.readBytes(activeMQBuffer1, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ActiveMQBuffer activeMQBuffer2 = channelBufferWrapper0.slice(0, 0);
      assertNotNull(activeMQBuffer2);
      assertFalse(activeMQBuffer2.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer2.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer2.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer2.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertNotSame(activeMQBuffer2, channelBufferWrapper0);
      assertNotSame(activeMQBuffer2, activeMQBuffer0);
      assertNotSame(activeMQBuffer2, channelBufferWrapper1);
      assertNotSame(activeMQBuffer2, activeMQBuffer1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer2);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ByteBuf byteBuf3 = byteBuf1.setZero(1, 1);
      assertNotNull(byteBuf3);
      assertSame(byteBuf3, byteBuf2);
      assertSame(byteBuf3, byteBuf1);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertSame(byteBuf3, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(byteBuf3.isDirect());
      assertEquals(1, byteBuf3.nioBufferCount());
      assertFalse(byteBuf3.hasArray());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      assertFalse(byteBuf3.hasMemoryAddress());
      assertEquals(1, byteBuf3.refCnt());
      assertEquals(1291, byteBuf3.capacity());
      assertEquals(1291, byteBuf3.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      int int1 = activeMQBuffer1.skipBytes(0);
      assertTrue(int1 == int0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer2));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer2));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer2);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer2);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        activeMQBuffer1.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -347
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ByteBuf[] byteBufArray0 = new ByteBuf[4];
      UnpooledByteBufAllocator unpooledByteBufAllocator1 = new UnpooledByteBufAllocator(false, true);
      assertNotNull(unpooledByteBufAllocator1);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator1, 2861, 2861);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(2861, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(2861, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(2861, unpooledDirectByteBuf0.maxCapacity());
      
      byte[] byteArray0 = new byte[8];
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator1.compositeBuffer();
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertNotSame(unpooledByteBufAllocator1, unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)0;
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.writeInt((byte)0);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertNotSame(unpooledByteBufAllocator1, unpooledByteBufAllocator0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(2861, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(2857, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(2861, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(2861, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(2857, byteBuf0.maxWritableBytes());
      assertEquals(2861, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(2861, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(2857, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(2861, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(2861, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(2857, byteBuf0.maxWritableBytes());
      assertEquals(2861, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      int int0 = channelBufferWrapper0.getInt(1);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertNotSame(unpooledByteBufAllocator1, unpooledByteBufAllocator0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(2861, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(2857, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(2861, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(2861, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(2857, byteBuf0.maxWritableBytes());
      assertEquals(2861, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(2861, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(2857, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(2861, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(2861, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(2857, byteBuf0.maxWritableBytes());
      assertEquals(2861, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper1.setDouble((byte) (-12), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      ByteBuf byteBuf2 = unpooledByteBufAllocator0.buffer(0, 0);
      assertNotNull(byteBuf2);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(byteBuf2.hasMemoryAddress());
      assertEquals(0, byteBuf2.readableBytes());
      assertTrue(byteBuf2.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf2.toString());
      assertFalse(byteBuf2.release());
      assertEquals(0, byteBuf2.readerIndex());
      assertEquals(0, byteBuf2.writableBytes());
      assertFalse(byteBuf2.isReadable());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(0, byteBuf2.capacity());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertEquals(0, byteBuf2.writerIndex());
      assertFalse(byteBuf2.isReadOnly());
      assertEquals(0, byteBuf2.maxCapacity());
      assertEquals(0, byteBuf2.maxWritableBytes());
      assertEquals(0, byteBuf2.arrayOffset());
      assertTrue(byteBuf2.hasArray());
      assertFalse(byteBuf2.isWritable());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ByteBuf byteBuf3 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(byteBuf3, byteBuf1);
      assertSame(byteBuf3, byteBuf0);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(byteBuf3.isDirect());
      assertFalse(byteBuf3.hasArray());
      assertEquals(1, byteBuf3.nioBufferCount());
      assertEquals(1, byteBuf3.refCnt());
      assertEquals(1291, byteBuf3.capacity());
      assertFalse(byteBuf3.hasMemoryAddress());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      assertEquals(1291, byteBuf3.maxCapacity());
      
      boolean boolean1 = channelBufferWrapper0.writable();
      assertFalse(boolean1 == boolean0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertTrue(boolean1);
      
      int int1 = 0;
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(1025, (ActiveMQBuffer) channelBufferWrapper1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 1025, length: 1291 (expected: range(0, 1291))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1297, 1297);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1297, byteBuf0.maxWritableBytes());
      assertEquals(1297, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1297, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1297, byteBuf0.maxWritableBytes());
      assertEquals(1297, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1297, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1297, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1297, byteBuf1.capacity());
      assertEquals(1297, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasArray());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1297, byteBuf0.maxWritableBytes());
      assertEquals(1297, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1297, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, true, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1297, byteBuf0.maxWritableBytes());
      assertEquals(1297, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1297, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1297, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1297, byteBuf1.capacity());
      assertEquals(1297, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasArray());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1297, byteBuf2.maxWritableBytes());
      assertFalse(byteBuf2.hasArray());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1297, byteBuf2.maxCapacity());
      assertEquals(1, byteBuf2.refCnt());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1297, byteBuf2.capacity());
      
      boolean boolean1 = channelBufferWrapper0.writable();
      assertFalse(boolean1 == boolean0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1297, byteBuf0.maxWritableBytes());
      assertEquals(1297, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1297, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1297, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1297, byteBuf1.capacity());
      assertEquals(1297, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasArray());
      assertTrue(boolean1);
      
      int int1 = 0;
      int int2 = 1025;
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1297, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1297, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1297, unpooledDirectByteBuf0.maxCapacity());
      
      // Undeclared exception!
      try { 
        activeMQBuffer0.readBytes((ActiveMQBuffer) channelBufferWrapper0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1297) exceeds writerIndex(0): UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getLong(65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setChar(0, 'u');
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.ReadOnlyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      channelBufferWrapper0.discardReadBytes();
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      channelBufferWrapper0.resetWriterIndex();
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      channelBufferWrapper0.setShort(0, (short)252);
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      channelBufferWrapper0.resetReaderIndex();
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer();
      assertNotNull(compositeByteBuf0);
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[1] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      SimpleString simpleString0 = new SimpleString('4');
      assertNotNull(simpleString0);
      assertEquals(1, simpleString0.length());
      assertEquals(6, simpleString0.sizeof());
      assertFalse(simpleString0.isEmpty());
      
      channelBufferWrapper0.writeSimpleString(simpleString0);
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, simpleString0.length());
      assertEquals(6, simpleString0.sizeof());
      assertFalse(simpleString0.isEmpty());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFully(byteArray0, 1933, (-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimumReadableBytes: -236 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertFalse(byteBuf2.hasArray());
      
      boolean boolean1 = channelBufferWrapper0.writable();
      assertFalse(boolean1 == boolean0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(boolean1);
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      
      channelBufferWrapper0.getBytes(1025, activeMQBuffer0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(channelBufferWrapper1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer1, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      channelBufferWrapper0.readBytes(activeMQBuffer1, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper1);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ActiveMQBuffer activeMQBuffer2 = channelBufferWrapper0.slice(0, 0);
      assertNotNull(activeMQBuffer2);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(channelBufferWrapper0.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer2.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer2.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer2.equals((Object)channelBufferWrapper1));
      assertFalse(activeMQBuffer2.equals((Object)activeMQBuffer1));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer2);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, channelBufferWrapper1);
      assertNotSame(activeMQBuffer2, channelBufferWrapper0);
      assertNotSame(activeMQBuffer2, activeMQBuffer0);
      assertNotSame(activeMQBuffer2, channelBufferWrapper1);
      assertNotSame(activeMQBuffer2, activeMQBuffer1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      ByteBuf byteBuf3 = byteBuf1.setZero(1, 1);
      assertNotNull(byteBuf3);
      assertSame(byteBuf3, byteBuf0);
      assertSame(byteBuf3, byteBuf1);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertSame(byteBuf3, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertEquals(1, byteBuf3.nioBufferCount());
      assertEquals(1, byteBuf3.refCnt());
      assertTrue(byteBuf3.isDirect());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      assertEquals(1291, byteBuf3.maxCapacity());
      assertFalse(byteBuf3.hasMemoryAddress());
      assertEquals(1291, byteBuf3.capacity());
      assertFalse(byteBuf3.hasArray());
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        activeMQBuffer1.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -347
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)60;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.duplicate();
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      // Undeclared exception!
      try { 
        activeMQBuffer0.readBytes(byteArray0, (int) (byte)101, (int) (byte)101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(Integer.MAX_VALUE);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      assertFalse(boolean0);
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertSame(byteBuf2, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertEquals(1, byteBuf2.refCnt());
      assertTrue(byteBuf2.isDirect());
      assertFalse(byteBuf2.hasArray());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      
      boolean boolean1 = channelBufferWrapper0.writable();
      assertFalse(boolean1 == boolean0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertTrue(boolean1);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.slice(0, 0);
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ByteBuf byteBuf3 = byteBuf1.setZero(1, 1);
      assertNotNull(byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf3, byteBuf2);
      assertSame(byteBuf3, unpooledDirectByteBuf0);
      assertSame(byteBuf3, byteBuf1);
      assertSame(byteBuf3, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf3.nioBufferCount());
      assertTrue(byteBuf3.isDirect());
      assertFalse(byteBuf3.hasArray());
      assertEquals(1291, byteBuf3.maxCapacity());
      assertFalse(byteBuf3.hasMemoryAddress());
      assertEquals(1291, byteBuf3.capacity());
      assertEquals(1291, byteBuf3.maxWritableBytes());
      assertEquals(1, byteBuf3.refCnt());
      
      int int1 = 1;
      int int2 = activeMQBuffer1.capacity();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(0, int2);
      
      activeMQBuffer0.writeBytes(activeMQBuffer1, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)activeMQBuffer1));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf3);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf3);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf3);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, activeMQBuffer1);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      // Undeclared exception!
      try { 
        activeMQBuffer0.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -347
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(0);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(0, 0);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.readerIndex());
      assertTrue(byteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.capacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      channelBufferWrapper0.writeLong(16L);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      short short0 = channelBufferWrapper0.readShort();
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals((short)0, short0);
      
      channelBufferWrapper0.setIndex(0, 0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      assertNotNull(simpleString_ByteBufSimpleStringPool0);
      assertEquals(32, AbstractByteBufPool.DEFAULT_POOL_CAPACITY);
      
      // Undeclared exception!
      try { 
        SimpleString.readNullableSimpleString(byteBuf0, simpleString_ByteBufSimpleStringPool0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1, 1);
      assertNotNull(unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.getBytes(1, (OutputStream) byteArrayOutputStream0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream1);
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      
      byteArrayOutputStream1.flush();
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      
      byteArrayOutputStream0.writeTo(byteArrayOutputStream1);
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertFalse(byteArrayOutputStream1.equals((Object)byteArrayOutputStream0));
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertNotSame(byteArrayOutputStream1, byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream1.toString());
      assertEquals(0, byteArrayOutputStream1.size());
      
      byte[] byteArray0 = new byte[0];
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.getBytes(0, byteArray0);
      assertNotNull(byteBuf1);
      assertEquals(0, byteArray0.length);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      
      int int0 = channelBufferWrapper0.capacity();
      assertFalse(byteArrayOutputStream0.equals((Object)byteArrayOutputStream1));
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertNotSame(byteArrayOutputStream0, byteArrayOutputStream1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(byteArray0, 0, (-1028477387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimumReadableBytes: -1028477387 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      int int0 = byteBuf0.bytesBefore(0, 1, (byte)0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals((-1), int0);
      
      ByteBuf byteBuf1 = pooledByteBufAllocator0.buffer(0);
      assertNotNull(byteBuf1);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      channelBufferWrapper0.readFully(byteArray0);
      assertEquals(0, byteArray0.length);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      int int1 = 2458;
      ByteBuf byteBuf2 = pooledByteBufAllocator0.heapBuffer();
      assertNotNull(byteBuf2);
      assertTrue(byteBuf2.equals((Object)byteBuf1));
      assertNotSame(byteBuf2, byteBuf1);
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      
      int int2 = (-3735);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setChar(2415, '');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.discardReadBytes();
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(0, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(0, byteBuf1.maxWritableBytes());
      assertEquals(0, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      int int0 = byteBuf0.bytesBefore(0, 1, (byte)0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals((-1), int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      
      int int1 = 2458;
      int int2 = (-3735);
      int int3 = 2415;
      char char0 = '';
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setInt(1713, (-1208));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      boolean boolean0 = false;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writerIndex((-906));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex: -906 (expected: readerIndex(0) <= writerIndex <= capacity(34))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      
      int int1 = 2458;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      assertNotNull(simpleString_StringSimpleStringPool0);
      assertEquals(32, AbstractPool.DEFAULT_POOL_CAPACITY);
      
      SimpleString simpleString0 = SimpleString.toSimpleString("", simpleString_StringSimpleStringPool0);
      assertNotNull(simpleString0);
      assertEquals(32, AbstractPool.DEFAULT_POOL_CAPACITY);
      assertTrue(simpleString0.isEmpty());
      assertEquals(0, simpleString0.length());
      assertEquals(4, simpleString0.sizeof());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeSimpleString(simpleString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(4) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, 3554, 3554);
      assertNotNull(unpooledHeapByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(3554, unpooledHeapByteBuf0.maxCapacity());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(3554, unpooledHeapByteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf0 = unpooledHeapByteBuf0.setIntLE(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledHeapByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledHeapByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(3554, unpooledHeapByteBuf0.maxCapacity());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(3554, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(3554, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(3554, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isDirect());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(3554, unpooledHeapByteBuf0.maxCapacity());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(3554, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(3554, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(3554, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isDirect());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(byteArray0, 4611, (-137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minWritableBytes: -137 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      CompositeByteBuf compositeByteBuf1 = (CompositeByteBuf)compositeByteBuf0.writeShortLE(512);
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2147483645, compositeByteBuf1.maxWritableBytes());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      
      channelBufferWrapper0.writeDouble(512);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2147483637, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      
      channelBufferWrapper0.writeLong(16L);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483629, compositeByteBuf0.maxWritableBytes());
      
      short short0 = channelBufferWrapper0.readShort();
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483629, compositeByteBuf0.maxWritableBytes());
      assertEquals((short)2, short0);
      
      byte byte0 = channelBufferWrapper0.getByte((short)2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483629, compositeByteBuf0.maxWritableBytes());
      assertEquals((byte)64, byte0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.slice(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = emptyByteBuf0.retainedDuplicate();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      
      int int0 = 863;
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.isDirect());
      
      ByteBuf byteBuf1 = unpooledByteBufAllocator0.buffer(863, 1666);
      assertNotNull(byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int1 = 4194304;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readerIndex(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 418;
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 418, 418);
      assertNotNull(unpooledUnsafeDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledUnsafeDirectByteBuf0.hasMemoryAddress());
      assertTrue(unpooledUnsafeDirectByteBuf0.isDirect());
      assertFalse(unpooledUnsafeDirectByteBuf0.hasArray());
      assertEquals(418, unpooledUnsafeDirectByteBuf0.maxWritableBytes());
      assertEquals(418, unpooledUnsafeDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.refCnt());
      assertEquals(418, unpooledUnsafeDirectByteBuf0.capacity());
      
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.unwrap();
      assertNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledUnsafeDirectByteBuf0.hasMemoryAddress());
      assertTrue(unpooledUnsafeDirectByteBuf0.isDirect());
      assertFalse(unpooledUnsafeDirectByteBuf0.hasArray());
      assertEquals(418, unpooledUnsafeDirectByteBuf0.maxWritableBytes());
      assertEquals(418, unpooledUnsafeDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.refCnt());
      assertEquals(418, unpooledUnsafeDirectByteBuf0.capacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = null;
      try {
        channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buf
         //
         verifyException("io.netty.buffer.WrappedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = emptyByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasArray());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasArray());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      int int0 = 0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byte byte0 = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes((int) (byte)114, byteArray0, (int) (byte)31, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readerIndex(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer();
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.clear();
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(0, byteBuf1.maxCapacity());
      assertEquals(0, byteBuf1.capacity());
      assertFalse(byteBuf1.hasArray());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(0, byteBuf1.maxCapacity());
      assertEquals(0, byteBuf1.capacity());
      assertFalse(byteBuf1.hasArray());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeChar('V');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(2) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = true;
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, 0);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.discardReadBytes();
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readInt();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = null;
      try {
        channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buf
         //
         verifyException("io.netty.buffer.WrappedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 459;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 459, 459);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.touch((Object) null);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(459, byteBuf0.maxCapacity());
      assertEquals(459, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      boolean boolean0 = unpooledDirectByteBuf0.isReadable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(boolean0);
      
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.skipBytes(0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(459, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(459, byteBuf1.maxCapacity());
      assertEquals(459, byteBuf1.capacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(459, byteBuf0.maxCapacity());
      assertEquals(459, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      channelBufferWrapper0.writeNullableString("&yr`7o?[");
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(438, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(459, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(438, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      long long0 = channelBufferWrapper0.readLong();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(438, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(459, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(438, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(72057594172155392L, long0);
      
      int int1 = (-1383);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getDouble((-1383));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = false;
      ChannelBufferWrapper channelBufferWrapper0 = null;
      try {
        channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buf
         //
         verifyException("io.netty.buffer.WrappedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(2663);
      assertNotNull(byteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer(2663);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = (-1595);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getShort((-1595));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      
      ByteBuf byteBuf0 = emptyByteBuf0.retainedSlice();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, byteBuf0.arrayOffset());
      assertTrue(byteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writableBytes());
      assertFalse(byteBuf0.release());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.readerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.writerIndex());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, byteBuf0.arrayOffset());
      assertTrue(byteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writableBytes());
      assertFalse(byteBuf0.release());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.readerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.writerIndex());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getShort((-1126));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = (-1194);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writableBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = true;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeLong(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setLong(0, (-1225L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertTrue(emptyByteBuf0.isDirect());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      
      ByteBuf byteBuf0 = emptyByteBuf0.touch();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertTrue(emptyByteBuf0.isDirect());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertTrue(byteBuf0.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertTrue(emptyByteBuf0.isDirect());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.hasArray());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertTrue(byteBuf0.hasMemoryAddress());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.toByteBuffer(0, 1752);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 512;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(512);
      assertNotNull(byteBuffer0);
      assertEquals(512, byteBuffer0.remaining());
      assertEquals(512, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(512, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=512 cap=512]", byteBuffer0.toString());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setChar(512, '?');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, 3554, 3554);
      assertNotNull(unpooledHeapByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(3554, unpooledHeapByteBuf0.maxCapacity());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(3554, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = unpooledHeapByteBuf0.setIntLE(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledHeapByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledHeapByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(3554, unpooledHeapByteBuf0.maxCapacity());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(3554, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(3554, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(3554, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.arrayOffset());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(3554, unpooledHeapByteBuf0.maxCapacity());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(3554, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(3554, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(3554, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.arrayOffset());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readUnsignedByte();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1) exceeds writerIndex(0): UnpooledHeapByteBuf(ridx: 0, widx: 0, cap: 3554/3554)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.readerIndex());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.readerIndex());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(522133279, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 1728;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(1728);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1728, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      String string0 = unpooledByteBufAllocator0.toString();
      assertNotNull(string0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("UnpooledByteBufAllocator(directByDefault: false)", string0);
      
      CompositeByteBuf compositeByteBuf1 = unpooledByteBufAllocator0.compositeDirectBuffer(1728);
      assertNotNull(compositeByteBuf1);
      assertTrue(compositeByteBuf1.equals((Object)compositeByteBuf0));
      assertNotSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1728, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      
      int int1 = 1309;
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1309, 1309);
      assertNotNull(unpooledUnsafeDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1309, unpooledUnsafeDirectByteBuf0.capacity());
      assertEquals(1309, unpooledUnsafeDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledUnsafeDirectByteBuf0.hasArray());
      assertEquals(1309, unpooledUnsafeDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.refCnt());
      assertTrue(unpooledUnsafeDirectByteBuf0.isDirect());
      assertTrue(unpooledUnsafeDirectByteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.unwrap();
      assertNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1309, unpooledUnsafeDirectByteBuf0.capacity());
      assertEquals(1309, unpooledUnsafeDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledUnsafeDirectByteBuf0.hasArray());
      assertEquals(1309, unpooledUnsafeDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.refCnt());
      assertTrue(unpooledUnsafeDirectByteBuf0.isDirect());
      assertTrue(unpooledUnsafeDirectByteBuf0.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeInt(1309);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(unpooledByteBufAllocator0, 12, 12);
      assertNotNull(unpooledHeapByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(12, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(12, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledHeapByteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertEquals(12, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(12, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)35;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(12, byteArray0, 0, (int) (byte)100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 12, length: 100 (expected: range(0, 12))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, 1158, 1158);
      assertNotNull(unpooledHeapByteBuf0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertEquals(1158, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(1158, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledHeapByteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertEquals(1158, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(1158, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer();
      assertNotNull(compositeByteBuf0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      channelBufferWrapper0.writeBytes(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)0, (byte)0, (byte)44, (byte)0}, byteArray0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertEquals(1153, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(1158, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      
      int int0 = pooledByteBufAllocator0.calculateNewCapacity((byte)44, 1451);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, int0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSlice(1158);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1158) exceeds writerIndex(5): UnpooledHeapByteBuf(ridx: 0, widx: 5, cap: 1158/1158)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      int int0 = 1;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(1);
      assertNotNull(byteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      String string0 = pooledByteBufAllocator0.toString();
      assertNotNull(string0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals("PooledByteBufAllocator(directByDefault: false)", string0);
      
      boolean boolean0 = true;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, true);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 512;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(512);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(512, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=512 cap=512]", byteBuffer0.toString());
      assertEquals(512, byteBuffer0.limit());
      assertEquals(512, byteBuffer0.capacity());
      
      char char0 = '?';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-107);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(512, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 512;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(512);
      assertNotNull(byteBuffer0);
      assertEquals(512, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=512 cap=512]", byteBuffer0.toString());
      assertEquals(512, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(512, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      
      ShortBuffer shortBuffer0 = byteBuffer0.asShortBuffer();
      assertNotNull(shortBuffer0);
      assertEquals(512, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=512 cap=512]", byteBuffer0.toString());
      assertEquals(512, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(512, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(256, shortBuffer0.remaining());
      assertEquals(256, shortBuffer0.capacity());
      assertFalse(shortBuffer0.isReadOnly());
      assertEquals(256, shortBuffer0.limit());
      assertEquals(0, shortBuffer0.position());
      assertEquals("java.nio.DirectShortBufferS[pos=0 lim=256 cap=256]", shortBuffer0.toString());
      assertTrue(shortBuffer0.isDirect());
      assertFalse(shortBuffer0.hasArray());
      assertTrue(shortBuffer0.hasRemaining());
      
      char char0 = '?';
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.release());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      assertNotNull(compositeByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true);
      assertNotNull(channelBufferWrapper0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.release());
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.release());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.copy();
      assertNotNull(activeMQBuffer0);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper1));
      assertNotSame(channelBufferWrapper1, activeMQBuffer0);
      assertNotSame(channelBufferWrapper1, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper1);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.release());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes((-5860), activeMQBuffer0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = null;
      int int1 = 0;
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      
      channelBufferWrapper0.release();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, false);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper1.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.retain();
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.clear();
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(512, compositeByteBuf2.maxNumComponents());
      assertEquals(2, compositeByteBuf2.refCnt());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(512, 512);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      CompositeByteBuf compositeByteBuf3 = (CompositeByteBuf)compositeByteBuf1.writeShortLE(1280);
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(2147483645, compositeByteBuf1.maxWritableBytes());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(512, compositeByteBuf3.maxNumComponents());
      assertEquals(2, compositeByteBuf3.refCnt());
      assertEquals(2147483645, compositeByteBuf3.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      
      short short0 = channelBufferWrapper0.getShort(18);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals((short)16568, short0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(1391);
      assertNotNull(compositeByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1391, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      CompositeByteBuf compositeByteBuf1 = pooledByteBufAllocator0.compositeHeapBuffer(536870912);
      assertNotNull(compositeByteBuf1);
      assertTrue(compositeByteBuf1.equals((Object)compositeByteBuf0));
      assertNotSame(compositeByteBuf1, compositeByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(536870912, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      
      int int0 = 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byte byte0 = (byte) (-16);
      String string0 = pooledByteBufAllocator0.toString();
      assertNotNull(string0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals("PooledByteBufAllocator(directByDefault: false)", string0);
      
      byteArray0[1] = (byte) (-16);
      int int1 = compositeByteBuf1.capacity();
      assertTrue(compositeByteBuf1.equals((Object)compositeByteBuf0));
      assertTrue(int1 == int0);
      assertNotSame(compositeByteBuf1, compositeByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(536870912, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(0, int1);
      
      byteArray0[2] = (byte)60;
      CompositeByteBuf compositeByteBuf2 = pooledByteBufAllocator0.compositeDirectBuffer(0);
      assertNotNull(compositeByteBuf2);
      assertTrue(compositeByteBuf2.equals((Object)compositeByteBuf1));
      assertTrue(compositeByteBuf2.equals((Object)compositeByteBuf0));
      assertNotSame(compositeByteBuf2, compositeByteBuf1);
      assertNotSame(compositeByteBuf2, compositeByteBuf0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      assertEquals(0, compositeByteBuf2.maxNumComponents());
      assertEquals(1, compositeByteBuf2.refCnt());
      
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)11;
      int int2 = 0;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(compositeByteBuf1.equals((Object)compositeByteBuf2));
      assertTrue(compositeByteBuf1.equals((Object)compositeByteBuf0));
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(536870912, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readLong();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(8) exceeds writerIndex(0): CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      int int0 = (-1);
      boolean boolean0 = true;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setShort((-1), (short) (-1900));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      
      int int0 = 1;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, false, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeInt(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.markReaderIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 459, 459);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.touch((Object) null);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(459, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(459, byteBuf0.maxCapacity());
      
      String string0 = unpooledByteBufAllocator0.toString();
      assertNotNull(string0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals("UnpooledByteBufAllocator(directByDefault: false)", string0);
      
      boolean boolean0 = unpooledDirectByteBuf0.isReadable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(boolean0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(459, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(459, byteBuf0.maxCapacity());
      
      channelBufferWrapper0.writeNullableString("&yr`7o?[");
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(438, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(438, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(459, byteBuf0.maxCapacity());
      
      long long0 = channelBufferWrapper0.readLong();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(438, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(438, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(459, byteBuf0.maxCapacity());
      assertEquals(72057594172155392L, long0);
      
      channelBufferWrapper0.clear();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(459, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(459, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(459, byteBuf0.maxCapacity());
      
      int int0 = (-1383);
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(459, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(459, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(459, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(459, (ActiveMQBuffer) channelBufferWrapper1, (-963), (-1522));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 459, length: -1522 (expected: range(0, 459))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.resetWriterIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSlice(224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(224) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        activeMQBuffer0.writeNullableString("k*\u0000~|");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      activeMQBuffer0.writerIndex(0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSlice(224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(224) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.maxCapacity());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.maxCapacity());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(2458, activeMQBuffer0, (-3735), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 2458, length: 0 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      assertNotNull(channelBufferWrapper0);
      
      ByteBuf byteBuf0 = channelBufferWrapper0.byteBuf();
      assertNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimumReadableBytes: -3 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-1);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.skipBytes((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-906);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      channelBufferWrapper0.discardReadBytes();
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      channelBufferWrapper0.resetWriterIndex();
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      ByteBuf byteBuf1 = channelBufferWrapper0.byteBuf();
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getChar((-906));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: -906, length: 2 (expected: range(0, 34))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      byte[] byteArray0 = new byte[0];
      activeMQBuffer0.setBytes(0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSlice(224);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(224) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U*M]=m.qRnA{KyadCr");
      assertFalse(boolean0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBoolean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.clear();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      
      ByteBuffer byteBuffer0 = unpooledDirectByteBuf0.nioBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      
      ByteBuf byteBuf1 = emptyByteBuf0.asReadOnly();
      assertNotNull(byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      
      int int1 = 698;
      int int2 = 847;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readByte();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.retain();
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.clear();
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(2, compositeByteBuf2.refCnt());
      assertEquals(512, compositeByteBuf2.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(512, 512);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      CompositeByteBuf compositeByteBuf3 = (CompositeByteBuf)compositeByteBuf1.writeShortLE(1280);
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2147483645, compositeByteBuf1.maxWritableBytes());
      assertEquals(2147483645, compositeByteBuf3.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxCapacity());
      assertEquals(512, compositeByteBuf3.maxNumComponents());
      assertEquals(2, compositeByteBuf3.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf1, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(512, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2147483645, compositeByteBuf1.maxWritableBytes());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getInt(1280);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 1280, length: 4 (expected: range(0, 64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      int int0 = 1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int1 = 3267;
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer(1, 3267);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.clear();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      
      ByteBuffer byteBuffer0 = unpooledDirectByteBuf0.nioBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      
      ByteBuf byteBuf1 = emptyByteBuf0.asReadOnly();
      assertNotNull(byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      
      int int1 = 0;
      channelBufferWrapper0.writeBytes(byteBuf1, 0, 0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      
      ByteBuf byteBuf2 = unpooledByteBufAllocator0.ioBuffer(847);
      assertNotNull(byteBuf2);
      assertTrue(byteBuf2.equals((Object)byteBuf1));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(8) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 0);
      assertNotNull(compositeByteBuf0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(5, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBytes(byteBuffer0);
      assertNotNull(compositeByteBuf1);
      assertEquals(5, byteArray0.length);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483642, compositeByteBuf0.maxWritableBytes());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2147483642, compositeByteBuf1.maxWritableBytes());
      assertEquals(1, compositeByteBuf1.refCnt());
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.clear();
      assertNotNull(compositeByteBuf2);
      assertEquals(5, byteArray0.length);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(0, compositeByteBuf2.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.retain();
      assertNotNull(compositeByteBuf3);
      assertEquals(5, byteArray0.length);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(2, compositeByteBuf2.refCnt());
      assertEquals(0, compositeByteBuf2.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxWritableBytes());
      assertEquals(2, compositeByteBuf3.refCnt());
      assertEquals(0, compositeByteBuf3.maxNumComponents());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf3);
      assertNotNull(channelBufferWrapper0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(2, compositeByteBuf2.refCnt());
      assertEquals(0, compositeByteBuf2.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxWritableBytes());
      assertEquals(2, compositeByteBuf3.refCnt());
      assertEquals(0, compositeByteBuf3.maxNumComponents());
      
      int int0 = channelBufferWrapper0.writableBytes();
      assertEquals(5, byteArray0.length);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxWritableBytes());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(2, compositeByteBuf2.refCnt());
      assertEquals(0, compositeByteBuf2.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxWritableBytes());
      assertEquals(2, compositeByteBuf3.refCnt());
      assertEquals(0, compositeByteBuf3.maxNumComponents());
      assertEquals(64, int0);
      
      channelBufferWrapper0.writeChar(';');
      assertEquals(5, byteArray0.length);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-127), (byte) (-1), (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(2147483645, compositeByteBuf0.maxWritableBytes());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.position());
      assertEquals(5, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf1.maxCapacity());
      assertEquals(2147483645, compositeByteBuf1.maxWritableBytes());
      assertEquals(2, compositeByteBuf1.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf2.maxCapacity());
      assertEquals(2, compositeByteBuf2.refCnt());
      assertEquals(0, compositeByteBuf2.maxNumComponents());
      assertEquals(2147483645, compositeByteBuf2.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf3.maxCapacity());
      assertEquals(2147483645, compositeByteBuf3.maxWritableBytes());
      assertEquals(2, compositeByteBuf3.refCnt());
      assertEquals(0, compositeByteBuf3.maxNumComponents());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U*M]=m.qRnA{KyadCr");
      assertFalse(boolean0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.markWriterIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(2344, byteArray0, 2045, 2021);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertTrue(boolean0);
      
      int int0 = 0;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1291, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(activeMQBuffer0, 1291, 1291);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // srcIndex: 1291, length: 1291 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      channelBufferWrapper0.discardReadBytes();
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      channelBufferWrapper0.resetWriterIndex();
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      channelBufferWrapper0.setShort(0, (short)252);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      ByteBuf byteBuf1 = channelBufferWrapper0.byteBuf();
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      channelBufferWrapper0.resetReaderIndex();
      assertTrue(byteBuf0.equals((Object)byteBuf1));
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFully(byteArray0, 1933, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstIndex: 1933, length: 0 (expected: range(0, 4))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      
      // Undeclared exception!
      pooledByteBufAllocator0.directBuffer();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)0;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedByte(30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-2714);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readUnsignedShort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper1);
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      
      InternalLoggerFactory internalLoggerFactory0 = InternalLoggerFactory.getDefaultFactory();
      assertNotNull(internalLoggerFactory0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes((ActiveMQBuffer) channelBufferWrapper1, 1739, (-3850));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-3245);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-67);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      
      int int0 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        ((ChannelBufferWrapper) activeMQBuffer0).readFully(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(2) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSimpleString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      channelBufferWrapper0.discardReadBytes();
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      channelBufferWrapper0.resetWriterIndex();
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      int int0 = 0;
      channelBufferWrapper0.setShort(0, (short)252);
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      ByteBuf byteBuf1 = channelBufferWrapper0.byteBuf();
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      channelBufferWrapper0.resetReaderIndex();
      assertTrue(byteBuf0.equals((Object)byteBuf1));
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.slice((-1871), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // UnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 34).slice(-1871, 1)
         //
         verifyException("io.netty.buffer.AbstractUnpooledSlicedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(activeMQBuffer0, 42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // length(42) exceeds dst.writableBytes(0) where dst is: UnreleasableByteBuf(EmptyByteBufBE)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      int int1 = (-3245);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getDouble(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(0);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      
      ByteBuf byteBuf0 = emptyByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isWritable());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.readerIndex());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.hasMemoryAddress());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isWritable());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.readerIndex());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.hasMemoryAddress());
      
      int int1 = 9;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setInt(9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertTrue(boolean0);
      
      ByteBuf byteBuf2 = byteBuf0.setChar(0, 3888);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertTrue(byteBuf2.isDirect());
      assertFalse(byteBuf2.hasArray());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1291, byteBuf2.maxCapacity());
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        activeMQBuffer0.getBytes(0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1, byteBuf1.refCnt());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedByte(2567);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      channelBufferWrapper0.discardReadBytes();
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      channelBufferWrapper0.resetWriterIndex();
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      channelBufferWrapper0.setShort(0, (short)252);
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      ByteBuf byteBuf1 = channelBufferWrapper0.byteBuf();
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      channelBufferWrapper0.resetReaderIndex();
      assertTrue(byteBuf0.equals((Object)byteBuf1));
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(byteBuf1, true, false);
      assertNotNull(channelBufferWrapper1);
      assertTrue(byteBuf0.equals((Object)byteBuf1));
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertFalse(channelBufferWrapper1.equals((Object)channelBufferWrapper0));
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes((int) (short)252, (ActiveMQBuffer) channelBufferWrapper1, (-398), 75);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 252, length: 75 (expected: range(0, 34))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      ByteBuf byteBuf0 = emptyByteBuf0.retain();
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertTrue(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.writerIndex());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isReadable());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true, true);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadOnly());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedByte((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer(0);
      assertNotNull(compositeByteBuf0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      boolean boolean0 = channelBufferWrapper0.readable();
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getInt((-862048943));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.resetReaderIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.clear();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      
      ByteBuffer byteBuffer0 = channelBufferWrapper0.toByteBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writableBytes());
      
      ByteBuf byteBuf1 = emptyByteBuf0.retain();
      assertNotNull(byteBuf1);
      assertSame(emptyByteBuf0, byteBuf1);
      assertSame(byteBuf1, emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.release());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, byteBuf1.writerIndex());
      assertTrue(byteBuf1.hasMemoryAddress());
      assertEquals(0, byteBuf1.arrayOffset());
      assertTrue(byteBuf1.hasArray());
      assertFalse(byteBuf1.isWritable());
      assertEquals(0, byteBuf1.readerIndex());
      assertEquals(0, byteBuf1.writableBytes());
      assertEquals(0, byteBuf1.maxWritableBytes());
      assertFalse(byteBuf1.isReadOnly());
      assertEquals(0, byteBuf1.readableBytes());
      assertEquals("EmptyByteBufBE", byteBuf1.toString());
      assertEquals(0, byteBuf1.maxCapacity());
      assertTrue(byteBuf1.isDirect());
      assertEquals(0, byteBuf1.capacity());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.release());
      assertEquals(1, byteBuf1.refCnt());
      assertFalse(byteBuf1.isReadable());
      
      int int1 = 698;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(byteBuf1, 698, 698);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(698) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf2, byteBuf0);
      assertSame(byteBuf2, byteBuf1);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertEquals(1, byteBuf2.refCnt());
      assertFalse(byteBuf2.hasArray());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertEquals(1291, byteBuf2.capacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(14) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      
      ByteBuf byteBuf0 = emptyByteBuf0.unwrap();
      assertNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.writerIndex());
      
      ByteBuf byteBuf1 = unpooledByteBufAllocator0.directBuffer();
      assertNotNull(byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = (-862048943);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getByte((-3392));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.toByteBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      
      int int1 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      
      int int2 = (-3735);
      int int3 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        activeMQBuffer0.readUnsignedShort();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(2) exceeds writerIndex(0): UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      assertNotNull(byteBuf0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      channelBufferWrapper0.discardReadBytes();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      channelBufferWrapper0.resetWriterIndex();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      ByteBuf byteBuf1 = channelBufferWrapper0.byteBuf();
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): UnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 34)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.clear();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuffer byteBuffer0 = unpooledDirectByteBuf0.nioBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertNotNull(emptyByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      
      ByteBuf byteBuf1 = emptyByteBuf0.asReadOnly();
      assertNotNull(byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.release());
      assertFalse(emptyByteBuf0.isReadable());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.isDirect());
      
      ByteBuf byteBuf2 = unpooledByteBufAllocator0.ioBuffer(847);
      assertNotNull(byteBuf2);
      assertTrue(byteBuf2.equals((Object)byteBuf1));
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getFloat(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      ActiveMQBuffer activeMQBuffer1 = activeMQBuffer0.copy();
      assertNotNull(activeMQBuffer1);
      assertFalse(channelBufferWrapper0.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertFalse(activeMQBuffer1.equals((Object)activeMQBuffer0));
      assertFalse(activeMQBuffer1.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf1, byteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer1);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, activeMQBuffer1);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertNotSame(activeMQBuffer1, activeMQBuffer0);
      assertNotSame(activeMQBuffer1, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.capacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1291, byteBuf1.capacity());
      
      // Undeclared exception!
      try { 
        activeMQBuffer1.readNullableString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int1 = (-2714);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSlice(48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertNotNull(pooledByteBufAllocator0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      assertNotNull(unpooledDirectByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      int int1 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.maxCapacity());
      assertEquals(0, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, byteBuf0.capacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      
      int int2 = (-3735);
      int int3 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(activeMQBuffer0, 1645, (-3735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minWritableBytes: -3735 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-83);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, false);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(unpooledByteBufAllocator0, (byte)56, 4095);
      assertNotNull(unpooledHeapByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(4095, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(4095, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      
      ByteBuffer byteBuffer0 = unpooledHeapByteBuf0.nioBuffer(1, 0);
      assertNotNull(byteBuffer0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(4095, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(4095, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      
      ByteBuf byteBuf0 = unpooledHeapByteBuf0.readBytes(byteBuffer0);
      assertNotNull(byteBuf0);
      assertSame(unpooledHeapByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledHeapByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(4095, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(4095, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxWritableBytes());
      assertEquals(4095, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(1, byteBuf0.refCnt());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(4095, unpooledHeapByteBuf0.maxCapacity());
      assertFalse(unpooledHeapByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledHeapByteBuf0.arrayOffset());
      assertEquals(4095, unpooledHeapByteBuf0.maxWritableBytes());
      assertFalse(unpooledHeapByteBuf0.isDirect());
      assertTrue(unpooledHeapByteBuf0.hasArray());
      assertEquals(1, unpooledHeapByteBuf0.refCnt());
      assertEquals(1, unpooledHeapByteBuf0.nioBufferCount());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuf0.isDirect());
      assertTrue(byteBuf0.hasArray());
      assertEquals(4095, byteBuf0.maxWritableBytes());
      assertEquals(4095, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(1, byteBuf0.refCnt());
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.toByteBuffer((int) (byte) (-83), 1040);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      
      int int0 = byteBuf0.readerIndex();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(0, int0);
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      
      ByteBuf byteBuf2 = unpooledDirectByteBuf0.setLongLE(0, 0);
      assertNotNull(byteBuf2);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf2, byteBuf1);
      assertSame(byteBuf2, unpooledDirectByteBuf0);
      assertSame(byteBuf2, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, byteBuf2.nioBufferCount());
      assertTrue(byteBuf2.isDirect());
      assertEquals(1, byteBuf2.refCnt());
      assertEquals(1291, byteBuf2.maxCapacity());
      assertEquals(1291, byteBuf2.capacity());
      assertEquals(1291, byteBuf2.maxWritableBytes());
      assertFalse(byteBuf2.hasMemoryAddress());
      assertFalse(byteBuf2.hasArray());
      
      boolean boolean0 = channelBufferWrapper0.writable();
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      assertTrue(boolean0);
      
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      assertNotNull(activeMQBuffer0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf2);
      assertSame(byteBuf0, byteBuf1);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      assertSame(byteBuf0, byteBuf2);
      assertSame(byteBuf1, byteBuf2);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertSame(byteBuf1, byteBuf0);
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
      assertNotSame(activeMQBuffer0, channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1291, unpooledDirectByteBuf0.capacity());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(1291, unpooledDirectByteBuf0.maxWritableBytes());
      assertEquals(1291, unpooledDirectByteBuf0.maxCapacity());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(1291, byteBuf0.capacity());
      assertEquals(1291, byteBuf0.maxCapacity());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1291, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.isDirect());
      assertFalse(byteBuf0.hasArray());
      assertEquals(1, byteBuf1.refCnt());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertTrue(byteBuf1.isDirect());
      assertEquals(1291, byteBuf1.maxWritableBytes());
      assertEquals(1291, byteBuf1.capacity());
      assertEquals(1291, byteBuf1.maxCapacity());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertFalse(byteBuf1.hasArray());
      
      // Undeclared exception!
      try { 
        activeMQBuffer0.getUnsignedShort(5421);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setInt((-1641), (-1641));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      assertNotNull(channelBufferWrapper0);
      
      int int0 = 224;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeNullableString("cY_ihf}2)6n+|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.UTF8Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      assertNotNull(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      assertNotNull(compositeByteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(512, 512);
      assertNotNull(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      assertNotNull(channelBufferWrapper0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxWritableBytes());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      channelBufferWrapper0.writeLong(16L);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      
      short short0 = channelBufferWrapper0.readShort();
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(512, compositeByteBuf0.maxNumComponents());
      assertEquals(Integer.MAX_VALUE, compositeByteBuf0.maxCapacity());
      assertEquals(2147483639, compositeByteBuf0.maxWritableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals((short)0, short0);
      
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      assertNotNull(channelBufferWrapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.discardReadBytes();
      channelBufferWrapper0.resetWriterIndex();
      channelBufferWrapper0.setShort(0, (short)252);
      channelBufferWrapper0.resetReaderIndex();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFully(byteArray0, 1933, (-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimumReadableBytes: -236 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeDouble(4868.63044584);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true, false);
      unpooledByteBufAllocator0.toString();
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, true, true);
      unpooledByteBufAllocator0.ioBuffer(124, 124);
      // Undeclared exception!
      try { 
        channelBufferWrapper1.writeUTF("JO{:s_>");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      int int0 = (-4422);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.duplicate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.copy();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes((ActiveMQBuffer) channelBufferWrapper1, 934, 2458);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byte byte0 = (byte)101;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readNullableString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer(4377);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readNullableString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1) exceeds writerIndex(0): CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      unpooledByteBufAllocator0.buffer(512, 512);
      compositeByteBuf0.writeShortLE(512);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      channelBufferWrapper0.writeLong(16L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-49);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(byteArray0, 0, 1614);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // srcIndex: 0, length: 1614 (expected: range(0, 6))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ByteBuf byteBuf0 = null;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      SimpleString.toSimpleString("g6bJW.{a=Ux-3,");
      SimpleString.toSimpleString("g6bJW.{a=Ux-3,");
      // Undeclared exception!
      try { 
        channelBufferWrapper0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      int int0 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      activeMQBuffer0.copy(0, 0);
      activeMQBuffer0.writable();
      unpooledDirectByteBuf0.writeZero(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getShort(1392);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(byteArray0, 16, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer(0);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.setIndex(0, 0);
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.touch();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf2, true);
      channelBufferWrapper0.clear();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      int int0 = 494;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(494);
      unpooledByteBufAllocator0.buffer(494, 494);
      compositeByteBuf0.writeShortLE(494);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      channelBufferWrapper0.writeLong(16L);
      channelBufferWrapper0.readShort();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(494, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 494, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.copy((-1296), (-1296));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      int int0 = 522133279;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)60;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeShort((short)4095);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 698;
      int int1 = 847;
      int int2 = (-239);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int3 = 1;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 1);
      // Undeclared exception!
      compositeByteBuf0.writeShort((-239));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      channelBufferWrapper0.readSlice(0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setLong(2091, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      unpooledByteBufAllocator0.heapBuffer();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      int int0 = 522133279;
      byte[] byteArray0 = new byte[4];
      emptyByteBuf0.markWriterIndex();
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)60;
      byte byte0 = (byte)108;
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, false);
      channelBufferWrapper1.readableBytes();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      int int0 = (-1);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, false, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSlice((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -1 (expected: >= 0)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 698;
      int int1 = Integer.MIN_VALUE;
      SimpleString simpleString0 = new SimpleString("B4<8arzCC`Xf&6u_");
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int2 = 1;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 1);
      // Undeclared exception!
      compositeByteBuf0.writeShort((-239));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeShort((short)193);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      pooledByteBufAllocator0.heapBuffer();
      boolean boolean0 = false;
      int int0 = 107;
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer(107);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 698;
      int int1 = Integer.MIN_VALUE;
      SimpleString simpleString0 = new SimpleString("B4<8arzCC`Xf&6u_");
      int int2 = (-239);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      boolean boolean0 = true;
      int int3 = 1;
      // Undeclared exception!
      pooledByteBufAllocator0.directBuffer(97, 1641);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.discardReadBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.markWriterIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, true);
      channelBufferWrapper0.release();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 698;
      int int1 = Integer.MIN_VALUE;
      SimpleString simpleString0 = new SimpleString("B4<8arzCC`Xf&6u_");
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int2 = 1;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 1);
      // Undeclared exception!
      compositeByteBuf0.writeShort((-239));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = (-2714);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeNullableSimpleString((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      channelBufferWrapper0.readSlice(0);
      int int1 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-105);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(4) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ByteBuf byteBuf0 = null;
      boolean boolean0 = true;
      int int0 = 1;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes((ActiveMQBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      byteBuf0.bytesBefore(0, 1, (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readUnsignedInt();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[2] = (byte) (-17);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readableBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes((-906), byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: -906, length: 1 (expected: range(0, 34))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      boolean boolean0 = true;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      int int0 = 522133279;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeByte((byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.retain();
      unpooledByteBufAllocator0.compositeDirectBuffer(512);
      unpooledByteBufAllocator0.buffer(512, 512);
      int int1 = 1280;
      compositeByteBuf1.writeShortLE(512);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf1, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(8) exceeds writerIndex(2): CompositeByteBuf(ridx: 0, widx: 2, cap: 64, components=1)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false, false);
      channelBufferWrapper0.readerIndex();
      channelBufferWrapper0.writeBoolean(false);
      int int0 = channelBufferWrapper0.readableBytes();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(1450, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getChar(734);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeByte((byte)14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.clear();
      unpooledByteBufAllocator0.directBuffer(0, 9);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      unpooledDirectByteBuf0.nioBuffer(0, 0);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFully((byte[]) null, 9, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.UnpooledDirectByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      byteBuf0.bytesBefore(0, 1, (byte) (-13));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      channelBufferWrapper0.markWriterIndex();
      int int0 = 2458;
      channelBufferWrapper0.readSlice(0);
      int int1 = (-3735);
      int int2 = 2415;
      char char0 = '';
      // Undeclared exception!
      try { 
        channelBufferWrapper0.copy(1343, (-1645));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Too many bytes to read - Need -302
         //
         verifyException("io.netty.buffer.UnpooledDirectByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      emptyByteBuf0.asReadOnly();
      unpooledByteBufAllocator0.ioBuffer(847);
      SimpleString.toSimpleString("B4<8rzCCeXf&6u_");
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getLong((-189));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 71, 71);
      unpooledDirectByteBuf0.isWritable((-1679));
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.retain(71);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      channelBufferWrapper0.markWriterIndex();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readLong();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(8) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 71/71)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.nioBuffer();
      channelBufferWrapper0.setBytes(1291, byteBuffer0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      // Undeclared exception!
      try { 
        activeMQBuffer0.setLong(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes((-1742), byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = (-2714);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(873, (ActiveMQBuffer) null, (-2714));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      byteBuf0.bytesBefore(0, 1, (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      int int0 = 2458;
      int int1 = (-3735);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setChar(2415, '');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      int int0 = 522133279;
      byte[] byteArray0 = new byte[4];
      unpooledByteBufAllocator0.directBuffer(1621, 522133279);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)60;
      byte byte0 = (byte)108;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.duplicate();
      // Undeclared exception!
      try { 
        activeMQBuffer0.writeBytes((ByteBuf) emptyByteBuf0, (-671), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -1 (expected: >= 0)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.touch((Object) unpooledByteBufAllocator0);
      unpooledByteBufAllocator0.toString();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.slice();
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      int int1 = 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      channelBufferWrapper0.getBytes(0, byteArray0, (-1830), 0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.toByteBuffer((-1830), (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -1830
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        activeMQBuffer0.setBytes((-3096), (ActiveMQBuffer) channelBufferWrapper0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      SimpleString simpleString0 = new SimpleString("2o");
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeSimpleString(simpleString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      channelBufferWrapper0.getBytes(0, activeMQBuffer0, 0, 0);
      ActiveMQBuffer activeMQBuffer1 = activeMQBuffer0.copy(0, 0);
      // Undeclared exception!
      try { 
        activeMQBuffer1.getUnsignedInt((-1367));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = (-2714);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes((ByteBuf) null, (-2714), 873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.toByteBuffer((-2714), (-2714));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.touch((Object) unpooledByteBufAllocator0);
      unpooledByteBufAllocator0.toString();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.slice();
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      int int1 = 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      channelBufferWrapper0.getBytes(0, byteArray0, (-1830), 0);
      unpooledByteBufAllocator0.directBuffer(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBoolean();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      channelBufferWrapper0.slice(0, 0);
      byteBuf1.setZero(1, 1);
      int int0 = 1;
      // Undeclared exception!
      try { 
        activeMQBuffer0.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -347
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      int int0 = (-1);
      emptyByteBuf0.asReadOnly();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.copy((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -1
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      byteBuf1.setZero(1, 1);
      int int0 = 1;
      channelBufferWrapper0.getUnsignedShort(1);
      activeMQBuffer0.copy();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        activeMQBuffer0.setFloat(0, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      int int0 = 522133279;
      byte[] byteArray0 = new byte[4];
      unpooledByteBufAllocator0.directBuffer(1621, 522133279);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)60;
      byte byte0 = (byte)108;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.duplicate();
      // Undeclared exception!
      try { 
        activeMQBuffer0.setBytes(522133279, (ActiveMQBuffer) channelBufferWrapper0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.writeZero(0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.slice(0, 0);
      assertFalse(activeMQBuffer0.equals((Object)channelBufferWrapper0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      channelBufferWrapper0.getBytes(0, activeMQBuffer0, 0, 0);
      activeMQBuffer0.copy(0, 0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getShort(1392);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = 0;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setFloat(0, (-201.48F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ByteBuf[] byteBufArray0 = new ByteBuf[4];
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes((-2714), (ActiveMQBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.duplicate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      compositeByteBuf0.writeShortLE(512);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      channelBufferWrapper0.writeLong(16L);
      channelBufferWrapper0.readShort();
      channelBufferWrapper0.getByte((short)2);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)101;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeUTF("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.UTF8Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(0);
      String string0 = "B4<8rzCCeXf&6u_";
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 0, length: 4 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      byteBuf0.bytesBefore(0, 1, (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      int int0 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      channelBufferWrapper0.writableBytes();
      int int1 = (-3735);
      // Undeclared exception!
      try { 
        activeMQBuffer0.setChar(2415, '');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 2415, length: 2 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      byteBuf0.bytesBefore(0, 1, (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      int int0 = 2458;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      int int1 = (-3725);
      // Undeclared exception!
      try { 
        activeMQBuffer0.setChar(2415, '');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 2415, length: 2 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setByte((-1002), (byte) (-58));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.discardReadBytes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      channelBufferWrapper0.resetWriterIndex();
      channelBufferWrapper0.setShort(0, (short)252);
      channelBufferWrapper0.byteBuf();
      channelBufferWrapper0.resetReaderIndex();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      int int0 = 1933;
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes(activeMQBuffer0, 788);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // length(788) exceeds src.readableBytes(0) where src is: UnreleasableByteBuf(UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 34)))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      unpooledByteBufAllocator0.compositeHeapBuffer();
      unpooledByteBufAllocator0.toString();
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(698);
      SimpleString.toSimpleString("B4<8rzCCeXf&6u_");
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true, true);
      channelBufferWrapper0.writeInt(0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ByteBuf byteBuf0 = null;
      boolean boolean0 = true;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.slice();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      int int0 = (-1);
      emptyByteBuf0.asReadOnly();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes((-1), byteArray0, 1, (-902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -902
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      compositeByteBuf0.writeShortLE(512);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, false);
      channelBufferWrapper0.writeLong(16L);
      channelBufferWrapper0.readShort();
      channelBufferWrapper0.readByte();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(512, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 512, writerIndex: 0 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, true, true);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.slice();
      assertNotSame(channelBufferWrapper0, activeMQBuffer0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = 698;
      int int1 = 847;
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int2 = 1;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 1);
      // Undeclared exception!
      compositeByteBuf0.writeShort((-239));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.retain();
      compositeByteBuf1.clear();
      unpooledByteBufAllocator0.buffer(512, 512);
      compositeByteBuf1.writeShortLE(1280);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf1, false);
      channelBufferWrapper0.writeLong(16L);
      channelBufferWrapper0.markReaderIndex();
      channelBufferWrapper0.writeDouble(16L);
      channelBufferWrapper0.writeUTF("VmR");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setIndex(0, (-13));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.discardReadBytes();
      channelBufferWrapper0.resetWriterIndex();
      channelBufferWrapper0.byteBuf();
      channelBufferWrapper0.readSlice(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readShort();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(2) exceeds writerIndex(0): UnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 34)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.touch((Object) "");
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBoolean();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      emptyByteBuf0.asReadOnly();
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(847);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      channelBufferWrapper0.getDouble(1);
      SimpleString.toSimpleString("B4<8rzCCeXf&6u_");
      int int0 = channelBufferWrapper0.capacity();
      assertEquals(847, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      ByteBuf byteBuf0 = compositeByteBuf0.writeShortLE(512);
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      SimpleString.readNullableSimpleString((ByteBuf) compositeByteBuf0, simpleString_ByteBufSimpleStringPool0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.readUnsignedByte();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)113;
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getByte(1159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      byteBuf1.setZero(1, 1);
      channelBufferWrapper0.skipBytes(0);
      activeMQBuffer0.copy();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.duplicate();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.skipBytes(755);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      byteBuf1.setZero(1, 1);
      unpooledByteBufAllocator0.compositeHeapBuffer(20);
      channelBufferWrapper0.getUnsignedShort(1);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.nioBuffer();
      channelBufferWrapper0.readBytes(byteBuffer0);
      activeMQBuffer0.copy();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      int int0 = 2458;
      channelBufferWrapper0.capacity();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      int int1 = (-3735);
      int int2 = 0;
      // Undeclared exception!
      try { 
        activeMQBuffer0.writeBoolean(false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(1) exceeds maxCapacity(0): UnpooledSlicedByteBuf(ridx: 0, widx: 0, cap: 0/0, unwrapped: UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readUnsignedByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getByte((-1047));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      byte byte0 = (byte)0;
      byteBuf0.bytesBefore(0, 1, (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 0;
      ByteBuf[] byteBufArray0 = new ByteBuf[3];
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      channelBufferWrapper0.writerIndex();
      byteBufArray0[0] = byteBuf0;
      byteBufArray0[1] = byteBuf0;
      byteBufArray0[2] = (ByteBuf) unpooledDirectByteBuf0;
      CompositeByteBuf compositeByteBuf0 = null;
      try {
        compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 0, byteBufArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxNumComponents: 0 (expected: >= 2)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, false);
      int int0 = 838;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(838);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      channelBufferWrapper0.getFloat(0);
      channelBufferWrapper0.getDouble(1);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSimpleString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf(ridx: 0, widx: 0, cap: 838)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      int int0 = 847;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(847);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      channelBufferWrapper0.getFloat(0);
      channelBufferWrapper0.getDouble(1);
      byte[] byteArray0 = new byte[1];
      channelBufferWrapper0.getUnsignedShort(698);
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1) exceeds writerIndex(0): UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(ridx: 0, widx: 0, cap: 847)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf0.readerIndex();
      unpooledDirectByteBuf0.writeMediumLE(0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      channelBufferWrapper0.readUTF();
      byteBuf1.setZero(1, 1);
      channelBufferWrapper0.getUnsignedShort(1);
      activeMQBuffer0.copy();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(2) + length(4) exceeds writerIndex(3): UnpooledDirectByteBuf(ridx: 2, widx: 3, cap: 1291/1291)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      unpooledByteBufAllocator0.calculateNewCapacity(0, 0);
      int int0 = 847;
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.ioBuffer(847);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-60);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setDouble(847, (-1805.260361254));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 847, length: 8 (expected: range(0, 847))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.retainedDuplicate();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readSimpleString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFully(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getFloat(1805);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      int int0 = 0;
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper1.readBytes(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      channelBufferWrapper0.writable();
      channelBufferWrapper0.writeBytes((ActiveMQBuffer) channelBufferWrapper0, 0, 0);
      channelBufferWrapper0.readBytes((ActiveMQBuffer) channelBufferWrapper0, 0);
      channelBufferWrapper0.copy();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getLong((-1278));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.discardReadBytes();
      channelBufferWrapper0.resetWriterIndex();
      channelBufferWrapper0.setShort(0, (short)252);
      channelBufferWrapper0.byteBuf();
      channelBufferWrapper0.resetReaderIndex();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      channelBufferWrapper0.readFully(byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getDouble((-3009));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: -3009, length: 8 (expected: range(0, 34))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes(byteArray0, (-2111), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      channelBufferWrapper0.readSlice(0);
      int int1 = 0;
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool(732);
      SimpleString.toSimpleString(">t>Bx$Z#{", simpleString_StringSimpleStringPool0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedShort((-4213));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = 1;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1, 1);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.touch();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, true);
      // Undeclared exception!
      channelBufferWrapper0.copy();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readBytes((ActiveMQBuffer) channelBufferWrapper0, 0, (-3245));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.discardReadBytes();
      channelBufferWrapper0.resetWriterIndex();
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readUTF();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(2) exceeds writerIndex(0): UnpooledUnsafeHeapByteBuf(ridx: 0, widx: 0, cap: 34)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      // Undeclared exception!
      pooledByteBufAllocator0.ioBuffer();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 4095, 4095);
      int int0 = 0;
      int int1 = 0;
      ByteBuffer byteBuffer0 = unpooledUnsafeDirectByteBuf0.nioBuffer(4095, 0);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.setBytes(0, byteBuffer0);
      ChannelBufferWrapper.unwrap(byteBuf0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes(0, (ActiveMQBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      // Undeclared exception!
      try { 
        ChannelBufferWrapper.unwrap((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true);
      ActiveMQBuffer activeMQBuffer0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setInt((-1641), (-1641));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      channelBufferWrapper0.writable();
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      channelBufferWrapper1.setBytes(1, (ActiveMQBuffer) channelBufferWrapper0);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      activeMQBuffer0.writableBytes();
      channelBufferWrapper0.getBytes(1025, activeMQBuffer0);
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer1, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer1, 0);
      channelBufferWrapper0.slice(0, 0);
      ChannelBufferWrapper.unwrap(byteBuf0);
      byteBuf1.setZero(1, 1);
      // Undeclared exception!
      try { 
        activeMQBuffer1.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -347
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      String string0 = "";
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBytes((ByteBuf) null, 0, 2095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-26);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true);
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(emptyByteBuf0, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes((int) (byte)1, (ActiveMQBuffer) channelBufferWrapper1, (-370), (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1, 1);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.capacity(0);
      unpooledDirectByteBuf0.markReaderIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getBytes((-1), byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: -1, length: 0 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)119;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setByte((byte)119, (byte) (-113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      int int0 = 4095;
      // Undeclared exception!
      try { 
        channelBufferWrapper0.release();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      unpooledByteBufAllocator0.compositeDirectBuffer(Integer.MAX_VALUE);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      channelBufferWrapper0.writable();
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readBytes(0);
      channelBufferWrapper0.writeBytes(activeMQBuffer0, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      ActiveMQBuffer activeMQBuffer1 = channelBufferWrapper0.slice(0, 0);
      byteBuf1.setZero(1, 1);
      activeMQBuffer1.capacity();
      activeMQBuffer0.writeBytes(activeMQBuffer1, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        activeMQBuffer0.writeBytes(byteArray0, 1030, (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -16 (expected: >= 0)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 1291, 1291);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.setShort(0, 0);
      ByteBuf byteBuf1 = ChannelBufferWrapper.unwrap(byteBuf0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      byteBuf0.readerIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf1, false, false);
      unpooledDirectByteBuf0.setLongLE(0, 0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper");
      ChannelBufferWrapper channelBufferWrapper1 = new ChannelBufferWrapper(unpooledDirectByteBuf0, false, true);
      channelBufferWrapper1.setDouble(523, (-1.0));
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper1.readSlice(0);
      channelBufferWrapper0.getBytes(1025, activeMQBuffer0);
      channelBufferWrapper0.writeBytes((ActiveMQBuffer) channelBufferWrapper1, 0, 0);
      channelBufferWrapper0.readBytes(activeMQBuffer0, 0);
      channelBufferWrapper0.slice(0, 0);
      byteBuf1.setZero(1, 1);
      channelBufferWrapper0.skipBytes(0);
      // Undeclared exception!
      try { 
        activeMQBuffer0.slice(4095, (-347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxCapacity: -347 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.discardReadBytes();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false, true);
      byte[] byteArray0 = new byte[4];
      unpooledByteBufAllocator0.directBuffer(1621, 522133279);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)64;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)60;
      channelBufferWrapper0.duplicate();
      byteArray0[3] = (byte)108;
      channelBufferWrapper0.readerIndex(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.setBytes(522133279, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      int int0 = 512;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(512);
      unpooledByteBufAllocator0.buffer(512, 512);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(compositeByteBuf0, true);
      channelBufferWrapper0.writeLong(512);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedByte(512);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 512, length: 1 (expected: range(0, 64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      pooledByteBufAllocator0.calculateNewCapacity(0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getByte(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.resetWriterIndex();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0);
      int int0 = 2458;
      channelBufferWrapper0.readSlice(0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.writeBoolean(true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(1) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = 248;
      int int1 = 788;
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(34);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      channelBufferWrapper0.discardReadBytes();
      channelBufferWrapper0.resetWriterIndex();
      channelBufferWrapper0.setShort(0, (short)252);
      channelBufferWrapper0.resetReaderIndex();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readFully(byteArray0, 1933, (-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimumReadableBytes: -236 (expected: >= 0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper((ByteBuf) null, true, true);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedShort(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(emptyByteBuf0, true, false);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getUnsignedInt((-834));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      int int0 = 0;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(unpooledDirectByteBuf0);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.readSlice(0);
      channelBufferWrapper0.getBytes(0, activeMQBuffer0, 0, 0);
      activeMQBuffer0.copy(0, 0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.touch((Object) unpooledByteBufAllocator0);
      unpooledByteBufAllocator0.toString();
      ChannelBufferWrapper channelBufferWrapper0 = new ChannelBufferWrapper(byteBuf0, false);
      ActiveMQBuffer activeMQBuffer0 = channelBufferWrapper0.slice();
      int int0 = 0;
      activeMQBuffer0.release();
      byte[] byteArray0 = new byte[0];
      int int1 = 0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      channelBufferWrapper0.getBytes(0, byteArray0, 0, 0);
      channelBufferWrapper0.toByteBuffer(0, 0);
      unpooledByteBufAllocator0.directBuffer(0);
      activeMQBuffer0.getBytes(0, byteArray0);
      // Undeclared exception!
      try { 
        channelBufferWrapper0.readString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }
}
