/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:18:16 GMT 2022
 */

package org.apache.activemq.artemis.utils.actors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.concurrent.DefaultThreadFactory;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.activemq.artemis.utils.actors.Actor;
import org.apache.activemq.artemis.utils.actors.ActorListener;
import org.apache.activemq.artemis.utils.actors.ArtemisExecutor;
import org.apache.activemq.artemis.utils.actors.OrderedExecutor;
import org.apache.activemq.artemis.utils.actors.ProcessorBase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProcessorBase_ESTest extends ProcessorBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertNotNull(orderedExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      String string0 = forkJoinPool0.toString();
      assertNotNull(string0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "j[q]R|*s<");
      assertNotNull(mockThread0);
      
      boolean boolean0 = MockThread.interrupted();
      assertFalse(boolean0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "$VALUES", (-1L));
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      mockThread1.run();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(thread_UncaughtExceptionHandler0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      orderedExecutor0.execute(mockThread1);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, actorListener0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor0.enter();
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor0.shutdown();
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      actor0.shutdown((long) 0, timeUnit0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      ActorListener<MockThread> actorListener1 = (ActorListener<MockThread>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<MockThread> actor1 = new Actor<MockThread>(forkJoinPool0, actorListener1);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      actor1.doTask(mockThread0);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertNotSame(mockThread0, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      Actor<String> actor2 = new Actor<String>(forkJoinPool0, (ActorListener<String>) null);
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertNotNull(actor2);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor2.shutdown();
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      orderedExecutor0.doTask(mockThread0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertNotSame(mockThread0, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      ActorListener<OrderedExecutor> actorListener2 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor3 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener2);
      assertEquals(0, actor3.status());
      assertTrue(actor3.isFlushed());
      assertNotNull(actor3);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      boolean boolean1 = actor3.flush(1, timeUnit0);
      assertTrue(boolean1);
      assertEquals(0, actor3.status());
      assertTrue(actor3.isFlushed());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(boolean1 == boolean0);
      
      ForkJoinPool forkJoinPool1 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool1);
      assertSame(forkJoinPool1, forkJoinPool0);
      
      ActorListener<ForkJoinTask<OrderedExecutor>> actorListener3 = (ActorListener<ForkJoinTask<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<ForkJoinTask<OrderedExecutor>> actor4 = new Actor<ForkJoinTask<OrderedExecutor>>(forkJoinPool1, actorListener3);
      assertEquals(0, actor4.status());
      assertTrue(actor4.isFlushed());
      assertNotNull(actor4);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      forkJoinPool1.shutdown();
      assertSame(forkJoinPool1, forkJoinPool0);
      
      ForkJoinTask<OrderedExecutor> forkJoinTask0 = ForkJoinTask.adapt((Runnable) mockThread0, orderedExecutor0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(forkJoinTask0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertSame(forkJoinPool0, forkJoinPool1);
      assertNotSame(mockThread0, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      actor4.leave();
      assertEquals(0, actor4.status());
      assertTrue(actor4.isFlushed());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertSame(forkJoinPool1, forkJoinPool0);
      
      ForkJoinTask<OrderedExecutor> forkJoinTask1 = forkJoinTask0.fork();
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(forkJoinTask1);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertSame(forkJoinPool0, forkJoinPool1);
      assertNotSame(mockThread0, mockThread1);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      
      actor4.doTask(forkJoinTask1);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, actor4.status());
      assertTrue(actor4.isFlushed());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertSame(forkJoinTask1, forkJoinTask0);
      assertSame(forkJoinPool0, forkJoinPool1);
      assertNotSame(mockThread0, mockThread1);
      assertSame(forkJoinPool1, forkJoinPool0);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertFalse(mockThread0.equals((Object)mockThread1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertNotNull(orderedExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      orderedExecutor0.shutdown();
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Integer> forkJoinTask0 = forkJoinPool0.submit(callable0);
      assertNotNull(forkJoinTask0);
      
      ActorListener<Actor<MockThread>> actorListener0 = (ActorListener<Actor<MockThread>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = forkJoinPool0.hasQueuedSubmissions();
      assertFalse(boolean0);
      
      Actor<Actor<MockThread>> actor0 = new Actor<Actor<MockThread>>(forkJoinPool0, actorListener0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertNotNull(actor0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      boolean boolean1 = actor0.flush(0, timeUnit0);
      assertTrue(boolean1);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertFalse(boolean1 == boolean0);
      
      actor0.shutdown();
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      ForkJoinPool forkJoinPool1 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool1);
      assertNotSame(forkJoinPool1, forkJoinPool0);
      assertFalse(forkJoinPool1.equals((Object)forkJoinPool0));
      
      ActorListener<Integer> actorListener1 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor1 = new Actor<Integer>(forkJoinPool0, actorListener1);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      
      actor1.shutdown();
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = actor1.shutdownNow(consumer0);
      assertEquals(0, int0);
      assertEquals(2, actor1.status());
      assertFalse(actor1.isFlushed());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      
      orderedExecutor0.shutdown(2073L, timeUnit0);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      
      int int1 = actor1.status();
      assertEquals(2, int1);
      assertEquals(2, actor1.status());
      assertFalse(actor1.isFlushed());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      assertFalse(int1 == int0);
      
      ActorListener<OrderedExecutor> actorListener2 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor2 = new Actor<OrderedExecutor>(orderedExecutor0, actorListener2);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertNotNull(actor2);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      
      boolean boolean2 = actor2.isFlushed();
      assertTrue(boolean2);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ActorListener<Callable<Object>> actorListener3 = (ActorListener<Callable<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<Object>> actor3 = new Actor<Callable<Object>>(forkJoinPool1, actorListener3);
      assertTrue(actor3.isFlushed());
      assertEquals(0, actor3.status());
      assertNotNull(actor3);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(forkJoinPool1.equals((Object)forkJoinPool0));
      
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      actor2.task(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
      
      boolean boolean3 = actor3.flush((-2719L), timeUnit1);
      assertTrue(boolean3);
      assertTrue(actor3.isFlushed());
      assertEquals(0, actor3.status());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertSame(timeUnit1, timeUnit0);
      assertNotSame(forkJoinPool1, forkJoinPool0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(forkJoinPool1.equals((Object)forkJoinPool0));
      
      actor2.task(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotSame(forkJoinPool0, forkJoinPool1);
      assertFalse(forkJoinPool0.equals((Object)forkJoinPool1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      Actor<Actor<Runnable>> actor0 = new Actor<Actor<Runnable>>((Executor) null, (ActorListener<Actor<Runnable>>) null);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = actor0.shutdownNow(consumer0);
      assertEquals(0, int0);
      assertFalse(actor0.isFlushed());
      assertEquals(2, actor0.status());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      boolean boolean0 = actor0.flush(0L, timeUnit0);
      assertFalse(boolean0);
      assertFalse(actor0.isFlushed());
      assertEquals(2, actor0.status());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      //  // Unstable assertion: assertNotNull(forkJoinPool0);
      
      boolean boolean0 = forkJoinPool0.hasQueuedSubmissions();
      //  // Unstable assertion: assertFalse(boolean0);
      
      forkJoinPool0.shutdown();
      boolean boolean1 = forkJoinPool0.isQuiescent();
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = forkJoinPool0.getFactory();
      //  // Unstable assertion: assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ActorListener<Integer> actorListener0 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor0 = new Actor<Integer>(forkJoinPool0, actorListener0);
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertNotNull(actor0);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      ActorListener<Object> actorListener1 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor1 = new Actor<Object>(forkJoinPool0, actorListener1);
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertNotNull(actor1);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor1.leave();
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      boolean boolean2 = actor1.inHandler();
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      int int0 = actor1.status();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      boolean boolean3 = actor0.isFlushed();
      //  // Unstable assertion: assertTrue(boolean3);
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertFalse(boolean3 == boolean2);
      //  // Unstable assertion: assertTrue(boolean3 == boolean1);
      //  // Unstable assertion: assertFalse(boolean3 == boolean0);
      
      ActorListener<Delayed> actorListener2 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor2 = new Actor<Delayed>(forkJoinPool0, actorListener2);
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertNotNull(actor2);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      int int1 = actor2.remaining();
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      Consumer<Delayed> consumer0 = (Consumer<Delayed>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int2 = actor2.shutdownNow(consumer0);
      //  // Unstable assertion: assertEquals(0, int2);
      //  // Unstable assertion: assertFalse(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(2, actor2.status());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertTrue(int2 == int1);
      //  // Unstable assertion: assertTrue(int2 == int0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int3 = actor2.shutdownNow(consumer1);
      //  // Unstable assertion: assertEquals(0, int3);
      //  // Unstable assertion: assertFalse(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(2, actor2.status());
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertTrue(int3 == int1);
      //  // Unstable assertion: assertTrue(int3 == int0);
      //  // Unstable assertion: assertTrue(int3 == int2);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      //  // Unstable assertion: assertFalse(orderedExecutor0.isFlushed());
      //  // Unstable assertion: assertEquals(2, orderedExecutor0.status());
      //  // Unstable assertion: assertEquals(0, orderedExecutor0.shutdownNow());
      //  // Unstable assertion: assertNotNull(orderedExecutor0);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      MockThread mockThread0 = new MockThread();
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      Thread[] threadArray0 = new Thread[0];
      int int4 = MockThread.enumerate(threadArray0);
      //  // Unstable assertion: assertEquals(0, int4);
      //  // Unstable assertion: assertEquals(0, threadArray0.length);
      //  // Unstable assertion: assertTrue(int4 == int3);
      //  // Unstable assertion: assertTrue(int4 == int1);
      //  // Unstable assertion: assertTrue(int4 == int0);
      //  // Unstable assertion: assertTrue(int4 == int2);
      
      // Undeclared exception!
      try { 
        orderedExecutor0.execute(mockThread0);
       //  fail("Expecting exception: RejectedExecutionException");
       // Unstable assertion
      } catch(RejectedExecutionException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      //  // Unstable assertion: assertNotNull(forkJoinPool0);
      
      long long0 = forkJoinPool0.getStealCount();
      //  // Unstable assertion: assertEquals(78L, long0);
      
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      List<Runnable> list0 = forkJoinPool0.shutdownNow();
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertNotNull(list0);
      
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, actorListener0);
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertNotNull(actor0);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      boolean boolean0 = actor0.inHandler();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor0.enter();
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = actor0.shutdownNow(consumer0);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(2, actor0.status());
      //  // Unstable assertion: assertFalse(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      ActorListener<OrderedExecutor> actorListener1 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener1);
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertNotNull(actor1);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      int int1 = actor1.status();
      //  // Unstable assertion: assertEquals(0, int1);
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean1 = actor1.flush((-2854L), timeUnit0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      ActorListener<Callable<Object>> actorListener2 = (ActorListener<Callable<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<Object>> actor2 = new Actor<Callable<Object>>(forkJoinPool0, actorListener2);
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertNotNull(actor2);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      int int2 = actor1.remaining();
      //  // Unstable assertion: assertEquals(0, int2);
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertTrue(int2 == int0);
      //  // Unstable assertion: assertTrue(int2 == int1);
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      actor1.shutdown();
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      actor2.shutdown(0L, timeUnit2);
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertSame(timeUnit2, timeUnit1);
      //  // Unstable assertion: assertFalse(timeUnit2.equals((Object)timeUnit0));
      
      boolean boolean2 = actor1.flush(1, timeUnit1);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertSame(timeUnit1, timeUnit2);
      //  // Unstable assertion: assertFalse(timeUnit1.equals((Object)timeUnit0));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      TimeUnit timeUnit3 = TimeUnit.MILLISECONDS;
      actor2.shutdown((long) 0, timeUnit3);
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertFalse(timeUnit3.equals((Object)timeUnit1));
      //  // Unstable assertion: assertFalse(timeUnit3.equals((Object)timeUnit0));
      //  // Unstable assertion: assertFalse(timeUnit3.equals((Object)timeUnit2));
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int3 = actor2.shutdownNow(consumer1);
      //  // Unstable assertion: assertEquals(0, int3);
      //  // Unstable assertion: assertFalse(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(2, actor2.status());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertTrue(int3 == int2);
      //  // Unstable assertion: assertTrue(int3 == int0);
      //  // Unstable assertion: assertTrue(int3 == int1);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      //  // Unstable assertion: assertEquals(2, orderedExecutor0.status());
      //  // Unstable assertion: assertEquals(0, orderedExecutor0.shutdownNow());
      //  // Unstable assertion: assertFalse(orderedExecutor0.isFlushed());
      //  // Unstable assertion: assertNotNull(orderedExecutor0);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      //  // Unstable assertion: assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      //  // Unstable assertion: assertNotNull(mockThread1);
      //  // Unstable assertion: assertFalse(mockThread1.equals((Object)mockThread0));
      
      orderedExecutor0.doTask(mockThread1);
      //  // Unstable assertion: assertEquals(2, orderedExecutor0.status());
      //  // Unstable assertion: assertEquals(0, orderedExecutor0.shutdownNow());
      //  // Unstable assertion: assertFalse(orderedExecutor0.isFlushed());
      //  // Unstable assertion: assertEquals(0, mockThread0.countStackFrames());
      //  // Unstable assertion: assertFalse(mockThread0.isInterrupted());
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread1.isDaemon());
      //  // Unstable assertion: assertFalse(mockThread1.isInterrupted());
      //  // Unstable assertion: assertEquals(0, mockThread1.countStackFrames());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertNotSame(mockThread0, mockThread1);
      //  // Unstable assertion: assertNotSame(mockThread1, mockThread0);
      //  // Unstable assertion: assertFalse(mockThread0.equals((Object)mockThread1));
      //  // Unstable assertion: assertFalse(mockThread1.equals((Object)mockThread0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      //  // Unstable assertion: assertNotNull(scheduledThreadPoolExecutor0);
      
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(scheduledThreadPoolExecutor0, actorListener0);
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertNotNull(actor0);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      Callable<Callable<OrderedExecutor>> callable0 = (Callable<Callable<OrderedExecutor>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<Callable<OrderedExecutor>> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 0, timeUnit0);
      //  // Unstable assertion: assertNotNull(scheduledFuture0);
      
      actor0.shutdown();
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      actor0.shutdown((long) 0, timeUnit1);
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      actor0.shutdown();
      //  // Unstable assertion: assertEquals(0, actor0.status());
      //  // Unstable assertion: assertTrue(actor0.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(scheduledThreadPoolExecutor0);
      //  // Unstable assertion: assertNotNull(artemisExecutor0);
      
      ActorListener<Integer> actorListener1 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor1 = new Actor<Integer>(artemisExecutor0, actorListener1);
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertNotNull(actor1);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      actor1.doTask((Integer) 1);
      //  // Unstable assertion: assertTrue(actor1.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor1.status());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      ActorListener<String> actorListener2 = (ActorListener<String>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<String> actor2 = new Actor<String>(artemisExecutor0, actorListener2);
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertNotNull(actor2);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      actor2.act("VLM<?aN(,P1z1");
      //  // Unstable assertion: assertEquals(1, actor2.status());
      //  // Unstable assertion: assertFalse(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      actor2.task("");
      //  // Unstable assertion: assertTrue(actor2.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor2.status());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      Actor<Delayed> actor3 = new Actor<Delayed>(artemisExecutor0, (ActorListener<Delayed>) null);
      //  // Unstable assertion: assertTrue(actor3.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor3.status());
      //  // Unstable assertion: assertNotNull(actor3);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      actor3.shutdown((long) 0, timeUnit2);
      //  // Unstable assertion: assertTrue(actor3.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor3.status());
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertFalse(timeUnit2.equals((Object)timeUnit0));
      //  // Unstable assertion: assertFalse(timeUnit2.equals((Object)timeUnit1));
      
      ActorListener<Callable<OrderedExecutor>> actorListener3 = (ActorListener<Callable<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<OrderedExecutor>> actor4 = new Actor<Callable<OrderedExecutor>>(scheduledThreadPoolExecutor0, actorListener3);
      //  // Unstable assertion: assertEquals(0, actor4.status());
      //  // Unstable assertion: assertTrue(actor4.isFlushed());
      //  // Unstable assertion: assertNotNull(actor4);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor4.shutdown();
      //  // Unstable assertion: assertEquals(0, actor4.status());
      //  // Unstable assertion: assertTrue(actor4.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      ActorListener<Object> actorListener4 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor5 = new Actor<Object>(artemisExecutor0, actorListener4);
      //  // Unstable assertion: assertTrue(actor5.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor5.status());
      //  // Unstable assertion: assertNotNull(actor5);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      actor5.doTask(actor4);
      //  // Unstable assertion: assertEquals(0, actor4.status());
      //  // Unstable assertion: assertTrue(actor4.isFlushed());
      //  // Unstable assertion: assertTrue(actor5.isFlushed());
      //  // Unstable assertion: assertEquals(0, actor5.status());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      Actor<Callable<Object>> actor6 = new Actor<Callable<Object>>(artemisExecutor0, (ActorListener<Callable<Object>>) null);
      //  // Unstable assertion: assertEquals(0, actor6.status());
      //  // Unstable assertion: assertTrue(actor6.isFlushed());
      //  // Unstable assertion: assertNotNull(actor6);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      int int0 = actor6.remaining();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(0, actor6.status());
      //  // Unstable assertion: assertTrue(actor6.isFlushed());
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(artemisExecutor0);
      //  // Unstable assertion: assertEquals(2, orderedExecutor0.status());
      //  // Unstable assertion: assertEquals(0, orderedExecutor0.shutdownNow());
      //  // Unstable assertion: assertFalse(orderedExecutor0.isFlushed());
      //  // Unstable assertion: assertNotNull(orderedExecutor0);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      String string0 = orderedExecutor0.toString();
      //  // Unstable assertion: assertEquals("OrderedExecutor(tasks=[])", string0);
      //  // Unstable assertion: assertEquals(2, orderedExecutor0.status());
      //  // Unstable assertion: assertEquals(0, orderedExecutor0.shutdownNow());
      //  // Unstable assertion: assertFalse(orderedExecutor0.isFlushed());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      //  // Unstable assertion: assertEquals(1, ProcessorBase.STATE_RUNNING);
      //  // Unstable assertion: assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(441, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ActorListener<String> actorListener0 = (ActorListener<String>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<String> actor0 = new Actor<String>(scheduledThreadPoolExecutor0, actorListener0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      actor0.act("[b}Nj^$|W3LAwkei%[1");
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      
      ActorListener<Delayed> actorListener1 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor1 = new Actor<Delayed>(scheduledThreadPoolExecutor0, actorListener1);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      assertNotNull(actor1);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      actor1.shutdown(952L, timeUnit0);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      Delayed delayed0 = delayQueue0.poll((-4143L), timeUnit1);
      assertNull(delayed0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      
      // Undeclared exception!
      try { 
        actor1.task((Delayed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentLinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      assertNotNull(forkJoinPool0);
      
      ActorListener<Integer> actorListener0 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor0 = new Actor<Integer>(forkJoinPool0, actorListener0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertNotNull(actor0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = actor0.flush(2, timeUnit0);
      assertTrue(boolean0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      ActorListener<Callable<Object>> actorListener1 = (ActorListener<Callable<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<Object>> actor1 = new Actor<Callable<Object>>(forkJoinPool0, actorListener1);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      
      int int0 = actor1.remaining();
      assertEquals(0, int0);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory("x", true);
      assertNotNull(defaultThreadFactory0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, defaultThreadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ActorListener<Delayed> actorListener0 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor0 = new Actor<Delayed>(scheduledThreadPoolExecutor0, actorListener0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      
      boolean boolean0 = actor0.isFlushed();
      assertTrue(boolean0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>((Executor) null, actorListener0);
      actor0.isFlushed();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor((Executor) null);
      assertEquals(0, orderedExecutor0.status());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "A17ZSK");
      // Undeclared exception!
      try { 
        orderedExecutor0.execute(mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.actors.ProcessorBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 1509, 0, timeUnit0, priorityBlockingQueue0);
      Actor<Delayed> actor0 = new Actor<Delayed>(threadPoolExecutor0, (ActorListener<Delayed>) null);
      actor0.remaining();
      assertEquals(0, actor0.status());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-390);
      int int1 = (-1);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      int int2 = 30;
      Class<String> class0 = String.class;
      DefaultThreadFactory defaultThreadFactory0 = null;
      try {
        defaultThreadFactory0 = new DefaultThreadFactory(class0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // priority: 0 (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)
         //
         verifyException("io.netty.util.concurrent.DefaultThreadFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      forkJoinPool0.awaitQuiescence(0L, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      forkJoinPool0.awaitQuiescence(0L, timeUnit1);
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, actorListener0);
      actor0.status();
      Actor<Actor<Callable<Object>>> actor1 = new Actor<Actor<Callable<Object>>>(forkJoinPool0, (ActorListener<Actor<Callable<Object>>>) null);
      ActorListener<Callable<Object>> actorListener1 = (ActorListener<Callable<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      forkJoinPool0.isQuiescent();
      Actor<Callable<Object>> actor2 = new Actor<Callable<Object>>(forkJoinPool0, actorListener1);
      actor2.leave();
      actor1.task(actor2);
      Actor<String> actor3 = new Actor<String>(forkJoinPool0, (ActorListener<String>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      actor3.shutdownNow(consumer0);
      ActorListener<Integer> actorListener2 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor4 = new Actor<Integer>(forkJoinPool0, actorListener2);
      actor4.doTask((Integer) 0);
      actor3.shutdown();
      int int0 = actor0.status();
      assertEquals(0, int0);
      
      boolean boolean0 = actor3.isFlushed();
      assertEquals(2, actor3.status());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-4569), threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1222), (RejectedExecutionHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Executor executor0 = null;
      ActorListener<Actor<Object>> actorListener0 = (ActorListener<Actor<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<Object>> actor0 = new Actor<Actor<Object>>((Executor) null, actorListener0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      actor0.shutdownNow(consumer0);
      ActorListener<Object> actorListener1 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor1 = new Actor<Object>((Executor) null, actorListener1);
      actor0.task(actor1);
      ActorListener<String> actorListener2 = (ActorListener<String>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<String> actor2 = new Actor<String>((Executor) null, actorListener2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        actor1.act(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.actors.ProcessorBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Actor<Actor<String>> actor0 = new Actor<Actor<String>>(forkJoinPool0, (ActorListener<Actor<String>>) null);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      actor0.shutdown(0L, timeUnit0);
      assertTrue(actor0.isFlushed());
  }
}
