/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:15:10 GMT 2022
 */

package org.apache.activemq.artemis.core.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.core.server.ActiveMQComponent;
import org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent;
import org.apache.activemq.artemis.core.server.NetworkHealthCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NetworkHealthCheck_ESTest extends NetworkHealthCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 40L, (-2572));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("-,%REP");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-2572), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setTimeUnit((TimeUnit) null);
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("&)P6,jp:RVbZ(");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.setPeriod(0L);
      networkHealthCheck0.run();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertTrue(networkHealthCheck0.isEmpty());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("iYV7~Zi{\u0007=", 0L, 277);
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("iYV7~Zi{\u0007=");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("executing ping:: ", 2308L, (-17));
      networkHealthCheck0.start();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals((-17), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("'-S![cPy$&o-|rC&r%E", 0L, 5);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      networkHealthCheck1.setTimeUnit(timeUnit0);
      assertFalse(networkHealthCheck0.isEmpty());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("F!8P/D!V+9", (-721L), 0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      networkHealthCheck0.setInitialDelayAndPeriod(1L, (-155L), timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("executing ping:: ", 2308L, (-17));
      networkHealthCheck0.start();
      networkHealthCheck0.setPeriod(2308L);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("!7x?UrtQcEZk-)Hy", 2704L, (-1143));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setPeriod(2704L);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, (-2572));
      networkHealthCheck0.parseAddressList("=&");
      networkHealthCheck0.setPeriod((long) (-2572));
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("V.35n{,8van8^{8", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod((long) 0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelay(0L);
      networkHealthCheck1.setPeriod(1468L);
      assertEquals(1468L, networkHealthCheck1.getPeriod());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("!7x?UrtQcEZk-)Hy", 2704L, (-1143));
      networkHealthCheck0.setInitialDelayAndPeriod(2704L, 2704L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(2704L);
      assertEquals((-1143), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(2704L, networkHealthCheck1.getPeriod());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck1.run();
      networkHealthCheck0.setNetworkTimeout(1000);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("AMQ202009: Failed to check Url list {0}.", (-1590L), (-317));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.setNetworkTimeout(2159);
      assertEquals(2159, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 184L, 0);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout(0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 0L, timeUnit0);
      networkHealthCheck0.setNetworkTimeout(0);
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      networkHealthCheck0.setInitialDelay(1332);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout(1332);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1332, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1796L, 6);
      networkHealthCheck0.start();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(6, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setNICName("P< .>`uA");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      networkHealthCheck0.parseAddressList("log");
      networkHealthCheck0.setNICName("org.jboss.logmanager.useThreadLocalFilter");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("purePing on canonical address ");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setNetworkTimeout((-2007));
      networkHealthCheck0.setNICName("ping -c 1 -t %d %s");
      assertEquals((-2007), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("~JMe24pL");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(899L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName(",");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("<=..`@(k", 1838L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("07q'bg");
      networkHealthCheck1.addComponent(networkHealthCheck0);
      networkHealthCheck1.setIpv6Command("07q'bg");
      assertEquals("07q'bg", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("?", (-3748L), 1);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.setIpv6Command("AMQ202014: Unable to encode byte array into Base64 notation.");
      assertEquals("AMQ202014: Unable to encode byte array into Base64 notation.", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("'-S![cPy$&o-|rC&r%E", 0L, 5);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      networkHealthCheck1.setIpv6Command("ping -c 1 -t %d %s");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("xxv>S", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 2732L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv6Command("ping6 -c 1 %2$s");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("?", (-3748L), 1);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(1L, (-1L));
      networkHealthCheck1.setIpv6Command("AMQ202014: Unable to encode byte array into Base64 notation.");
      assertEquals("AMQ202014: Unable to encode byte array into Base64 notation.", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      networkHealthCheck1.addComponent(networkHealthCheck0);
      networkHealthCheck1.setIpv4Command((String) null);
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setIpv4Command("Kd$=onnLdhacRn9)^F");
      assertEquals("Kd$=onnLdhacRn9)^F", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1), (-6));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command("ping -c 1 -t %d %s");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-6), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("xxv>S", 0L, 0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command("MhMGsc@8H7^");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      networkHealthCheck0.setIpv4Command("Kd$=onnLdhacRn9)^F");
      assertEquals("Kd$=onnLdhacRn9)^F", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 870L, (-611));
      networkHealthCheck0.setInitialDelayAndPeriod(870L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command("ping -c 1 -t %d %s");
      assertEquals((-611), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1796L, 6);
      networkHealthCheck0.start();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(false);
      assertEquals(6, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("org.apache.activemq.artemis.core.server.NetworkHealthCheck");
      networkHealthCheck1.setIgnoreLoopback(true);
      assertFalse(networkHealthCheck0.isEmpty());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("xxv>S", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(false);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 1000);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(4035L, 0L, timeUnit0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      URL uRL0 = MockURL.getFtpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.removeURL(uRL0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("log");
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck1.removeURL(uRL0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("purePing on canonical address ", (-63L), (-854));
      URL uRL0 = MockURL.getFtpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals((-854), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("xxv>S", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 2732L, timeUnit0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("ping6 -c 1 %2$s", "#AoPzO", 0, "en-UK", uRLStreamHandler0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.removeURL(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
      assertEquals(0, networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 1000);
      URL uRL0 = MockURL.getHttpExample();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(4035L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck0.start();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      networkHealthCheck1.removeAddress(inetAddress0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("'-S![cPy$&o-|rC&r%E", 0L, 5);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      networkHealthCheck0.removeAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("V.35n{,8van8^{8", 0L, 0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 870L, (-611));
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals((-611), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck0.setInitialDelay(0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      networkHealthCheck0.setInitialDelayAndPeriod(1L, (-155L), timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("ping6 -c 1 %2$s");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("?", (-3748L), 1);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.parseURIList("J=-|\u0007Dh3#)}(?9q");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 184L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("?", (-3748L), 1);
      networkHealthCheck0.setInitialDelayAndPeriod(1L, (-1L));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("J=-|\u0007Dh3#)}(?9q");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("!7x?UrtQcEZk-)Hy", 2704L, (-1143));
      networkHealthCheck0.start();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("");
      assertEquals((-1143), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertTrue(networkHealthCheck1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      networkHealthCheck0.parseAddressList("org.apache.activemq.artemis.core.server.NetworkHealthCheck");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("!7x?UrtQcEZk-)Hy", 2704L, (-1143));
      networkHealthCheck0.setInitialDelayAndPeriod(2704L, 2704L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("");
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-1143), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, (-2572));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      boolean boolean0 = networkHealthCheck0.isIgnoreLoopback();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 184L, 0);
      networkHealthCheck0.getThreadFactory();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 184L, 0);
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals(0, int0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, (-2572));
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals((-2572), int0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1), (-6));
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      
      networkHealthCheck0.setIpv6Command((String) null);
      String string0 = networkHealthCheck0.getIpv6Command();
      assertEquals((-6), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertNull(string0);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      
      networkHealthCheck0.setIpv6Command("");
      networkHealthCheck0.getIpv6Command();
      assertEquals("", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command((String) null);
      String string0 = networkHealthCheck1.getIpv4Command();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertNull(string0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 1);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      networkHealthCheck0.setIpv4Command("");
      networkHealthCheck0.getIpv4Command();
      assertEquals("", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 1000);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearURL();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("q'dsPDV{Uubs??_vLz", (-1477L), 3);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("q'dsPDV{Uubs??_vLz");
      networkHealthCheck1.clearURL();
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("p}5;0`l&U\"IZ.D ", (-900L), (-1));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-1), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("xxv>S", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 2732L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 1000);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(4035L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("<=..`@(k", 1838L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("07q'bg");
      networkHealthCheck1.addComponent(networkHealthCheck1);
      networkHealthCheck0.clearComponents();
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.clearComponents();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1), (-6));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-6), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      networkHealthCheck0.setInitialDelay(1332);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1332, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      networkHealthCheck0.clearAddresses();
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearAddresses();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setNetworkTimeout(0);
      networkHealthCheck0.clearAddresses();
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1), (-6));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-6), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 1);
      networkHealthCheck0.setInitialDelayAndPeriod((long) 1, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "ping -c 1 -t %d %s");
      URL uRL0 = MockURL.getHttpExample();
      boolean boolean0 = networkHealthCheck0.check(uRL0);
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.addURL(uRL0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 184L, 0);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("yZ_^-Hd< P", 0L, (-407));
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.clearAddresses();
      assertEquals((-407), networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getHttpExample();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("log", (-1L), 1332);
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.setInitialDelay(1332);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1332, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("!7x?UrtQcEZk-)Hy", 2704L, (-1143));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.addComponent(networkHealthCheck0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertFalse(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("!7x?UrtQcEZk-)Hy", 2704L, (-1143));
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(2704L, 2704L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(activeMQScheduledComponent0);
      assertFalse(networkHealthCheck1.isStarted());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-1143), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("%#N0DYDF=", 1279L, 22);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("ping6 -c 1 %2$s", "%#N0DYDF=", 22, "%#N0DYDF=", uRLStreamHandler0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.addComponent(networkHealthCheck1);
      networkHealthCheck2.addAddress(inetAddress0);
      assertTrue(networkHealthCheck0.isStarted());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 870L, (-611));
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.setInitialDelayAndPeriod(870L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-611), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      // Undeclared exception!
      try { 
        networkHealthCheck0.setTimeUnit((TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.run();
      // Undeclared exception!
      try { 
        networkHealthCheck0.setPeriod(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.removeURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.removeAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIpv4Command("%'q.AI.pproVm{PH,");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing(inetAddress0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("=?tL|`<8THoyfl%flU", 0L, 759);
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      networkHealthCheck0.setIpv4Command("=?tL|`<8THoyfl%flU");
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing(inetAddress0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.Long
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("q'dsPDV{Uubs??_vLz", (-1477L), 3);
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.setIpv4Command(" ");
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing(inetAddress0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.lang.ProcessBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("y", 0L, 1);
      networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addURL(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addComponent((ActiveMQComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, (-1977));
      networkHealthCheck0.parseAddressList(" OK");
      // Undeclared exception!
      try { 
        networkHealthCheck0.addComponent(networkHealthCheck0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1L), 40);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((-1L), 0L);
      networkHealthCheck0.addComponent(networkHealthCheck1);
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        networkHealthCheck1.addAddress(inet4Address0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getFtpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("A1Qt:Pxnl8+FpkAYp]", (-1038L), (-13));
      assertTrue(networkHealthCheck0.isEmpty());
      
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 1);
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertEquals(1, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("?", (-3748L), 1);
      URL uRL0 = MockURL.getFileExample();
      boolean boolean0 = networkHealthCheck0.check(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(1, networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 1);
      boolean boolean0 = networkHealthCheck0.check((URL) null);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(boolean0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 870L, (-611));
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      boolean boolean0 = networkHealthCheck0.check(inetAddress0);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(boolean0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals((-611), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setNetworkTimeout((-626));
      boolean boolean0 = networkHealthCheck0.check((InetAddress) null);
      assertEquals((-626), networkHealthCheck0.getNetworkTimeout());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 1);
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = InetAddress.getByAddress(byteArray0);
      boolean boolean0 = networkHealthCheck0.check(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertTrue(boolean0);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "ping6 -c 1 %2$s");
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, (-2572));
      assertTrue(networkHealthCheck0.isEmpty());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("=&");
      boolean boolean0 = networkHealthCheck1.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1796L, 6);
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(6, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" OK", 0L, 1000);
      assertTrue(networkHealthCheck0.isEmpty());
      
      networkHealthCheck0.parseAddressList("org.apache.activemq.artemis.core.server.NetworkHealthCheck");
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("F!8P/D!V+9", (-721L), 0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("%#N0DYDF=", 1279L, 22);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName((String) null);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, 0L, (-2186));
      // Undeclared exception!
      try { 
        networkHealthCheck0.addAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck1.addURL(uRL0);
      assertTrue(networkHealthCheck1.isStarted());
      
      networkHealthCheck1.run();
      assertFalse(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("A1Qt:Pxnl8+FpkAYp]", (-1038L), (-13));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      assertTrue(networkHealthCheck1.isEmpty());
      
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      networkHealthCheck2.run();
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("StG/=ag~f-,3");
      networkHealthCheck1.addComponent(networkHealthCheck1);
      networkHealthCheck0.run();
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.run();
      assertTrue(networkHealthCheck0.isStarted());
      
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.parseAddressList("NetworkChecker");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList((String) null);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("?", (-3748L), 1);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList((String) null);
      assertEquals(1, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getNICName();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("%#N0DYDF=", 1279L, 22);
      String string0 = networkHealthCheck0.getIpv6Command();
      assertEquals("ping6 -c 1 %2$s", string0);
      assertEquals(22, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 870L, (-611));
      String string0 = networkHealthCheck0.getIpv4Command();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals((-611), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getUrls();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getAddresses();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals(1000, int0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 40L, (-2572));
      boolean boolean0 = networkHealthCheck0.isIgnoreLoopback();
      assertFalse(boolean0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals((-2572), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }
}
