/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:20:46 GMT 2022
 */

package org.apache.activemq.artemis.core.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.URL;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.core.server.ActiveMQComponent;
import org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent;
import org.apache.activemq.artemis.core.server.NetworkHealthCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NetworkHealthCheck_ESTest extends NetworkHealthCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("h+&PB<,");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.run();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertTrue(networkHealthCheck0.isEmpty());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(2, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.addComponent(networkHealthCheck0);
      networkHealthCheck2.parseAddressList("AMQ201001: Network is unhealthy, stopping service {0}");
      assertFalse(networkHealthCheck2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1217L, 711);
      InetAddress inetAddress0 = MockInetAddress.getByName("x");
      networkHealthCheck0.addAddress(inetAddress0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" ", (-1448L), 2015);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(2015, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Nb8uA.wJoxE", 1L, (-4173));
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals((-4173), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, (long) 0, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 2, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals(2, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      networkHealthCheck1.setPeriod(141L);
      assertEquals(141L, networkHealthCheck1.getPeriod());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 2);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setPeriod(0L);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1L), 1000);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod((-1L));
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-1L), networkHealthCheck1.getPeriod());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("h3+e(EEY ?@{", 0L, 2307);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout((-691));
      networkHealthCheck1.setPeriod(0L);
      assertEquals((-691), networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.apache.activemq.artemis.core.server.NetworkHealthCheck$1", 0L, 2010);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      networkHealthCheck0.setPeriod(1452L);
      assertEquals(1452L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("w*@E", 2107L, 0);
      networkHealthCheck0.setInitialDelayAndPeriod(2107L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod((long) 0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setNetworkTimeout(3);
      assertEquals(3, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2091L), (-3774));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout((-3774));
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-3774), networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("uN(_c0).[.'&naMA~J", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout(0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((long) 0, (long) 0, timeUnit0);
      networkHealthCheck1.setNetworkTimeout((-117));
      assertEquals((-117), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 44, (long) 44, timeUnit0);
      networkHealthCheck0.setNetworkTimeout((-949));
      assertEquals((-949), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      networkHealthCheck1.setNICName("ping -c 1 -t %d %s");
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 2);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setNICName("ping6 -c 1 %2$s");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("+uq!FrqFQ#@", 0L, (-261));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("+uq!FrqFQ#@");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-261), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Network-Checker-", (-3131L), 1000);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("%\"UZkgmaA0i,ZN_Y`");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 4259L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("ping -c 1 -t %d %s");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("ping -c 1 -t %d %s");
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-1784L), (-10));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(1L, 3837L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-10), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((-1802L), (long) 2, timeUnit0);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck1.addURL(uRL0);
      networkHealthCheck0.setIpv6Command("v");
      assertEquals("v", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.setIpv6Command("");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      networkHealthCheck0.setIpv6Command("v");
      assertEquals("v", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      networkHealthCheck0.setIpv6Command("cRRY<$c%pKI");
      assertEquals("cRRY<$c%pKI", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(0L);
      networkHealthCheck0.setIpv6Command("WPdlT");
      assertEquals("WPdlT", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      networkHealthCheck0.setInitialDelayAndPeriod((long) 2, 0L);
      networkHealthCheck0.setIpv6Command("ping -c 1 -t %d %s");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((-1802L), (long) 2, timeUnit0);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck1.addAddress(inetAddress0);
      networkHealthCheck0.setIpv4Command((String) null);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setIpv4Command("");
      assertEquals("", networkHealthCheck0.getIpv4Command());
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck0.addAddress(inetAddress0);
      networkHealthCheck0.setIpv4Command((String) null);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, (long) 0, timeUnit0);
      networkHealthCheck0.setIpv4Command(" ");
      assertEquals(" ", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-1784L), (-10));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(1L, 3837L, timeUnit0);
      networkHealthCheck0.setIpv4Command("ping6 -c 1 %2$s");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      networkHealthCheck0.setIgnoreLoopback(true);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 4259L, 0);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelay(0L);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(3614L, 195L);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("P@(9T2pAaZA/2X7u\"", (-843L), (-37));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.removeURL(uRL0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck1.removeURL(uRL0);
      assertFalse(networkHealthCheck0.isEmpty());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 2);
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(2, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Q-", (-1864L), 0);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(0L);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 44, (long) 44, timeUnit0);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.addAddress(inetAddress0);
      networkHealthCheck2.removeAddress(inetAddress0);
      assertTrue(networkHealthCheck1.isStarted());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("NetworkChecker", (-2045L), (-203));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      networkHealthCheck1.removeAddress(inetAddress0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.parseAddressList("fvY3^lhN?7");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      networkHealthCheck0.removeAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(">+y|3j1+=", 1L, 0);
      InetAddress inetAddress0 = MockInetAddress.getByName("svhfq&M1f]Xu");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-1784L), (-10));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(1L, 3837L, timeUnit0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-10), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      NetworkHealthCheck networkHealthCheck2 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((-1802L), (long) 2, timeUnit0);
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck1.addAddress(inet4Address0);
      networkHealthCheck2.parseURIList("=<_tswu");
      assertFalse(networkHealthCheck2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.parseURIList("&_f+yk<wxOp0d%X[2@k");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck0.addAddress(inetAddress0);
      networkHealthCheck0.parseURIList("=<_tswu");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("P@(9T2pAaZA/2X7u\"", (-843L), (-37));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("org.jboss.logging.Slf4jLogger");
      assertEquals((-37), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, (long) 0, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("cRRY<$c%pKI");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Network-Checker-", (-1876L), 40);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((long) 40, 0L);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.parseURIList("Network-Checker-");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals(40, networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("w*@E", 2107L, 0);
      networkHealthCheck0.parseAddressList("'b t{Jii@\"zB1OC");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Nb8uA.wJoxE", 1L, (-4173));
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 4678L, timeUnit0);
      networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelayAndPeriod(3614L, 195L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList(",");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertTrue(networkHealthCheck1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      boolean boolean0 = networkHealthCheck0.isIgnoreLoopback();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getThreadFactory();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(1000, int0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("noSQ;P", 0L, (-3132));
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals((-3132), int0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2091L), (-3774));
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv6Command((String) null);
      String string0 = networkHealthCheck1.getIpv6Command();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertNull(string0);
      assertEquals((-3774), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("NetworkChecker", (-2045L), (-203));
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      
      networkHealthCheck0.setIpv6Command("");
      networkHealthCheck0.getIpv6Command();
      assertEquals("", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1L), 1000);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      networkHealthCheck0.setIpv4Command((String) null);
      String string0 = networkHealthCheck0.getIpv4Command();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 24L, 2);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.run();
      networkHealthCheck1.clearURL();
      assertTrue(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1L), 1000);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.clearURL();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("NetworkChecker", (-2045L), (-203));
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      networkHealthCheck0.clearURL();
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, (long) 0, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" ", (-1448L), 2015);
      networkHealthCheck0.setInitialDelay(1L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(2015, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("rU]Vg5klTnqWr");
      networkHealthCheck0.clearComponents();
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearComponents();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", 2, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2091L), (-3774));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-3774), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.apache.activemq.artemis.core.server.NetworkHealthCheck$1", 0L, 2010);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(2010, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Network-Checker-", (-1876L), 40);
      networkHealthCheck0.setInitialDelayAndPeriod((long) 40, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(40, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("rU]Vg5klTnqWr");
      networkHealthCheck1.clearAddresses();
      assertTrue(networkHealthCheck0.isStarted());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearAddresses();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(" could not be instantiated", (-1692), 2);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(2, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("+uq!FrqFQ#@", 0L, (-261));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-261), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 0, (long) 0, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Network-Checker-", (-1876L), 40);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((long) 40, 0L);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.clearAddresses();
      assertEquals(40, networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3070L), 0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "4Ba4GfOQB}~2QEt");
      URL uRL0 = MockURL.getHttpExample();
      boolean boolean0 = networkHealthCheck0.check(uRL0);
      assertTrue(boolean0);
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      networkHealthCheck1.removeURL(uRL0);
      assertTrue(networkHealthCheck0.isStarted());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", 1949L, (-1));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("h3+e(EEY ?@{", 0L, 2307);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(2307, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2091L), (-3774));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals((-3774), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(0L);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-1784L), (-10));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(1L, 3837L, timeUnit0);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.addURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
      assertEquals((-10), networkHealthCheck2.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("P@(9T2pAaZA/2X7u\"", (-843L), (-37));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.addComponent(networkHealthCheck0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1217L, 711);
      InetAddress inetAddress0 = MockInetAddress.getByName("x");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      networkHealthCheck0.addComponent(networkHealthCheck1);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Q-", (-1864L), 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(activeMQScheduledComponent0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Network-Checker-", (-1876L), 40);
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod((long) 40, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(activeMQScheduledComponent0);
      assertEquals(40, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-1L), (-1524));
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("w*@E", 2107L, 0);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping -c 1 -t %d %s");
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.apache.activemq.artemis.core.server.NetworkHealthCheck$1", 0L, 2010);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      assertEquals(2010, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod((long) 44, (long) 44, timeUnit0);
      Inet4Address inet4Address0 = (Inet4Address)MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck1.addAddress(inet4Address0);
      assertFalse(networkHealthCheck1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      // Undeclared exception!
      try { 
        networkHealthCheck0.setPeriod(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.removeAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      networkHealthCheck0.setIpv4Command("!>7)3)({Dn*9%)`l/");
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing(inetAddress0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ')'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIpv4Command(" ");
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing(inetAddress0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.lang.ProcessBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck1.setPeriod(0L);
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addURL(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addComponent((ActiveMQComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      // Undeclared exception!
      try { 
        networkHealthCheck0.addComponent(networkHealthCheck1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      networkHealthCheck1.addComponent(networkHealthCheck0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        networkHealthCheck1.addAddress(inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, 1000L, 640);
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("v", 0L, 2);
      assertTrue(networkHealthCheck0.isEmpty());
      
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck0.addAddress(inetAddress0);
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertTrue(boolean0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("noSQ;P", 0L, (-3132));
      URL uRL0 = MockURL.getFileExample();
      boolean boolean0 = networkHealthCheck0.check(uRL0);
      assertFalse(boolean0);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals((-3132), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      boolean boolean0 = networkHealthCheck0.check((URL) null);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(boolean0);
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("P@(9T2pAaZA/2X7u\"", (-843L), (-37));
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      boolean boolean0 = networkHealthCheck0.check(inetAddress0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertFalse(boolean0);
      assertEquals((-37), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.apache.activemq.artemis.core.server.NetworkHealthCheck$1", 0L, 2010);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      boolean boolean0 = networkHealthCheck0.check(inetAddress0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(2010, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("h3+e(EEY ?@{", 0L, 2307);
      assertTrue(networkHealthCheck0.isEmpty());
      
      networkHealthCheck0.parseAddressList("$F/${Y^u");
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      boolean boolean0 = networkHealthCheck0.check();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIgnoreLoopback(true);
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, 1000L, 640);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName((String) null);
      assertEquals(640, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("*?}CO>q@M", 0L, (-37));
      boolean boolean0 = networkHealthCheck0.check((InetAddress) null);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals((-37), networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertFalse(boolean0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("w*@E", 2107L, 0);
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.addURL(uRL0);
      networkHealthCheck0.run();
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck0.addComponent(networkHealthCheck1);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck3 = networkHealthCheck2.addAddress(inetAddress0);
      NetworkHealthCheck networkHealthCheck4 = networkHealthCheck3.setNetworkTimeout((-949));
      networkHealthCheck4.run();
      assertEquals((-949), networkHealthCheck3.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.addAddress(inetAddress0);
      NetworkHealthCheck networkHealthCheck3 = networkHealthCheck2.setNetworkTimeout((-949));
      networkHealthCheck3.run();
      assertEquals((-949), networkHealthCheck2.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "ping6 -c 1 %2$s");
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("+uq!FrqFQ#@", 812L, (-896));
      assertTrue(networkHealthCheck0.isEmpty());
      
      networkHealthCheck0.parseAddressList("\"gpj");
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList((String) null);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2091L), (-3774));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("");
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-3774), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList((String) null);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getNICName();
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("w*@E", 2107L, 0);
      String string0 = networkHealthCheck0.getIpv6Command();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", string0);
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      String string0 = networkHealthCheck0.getIpv4Command();
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      networkHealthCheck0.setIpv4Command("");
      networkHealthCheck0.getIpv4Command();
      assertEquals("", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(false);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.removeURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getUrls();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getAddresses();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("uN(_c0).[.'&naMA~J", 0L, 0);
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(0, int0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      boolean boolean0 = networkHealthCheck0.isIgnoreLoopback();
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      networkHealthCheck0.run();
      assertTrue(networkHealthCheck0.isStarted());
  }
}
