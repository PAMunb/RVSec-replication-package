/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 14 13:51:07 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.FileUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/pedro/desenvolvimento");
          FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
          mockFile0.toURI();
          MockFile mockFile1 = new MockFile("jExj:~MyK,[D8Br", "jExj:~MyK,[D8Br");
          mockFile0.delete();
          FileUtil.deleteDirectory(mockFile1);
          FileUtil.makeExec(mockFile0);
          FileUtil.deleteDirectory(mockFile0);
          FileUtil.makeExec(mockFile0);
          FileUtil fileUtil0 = new FileUtil();
          FileUtil.makeExec(mockFile0);
          MockFile.createTempFile("jExj:~MyK,[D8Br", "!D%5AV)@+0&X`i");
          mockFile1.mkdirs();
          FileUtil.deleteDirectory(mockFile0);
          MockFile mockFile2 = new MockFile("jExj:~MyK,[D8Br", "jExj:~MyK,[D8Br");
          mockFile2.setWritable(true, false);
          mockFile2.renameTo(mockFile1);
          FileUtil.deleteDirectory(mockFile2);
          FileUtil.makeExec(mockFile0);
          // Undeclared exception!
          try { 
            MockFile.createTempFile((String) null, (String) null, (File) mockFile2);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("$VALUES");
          File file0 = MockFile.createTempFile("$VALUES", "", (File) mockFile0);
          FileUtil.deleteDirectory(file0);
          mockFile0.getAbsolutePath();
          FileUtil.deleteDirectory(file0);
          FileUtil.deleteDirectory(file0);
          FileUtil fileUtil0 = new FileUtil();
          FileUtil.makeExec(mockFile0);
          FileUtil.deleteDirectory(file0);
          FileUtil.makeExec(mockFile0);
          MockFile mockFile1 = new MockFile(file0, "/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons/$VALUES");
          mockFile1.mkdirs();
          FileUtil.makeExec(mockFile1);
          mockFile0.toPath();
          FileUtil.makeExec(mockFile0);
          FileUtil.makeExec(file0);
          // Undeclared exception!
          FileUtil.deleteDirectory(mockFile0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = null;
      FileUtil.makeExec((File) null);
      FileUtil.makeExec((File) null);
      // Undeclared exception!
      try { 
        FileUtil.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.delete();
      mockFile0.setReadable(false);
      mockFile0.setReadable(true);
      // Undeclared exception!
      try { 
        FileUtil.deleteDirectory(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("D", "");
      mockFile0.getCanonicalFile();
      mockFile0.mkdir();
      FileUtil.deleteDirectory(mockFile0);
      FileUtil fileUtil0 = new FileUtil();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile(">9s_m'R&:Mlxv{}r{6", ">9s_m'R&:Mlxv{}r{6");
          FileUtil.makeExec(file0);
          FileUtil.makeExec(file0);
          FileUtil fileUtil0 = new FileUtil();
          FileUtil.deleteDirectory(file0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          FileUtil.makeExec(mockFile0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileUtil.deleteDirectory(mockFile0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileUtil.makeExec((File) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          File file0 = MockFile.createTempFile("$VALUES", "", (File) mockFile0);
          FileUtil.deleteDirectory(file0);
          mockFile0.getAbsolutePath();
          FileUtil.deleteDirectory(file0);
          FileUtil fileUtil0 = new FileUtil();
          FileUtil.deleteDirectory(file0);
          FileUtil.makeExec(mockFile0);
          MockFile mockFile1 = new MockFile(file0, "/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons");
          mockFile1.mkdirs();
          FileUtil.makeExec(mockFile1);
          mockFile0.toPath();
          FileUtil.makeExec(mockFile0);
          FileUtil.makeExec(file0);
          // Undeclared exception!
          FileUtil.deleteDirectory(mockFile0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
