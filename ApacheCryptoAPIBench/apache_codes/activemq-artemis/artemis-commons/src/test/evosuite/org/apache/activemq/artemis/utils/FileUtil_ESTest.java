/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:05:26 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.FileUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileUtil_ESTest extends FileUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(boolean0);
      
      MockFile mockFile1 = new MockFile((String) null, "_2z;?eO?");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean1 = mockFile1.setReadable(true, true);
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("_2z;?eO?", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals("_2z;?eO?", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean2 = mockFile0.delete();
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(mockFile0, mockFile1);
      
      boolean boolean3 = mockFile1.mkdirs();
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("_2z;?eO?", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals("_2z;?eO?", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean4 = mockFile1.createNewFile();
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("_2z;?eO?", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.isDirectory());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals("_2z;?eO?", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertNotSame(mockFile1, mockFile0);
      
      // Undeclared exception!
      FileUtil.deleteDirectory(mockFile0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("co|", "co|");
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("co|0co|", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/co|0co|", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = FileUtil.deleteDirectory(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      assertNotNull(fileUtil0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
//    Future<?> future = executor.submit(new Runnable(){ 
//            @Override public void run() { 
//        try {
//          MockFile mockFile0 = new MockFile("");
//          assertNotNull(mockFile0);
//          
//          boolean boolean0 = mockFile0.setReadable(false, false);
//          assertFalse(mockFile0.isFile());
//          assertTrue(mockFile0.isDirectory());
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertEquals(1392409281320L, mockFile0.lastModified());
//          assertTrue(mockFile0.exists());
//          assertFalse(mockFile0.isHidden());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertTrue(mockFile0.canWrite());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertTrue(mockFile0.canExecute());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean0);
//          
//          boolean boolean1 = mockFile0.mkdir();
//          assertFalse(mockFile0.isFile());
//          assertTrue(mockFile0.isDirectory());
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertEquals(1392409281320L, mockFile0.lastModified());
//          assertTrue(mockFile0.exists());
//          assertFalse(mockFile0.isHidden());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertTrue(mockFile0.canWrite());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertTrue(mockFile0.canExecute());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertFalse(boolean1 == boolean0);
//          assertFalse(boolean1);
//          
//          FileUtil.makeExec(mockFile0);
//          assertFalse(mockFile0.isFile());
//          assertTrue(mockFile0.isDirectory());
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertEquals(1392409281320L, mockFile0.lastModified());
//          assertTrue(mockFile0.exists());
//          assertFalse(mockFile0.isHidden());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertTrue(mockFile0.canWrite());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertTrue(mockFile0.canExecute());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          
//          FileUtil fileUtil0 = new FileUtil();
//          assertNotNull(fileUtil0);
//          
//          boolean boolean2 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean2 == boolean0);
//          assertFalse(boolean2 == boolean1);
//          assertTrue(boolean2);
//          
//          boolean boolean3 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean3 == boolean1);
//          assertFalse(boolean3 == boolean2);
//          assertFalse(boolean3 == boolean0);
//          assertFalse(boolean3);
//          
//          boolean boolean4 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertFalse(boolean4 == boolean0);
//          assertTrue(boolean4 == boolean3);
//          assertFalse(boolean4 == boolean2);
//          assertTrue(boolean4 == boolean1);
//          assertFalse(boolean4);
//          
//          FileUtil.makeExec(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          
//          boolean boolean5 = mockFile0.setReadable(true);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean5 == boolean1);
//          assertFalse(boolean5 == boolean0);
//          assertTrue(boolean5 == boolean3);
//          assertFalse(boolean5 == boolean2);
//          assertTrue(boolean5 == boolean4);
//          assertFalse(boolean5);
//          
//          FileUtil.makeExec((File) null);
//          boolean boolean6 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean6 == boolean5);
//          assertTrue(boolean6 == boolean1);
//          assertTrue(boolean6 == boolean3);
//          assertTrue(boolean6 == boolean4);
//          assertFalse(boolean6 == boolean2);
//          assertFalse(boolean6 == boolean0);
//          assertFalse(boolean6);
//          
//          boolean boolean7 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertFalse(boolean7 == boolean2);
//          assertTrue(boolean7 == boolean3);
//          assertTrue(boolean7 == boolean6);
//          assertFalse(boolean7 == boolean0);
//          assertTrue(boolean7 == boolean5);
//          assertTrue(boolean7 == boolean4);
//          assertTrue(boolean7 == boolean1);
//          assertFalse(boolean7);
//          
//          boolean boolean8 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertFalse(boolean8 == boolean2);
//          assertFalse(boolean8 == boolean0);
//          assertTrue(boolean8 == boolean6);
//          assertTrue(boolean8 == boolean3);
//          assertTrue(boolean8 == boolean5);
//          assertTrue(boolean8 == boolean1);
//          assertTrue(boolean8 == boolean7);
//          assertTrue(boolean8 == boolean4);
//          assertFalse(boolean8);
//          
//          boolean boolean9 = mockFile0.setReadable(false);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean9 == boolean4);
//          assertTrue(boolean9 == boolean8);
//          assertFalse(boolean9 == boolean0);
//          assertTrue(boolean9 == boolean1);
//          assertTrue(boolean9 == boolean7);
//          assertTrue(boolean9 == boolean6);
//          assertFalse(boolean9 == boolean2);
//          assertTrue(boolean9 == boolean3);
//          assertTrue(boolean9 == boolean5);
//          assertFalse(boolean9);
//          
//          boolean boolean10 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean10 == boolean6);
//          assertTrue(boolean10 == boolean5);
//          assertTrue(boolean10 == boolean3);
//          assertFalse(boolean10 == boolean0);
//          assertTrue(boolean10 == boolean7);
//          assertTrue(boolean10 == boolean1);
//          assertTrue(boolean10 == boolean9);
//          assertFalse(boolean10 == boolean2);
//          assertTrue(boolean10 == boolean4);
//          assertTrue(boolean10 == boolean8);
//          assertFalse(boolean10);
//          
//          FileUtil.makeExec((File) null);
//          FileUtil.makeExec(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          
//          boolean boolean11 = FileUtil.deleteDirectory(mockFile0);
//          assertEquals("", mockFile0.getName());
//          assertEquals(0L, mockFile0.getTotalSpace());
//          assertNull(mockFile0.getParent());
//          assertFalse(mockFile0.canExecute());
//          assertFalse(mockFile0.isHidden());
//          assertTrue(mockFile0.isFile());
//          assertEquals(0L, mockFile0.getUsableSpace());
//          assertFalse(mockFile0.canRead());
//          assertFalse(mockFile0.exists());
//          assertEquals(0L, mockFile0.lastModified());
//          assertFalse(mockFile0.isDirectory());
//          assertEquals(0L, mockFile0.getFreeSpace());
//          assertEquals("", mockFile0.toString());
//          assertFalse(mockFile0.canWrite());
//          assertFalse(mockFile0.isAbsolute());
//          assertEquals(0L, mockFile0.length());
//          assertTrue(boolean11 == boolean3);
//          assertTrue(boolean11 == boolean6);
//          assertTrue(boolean11 == boolean4);
//          assertTrue(boolean11 == boolean5);
//          assertTrue(boolean11 == boolean9);
//          assertTrue(boolean11 == boolean8);
//          assertFalse(boolean11 == boolean2);
//          assertTrue(boolean11 == boolean1);
//          assertTrue(boolean11 == boolean7);
//          assertFalse(boolean11 == boolean0);
//          assertTrue(boolean11 == boolean10);
//          assertFalse(boolean11);
//          
//          URI uRI0 = MockURI.aFTPURI;
//          assertEquals("foo.bar", uRI0.getRawAuthority());
//          assertEquals((-1), uRI0.getPort());
//          assertNull(uRI0.getRawQuery());
//          assertNull(uRI0.getRawFragment());
//          assertEquals("foo.bar", uRI0.getHost());
//          assertEquals("ftp", uRI0.getScheme());
//          assertFalse(uRI0.isOpaque());
//          assertNull(uRI0.getRawUserInfo());
//          assertTrue(uRI0.isAbsolute());
//          assertEquals("", uRI0.getRawPath());
//          assertEquals("ftp://foo.bar", uRI0.toString());
//          assertNotNull(uRI0);
//          
//          MockFile mockFile1 = null;
//          try {
//            mockFile1 = new MockFile(uRI0);
//            fail("Expecting exception: IllegalArgumentException");
//          
//          } catch(IllegalArgumentException e) {
//             //
//             // URI scheme is not \"file\"
//             //
//             verifyException("java.io.File", e);
//          }
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
//      } 
//    });
//    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/ s!K@K");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtil.deleteDirectory(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/ s!K@K", mockFile0.toString());
      assertEquals(" s!K@K", mockFile0.getName());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.deleteDirectory((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.FileUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        FileUtil.deleteDirectory(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadable(false, false);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean0);
      
      MockFile mockFile1 = new MockFile("");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean1 = mockFile1.setWritable(true, true);
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean2 = mockFile0.setReadable(false, false);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(mockFile0, mockFile1);
      
      boolean boolean3 = mockFile0.delete();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNotSame(mockFile0, mockFile1);
      
      URI uRI0 = mockFile1.toURI();
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertEquals("", mockFile1.toString());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file:/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(uRI0);
      assertNotSame(mockFile1, mockFile0);
      
      MockFile mockFile2 = new MockFile(mockFile1, "");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertNotNull(mockFile2);
      
      boolean boolean4 = mockFile2.mkdirs();
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertTrue(mockFile1.isDirectory());
      assertEquals("artemis-commons", mockFile2.getName());
      assertTrue(mockFile2.exists());
      assertEquals(0L, mockFile2.length());
      assertEquals(1392409281320L, mockFile2.lastModified());
      assertTrue(mockFile2.canExecute());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.isFile());
      assertTrue(mockFile2.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis", mockFile2.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", mockFile2.toString());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertTrue(mockFile2.canWrite());
      assertTrue(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertTrue(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      
      boolean boolean5 = mockFile2.createNewFile();
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertTrue(mockFile1.isDirectory());
      assertEquals("artemis-commons", mockFile2.getName());
      assertTrue(mockFile2.exists());
      assertEquals(0L, mockFile2.length());
      assertEquals(1392409281320L, mockFile2.lastModified());
      assertTrue(mockFile2.canExecute());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.isFile());
      assertTrue(mockFile2.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis", mockFile2.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", mockFile2.toString());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertTrue(mockFile2.canWrite());
      assertTrue(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertTrue(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      
      boolean boolean6 = FileUtil.deleteDirectory(mockFile0);
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile0.equals((Object)mockFile2));
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, mockFile2);
      
      FileUtil fileUtil0 = new FileUtil();
      assertNotNull(fileUtil0);
      
      MockFile mockFile3 = new MockFile("", "");
      assertFalse(mockFile3.equals((Object)mockFile1));
      assertFalse(mockFile3.equals((Object)mockFile2));
      assertFalse(mockFile3.equals((Object)mockFile0));
      assertNotNull(mockFile3);
      
      boolean boolean7 = FileUtil.deleteDirectory(mockFile3);
      assertEquals("", mockFile3.getName());
      assertEquals(1392409281320L, mockFile3.lastModified());
      assertFalse(mockFile3.isFile());
      assertTrue(mockFile3.isDirectory());
      assertEquals(0L, mockFile3.getTotalSpace());
      assertNull(mockFile3.getParent());
      assertTrue(mockFile3.canExecute());
      assertTrue(mockFile3.isAbsolute());
      assertEquals(0L, mockFile3.length());
      assertEquals(0L, mockFile3.getFreeSpace());
      assertTrue(mockFile3.canWrite());
      assertFalse(mockFile3.isHidden());
      assertEquals(0L, mockFile3.getUsableSpace());
      assertTrue(mockFile3.canRead());
      assertTrue(mockFile3.exists());
      assertEquals("/", mockFile3.toString());
      assertFalse(mockFile3.equals((Object)mockFile1));
      assertFalse(mockFile3.equals((Object)mockFile2));
      assertFalse(mockFile3.equals((Object)mockFile0));
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7);
      assertNotSame(mockFile3, mockFile1);
      assertNotSame(mockFile3, mockFile2);
      assertNotSame(mockFile3, mockFile0);
      
      boolean boolean8 = FileUtil.deleteDirectory(mockFile2);
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isFile());
      assertEquals("", mockFile1.toString());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile2.exists());
      assertEquals("artemis-commons", mockFile2.getName());
      assertFalse(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.length());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertFalse(mockFile2.canWrite());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.canRead());
      assertFalse(mockFile2.canExecute());
      assertTrue(mockFile2.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis", mockFile2.getParent());
      assertEquals(0L, mockFile2.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", mockFile2.toString());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertTrue(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile3));
      assertFalse(mockFile2.equals((Object)mockFile3));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile3);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile2, mockFile3);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileUtil.makeExec((File) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileUtil.deleteDirectory(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          FileUtil.makeExec(mockFile0);
          // Undeclared exception!
          try { 
            FileUtil.deleteDirectory(mockFile0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
