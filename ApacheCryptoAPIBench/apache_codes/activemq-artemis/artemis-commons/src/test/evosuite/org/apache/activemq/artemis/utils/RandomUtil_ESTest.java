/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:27:11 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
import org.apache.activemq.artemis.utils.RandomUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomUtil_ESTest extends RandomUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomUtil.randomPositiveLong();
      short short0 = RandomUtil.randomShort();
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomUtil.randomBytes(173);
      long long0 = RandomUtil.randomPositiveLong();
      assertEquals(173L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      RandomUtil.randomChar();
      int int0 = RandomUtil.randomPort();
      assertEquals((-65533), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = RandomUtil.randomMax((-19));
      assertEquals((-19), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = RandomUtil.randomInterval(0, 47);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomUtil.randomLong();
      int int0 = RandomUtil.randomInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      RandomUtil.randomLong();
      int int0 = RandomUtil.randomInt();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomUtil.randomBytes(173);
      float float0 = RandomUtil.randomFloat();
      assertEquals(0.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      RandomUtil.randomLong();
      float float0 = RandomUtil.randomFloat();
      assertEquals((-0.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomUtil.randomBytes(173);
      double double0 = RandomUtil.randomDouble();
      assertEquals(0.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(1177);
      RandomUtil.randomChar();
      RandomUtil.randomSimpleString();
      char char0 = RandomUtil.randomChar();
      assertEquals('a', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = RandomUtil.randomBytes((int) (short)0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomUtil.randomLong();
      byte byte0 = RandomUtil.randomByte();
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomUtil.randomBytes(173);
      byte byte0 = RandomUtil.randomByte();
      assertEquals((byte) (-83), byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomMax(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.activemq.artemis.utils.RandomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomInterval(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      RandomUtil.randomBytes(65536);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomBytes((-2018));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.RandomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      RandomUtil.randomBuffer(55296, longArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      RandomUtil.randomBuffer(522133279, longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomBuffer(1069, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.RandomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        RandomUtil.randomBuffer((-8), longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(56) + minWritableBytes(8) exceeds maxCapacity(56): UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 56, cap: 56/56)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        RandomUtil.randomBuffer((-683), longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -667 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = RandomUtil.randomString();
      assertEquals("00000000-0100-4000-8200-000003000000", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomUtil.randomByte();
      int int0 = RandomUtil.randomInterval((byte)0, (-2018));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = RandomUtil.randomInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = RandomUtil.randomBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomUtil.randomSimpleString();
      RandomUtil.randomPositiveInt();
      int int0 = RandomUtil.randomMax(5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float float0 = RandomUtil.randomFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = RandomUtil.randomPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = RandomUtil.randomDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomUtil.randomPositiveLong();
      int int0 = RandomUtil.randomPort();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      short short0 = RandomUtil.randomShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomUtil.randomLong();
      int int0 = RandomUtil.randomMax((-420));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = RandomUtil.randomPositiveInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      java.util.Random random0 = RandomUtil.getRandom();
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[4];
      ActiveMQBuffer activeMQBuffer0 = RandomUtil.randomBuffer(5, longArray0);
      assertNotNull(activeMQBuffer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = RandomUtil.randomInterval((-345), 1218);
      assertEquals((-345), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = RandomUtil.randomBytes();
      assertEquals(36, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomUtil randomUtil0 = new RandomUtil();
  }
}
