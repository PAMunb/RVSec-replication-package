/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:23:48 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.internal.logging.InternalLoggerFactory;
import org.apache.activemq.artemis.utils.RandomUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomUtil_ESTest extends RandomUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomUtil.getRandom();
      RandomUtil.randomPositiveInt();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomUtil.randomShort();
      RandomUtil.randomByte();
      long[] longArray0 = new long[1];
      RandomUtil.randomBuffer((short)0, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomUtil.randomDouble();
      int int0 = (-394);
      // Undeclared exception!
      try { 
        RandomUtil.randomBytes((-394));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.RandomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomUtil.randomLong();
      RandomUtil.randomInt();
      RandomUtil.randomPort();
      RandomUtil.randomString();
      RandomUtil.randomString();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = 0L;
      longArray0[7] = (long) 2;
      RandomUtil.randomBuffer(1, longArray0);
      RandomUtil.randomBoolean();
      RandomUtil.randomMax(1);
      RandomUtil.randomBytes();
      RandomUtil.randomInt();
      RandomUtil.randomBytes(48);
      RandomUtil.randomFloat();
      RandomUtil.randomByte();
      // Undeclared exception!
      try { 
        RandomUtil.randomMax(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.activemq.artemis.utils.RandomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomUtil.randomPositiveLong();
      RandomUtil.randomInterval((-2129), (-1));
      RandomUtil.randomBytes();
      RandomUtil.randomShort();
      RandomUtil.randomFloat();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomUtil.randomByte();
      RandomUtil.randomFloat();
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.randomInterval(529, 3171);
      RandomUtil.randomChar();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomUtil.randomInterval(0, 971);
      RandomUtil.randomDouble();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomUtil.randomLong();
      RandomUtil.randomChar();
      RandomUtil.randomSimpleString();
      RandomUtil.randomInt();
      RandomUtil.randomBytes(9);
      RandomUtil.randomBytes();
      RandomUtil.randomFloat();
      RandomUtil.randomSimpleString();
      RandomUtil.randomString();
      RandomUtil.randomFloat();
      RandomUtil.randomSimpleString();
      RandomUtil.randomBytes();
      RandomUtil randomUtil0 = new RandomUtil();
      // Undeclared exception!
      try { 
        RandomUtil.randomInterval(4011, 4011);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomUtil.randomPort();
      RandomUtil.randomString();
      RandomUtil.randomBoolean();
      RandomUtil.getRandom();
      RandomUtil.randomDouble();
      RandomUtil.randomInterval(0, (-443));
      RandomUtil.randomPort();
      RandomUtil.randomPositiveInt();
      RandomUtil.randomPositiveInt();
      RandomUtil.randomChar();
      RandomUtil.randomPositiveLong();
      RandomUtil.randomChar();
      RandomUtil.randomChar();
      RandomUtil.randomShort();
      RandomUtil.randomSimpleString();
      RandomUtil.randomChar();
      RandomUtil.randomBytes();
      RandomUtil.randomChar();
      RandomUtil.randomPositiveLong();
      RandomUtil.randomChar();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        RandomUtil.randomBuffer((-371), longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -371 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomUtil.randomMax((-980));
      RandomUtil.randomBoolean();
      RandomUtil.randomBytes(4068);
      RandomUtil.randomPositiveLong();
      RandomUtil.randomShort();
      RandomUtil.randomChar();
      RandomUtil.randomByte();
      RandomUtil.randomPositiveInt();
      RandomUtil.randomSimpleString();
      RandomUtil.randomChar();
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) (byte) (-22);
      longArray0[4] = (long) 4068;
      longArray0[5] = (long) (-980);
      // Undeclared exception!
      try { 
        RandomUtil.randomBuffer((byte) (-22), longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(24) + minWritableBytes(8) exceeds maxCapacity(26): UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf(ridx: 0, widx: 24, cap: 26/26)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomUtil.getRandom();
      RandomUtil.randomPort();
      RandomUtil.randomInt();
      RandomUtil.randomChar();
      // Undeclared exception!
      try { 
        RandomUtil.randomBuffer(0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.RandomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomUtil.randomFloat();
      RandomUtil.randomSimpleString();
      RandomUtil.randomBoolean();
      RandomUtil.randomLong();
      RandomUtil.randomPositiveInt();
      int int0 = 65536;
      // Undeclared exception!
      RandomUtil.randomBytes(65536);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomUtil.randomByte();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 65536;
      longArray0[1] = (long) 65536;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 65536;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) 65536;
      // Undeclared exception!
      RandomUtil.randomBuffer(65536, longArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomUtil.randomMax(8);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.randomPositiveLong();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomUtil.randomBytes(3002);
      RandomUtil.randomShort();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomUtil.randomBoolean();
      RandomUtil.randomPositiveLong();
      RandomUtil.randomShort();
      RandomUtil.randomPositiveInt();
      RandomUtil.randomBoolean();
      RandomUtil.getRandom();
      RandomUtil.randomByte();
      RandomUtil.randomPort();
      RandomUtil.randomMax(1);
      int int0 = 65536;
      // Undeclared exception!
      RandomUtil.randomBytes(65536);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomUtil.randomPort();
      RandomUtil.randomBytes(0);
      RandomUtil.randomChar();
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomUtil.randomChar();
      RandomUtil.randomSimpleString();
      RandomUtil.randomFloat();
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.randomPositiveInt();
      RandomUtil.randomLong();
      RandomUtil.randomSimpleString();
      InternalLoggerFactory.getDefaultFactory();
      RandomUtil.randomBoolean();
      RandomUtil.randomInterval('0', 0);
      RandomUtil.randomChar();
      RandomUtil.randomDouble();
      RandomUtil.randomSimpleString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomUtil.randomDouble();
      RandomUtil.randomPort();
      RandomUtil.getRandom();
      RandomUtil.randomInterval(1, (-2347));
      RandomUtil.randomByte();
      RandomUtil.randomBytes();
      RandomUtil.randomSimpleString();
      RandomUtil.randomFloat();
      RandomUtil.randomMax((-2347));
      RandomUtil.randomLong();
      RandomUtil.randomInterval(2, 1);
      RandomUtil.randomByte();
      RandomUtil.randomBytes();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2347);
      longArray0[1] = (long) 11;
      RandomUtil.randomBuffer(11, longArray0);
      RandomUtil.randomChar();
      RandomUtil.randomDouble();
      RandomUtil.getRandom();
      RandomUtil.randomShort();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.randomPort();
      RandomUtil.randomFloat();
      short short0 = RandomUtil.randomShort();
      assertEquals((short)1, short0);
      
      RandomUtil.randomFloat();
      int int0 = RandomUtil.randomInterval(32767, 0);
      assertEquals(32769, int0);
      
      char char0 = RandomUtil.randomChar();
      assertEquals('0', char0);
  }
}
