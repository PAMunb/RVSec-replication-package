/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:26:39 GMT 2022
 */

package org.apache.activemq.artemis.utils.critical;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.activemq.artemis.utils.critical.CriticalMeasure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CriticalMeasure_ESTest extends CriticalMeasure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      System.setCurrentTimeMillis((-3462L));
      criticalMeasure0.leaveCritical();
      System.setCurrentTimeMillis(275L);
      criticalMeasure0.enterCritical();
      boolean boolean0 = criticalMeasure0.isExpired(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      System.setCurrentTimeMillis(1392409281320000L);
      criticalMeasure0.leaveCritical();
      boolean boolean0 = criticalMeasure0.isExpired(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      long long0 = criticalMeasure0.leaveTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      System.setCurrentTimeMillis((-3462L));
      criticalMeasure0.leaveCritical();
      long long0 = criticalMeasure0.leaveTime();
      assertEquals((-3462000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      System.setCurrentTimeMillis(0L);
      criticalMeasure0.enterCritical();
      long long0 = criticalMeasure0.enterTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      long long0 = criticalMeasure0.enterTime();
      assertEquals((-1000L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      System.setCurrentTimeMillis((-3462L));
      criticalMeasure0.leaveCritical();
      System.setCurrentTimeMillis(1392409281320000L);
      boolean boolean0 = criticalMeasure0.isExpired((-3462L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      System.setCurrentTimeMillis((-3462L));
      criticalMeasure0.leaveCritical();
      boolean boolean0 = criticalMeasure0.isExpired(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      boolean boolean0 = criticalMeasure0.isExpired((-257L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      long long0 = criticalMeasure0.leaveTime();
      assertEquals(1392409281320000L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CriticalMeasure criticalMeasure0 = new CriticalMeasure();
      long long0 = criticalMeasure0.enterTime();
      assertEquals(1392409281320000L, long0);
  }
}
