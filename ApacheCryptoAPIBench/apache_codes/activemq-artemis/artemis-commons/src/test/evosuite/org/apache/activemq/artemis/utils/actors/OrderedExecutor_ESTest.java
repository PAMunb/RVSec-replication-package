/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:25:37 GMT 2022
 */

package org.apache.activemq.artemis.utils.actors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.concurrent.DefaultThreadFactory;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.actors.OrderedExecutor;
import org.apache.activemq.artemis.utils.actors.ProcessorBase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrderedExecutor_ESTest extends OrderedExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      forkJoinPool0.shutdown();
      forkJoinPool0.hasQueuedSubmissions();
      orderedExecutor0.remaining();
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      orderedExecutor0.doTask(mockThread0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      forkJoinPool0.awaitQuiescence(0, timeUnit0);
      MockThread mockThread1 = new MockThread(mockThread0);
      // Undeclared exception!
      try { 
        orderedExecutor0.execute(mockThread1);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedExecutor orderedExecutor0 = new OrderedExecutor((Executor) null);
      orderedExecutor0.isFlushed();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      mockThread0.setContextClassLoader(classLoader1);
      // Undeclared exception!
      try { 
        orderedExecutor0.execute(mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.actors.ProcessorBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-1), forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1185), 547, (-1185), timeUnit0, (BlockingQueue<Runnable>) null, (RejectedExecutionHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(10, 10, (-1L), timeUnit0, priorityBlockingQueue0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      mockThread0.setContextClassLoader(classLoader1);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(0, (ForkJoinPool.ForkJoinWorkerThreadFactory) null, thread_UncaughtExceptionHandler0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      String string0 = ",3,8WZt2k/4(E|T{";
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(",3,8WZt2k/4(E|T{", true);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(4652, 4652, 4652, timeUnit0, priorityBlockingQueue0, defaultThreadFactory0, threadPoolExecutor_AbortPolicy0);
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        threadPoolExecutor_AbortPolicy0.rejectedExecution(mockThread0, threadPoolExecutor0);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task Thread[MockThread-0,5,Test_Execution_Group] rejected from java.util.concurrent.ThreadPoolExecutor@14e311a[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      forkJoinPool0.awaitTermination(0L, timeUnit0);
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "!M9_;wU&ih)4`GA");
      orderedExecutor0.execute(mockThread0);
      assertFalse(mockThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1099);
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      MockThread mockThread0 = new MockThread();
      orderedExecutor0.execute(mockThread0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.getQueuedSubmissionCount();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      orderedExecutor0.doTask(mockThread0);
      orderedExecutor0.toString();
      forkJoinPool0.getQueuedSubmissionCount();
      orderedExecutor0.doTask(mockThread0);
      orderedExecutor0.toString();
      orderedExecutor0.toString();
      orderedExecutor0.doTask((Runnable) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
  }
}
