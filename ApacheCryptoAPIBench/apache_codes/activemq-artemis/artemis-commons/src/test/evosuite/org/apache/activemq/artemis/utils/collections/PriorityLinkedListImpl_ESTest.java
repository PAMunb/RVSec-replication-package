/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:23:42 GMT 2022
 */

package org.apache.activemq.artemis.utils.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.activemq.artemis.utils.collections.LinkedListImpl;
import org.apache.activemq.artemis.utils.collections.LinkedListIterator;
import org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PriorityLinkedListImpl_ESTest extends PriorityLinkedListImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(0);
      Integer integer0 = new Integer(0);
      LinkedListImpl<Object>[] linkedListImplArray0 = (LinkedListImpl<Object>[]) Array.newInstance(LinkedListImpl.class, 8);
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      linkedListImplArray0[0] = linkedListImpl0;
      priorityLinkedListImpl0.levels = linkedListImplArray0;
      priorityLinkedListImpl0.addTail(integer0, 0);
      int int0 = priorityLinkedListImpl0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(4190);
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      priorityLinkedListImpl0.addTail(linkedListImpl0, 3634);
      assertEquals(1, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.poll();
      assertEquals(0, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2118);
      Integer integer0 = new Integer(2118);
      priorityLinkedListImpl0.addHead(integer0, 648);
      LinkedListImpl<Integer>[] linkedListImplArray0 = (LinkedListImpl<Integer>[]) Array.newInstance(LinkedListImpl.class, 1);
      priorityLinkedListImpl0.levels = linkedListImplArray0;
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.poll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 648
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2118);
      priorityLinkedListImpl0.levels = null;
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl$PriorityLinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityLinkedListImpl<LinkedListImpl<Integer>> priorityLinkedListImpl0 = new PriorityLinkedListImpl<LinkedListImpl<Integer>>(3321);
      priorityLinkedListImpl0.clear();
      priorityLinkedListImpl0.clear();
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Integer>(1668);
      priorityLinkedListImpl1.clear();
      // Undeclared exception!
      priorityLinkedListImpl0.clear();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2160);
      priorityLinkedListImpl0.levels = null;
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2129);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail((Integer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Only HEAD nodes are allowed to hold null values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(1021);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail(integer0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(648);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addHead((Integer) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Only HEAD nodes are allowed to hold null values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2118);
      Integer integer0 = new Integer(2118);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addHead(integer0, 2118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2118
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(5811);
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(5811);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = null;
      try {
        priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>((-1528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityLinkedListImpl<LinkedListImpl<Integer>> priorityLinkedListImpl0 = new PriorityLinkedListImpl<LinkedListImpl<Integer>>(181);
      boolean boolean0 = priorityLinkedListImpl0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2118);
      Integer integer0 = new Integer(2118);
      priorityLinkedListImpl0.addHead(integer0, 648);
      boolean boolean0 = priorityLinkedListImpl0.isEmpty();
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(181);
      Integer integer0 = new Integer(0);
      priorityLinkedListImpl0.addHead(integer0, 10);
      priorityLinkedListImpl0.addHead(integer0, 0);
      priorityLinkedListImpl0.poll();
      priorityLinkedListImpl0.poll();
      assertEquals(0, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2147);
      Integer integer0 = new Integer(1);
      priorityLinkedListImpl0.addTail(integer0, 648);
      priorityLinkedListImpl0.addHead(integer0, 648);
      priorityLinkedListImpl0.poll();
      assertFalse(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(181);
      Integer integer0 = new Integer(0);
      priorityLinkedListImpl0.addHead(integer0, 10);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      priorityLinkedListImpl0.poll();
      priorityLinkedListImpl0.poll();
      assertEquals(0, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(181);
      Integer integer0 = new Integer(0);
      priorityLinkedListImpl0.addHead(integer0, 10);
      Integer integer1 = priorityLinkedListImpl0.poll();
      priorityLinkedListImpl0.addTail(integer1, 10);
      assertEquals(1, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(181);
      int int0 = priorityLinkedListImpl0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(4190);
      LinkedListIterator<Object> linkedListIterator0 = priorityLinkedListImpl0.iterator();
      assertNotNull(linkedListIterator0);
  }
}
