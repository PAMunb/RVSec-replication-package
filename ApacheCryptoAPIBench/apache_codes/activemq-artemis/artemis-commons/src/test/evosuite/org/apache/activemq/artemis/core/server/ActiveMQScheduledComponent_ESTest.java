/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:24:57 GMT 2022
 */

package org.apache.activemq.artemis.core.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent;
import org.apache.activemq.artemis.core.server.NetworkHealthCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActiveMQScheduledComponent_ESTest extends ActiveMQScheduledComponent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-272L), 0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((-676L), 0L, timeUnit0);
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals(0L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-272L), 0);
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelay(0L);
      activeMQScheduledComponent0.setTimeUnit(timeUnit0);
      assertEquals((-272L), networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 5);
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
      
      networkHealthCheck0.setInitialDelay(1L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals(1L, activeMQScheduledComponent0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setPeriod(238L, timeUnit0);
      assertEquals(238L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("LHQ ~vI", 0L, (-1250));
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      activeMQScheduledComponent0.setPeriod((long) (-1250), timeUnit0);
      assertEquals((-1250L), activeMQScheduledComponent0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 5);
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelay(1L);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      activeMQScheduledComponent0.setPeriod((long) 5, timeUnit0);
      assertEquals(5L, activeMQScheduledComponent0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("qHAb/k% w7T}c{nR", 2871L, 0);
      networkHealthCheck0.start();
      networkHealthCheck0.setPeriod(2871L);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setPeriod((-486L));
      assertEquals((-486L), networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 5857L, 2172);
      TimeUnit timeUnit0 = networkHealthCheck0.getTimeUnit();
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)activeMQScheduledComponent0.setPeriod(0L);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(1000L, (-1294L), timeUnit0);
      networkHealthCheck0.setPeriod(3544L);
      assertEquals(3544L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("W0D4/IJ1.VJmz");
      networkHealthCheck1.setInitialDelayAndPeriod(1000L, 1L, timeUnit0);
      assertEquals(1L, networkHealthCheck1.getPeriod());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Rnhc.Q", (-4452L), 545);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("Rnhc.Q");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck1.setInitialDelayAndPeriod((-465L), 4L, timeUnit0);
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck1.setInitialDelayAndPeriod((-423L), 988L);
      assertTrue(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelayAndPeriod(5259L, 0L);
      assertEquals(0L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelayAndPeriod((-1329L), (-1329L));
      assertEquals((-1329L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-272L), 0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((-676L), 0L, timeUnit0);
      networkHealthCheck0.setInitialDelay(0L);
      assertEquals(0L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay((-971L));
      assertEquals((-971L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      boolean boolean0 = networkHealthCheck0.isStarted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("LHQ ~vI", 0L, (-1250));
      networkHealthCheck0.isStarted();
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
      assertEquals(0L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 5857L, 2172);
      networkHealthCheck0.getThreadFactory();
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
      assertEquals(5857L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals(1000L, networkHealthCheck0.getPeriod());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      networkHealthCheck1.getPeriod();
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals(1000L, networkHealthCheck0.getPeriod());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(1L, (-1L), timeUnit0);
      long long0 = networkHealthCheck0.getPeriod();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(779L);
      long long0 = networkHealthCheck0.getInitialDelay();
      assertEquals(779L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        networkHealthCheck0.setPeriod(0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      // Undeclared exception!
      try { 
        networkHealthCheck0.setPeriod(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      // Undeclared exception!
      try { 
        networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList(" ^tJ~;MuT+% WRO!XC0");
      networkHealthCheck0.addComponent(networkHealthCheck1);
      assertTrue(networkHealthCheck1.isStarted());
      
      networkHealthCheck1.stop();
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 5);
      networkHealthCheck0.stop();
      assertEquals(1L, networkHealthCheck0.getPeriod());
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      networkHealthCheck1.delay();
      networkHealthCheck2.delay();
      networkHealthCheck1.delay();
      networkHealthCheck2.delay();
      networkHealthCheck0.delay();
      networkHealthCheck2.delay();
      networkHealthCheck2.delay();
      networkHealthCheck0.delay();
      networkHealthCheck0.delay();
      networkHealthCheck1.delay();
      networkHealthCheck0.delay();
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.delay();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.parseAddressList("W0D4/IJ1.VJmz");
      networkHealthCheck1.start();
      assertTrue(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      networkHealthCheck0.setInitialDelay(0L);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      long long0 = networkHealthCheck0.getInitialDelay();
      assertEquals(1000L, networkHealthCheck0.getPeriod());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod((-2897L));
      networkHealthCheck0.start();
      networkHealthCheck1.start();
      assertEquals((-2897L), networkHealthCheck0.getPeriod());
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isStarted());
      assertEquals(1000L, networkHealthCheck0.getPeriod());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      networkHealthCheck0.setPeriod(0L, timeUnit0);
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      // Undeclared exception!
      try { 
        networkHealthCheck0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      long long0 = networkHealthCheck0.getPeriod();
      assertEquals(1000L, long0);
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals((-1L), networkHealthCheck0.getInitialDelay());
      
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelay(0L);
      activeMQScheduledComponent0.getInitialDelay();
      assertFalse(networkHealthCheck0.isStarted());
  }
}
