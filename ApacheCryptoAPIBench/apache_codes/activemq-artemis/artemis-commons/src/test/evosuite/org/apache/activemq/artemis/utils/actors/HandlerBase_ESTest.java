/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 14 13:51:49 GMT 2022
 */

package org.apache.activemq.artemis.utils.actors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.concurrent.DefaultThreadFactory;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.activemq.artemis.utils.actors.Actor;
import org.apache.activemq.artemis.utils.actors.ActorListener;
import org.apache.activemq.artemis.utils.actors.ArtemisExecutor;
import org.apache.activemq.artemis.utils.actors.OrderedExecutor;
import org.apache.activemq.artemis.utils.actors.ProcessorBase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HandlerBase_ESTest extends HandlerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ActorListener<Callable<OrderedExecutor>> actorListener0 = (ActorListener<Callable<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<OrderedExecutor>> actor0 = new Actor<Callable<OrderedExecutor>>(scheduledThreadPoolExecutor0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertNotNull(actor0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      Callable<OrderedExecutor> callable0 = (Callable<OrderedExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      actor0.enter();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      actor0.act(callable0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(actor0.isFlushed());
      assertEquals(1, actor0.status());
      
      // Undeclared exception!
      try { 
        actor0.enter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // should be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>((Executor) null, actorListener0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(actor0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      boolean boolean0 = actor0.inHandler();
      assertFalse(boolean0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      actor0.enter();
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      // Undeclared exception!
      try { 
        actor0.enter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // should be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(scheduledThreadPoolExecutor0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertNotNull(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      orderedExecutor0.enter();
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(scheduledThreadPoolExecutor0);
      assertNotNull(artemisExecutor0);
      
      // Undeclared exception!
      try { 
        orderedExecutor0.enter();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // should be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1473, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      boolean boolean0 = scheduledThreadPoolExecutor0.remove(mockThread0);
      assertFalse(boolean0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(scheduledThreadPoolExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      String string0 = orderedExecutor0.toString();
      assertEquals("OrderedExecutor(tasks=[])", string0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(string0);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      orderedExecutor0.execute(mockThread0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      boolean boolean1 = orderedExecutor0.inHandler();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      // Undeclared exception!
      try { 
        orderedExecutor0.leave();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // marker not set
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(actor0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      // Undeclared exception!
      try { 
        actor0.leave();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // marker not set
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(class0);
      assertNotNull(defaultThreadFactory0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, defaultThreadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Class<Object> class1 = Object.class;
      String string0 = DefaultThreadFactory.toPoolName(class1);
      assertEquals("object", string0);
      assertSame(class1, class0);
      assertNotNull(string0);
      
      Actor<Object> actor0 = new Actor<Object>(scheduledThreadPoolExecutor0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(actor0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      // Undeclared exception!
      try { 
        actor0.leave();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // marker not set
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Executor executor0 = null;
      ActorListener<Actor<OrderedExecutor>> actorListener0 = (ActorListener<Actor<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<OrderedExecutor>> actor0 = new Actor<Actor<OrderedExecutor>>((Executor) null, actorListener0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(actor0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      ActorListener<OrderedExecutor> actorListener1 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>((Executor) null, actorListener1);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(actor1);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      
      actor0.doTask(actor1);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor((Executor) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "%- Y?#K");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = null;
      try {
        mockThread2 = new MockThread(threadGroup0, mockThread1, (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1721);
      assertNotNull(forkJoinPool0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      // Undeclared exception!
      try { 
        orderedExecutor0.leave();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // marker not set
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor((Executor) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(orderedExecutor0);
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      
      String string0 = orderedExecutor0.toString();
      assertEquals("OrderedExecutor(tasks=[])", string0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(string0);
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      
      // Undeclared exception!
      try { 
        orderedExecutor0.execute((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentLinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      long long0 = (-3576L);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      BlockingQueue<Runnable> blockingQueue0 = null;
      int int1 = (-1);
      DefaultThreadFactory defaultThreadFactory0 = null;
      try {
        defaultThreadFactory0 = new DefaultThreadFactory("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // priority: -1 (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)
         //
         verifyException("io.netty.util.concurrent.DefaultThreadFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderedExecutor orderedExecutor0 = new OrderedExecutor((Executor) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      orderedExecutor0.shutdown(0L, timeUnit0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      StackTraceElement[] stackTraceElementArray1 = mockThread0.getStackTrace();
      assertEquals(3, stackTraceElementArray1.length);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      orderedExecutor0.shutdown((-2190L), timeUnit0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      orderedExecutor0.doTask(mockThread0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      String string0 = orderedExecutor0.toString();
      assertEquals("OrderedExecutor(tasks=[])", string0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(string0);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      String string1 = orderedExecutor0.toString();
      assertEquals("OrderedExecutor(tasks=[])", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(string1);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      orderedExecutor0.enter();
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      ActorListener<Delayed> actorListener0 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor0 = new Actor<Delayed>((Executor) null, actorListener0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertNotNull(actor0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 0, 0L, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      boolean boolean0 = forkJoinPool0.isShutdown();
      assertFalse(boolean0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertNotNull(orderedExecutor0);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      
      boolean boolean1 = orderedExecutor0.inHandler();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      
      ActorListener<Integer> actorListener0 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor0 = new Actor<Integer>(forkJoinPool0, actorListener0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(actor0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      actor0.doTask((Integer) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      ActorListener<OrderedExecutor> actorListener1 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener1);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(actor1);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      
      actor1.shutdown();
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      
      actor1.doTask(orderedExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      
      Actor<Object> actor2 = new Actor<Object>(forkJoinPool0, (ActorListener<Object>) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertNotNull(actor2);
      assertTrue(actor2.isFlushed());
      assertEquals(0, actor2.status());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      assertNotNull(delayQueue0);
      
      Delayed delayed0 = delayQueue0.peek();
      assertNull(delayed0);
      
      // Undeclared exception!
      try { 
        actor2.act((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentLinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      forkJoinPool0.isTerminated();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      forkJoinPool0.awaitTermination(6299L, timeUnit0);
      forkJoinPool0.isQuiescent();
      ForkJoinPool.getCommonPoolParallelism();
      forkJoinPool0.getStealCount();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      orderedExecutor0.isFlushed();
      orderedExecutor0.isFlushed();
      ArtemisExecutor.delegate(orderedExecutor0);
      orderedExecutor0.enter();
      orderedExecutor0.inHandler();
      orderedExecutor0.leave();
      orderedExecutor0.toString();
      ActorListener<Integer> actorListener0 = (ActorListener<Integer>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Integer> actor0 = new Actor<Integer>(forkJoinPool0, actorListener0);
      long long0 = 0L;
      actor0.enter();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      actor0.shutdown(long0, timeUnit1);
      actor0.shutdown();
      actor0.doTask((Integer) orderedExecutor0.STATE_RUNNING);
      orderedExecutor0.enter();
      orderedExecutor0.inHandler();
      Thread thread0 = MockThread.currentThread();
      orderedExecutor0.execute(thread0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, (ThreadFactory) null, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Class<Integer> class0 = Integer.class;
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(class0, true);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3090, defaultThreadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      scheduledThreadPoolExecutor0.getRejectedExecutionHandler();
      MockThread mockThread0 = new MockThread("org.apache.activemq.artemis.utils.actors.HandlerBase");
      scheduledThreadPoolExecutor0.remove(mockThread0);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(679, 679, 679, timeUnit0, blockingQueue0);
      ActorListener<Actor<Object>> actorListener0 = (ActorListener<Actor<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<Object>> actor0 = new Actor<Actor<Object>>(threadPoolExecutor0, actorListener0);
      actor0.enter();
      threadPoolExecutor0.getCorePoolSize();
      actor0.inHandler();
      threadPoolExecutor0.shutdown();
      ActorListener<Callable<OrderedExecutor>> actorListener1 = (ActorListener<Callable<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<OrderedExecutor>> actor1 = new Actor<Callable<OrderedExecutor>>(scheduledThreadPoolExecutor0, actorListener1);
      actor1.enter();
      Consumer<Callable<OrderedExecutor>> consumer0 = (Consumer<Callable<OrderedExecutor>>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      actor1.shutdownNow(consumer0);
      Callable<OrderedExecutor> callable0 = (Callable<OrderedExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      actor1.act(callable0);
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(scheduledThreadPoolExecutor0);
      orderedExecutor0.toString();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(2);
      ArtemisExecutor.delegate(scheduledThreadPoolExecutor1);
      actor0.leave();
      actor0.inHandler();
      orderedExecutor0.enter();
      assertFalse(orderedExecutor0.isFlushed());
  }
}
