/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:24:26 GMT 2022
 */

package org.apache.activemq.artemis.api.core;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.activemq.artemis.api.core.ActiveMQException;
import org.apache.activemq.artemis.api.core.ActiveMQExceptionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActiveMQExceptionType_ESTest extends ActiveMQExceptionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveMQExceptionType[] activeMQExceptionTypeArray0 = ActiveMQExceptionType.values();
      assertEquals(45, activeMQExceptionTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.valueOf("NATIVE_ERROR_CANT_ALLOCATE_QUEUE");
      assertEquals(206, activeMQExceptionType0.getCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.INTERNAL_ERROR;
      int int0 = activeMQExceptionType0.getCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.getType(43);
      assertEquals(ActiveMQExceptionType.GENERIC_EXCEPTION, activeMQExceptionType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.NATIVE_ERROR_ALLOCATE_MEMORY;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("org.apache.activemq.artemis.api.core.ActiveMQTransactionTimeoutException");
      assertEquals(ActiveMQExceptionType.GENERIC_EXCEPTION, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.TRANSACTION_OUTCOME_UNKNOWN;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("UNBLOCKED");
      assertEquals(ActiveMQExceptionType.TRANSACTION_OUTCOME_UNKNOWN, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.valueOf("DUPLICATE_METADATA");
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("DUPLICATE_METADATA");
      assertEquals(ActiveMQExceptionType.DUPLICATE_METADATA, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(117, "");
      assertEquals(ActiveMQExceptionType.INTERCEPTOR_REJECTED_PACKET, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.ALREADY_REPLICATING;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("cJ8\"Q8b!&JmHf");
      assertEquals(ActiveMQExceptionType.ALREADY_REPLICATING, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.REMOTE_DISCONNECT;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("UNBLOCKED");
      assertEquals(ActiveMQExceptionType.REMOTE_DISCONNECT, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.INVALID_TRANSIENT_QUEUE_USE;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException((String) null);
      assertEquals(ActiveMQExceptionType.INVALID_TRANSIENT_QUEUE_USE, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.ADDRESS_FULL;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("org.apache.activemq.artemis.api.core.ActiveMQUnBlockedException");
      assertEquals(ActiveMQExceptionType.ADDRESS_FULL, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(120, "");
      assertEquals(ActiveMQExceptionType.TRANSACTION_TIMEOUT, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(6, "QUEUE_EXISTS");
      assertEquals(ActiveMQExceptionType.IO_ERROR, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.valueOf("QUEUE_DOES_NOT_EXIST");
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("");
      assertEquals(ActiveMQExceptionType.QUEUE_DOES_NOT_EXIST, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(4, "org.apache.activemq.)rtemis]apincore.Act_veMQDeleteAdAressException");
      assertEquals(ActiveMQExceptionType.DISCONNECTED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.UNBLOCKED;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("$9");
      assertEquals(ActiveMQExceptionType.UNBLOCKED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(2, "org.apache.activemq.artemis.api.core.ActiveMQAddressFullException");
      assertEquals(ActiveMQExceptionType.NOT_CONNECTED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(3, "org.apache.activemq.artemis.api.core.ActiveMQUnexpectedRoutingTypeForAddress");
      assertEquals(ActiveMQExceptionType.CONNECTION_TIMEDOUT, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(113, "$9");
      assertEquals(ActiveMQExceptionType.DUPLICATE_ID_REJECTED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(0, "1z(VC#*7NVs");
      assertEquals(ActiveMQExceptionType.INTERNAL_ERROR, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.getType(1);
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("$VALUES");
      assertEquals(ActiveMQExceptionType.UNSUPPORTED_PACKET, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.SESSION_CREATION_REJECTED;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("4@^");
      assertEquals(ActiveMQExceptionType.SESSION_CREATION_REJECTED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.TRANSACTION_ROLLED_BACK;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("?! U");
      assertEquals(ActiveMQExceptionType.TRANSACTION_ROLLED_BACK, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(216, "?! U");
      assertEquals(ActiveMQExceptionType.INVALID_QUEUE_CONFIGURATION, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.valueOf("INVALID_FILTER_EXPRESSION");
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("aO1F}Olo");
      assertEquals(ActiveMQExceptionType.INVALID_FILTER_EXPRESSION, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(215, "");
      assertEquals(ActiveMQExceptionType.MAX_CONSUMER_LIMIT_EXCEEDED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.OBJECT_CLOSED;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("$VALUES");
      assertEquals(ActiveMQExceptionType.OBJECT_CLOSED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.SECURITY_EXCEPTION;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("LARGE_MESSAGE_INTERRUPTED");
      assertEquals(ActiveMQExceptionType.SECURITY_EXCEPTION, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.DELETE_ADDRESS_ERROR;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("DUPLICATE_METADATA");
      assertEquals(ActiveMQExceptionType.DELETE_ADDRESS_ERROR, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(104, "KN>,VJwHS~RkA:");
      assertEquals(ActiveMQExceptionType.ILLEGAL_STATE, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.ADDRESS_EXISTS;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("");
      assertEquals(ActiveMQExceptionType.ADDRESS_EXISTS, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ActiveMQException activeMQException0 = ActiveMQExceptionType.createException(106, "");
      assertEquals(ActiveMQExceptionType.ADDRESS_DOES_NOT_EXIST, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.LARGE_MESSAGE_ERROR_BODY;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("KN>,VJwHS~RkA:");
      assertEquals(ActiveMQExceptionType.LARGE_MESSAGE_ERROR_BODY, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.INCOMPATIBLE_CLIENT_SERVER_VERSIONS;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException((String) null);
      assertEquals(ActiveMQExceptionType.INCOMPATIBLE_CLIENT_SERVER_VERSIONS, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.MAX_CONSUMER_LIMIT_EXCEEDED;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("4@^");
      assertEquals(ActiveMQExceptionType.MAX_CONSUMER_LIMIT_EXCEEDED, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.CLUSTER_SECURITY_EXCEPTION;
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("$VALUES");
      assertEquals(ActiveMQExceptionType.CLUSTER_SECURITY_EXCEPTION, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.ALREADY_REPLICATING;
      int int0 = activeMQExceptionType0.getCode();
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.valueOf("QUEUE_EXISTS");
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("Ds6qvQ.^i_");
      assertEquals(ActiveMQExceptionType.QUEUE_EXISTS, activeMQException0.getType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ActiveMQExceptionType activeMQExceptionType0 = ActiveMQExceptionType.valueOf("LARGE_MESSAGE_INTERRUPTED");
      ActiveMQException activeMQException0 = activeMQExceptionType0.createException("LARGE_MESSAGE_INTERRUPTED");
      assertEquals(ActiveMQExceptionType.LARGE_MESSAGE_INTERRUPTED, activeMQException0.getType());
  }
}
