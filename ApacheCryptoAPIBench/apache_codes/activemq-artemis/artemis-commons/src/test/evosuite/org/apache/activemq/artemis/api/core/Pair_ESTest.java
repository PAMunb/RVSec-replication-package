/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:18:49 GMT 2022
 */

package org.apache.activemq.artemis.api.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.api.core.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-43));
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, (String) null);
      String string0 = pair0.getB();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pair<String, String> pair0 = new Pair<String, String>((String) null, "+");
      Pair<Object, Object> pair1 = new Pair<Object, Object>((Object) null, pair0);
      Object object0 = pair1.getA();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Integer integer0 = new Integer(1314);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>((Object) null, integer0);
      Pair<Pair<String, String>, Object> pair2 = new Pair<Pair<String, String>, Object>(pair0, pair1);
      pair2.setB("");
      Object object0 = pair2.getB();
      // Undeclared exception!
      try { 
        object0.hashCode();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(322);
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>(integer0, integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pair<Object, String> pair0 = new Pair<Object, String>("Pair[a=null, b=null]", (String) null);
      pair0.setA((Object) null);
      Pair<String, String> pair1 = new Pair<String, String>((String) null, "Pair[a=null, b=null]");
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2351);
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>(integer0, integer0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(integer0, integer0);
      boolean boolean0 = pair0.equals(pair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pair<String, Object> pair0 = new Pair<String, Object>((String) null, (Object) null);
      Pair<Object, String> pair1 = new Pair<Object, String>("Pair[a=null, b=null]", (String) null);
      pair1.setA((Object) null);
      boolean boolean0 = pair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pair<Object, String> pair0 = new Pair<Object, String>((Object) null, (String) null);
      Pair<Object, Pair<Object, String>> pair1 = new Pair<Object, Pair<Object, String>>(":", pair0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Integer integer0 = new Integer(1314);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>((Object) null, integer0);
      Pair<Pair<String, String>, Object> pair2 = new Pair<Pair<String, String>, Object>(pair0, pair1);
      pair2.setB("");
      Object object0 = pair2.getB();
      boolean boolean0 = pair1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pair<String, String> pair0 = new Pair<String, String>("", "");
      Integer integer0 = new Integer(1312);
      Pair<Object, Integer> pair1 = new Pair<Object, Integer>((Object) null, integer0);
      Pair<Pair<String, String>, Object> pair2 = new Pair<Pair<String, String>, Object>(pair0, pair1);
      Object object0 = pair2.getB();
      boolean boolean0 = pair1.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1314);
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>((Object) null, integer0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(integer0, "");
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<String, Object> pair0 = new Pair<String, Object>((String) null, (Object) null);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair<String, Pair<Object, Object>> pair0 = new Pair<String, Pair<Object, Object>>("", (Pair<Object, Object>) null);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pair<Object, String> pair0 = new Pair<Object, String>((Object) null, (String) null);
      pair0.setB(":");
      pair0.hashCode();
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(322);
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
      Pair<Object, Object> pair1 = new Pair<Object, Object>((Object) null, pair0);
      String string0 = pair1.toString();
      assertEquals("Pair[a=null, b=Pair[a=322, b=]]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(322);
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
      Object object0 = pair0.getA();
      assertEquals(322, object0);
  }
}
