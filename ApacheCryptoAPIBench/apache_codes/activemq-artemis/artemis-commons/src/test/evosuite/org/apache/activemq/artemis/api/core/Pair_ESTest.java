/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:23:23 GMT 2022
 */

package org.apache.activemq.artemis.api.core;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.activemq.artemis.api.core.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair1 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>(pair0, pair0);
      Pair<Integer, Integer> pair2 = pair1.getA();
      assertSame(pair0, pair2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pair<Integer, Pair<Integer, Integer>> pair0 = new Pair<Integer, Pair<Integer, Integer>>((Integer) null, (Pair<Integer, Integer>) null);
      Integer integer0 = pair0.getA();
      Pair<Pair<Integer, Integer>, Integer> pair1 = new Pair<Pair<Integer, Integer>, Integer>((Pair<Integer, Integer>) null, (Integer) null);
      boolean boolean0 = pair1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1530);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair1 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>(pair0, pair0);
      Object object0 = pair1.getB();
      boolean boolean0 = pair0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = pair0.equals(pair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(537);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      pair0.setA(integer0);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, (Integer) null);
      assertTrue(pair1.equals((Object)pair0));
      
      pair0.setB(integer0);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(pair1.equals((Object)pair0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair1 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>(pair0, pair0);
      Object object0 = pair1.getB();
      boolean boolean0 = pair1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pair<Integer, Pair<Integer, Integer>> pair0 = new Pair<Integer, Pair<Integer, Integer>>((Integer) null, (Pair<Integer, Integer>) null);
      Integer integer0 = pair0.getA();
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>((Integer) null, integer0);
      boolean boolean0 = pair0.equals(pair1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(537);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>(integer0, integer0);
      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair1 = new Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>(pair0, pair0);
      Pair<Pair<Integer, Integer>, Integer> pair2 = new Pair<Pair<Integer, Integer>, Integer>(pair0, (Integer) null);
      boolean boolean0 = pair2.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(537);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Pair<Integer, Integer> pair1 = new Pair<Integer, Integer>(integer0, (Integer) null);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Pair<Integer, Pair<Integer, Integer>> pair1 = new Pair<Integer, Pair<Integer, Integer>>((Integer) null, pair0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = pair0.getB();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      String string0 = pair0.toString();
      assertEquals("Pair[a=null, b=null]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(537);
      Pair<Integer, Integer> pair0 = new Pair<Integer, Integer>((Integer) null, (Integer) null);
      pair0.setA(integer0);
      pair0.hashCode();
      pair0.hashCode();
  }
}
