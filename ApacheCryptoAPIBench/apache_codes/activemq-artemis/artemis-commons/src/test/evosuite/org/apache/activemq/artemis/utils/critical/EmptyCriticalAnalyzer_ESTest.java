/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:30:02 GMT 2022
 */

package org.apache.activemq.artemis.utils.critical;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.critical.CriticalAction;
import org.apache.activemq.artemis.utils.critical.CriticalAnalyzer;
import org.apache.activemq.artemis.utils.critical.CriticalComponentImpl;
import org.apache.activemq.artemis.utils.critical.EmptyCriticalAnalyzer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmptyCriticalAnalyzer_ESTest extends EmptyCriticalAnalyzer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      boolean boolean0 = emptyCriticalAnalyzer0.isMeasuring();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      long long0 = emptyCriticalAnalyzer0.getTimeout(timeUnit0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CriticalAnalyzer criticalAnalyzer0 = emptyCriticalAnalyzer0.setCheckTime(1L, timeUnit0);
      assertFalse(criticalAnalyzer0.isMeasuring());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      CriticalComponentImpl criticalComponentImpl0 = new CriticalComponentImpl(emptyCriticalAnalyzer0, 85);
      emptyCriticalAnalyzer0.remove(criticalComponentImpl0);
      assertFalse(emptyCriticalAnalyzer0.isMeasuring());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      CriticalAction criticalAction0 = mock(CriticalAction.class, new ViolatedAssumptionAnswer());
      CriticalAnalyzer criticalAnalyzer0 = emptyCriticalAnalyzer0.addAction(criticalAction0);
      assertEquals(0, criticalAnalyzer0.getNumberOfComponents());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      long long0 = emptyCriticalAnalyzer0.getCheckTimeNanoSeconds();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      emptyCriticalAnalyzer0.start();
      assertEquals(0, emptyCriticalAnalyzer0.getNumberOfComponents());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      emptyCriticalAnalyzer0.stop();
      assertFalse(emptyCriticalAnalyzer0.isMeasuring());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      CriticalComponentImpl criticalComponentImpl0 = new CriticalComponentImpl(emptyCriticalAnalyzer0, 0);
      emptyCriticalAnalyzer0.add(criticalComponentImpl0);
      assertFalse(emptyCriticalAnalyzer0.isMeasuring());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      boolean boolean0 = emptyCriticalAnalyzer0.isStarted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CriticalAnalyzer criticalAnalyzer0 = emptyCriticalAnalyzer0.setTimeout((-4182L), timeUnit0);
      assertEquals(0L, criticalAnalyzer0.getCheckTimeNanoSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyCriticalAnalyzer emptyCriticalAnalyzer0 = EmptyCriticalAnalyzer.getInstance();
      emptyCriticalAnalyzer0.check();
      assertFalse(emptyCriticalAnalyzer0.isMeasuring());
  }
}
