/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 20 11:23:49 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.utils.TimeUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeUtils_ESTest extends TimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUtils.CheckMethod timeUtils_CheckMethod0 = mock(TimeUtils.CheckMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(timeUtils_CheckMethod0).check();
      TimeUtils.waitOnBoolean(true, 0L, timeUtils_CheckMethod0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeUtils.waitOnBoolean(true, (-247L), (TimeUtils.CheckMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.TimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUtils.CheckMethod timeUtils_CheckMethod0 = mock(TimeUtils.CheckMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(timeUtils_CheckMethod0).check();
      boolean boolean0 = TimeUtils.waitOnBoolean(true, 405L, timeUtils_CheckMethod0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUtils.CheckMethod timeUtils_CheckMethod0 = mock(TimeUtils.CheckMethod.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(timeUtils_CheckMethod0).check();
      boolean boolean0 = TimeUtils.waitOnBoolean(false, 1533L, timeUtils_CheckMethod0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = TimeUtils.printDuration(1.51823297333);
      assertEquals("0.002 seconds", string0);
  }
}
