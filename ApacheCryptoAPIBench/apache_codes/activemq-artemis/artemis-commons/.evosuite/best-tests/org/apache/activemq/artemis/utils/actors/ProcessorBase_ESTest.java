/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 18:58:51 GMT 2022
 */

package org.apache.activemq.artemis.utils.actors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.concurrent.DefaultThreadFactory;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.apache.activemq.artemis.utils.actors.Actor;
import org.apache.activemq.artemis.utils.actors.ActorListener;
import org.apache.activemq.artemis.utils.actors.ArtemisExecutor;
import org.apache.activemq.artemis.utils.actors.OrderedExecutor;
import org.apache.activemq.artemis.utils.actors.ProcessorBase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessorBase_ESTest extends ProcessorBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2775);
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(scheduledThreadPoolExecutor0, (ActorListener<OrderedExecutor>) null);
      actor0.enter();
      actor0.shutdown();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ActorListener<ForkJoinTask<OrderedExecutor>> actorListener0 = (ActorListener<ForkJoinTask<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<ForkJoinTask<OrderedExecutor>> actor0 = new Actor<ForkJoinTask<OrderedExecutor>>(forkJoinPool0, actorListener0);
      Callable<OrderedExecutor> callable0 = (Callable<OrderedExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Callable<OrderedExecutor> callable1 = (Callable<OrderedExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<OrderedExecutor> forkJoinTask0 = forkJoinPool0.submit(callable1);
      forkJoinTask0.quietlyComplete();
      actor0.act(forkJoinTask0);
      ForkJoinTask<OrderedExecutor> forkJoinTask1 = forkJoinPool0.submit(callable0);
      actor0.act(forkJoinTask1);
      ActorListener<OrderedExecutor> actorListener1 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      actor1.shutdown((long) 1, timeUnit0);
      Actor<Delayed> actor2 = new Actor<Delayed>(forkJoinPool0, (ActorListener<Delayed>) null);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      actor2.shutdown((long) 2, timeUnit1);
      ForkJoinPool forkJoinPool1 = new ForkJoinPool();
      ActorListener<Actor<Object>> actorListener2 = (ActorListener<Actor<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<Object>> actor3 = new Actor<Actor<Object>>(forkJoinPool1, actorListener2);
      actor3.remaining();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "com.google.common.util.concurrent.ForwardingListenableFuture", 30L);
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      orderedExecutor0.doTask(mockThread2);
      orderedExecutor0.execute(mockThread2);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-3782));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActorListener<Delayed> actorListener0 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor0 = new Actor<Delayed>((Executor) null, actorListener0);
      actor0.shutdown();
      ActorListener<Object> actorListener1 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor1 = new Actor<Object>((Executor) null, actorListener1);
      OrderedExecutor orderedExecutor0 = new OrderedExecutor((Executor) null);
      Actor<OrderedExecutor> actor2 = new Actor<OrderedExecutor>((Executor) null, (ActorListener<OrderedExecutor>) null);
      OrderedExecutor orderedExecutor1 = new OrderedExecutor(orderedExecutor0);
      // Undeclared exception!
      try { 
        actor2.task(orderedExecutor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.actors.ProcessorBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 270);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(270, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, actorListener0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      forkJoinPool0.shutdownNow();
      actor0.shutdownNow(consumer0);
      actor0.shutdown();
      ActorListener<Delayed> actorListener1 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor1 = new Actor<Delayed>(forkJoinPool0, actorListener1);
      actor1.status();
      actor0.shutdown();
      int int0 = 0;
      ForkJoinPool forkJoinPool1 = null;
      try {
        forkJoinPool1 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "", 270);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread1.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(270, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, actorListener0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      actor0.shutdownNow(consumer0);
      actor0.shutdown();
      ActorListener<Delayed> actorListener1 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor1 = new Actor<Delayed>(forkJoinPool0, actorListener1);
      actor1.status();
      actor0.shutdown();
      ForkJoinPool forkJoinPool1 = null;
      try {
        forkJoinPool1 = new ForkJoinPool(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2775);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2, 6, 2, timeUnit0, blockingQueue0, threadPoolExecutor_DiscardPolicy0);
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(threadPoolExecutor0);
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(threadPoolExecutor0, actorListener0);
      actor0.task(orderedExecutor0);
      actor0.isFlushed();
      actor0.shutdown();
      DefaultThreadFactory defaultThreadFactory0 = null;
      try {
        defaultThreadFactory0 = new DefaultThreadFactory("Unable to parse the integer system property '{}':{} - using the default value: {}", 2775);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // priority: 2775 (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)
         //
         verifyException("io.netty.util.concurrent.DefaultThreadFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      Class<OrderedExecutor> class0 = OrderedExecutor.class;
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(class0, true);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(123, 123, 123, timeUnit0, synchronousQueue0, defaultThreadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(threadPoolExecutor0, actorListener0);
      ActorListener<Delayed> actorListener1 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor1 = new Actor<Delayed>(threadPoolExecutor0, actorListener1);
      actor1.flush(1, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      actor1.shutdown(0L, timeUnit1);
      ActorListener<Object> actorListener2 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor2 = new Actor<Object>(threadPoolExecutor0, actorListener2);
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(threadPoolExecutor0);
      orderedExecutor0.remaining();
      actor2.doTask(orderedExecutor0);
      actor2.task(timeUnit0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(forkJoinPool0);
      Actor<Actor<Object>> actor0 = new Actor<Actor<Object>>(artemisExecutor0, (ActorListener<Actor<Object>>) null);
      Actor<Actor<Object>> actor1 = new Actor<Actor<Object>>(orderedExecutor0, (ActorListener<Actor<Object>>) null);
      actor1.status();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1993);
      assertNotNull(forkJoinPool0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertNotNull(orderedExecutor0);
      
      int int0 = orderedExecutor0.remaining();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, int0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Delayed> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Delayed>) callable0);
      assertNotNull(forkJoinTask0);
      
      Delayed delayed0 = forkJoinPool0.invoke(forkJoinTask0);
      assertNull(delayed0);
      
      boolean boolean0 = orderedExecutor0.flush(0L, timeUnit0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(boolean0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "KcI#1HF+Q.!&\")q");
      assertNotNull(mockThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(thread_UncaughtExceptionHandler0);
      
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      orderedExecutor0.execute(mockThread0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ActorListener<Actor<Delayed>> actorListener0 = (ActorListener<Actor<Delayed>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<Delayed>> actor0 = new Actor<Actor<Delayed>>(orderedExecutor0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      int int1 = actor0.status();
      assertTrue(int1 == int0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, int1);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      ActorListener<Delayed> actorListener1 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor1 = new Actor<Delayed>(orderedExecutor0, actorListener1);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertNotNull(actor1);
      
      actor1.shutdown();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      
      ActorListener<OrderedExecutor> actorListener2 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor2 = new Actor<OrderedExecutor>(orderedExecutor0, actorListener2);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor2.isFlushed());
      assertEquals(0, actor2.status());
      assertNotNull(actor2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int2 = actor2.shutdownNow(consumer0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, int2);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(2, actor2.status());
      assertFalse(actor2.isFlushed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, (ActorListener<Object>) null);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertNotNull(actor0);
      
      int int0 = actor0.remaining();
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, int0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      actor0.shutdown();
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = actor0.shutdownNow(consumer0);
      assertTrue(int1 == int0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, int1);
      assertEquals(2, actor0.status());
      assertFalse(actor0.isFlushed());
      
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int2 = actor0.shutdownNow(consumer1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, int2);
      assertEquals(2, actor0.status());
      assertFalse(actor0.isFlushed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, (ActorListener<Object>) null);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      actor0.shutdown();
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = actor0.shutdownNow(consumer0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, int0);
      assertFalse(actor0.isFlushed());
      assertEquals(2, actor0.status());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(forkJoinPool0);
      assertNotNull(artemisExecutor0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(artemisExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertNotNull(orderedExecutor0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "RXs", 0L);
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "-");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertEquals(151, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(mockThread2);
      
      orderedExecutor0.execute(mockThread2);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      ActorListener<Delayed> actorListener0 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor0 = new Actor<Delayed>(forkJoinPool0, actorListener0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = actor0.flush((-1L), timeUnit0);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertTrue(boolean0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      orderedExecutor0.doTask((Runnable) null);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      
      Actor<Object> actor1 = new Actor<Object>(forkJoinPool0, (ActorListener<Object>) null);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = actor1.shutdownNow(consumer0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, int0);
      assertFalse(actor1.isFlushed());
      assertEquals(2, actor1.status());
      
      ActorListener<OrderedExecutor> actorListener1 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor2 = new Actor<OrderedExecutor>(orderedExecutor0, actorListener1);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertNotNull(actor2);
      
      actor2.act(orderedExecutor0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, actor2.status());
      assertTrue(actor2.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(forkJoinPool0);
      assertNotNull(artemisExecutor0);
      
      Actor<Object> actor0 = new Actor<Object>(artemisExecutor0, (ActorListener<Object>) null);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      actor0.shutdown();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = actor0.shutdownNow(consumer0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, int0);
      assertEquals(2, actor0.status());
      assertFalse(actor0.isFlushed());
      
      boolean boolean0 = actor0.isFlushed();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertFalse(boolean0);
      assertEquals(2, actor0.status());
      assertFalse(actor0.isFlushed());
      
      ActorListener<Delayed> actorListener0 = (ActorListener<Delayed>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Delayed> actor1 = new Actor<Delayed>(artemisExecutor0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
      assertNotNull(actor1);
      
      int int1 = actor1.remaining();
      assertTrue(int1 == int0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, int1);
      assertEquals(0, actor1.status());
      assertTrue(actor1.isFlushed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertNotNull(orderedExecutor0);
      
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(forkJoinPool0);
      assertNotNull(artemisExecutor0);
      
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(forkJoinPool0, (ActorListener<OrderedExecutor>) null);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      boolean boolean0 = actor0.isFlushed();
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(boolean0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      actor0.shutdown();
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      ActorListener<Callable<OrderedExecutor>> actorListener0 = (ActorListener<Callable<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Callable<OrderedExecutor>> actor1 = new Actor<Callable<OrderedExecutor>>(orderedExecutor0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      
      int int0 = actor1.remaining();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, int0);
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "\"eFvXb2yL`t";
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory("\"eFvXb2yL`t");
      assertNotNull(defaultThreadFactory0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(488, defaultThreadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(scheduledThreadPoolExecutor0, actorListener0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertNotNull(actor0);
      
      boolean boolean0 = actor0.isFlushed();
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(boolean0);
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(1, 0, 30L, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1114);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(scheduledThreadPoolExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertNotNull(orderedExecutor0);
      
      boolean boolean0 = orderedExecutor0.inHandler();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(boolean0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      
      ArtemisExecutor artemisExecutor0 = ArtemisExecutor.delegate(orderedExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertNotNull(artemisExecutor0);
      
      String string0 = orderedExecutor0.toString();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals("OrderedExecutor(tasks=[])", string0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertNotNull(string0);
      
      ActorListener<Actor<Object>> actorListener0 = (ActorListener<Actor<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<Object>> actor0 = new Actor<Actor<Object>>(orderedExecutor0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
      assertNotNull(actor0);
      
      actor0.shutdown();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(0, actor0.status());
      assertTrue(actor0.isFlushed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      scheduledThreadPoolExecutor0.shutdown();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(scheduledThreadPoolExecutor0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertNotNull(orderedExecutor0);
      
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(orderedExecutor0, actorListener0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = actor0.flush(0L, timeUnit0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(boolean0);
      assertFalse(orderedExecutor0.isFlushed());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertEquals(2, orderedExecutor0.status());
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Actor<Object> actor0 = new Actor<Object>(forkJoinPool0, (ActorListener<Object>) null);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      assertNotNull(actor0);
      
      int int0 = actor0.remaining();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, int0);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      actor0.shutdown();
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertTrue(actor0.isFlushed());
      assertEquals(0, actor0.status());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = actor0.shutdownNow(consumer0);
      assertTrue(int1 == int0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, int1);
      assertFalse(actor0.isFlushed());
      assertEquals(2, actor0.status());
      
      ActorListener<OrderedExecutor> actorListener0 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertNotNull(actor1);
      
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
      assertNotNull(orderedExecutor0);
      
      actor1.task(orderedExecutor0);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(0, ProcessorBase.STATE_NOT_RUNNING);
      assertEquals(2, ProcessorBase.STATE_FORCED_SHUTDOWN);
      assertEquals(1, ProcessorBase.STATE_RUNNING);
      assertTrue(actor1.isFlushed());
      assertEquals(0, actor1.status());
      assertEquals(2, orderedExecutor0.status());
      assertEquals(0, orderedExecutor0.shutdownNow());
      assertFalse(orderedExecutor0.isFlushed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ActorListener<ForkJoinTask<OrderedExecutor>> actorListener0 = (ActorListener<ForkJoinTask<OrderedExecutor>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<ForkJoinTask<OrderedExecutor>> actor0 = new Actor<ForkJoinTask<OrderedExecutor>>(forkJoinPool0, actorListener0);
      Callable<OrderedExecutor> callable0 = (Callable<OrderedExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Callable<OrderedExecutor> callable1 = (Callable<OrderedExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<OrderedExecutor> forkJoinTask0 = forkJoinPool0.submit(callable1);
      forkJoinTask0.quietlyComplete();
      actor0.act(forkJoinTask0);
      ForkJoinTask<OrderedExecutor> forkJoinTask1 = forkJoinPool0.submit(callable0);
      actor0.act(forkJoinTask1);
      ActorListener<OrderedExecutor> actorListener1 = (ActorListener<OrderedExecutor>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<OrderedExecutor> actor1 = new Actor<OrderedExecutor>(forkJoinPool0, actorListener1);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      actor1.shutdown((long) 1, timeUnit0);
      Actor<Delayed> actor2 = new Actor<Delayed>(forkJoinPool0, (ActorListener<Delayed>) null);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      actor2.shutdown((long) 2, timeUnit1);
      ForkJoinPool forkJoinPool1 = new ForkJoinPool();
      ActorListener<Actor<Object>> actorListener2 = (ActorListener<Actor<Object>>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Actor<Object>> actor3 = new Actor<Actor<Object>>(forkJoinPool1, actorListener2);
      actor3.remaining();
      OrderedExecutor orderedExecutor0 = new OrderedExecutor(forkJoinPool0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "com.google.common.util.concurrent.ForwardingListenableFuture", 30L);
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      orderedExecutor0.doTask(mockThread2);
      orderedExecutor0.execute(mockThread2);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-3782));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2775);
      Actor<OrderedExecutor> actor0 = new Actor<OrderedExecutor>(scheduledThreadPoolExecutor0, (ActorListener<OrderedExecutor>) null);
      actor0.shutdown();
      assertEquals(0, actor0.status());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4761, threadPoolExecutor_CallerRunsPolicy0);
      ActorListener<Object> actorListener0 = (ActorListener<Object>) mock(ActorListener.class, new ViolatedAssumptionAnswer());
      Actor<Object> actor0 = new Actor<Object>(scheduledThreadPoolExecutor0, actorListener0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      actor0.shutdown(0L, timeUnit0);
      LinkedList<Callable<Object>> linkedList0 = new LinkedList<Callable<Object>>();
      // Undeclared exception!
      try { 
        scheduledThreadPoolExecutor0.invokeAny((Collection<? extends Callable<Object>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.AbstractExecutorService", e);
      }
  }
}
