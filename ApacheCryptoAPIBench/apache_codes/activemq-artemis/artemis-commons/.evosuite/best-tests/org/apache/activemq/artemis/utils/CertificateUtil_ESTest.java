/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:07:05 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelPipeline;
import javax.security.cert.X509Certificate;
import org.apache.activemq.artemis.utils.CertificateUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CertificateUtil_ESTest extends CertificateUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPipeline) null).when(channel0).pipeline();
      // Undeclared exception!
      try { 
        CertificateUtil.getCertsFromChannel(channel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CertificateUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn(channelHandler0).when(channelPipeline0).get(anyString());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).pipeline();
      X509Certificate[] x509CertificateArray0 = CertificateUtil.getCertsFromChannel(channel0);
      assertNull(x509CertificateArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelHandler) null).when(channelPipeline0).get(anyString());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).pipeline();
      X509Certificate[] x509CertificateArray0 = CertificateUtil.getCertsFromChannel(channel0);
      assertNull(x509CertificateArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CertificateUtil certificateUtil0 = new CertificateUtil();
  }
}
