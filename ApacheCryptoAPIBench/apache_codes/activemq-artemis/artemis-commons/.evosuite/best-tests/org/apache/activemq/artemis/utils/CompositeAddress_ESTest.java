/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:05:47 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import java.util.regex.PatternSyntaxException;
import org.apache.activemq.artemis.api.core.SimpleString;
import org.apache.activemq.artemis.utils.CompositeAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompositeAddress_ESTest extends CompositeAddress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("&(JRjs;S");
      SimpleString simpleString1 = CompositeAddress.extractQueueName(simpleString0);
      SimpleString simpleString2 = CompositeAddress.toFullQN(simpleString1, simpleString0);
      assertEquals(40, simpleString2.sizeof());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeAddress.SEPARATOR = "";
      String string0 = CompositeAddress.toFullQN("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = CompositeAddress.isFullyQualified("::");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress("&(JRjs;S", (String) null);
      boolean boolean0 = compositeAddress0.isFqqn();
      assertEquals("&(JRjs;S", compositeAddress0.getAddress());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeAddress compositeAddress0 = CompositeAddress.getQueueName("hRQW::hRQW");
      assertTrue(compositeAddress0.isFqqn());
      assertEquals("hRQW", compositeAddress0.getAddress());
      assertEquals("hRQW", compositeAddress0.getQueueName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress("0S7NU8mV-1bOH1R).~", "0S7NU8mV-1bOH1R).~");
      String string0 = compositeAddress0.getQueueName();
      assertEquals("0S7NU8mV-1bOH1R).~", compositeAddress0.getAddress());
      assertEquals("0S7NU8mV-1bOH1R).~", string0);
      assertTrue(compositeAddress0.isFqqn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress("");
      String string0 = compositeAddress0.getQueueName();
      assertFalse(compositeAddress0.isFqqn());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress("&(JRjs;S", (String) null);
      String string0 = compositeAddress0.getAddress();
      assertNotNull(string0);
      assertEquals("&(JRjs;S", string0);
      assertTrue(compositeAddress0.isFqqn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeAddress compositeAddress0 = CompositeAddress.getQueueName("::");
      String string0 = compositeAddress0.getAddress();
      assertEquals("", string0);
      assertEquals("", compositeAddress0.getQueueName());
      assertFalse(compositeAddress0.isFqqn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).readBytes(any(byte[].class));
      doReturn(0).when(byteBuf0).readInt();
      SimpleString simpleString0 = SimpleString.readSimpleString(byteBuf0, (SimpleString.ByteBufSimpleStringPool) null);
      SimpleString simpleString1 = CompositeAddress.extractQueueName(simpleString0);
      assertEquals(4, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = CompositeAddress.extractQueueName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = CompositeAddress.extractAddressName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompositeAddress.SEPARATOR = ";";
      // Undeclared exception!
      try { 
        CompositeAddress.getQueueName(";");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.getQueueName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).readBytes(any(byte[].class));
      SimpleString simpleString0 = SimpleString.readSimpleString(byteBuf0, 65535);
      // Undeclared exception!
      CompositeAddress.extractQueueName(simpleString0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("i");
      CompositeAddress.SEPARATOR = "";
      // Undeclared exception!
      try { 
        CompositeAddress.extractQueueName(simpleString0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.extractQueueName((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.extractQueueName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompositeAddress.SEPARATOR = "w!#C^1X8(Eod_p ";
      // Undeclared exception!
      try { 
        CompositeAddress.extractAddressName("C");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // w!#C^1X8(Eod_p 
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.extractAddressName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.extractAddressName("::");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeAddress compositeAddress0 = null;
      try {
        compositeAddress0 = new CompositeAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = CompositeAddress.extractQueueName("Y5c+");
      assertEquals("Y5c+", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress("", "");
      assertFalse(compositeAddress0.isFqqn());
      assertEquals("", compositeAddress0.getAddress());
      assertEquals("", compositeAddress0.getQueueName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeAddress.SEPARATOR = "";
      // Undeclared exception!
      try { 
        CompositeAddress.extractQueueName("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.getQueueName("xH#C%}@@wfP;Ck");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not A Fully Qualified Name
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompositeAddress.SEPARATOR = ";";
      CompositeAddress compositeAddress0 = null;
      try {
        compositeAddress0 = new CompositeAddress(";");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = CompositeAddress.isFullyQualified("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = CompositeAddress.extractAddressName("TW`B");
      assertEquals("TW`B", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompositeAddress.toFullQN((SimpleString) null, (SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.CompositeAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress((String) null, (String) null);
      String string0 = compositeAddress0.getQueueName();
      assertFalse(compositeAddress0.isFqqn());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeAddress compositeAddress0 = CompositeAddress.getQueueName("::");
      boolean boolean0 = compositeAddress0.isFqqn();
      assertEquals("", compositeAddress0.getQueueName());
      assertEquals("", compositeAddress0.getAddress());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeAddress compositeAddress0 = new CompositeAddress("kBQW");
      String string0 = compositeAddress0.getAddress();
      assertNull(string0);
      assertEquals("kBQW", compositeAddress0.getQueueName());
      assertFalse(compositeAddress0.isFqqn());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = CompositeAddress.toFullQN(";", "1vRJ");
      assertEquals(";::1vRJ", string0);
  }
}
