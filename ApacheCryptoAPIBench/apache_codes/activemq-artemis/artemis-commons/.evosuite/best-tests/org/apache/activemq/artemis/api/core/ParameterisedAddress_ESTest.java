/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:04:08 GMT 2022
 */

package org.apache.activemq.artemis.api.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.activemq.artemis.api.core.ParameterisedAddress;
import org.apache.activemq.artemis.api.core.QueueAttributes;
import org.apache.activemq.artemis.api.core.SimpleString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParameterisedAddress_ESTest extends ParameterisedAddress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      SimpleString simpleString1 = ParameterisedAddress.toParameterisedAddress(simpleString0, (Map<String, String>) null);
      assertEquals(4, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      boolean boolean0 = ParameterisedAddress.isParameterised(simpleString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = ParameterisedAddress.isParameterised("K#v?=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QueueAttributes queueAttributes0 = new QueueAttributes();
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress("%g0<gg?%[3Z< tCk*n", queueAttributes0);
      QueueAttributes queueAttributes1 = parameterisedAddress0.getQueueAttributes();
      assertNull(queueAttributes1.getMaxConsumers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QueueAttributes queueAttributes0 = new QueueAttributes();
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress((SimpleString) null, queueAttributes0);
      SimpleString simpleString0 = parameterisedAddress0.getAddress();
      assertNull(simpleString0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress("");
      parameterisedAddress0.getAddress();
      assertFalse(parameterisedAddress0.isParameterised());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = simpleString_StringSimpleStringPool0.getOrCreate((String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "io.netty.buffer.SimpleLeakAwareByteBuf");
      // Undeclared exception!
      try { 
        ParameterisedAddress.toParameterisedAddress(simpleString0, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.ParameterisedAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("tSzcuvYMo\u0006.Q[/", "tSzcuvYMo\u0006.Q[/");
      // Undeclared exception!
      try { 
        ParameterisedAddress.toParameterisedAddress((String) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterisedAddress.isParameterised((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParameterisedAddress.isParameterised((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterisedAddress parameterisedAddress0 = null;
      try {
        parameterisedAddress0 = new ParameterisedAddress((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.ParameterisedAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterisedAddress parameterisedAddress0 = null;
      try {
        parameterisedAddress0 = new ParameterisedAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.ParameterisedAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterisedAddress parameterisedAddress0 = null;
      try {
        parameterisedAddress0 = new ParameterisedAddress("g?O;EljS%=8TE;yn4}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Incomplete trailing escape (%) pattern
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Malformed parameters in address ", "Malformed parameters in address ");
      String string0 = ParameterisedAddress.toParameterisedAddress("g", (Map<String, String>) hashMap0);
      assertEquals("g?Malformed+parameters+in+address+=Malformed+parameters+in+address+", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QueueAttributes queueAttributes0 = new QueueAttributes();
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress("%g0<gg?%[3Z< tCk*n", queueAttributes0);
      boolean boolean0 = parameterisedAddress0.isParameterised();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress("");
      boolean boolean0 = parameterisedAddress0.isParameterised();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress("G?1w~'/");
      assertTrue(parameterisedAddress0.isParameterised());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = ParameterisedAddress.toParameterisedAddress((String) null, (Map<String, String>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ParameterisedAddress.toParameterisedAddress("", (Map<String, String>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('A');
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("xwh@", "Java version: {}");
      SimpleString simpleString1 = ParameterisedAddress.toParameterisedAddress(simpleString0, (Map<String, String>) hashMap0);
      assertEquals(31, simpleString1.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('A');
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleString simpleString1 = ParameterisedAddress.toParameterisedAddress(simpleString0, (Map<String, String>) hashMap0);
      assertSame(simpleString1, simpleString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleString simpleString0 = ParameterisedAddress.toParameterisedAddress((SimpleString) null, (Map<String, String>) null);
      assertNull(simpleString0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = ParameterisedAddress.isParameterised("K#v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('A');
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress(simpleString0);
      QueueAttributes queueAttributes0 = parameterisedAddress0.getQueueAttributes();
      assertNull(queueAttributes0);
      assertFalse(parameterisedAddress0.isParameterised());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QueueAttributes queueAttributes0 = new QueueAttributes();
      ParameterisedAddress parameterisedAddress0 = new ParameterisedAddress("%g0<gg?%[3Z< tCk*n", queueAttributes0);
      SimpleString simpleString0 = parameterisedAddress0.getAddress();
      boolean boolean0 = ParameterisedAddress.isParameterised(simpleString0);
      assertTrue(boolean0);
  }
}
