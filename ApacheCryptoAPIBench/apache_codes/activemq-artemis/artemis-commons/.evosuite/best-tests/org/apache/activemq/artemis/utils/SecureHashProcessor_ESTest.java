/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:11:01 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec;
import org.apache.activemq.artemis.utils.SecureHashProcessor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SecureHashProcessor_ESTest extends SecureHashProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = mock(DefaultSensitiveStringCodec.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(defaultSensitiveStringCodec0).verify(any(char[].class) , anyString());
      SecureHashProcessor secureHashProcessor0 = new SecureHashProcessor(defaultSensitiveStringCodec0);
      char[] charArray0 = new char[6];
      boolean boolean0 = secureHashProcessor0.compare(charArray0, "two-way");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = mock(DefaultSensitiveStringCodec.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(defaultSensitiveStringCodec0).verify(any(char[].class) , anyString());
      SecureHashProcessor secureHashProcessor0 = new SecureHashProcessor(defaultSensitiveStringCodec0);
      char[] charArray0 = new char[6];
      boolean boolean0 = secureHashProcessor0.compare(charArray0, "two-way");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SecureHashProcessor secureHashProcessor0 = new SecureHashProcessor((DefaultSensitiveStringCodec) null);
      try { 
        secureHashProcessor0.hash("+}h<>3]VSO0nZ0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.SecureHashProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = mock(DefaultSensitiveStringCodec.class, new ViolatedAssumptionAnswer());
      SecureHashProcessor secureHashProcessor0 = new SecureHashProcessor(defaultSensitiveStringCodec0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        secureHashProcessor0.compare(charArray0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = mock(DefaultSensitiveStringCodec.class, new ViolatedAssumptionAnswer());
      doReturn("3b>$u").when(defaultSensitiveStringCodec0).encode(any());
      SecureHashProcessor secureHashProcessor0 = new SecureHashProcessor(defaultSensitiveStringCodec0);
      String string0 = secureHashProcessor0.hash("XI$RV)46Qep:;");
      assertEquals("ENC(3b>$u)", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SecureHashProcessor secureHashProcessor0 = new SecureHashProcessor((DefaultSensitiveStringCodec) null);
      // Undeclared exception!
      try { 
        secureHashProcessor0.compare((char[]) null, "6kAL^<(Q}Ct){");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.SecureHashProcessor", e);
      }
  }
}
