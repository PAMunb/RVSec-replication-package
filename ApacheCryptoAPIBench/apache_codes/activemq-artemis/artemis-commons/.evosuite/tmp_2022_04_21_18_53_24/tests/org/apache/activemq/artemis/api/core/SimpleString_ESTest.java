/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 18:58:30 GMT 2022
 */

package org.apache.activemq.artemis.api.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledHeapByteBuf;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import java.nio.ReadOnlyBufferException;
import java.util.Comparator;
import java.util.TreeSet;
import org.apache.activemq.artemis.api.core.SimpleString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleString_ESTest extends SimpleString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool(0, 0);
      boolean boolean0 = simpleString_ByteBufSimpleStringPool0.canPool((ByteBuf) null, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool(27, 27);
      // Undeclared exception!
      try { 
        simpleString_ByteBufSimpleStringPool0.canPool((ByteBuf) null, 27);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // length must be a multiple of 2
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0001');
      simpleString0.getChars('\u0001', '\u0001', (char[]) null, '\u0001');
      assertEquals(1, simpleString0.length());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SimpleString simpleString0 = new SimpleString(byteArray0);
      // Undeclared exception!
      try { 
        simpleString0.getChars((byte)0, (byte) (-93), (char[]) null, (byte)51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -93
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      int int0 = SimpleString.sizeofNullableString(simpleString0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)111;
      SimpleString simpleString0 = new SimpleString(byteArray0);
      boolean boolean0 = simpleString0.contains('-');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\'');
      boolean boolean0 = simpleString0.contains('\"');
      assertFalse(boolean0);
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)32;
      SimpleString simpleString0 = new SimpleString(byteArray0);
      SimpleString[] simpleStringArray0 = simpleString0.split('y');
      assertEquals(1, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SimpleString simpleString0 = new SimpleString(byteArray0);
      SimpleString[] simpleStringArray0 = simpleString0.split('T');
      assertEquals(1, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('^');
      SimpleString[] simpleStringArray0 = simpleString0.split('^');
      assertEquals(2, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-84);
      SimpleString simpleString0 = new SimpleString(byteArray0);
      simpleString0.hashCode();
      simpleString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      SimpleString simpleString1 = new SimpleString('D');
      boolean boolean0 = simpleString0.startsWith(simpleString1);
      assertEquals(6, simpleString1.sizeof());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u001F');
      // Undeclared exception!
      try { 
        simpleString0.subSeq(0, 1622);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-88);
      SimpleString simpleString0 = new SimpleString(byteArray0);
      char char0 = simpleString0.charAt(0);
      assertEquals('\uA800', char0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      // Undeclared exception!
      try { 
        simpleString0.charAt(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool(2420);
      SimpleString simpleString0 = SimpleString.toSimpleString((String) null, simpleString_StringSimpleStringPool0);
      assertNull(simpleString0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      SimpleString simpleString1 = (SimpleString)simpleString0.subSequence(13, 13);
      assertEquals(4, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("-Dio.netty.no(eiourceLeakDetecton is deprecated. Use '-{}={}' instead");
      CharSequence charSequence0 = simpleString0.subSequence(32, 64);
      assertEquals(32, charSequence0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0001');
      SimpleString simpleString1 = simpleString0.subSeq('\u0001', '\u0001');
      assertEquals(6, simpleString0.sizeof());
      assertTrue(simpleString1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      int int0 = SimpleString.sizeofString(simpleString0);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('@');
      int int0 = simpleString0.sizeof();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, true);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeBuffer();
      SimpleString simpleString0 = SimpleString.readSimpleString((ByteBuf) compositeByteBuf0, 0);
      assertEquals(0, simpleString0.length());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)75, 3448);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.writerIndex(31);
      SimpleString simpleString0 = SimpleString.readSimpleString(byteBuf0, 6);
      assertEquals(3, simpleString0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u001D');
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.buffer(3);
      SimpleString.writeSimpleString(byteBuf0, simpleString0);
      SimpleString simpleString1 = SimpleString.readSimpleString(byteBuf0);
      assertEquals(6, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, 1357, 1357);
      SimpleString simpleString0 = new SimpleString("{");
      SimpleString.writeNullableSimpleString(unpooledHeapByteBuf0, simpleString0);
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      SimpleString.readNullableSimpleString((ByteBuf) unpooledHeapByteBuf0, simpleString_ByteBufSimpleStringPool0);
      assertEquals(1350, unpooledHeapByteBuf0.maxWritableBytes());
      assertEquals(7, unpooledHeapByteBuf0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SimpleString simpleString0 = new SimpleString(byteArray0);
      int int0 = simpleString0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool(2420);
      SimpleString simpleString0 = simpleString_StringSimpleStringPool0.create("N8kGmuHZM");
      int int0 = simpleString0.length();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      byte[] byteArray0 = simpleString0.getData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      byte[] byteArray0 = simpleString0.getData();
      assertEquals(26, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("UC<;");
      boolean boolean0 = simpleString0.equals((ByteBuf) null, 2741, 2741);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("");
      SimpleString simpleString1 = simpleString0.concat(simpleString0);
      assertTrue(simpleString1.equals((Object)simpleString0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      SimpleString simpleString1 = simpleString0.concat('`');
      SimpleString simpleString2 = simpleString0.concat(simpleString1);
      assertEquals(6, simpleString2.sizeof());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      SimpleString simpleString1 = simpleString0.concat("");
      assertNotSame(simpleString1, simpleString0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      int int0 = simpleString0.compareTo(simpleString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)36;
      SimpleString simpleString0 = new SimpleString(byteArray0);
      SimpleString simpleString1 = new SimpleString('3');
      int int0 = simpleString0.compareTo(simpleString1);
      assertEquals(9165, int0);
      assertEquals(6, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = simpleString_StringSimpleStringPool0.create("Java version: {}");
      SimpleString simpleString1 = new SimpleString('3');
      int int0 = simpleString1.compareTo(simpleString0);
      assertEquals(6, simpleString1.sizeof());
      assertEquals((-23), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("Hs58E3oi@s7,Z.;nZ");
      char char0 = simpleString0.charAt(5);
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("`+");
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 2, 34);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        SimpleString.writeSimpleString(byteBuf0, simpleString0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.ReadOnlyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0002');
      // Undeclared exception!
      try { 
        SimpleString.writeSimpleString((ByteBuf) null, simpleString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("1{A_|");
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      // Undeclared exception!
      try { 
        SimpleString.writeSimpleString(emptyByteBuf0, simpleString0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.subSeq((-1740), (-1740));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~KTqg");
      // Undeclared exception!
      try { 
        simpleString0.startsWith((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.split('*');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<ByteBuf> treeSet0 = new TreeSet<ByteBuf>(comparator0);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 76, treeSet0);
      // Undeclared exception!
      compositeByteBuf0.writeByte(2294);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) null, simpleString_ByteBufSimpleStringPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.AbstractByteBufPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeMedium((-1));
      byte[] byteArray0 = new byte[7];
      compositeByteBuf1.writeBytes(byteArray0);
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) compositeByteBuf1, (SimpleString.ByteBufSimpleStringPool) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeDouble((-4858.269854405));
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) compositeByteBuf1, simpleString_ByteBufSimpleStringPool0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // length must be a multiple of 2
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer(1397);
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) compositeByteBuf0, 1397);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(1397) exceeds writerIndex(0): CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 63, 63);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.writeDouble((-2782.5325));
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString(byteBuf0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) emptyByteBuf0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 47, 47);
      unpooledUnsafeDirectByteBuf0.writeDoubleLE(643.3743278);
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      // Undeclared exception!
      SimpleString.readNullableSimpleString((ByteBuf) unpooledUnsafeDirectByteBuf0, simpleString_ByteBufSimpleStringPool0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      // Undeclared exception!
      try { 
        SimpleString.readNullableSimpleString((ByteBuf) null, simpleString_ByteBufSimpleStringPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      // Undeclared exception!
      try { 
        SimpleString.readNullableSimpleString((ByteBuf) emptyByteBuf0, (SimpleString.ByteBufSimpleStringPool) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleString.readNullableSimpleString((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 3171, 3171);
      unpooledUnsafeDirectByteBuf0.writeDoubleLE((-810.3975));
      // Undeclared exception!
      try { 
        SimpleString.readNullableSimpleString((ByteBuf) unpooledUnsafeDirectByteBuf0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("-Dio.netty.no(eiourceLeakDetecton is deprecated. Use '-{}={}' instead");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        simpleString0.getChars(32, 47, charArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0001');
      // Undeclared exception!
      try { 
        simpleString0.equals((ByteBuf) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.ByteUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.contains('\\');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("\u0002");
      // Undeclared exception!
      try { 
        simpleString0.concat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.concat('T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.charAt(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleString simpleString0 = null;
      try {
        simpleString0 = new SimpleString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = new SimpleString('~');
      simpleString_StringSimpleStringPool0.isEqual(simpleString0, "5tYr~dKs~KQqg");
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      String string0 = simpleString0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = SimpleString.toSimpleString("-Dio.netty.no(eiourceLeakDetecton is deprecated. Use '-{}={}' instead", simpleString_StringSimpleStringPool0);
      // Undeclared exception!
      try { 
        simpleString0.subSeq(1764, (-609));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) null, (-884));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("");
      byte[] byteArray0 = simpleString0.getData();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.sizeof();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      // Undeclared exception!
      try { 
        simpleString0.concat((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      boolean boolean0 = simpleString_ByteBufSimpleStringPool0.canPool((ByteBuf) null, 256);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer((int) 'K');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      compositeByteBuf0.writeBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool(32);
      SimpleString simpleString0 = SimpleString.toSimpleString("=E_uSY^j4H8yM", simpleString_StringSimpleStringPool0);
      boolean boolean0 = simpleString_ByteBufSimpleStringPool0.isEqual(simpleString0, (ByteBuf) null, 32, 32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('v');
      // Undeclared exception!
      try { 
        simpleString0.getChars('v', (-1453), (char[]) null, 'v');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1571
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\uFFF2');
      // Undeclared exception!
      try { 
        simpleString0.getChars('\uFFF2', '\uFFF2', (char[]) null, '\uFFF2');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 65522
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('+');
      // Undeclared exception!
      try { 
        simpleString0.getChars((-1861), (-1861), (char[]) null, (-1861));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1861
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = SimpleString.sizeofNullableString((SimpleString) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-111);
      byteArray0[6] = (byte) (-114);
      SimpleString simpleString0 = new SimpleString(byteArray0);
      boolean boolean0 = simpleString0.contains('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u001C');
      simpleString0.toString();
      boolean boolean0 = simpleString0.contains('\u001C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 34, 34);
      unpooledUnsafeDirectByteBuf0.writeDoubleLE(34);
      SimpleString simpleString0 = SimpleString.readSimpleString((ByteBuf) unpooledUnsafeDirectByteBuf0);
      boolean boolean0 = simpleString0.contains('/');
      assertEquals(4, unpooledUnsafeDirectByteBuf0.readerIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0000');
      boolean boolean0 = simpleString0.contains('\u0000');
      assertTrue(boolean0);
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("");
      SimpleString[] simpleStringArray0 = simpleString0.split('7');
      assertEquals(1, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)50;
      SimpleString simpleString0 = new SimpleString(byteArray0);
      SimpleString[] simpleStringArray0 = simpleString0.split('\u0000');
      assertEquals(1, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)50;
      SimpleString simpleString0 = new SimpleString(byteArray0);
      SimpleString[] simpleStringArray0 = simpleString0.split('\u0000');
      assertEquals(3, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("#E<`j7Wl47u;;");
      SimpleString[] simpleStringArray0 = simpleString0.split('#');
      assertEquals(2, simpleStringArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('y');
      simpleString0.hashCode();
      simpleString0.hashCode();
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("5tYr~dK7~.T0Bqg");
      boolean boolean0 = simpleString0.equals((Object) "5tYr~dK7~.T0Bqg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("-io.netty.no(eiourceLeakDetecton isdeprecated. Use '-{}={}' instead");
      boolean boolean0 = simpleString0.equals((Object) simpleString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0002');
      SimpleString simpleString1 = new SimpleString('\u0002');
      boolean boolean0 = simpleString1.equals((Object) simpleString0);
      assertTrue(boolean0);
      assertEquals(6, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = new SimpleString('\'');
      SimpleString simpleString1 = simpleString_StringSimpleStringPool0.create("pU]E%a*T`q'M\"k");
      boolean boolean0 = simpleString1.startsWith(simpleString0);
      assertFalse(boolean0);
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0000');
      byte[] byteArray0 = new byte[8];
      SimpleString simpleString1 = new SimpleString(byteArray0);
      boolean boolean0 = simpleString0.startsWith(simpleString1);
      assertFalse(boolean0);
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\'');
      boolean boolean0 = simpleString0.startsWith(simpleString0);
      assertEquals(6, simpleString0.sizeof());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = simpleString_StringSimpleStringPool0.create("-Dio.netty.no(eiourceLeakDetecton is deprecated. Use'-{}={}' instead");
      SimpleString simpleString1 = simpleString0.subSeq(32, 60);
      assertEquals(60, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString("");
      // Undeclared exception!
      try { 
        simpleString0.subSeq((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SimpleString simpleString0 = new SimpleString(byteArray0);
      // Undeclared exception!
      try { 
        simpleString0.subSequence((byte)0, (-81));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      // Undeclared exception!
      try { 
        SimpleString.writeNullableSimpleString(emptyByteBuf0, (SimpleString) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("\u0002");
      // Undeclared exception!
      try { 
        SimpleString.writeNullableSimpleString((ByteBuf) null, simpleString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer();
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeZero(272);
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      SimpleString.readNullableSimpleString((ByteBuf) compositeByteBuf1, simpleString_ByteBufSimpleStringPool0);
      assertEquals(1, compositeByteBuf1.readerIndex());
      assertEquals(1, compositeByteBuf0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer((int) 'K');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      compositeByteBuf0.writeBytes(byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 639, 639);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.writeDoubleLE(639);
      SimpleString.readNullableSimpleString(byteBuf0);
      assertEquals(1, byteBuf0.readerIndex());
      assertEquals(1, unpooledUnsafeDirectByteBuf0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 947, 1276);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.writeMediumLE(1276);
      // Undeclared exception!
      try { 
        SimpleString.readNullableSimpleString(byteBuf0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(1) + length(4) exceeds writerIndex(3): UnpooledUnsafeDirectByteBuf(ridx: 1, widx: 3, cap: 947/1276)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0013');
      // Undeclared exception!
      try { 
        simpleString0.charAt('\u0013');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString('\u0000');
      char char0 = simpleString0.charAt('\u0000');
      assertEquals('\u0000', char0);
      assertEquals(6, simpleString0.sizeof());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SimpleString simpleString0 = new SimpleString(byteArray0);
      // Undeclared exception!
      try { 
        simpleString0.charAt((-970));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 34, 34);
      unpooledUnsafeDirectByteBuf0.writeDoubleLE(34);
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      SimpleString simpleString0 = SimpleString.readSimpleString((ByteBuf) unpooledUnsafeDirectByteBuf0, simpleString_ByteBufSimpleStringPool0);
      boolean boolean0 = simpleString0.isEmpty();
      assertEquals(4, unpooledUnsafeDirectByteBuf0.readableBytes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString(");");
      boolean boolean0 = simpleString0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("", (SimpleString.StringSimpleStringPool) null);
      assertTrue(simpleString0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString((String) null);
      assertNull(simpleString0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SimpleString.sizeofString((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      // Undeclared exception!
      try { 
        SimpleString.readSimpleString((ByteBuf) compositeByteBuf0, (SimpleString.ByteBufSimpleStringPool) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex(0) + length(4) exceeds writerIndex(0): CompositeByteBuf(ridx: 0, widx: 0, cap: 0, components=0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        SimpleString.sizeofNullableString(simpleString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("`+");
      assertNotNull(simpleString0);
      
      SimpleString simpleString1 = simpleString0.concat("v>");
      assertEquals(14, simpleString1.sizeof());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SimpleString simpleString0 = new SimpleString(byteArray0);
      // Undeclared exception!
      try { 
        simpleString0.compareTo((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleString simpleString0 = new SimpleString((byte[]) null);
      // Undeclared exception!
      try { 
        simpleString0.subSequence(1621, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString(");");
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer(46, 46);
      // Undeclared exception!
      try { 
        simpleString0.equals(byteBuf0, (int) 'H', 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.ByteUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleString.ByteBufSimpleStringPool simpleString_ByteBufSimpleStringPool0 = new SimpleString.ByteBufSimpleStringPool();
      // Undeclared exception!
      try { 
        simpleString_ByteBufSimpleStringPool0.create((ByteBuf) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleString.StringSimpleStringPool simpleString_StringSimpleStringPool0 = new SimpleString.StringSimpleStringPool();
      SimpleString simpleString0 = SimpleString.toSimpleString("-io.netty.no(eiourceLeakDetecton isdeprecated. Use '-{={}' instead", simpleString_StringSimpleStringPool0);
      // Undeclared exception!
      try { 
        simpleString0.getChars(32, 36, (char[]) null, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.api.core.SimpleString", e);
      }
  }
}
