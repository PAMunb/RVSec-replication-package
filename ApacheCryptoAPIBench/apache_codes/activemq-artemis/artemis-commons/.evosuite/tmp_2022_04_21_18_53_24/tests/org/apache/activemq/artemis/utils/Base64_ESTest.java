/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 18:58:31 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Serializable;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = Base64.decodeToObject("Unable to load configuration class ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Base64.encodeObject((Serializable) (byte)109, 915);
      assertNotNull(string0);
      assertEquals("H4sIAAAAAAAAAFvzloA1AIABLAAxLFEvJzEvXcApsAR1jl9AA7AArzJMDIxADAxlATAlARVFDAII\nRXAlAUApRA1rpspAT3nQzcTAUFAQAwBxb3AFAwAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        Base64.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream((OutputStream) null);
      assertNotNull(base64_OutputStream0);
      
      byte[] byteArray0 = new byte[8];
      base64_OutputStream0.write(byteArray0, 1239, (int) (byte) (-122));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0);
      assertNotNull(base64_OutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      base64_OutputStream0.suspendEncoding();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byteArrayOutputStream0.writeTo(base64_OutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte)2);
      assertNotNull(string0);
      assertEquals("H4sIAAAAAAAAAGNgYGAAABzfRlEEAAAA", string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Base64.decodeFileToFile("Logging Provider: %s found via %s", "rO0ABXA=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-13);
      byteArray0[7] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)122, (byte) (-13), (byte)0, (byte)0, (byte)119}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)122, (byte) (-13), (byte)0, (byte)0, (byte)119}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int0 = base64_InputStream0.read();
      assertEquals(206, int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)122, (byte) (-13), (byte)0, (byte)0, (byte)119}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Base64.encodeToFile(byteArray0, "");
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile("SM:sEG", "SM:sEG");
      assertFalse(boolean0);
      
      String string0 = Base64.encodeFromFile("SM:sEG");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Base64.encodeFileToFile("K};3f?n<`|6yVTP3", "-d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      String string0 = Base64.encodeBytes(byteArray0, 6, 6);
      assertNotNull(string0);
      assertEquals("AAAAAAAA", string0);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Base64.encodeBytes(byteArray0, 579, (int) (byte)0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBytes(byteArray0, 993);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBytes(byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = Base64.decodeToObject("Fw==");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = Base64.decodeToObject("rO0ABXQADylRZmRjaXkuNW9PVC87fQ==");
      assertNotNull(object0);
      assertEquals(")Qfdciy.5oOT/;}", object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile("&{sK}7+$RA}C f>", "org.apache.activemq.artemis.utils.Base64$InputStream");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.decodeFromFile("org.apache.activemq.artemis.utils.Base64$InputStream");
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Base64.encodeToFile(byteArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeFileToFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 721, 1675, 721);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte)3, (int) (byte)0, (int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (-1944), (-1944));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, 44, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeToObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeToFile((String) null, "Dy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeToFile("FOg1n}<X", "Unknown flag: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.activemq.artemis.utils.Base64$OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeFileToFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile("Error decoding from file ", "n#HQ*J<;z6<?");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.decodeFileToFile("n#HQ*J<;z6<?", "Error decoding from file ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((byte[]) null, 38, (-2033), (-2033));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((String) null, 713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("o+v=LT", 904);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("2lH4!?o5Cktc");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream((OutputStream) null);
      assertNotNull(base64_OutputStream0);
      
      base64_OutputStream0.write(0);
      // Undeclared exception!
      try { 
        base64_OutputStream0.flushBase64();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64$OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(pipedOutputStream0, (-1316));
      assertNotNull(base64_OutputStream0);
      
      base64_OutputStream0.write((int) (byte)49);
      try { 
        base64_OutputStream0.flushBase64();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Base64 input not properly padded.
         //
         verifyException("org.apache.activemq.artemis.utils.Base64$OutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0);
      assertNotNull(base64_OutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      base64_OutputStream0.flushBase64();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        base64_InputStream0.read(byteArray0, (int) (byte)44, (int) (byte)30);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Improperly padded Base64 input.
         //
         verifyException("org.apache.activemq.artemis.utils.Base64$InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)109);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0, 151);
      assertNotNull(base64_InputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      int int0 = base64_InputStream0.read();
      assertEquals(65, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("TRACE", (-560));
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)16, (byte)2}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)16, (byte)2}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
      assertNotNull(base64_InputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)16, (byte)2}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      try { 
        base64_InputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Improperly padded Base64 input.
         //
         verifyException("org.apache.activemq.artemis.utils.Base64$InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[1];
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          assertNotNull(byteArrayInputStream0);
          assertEquals(1, byteArray0.length);
          assertArrayEquals(new byte[] {(byte)0}, byteArray0);
          assertEquals(1, byteArrayInputStream0.available());
          
          Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0);
          assertNotNull(base64_InputStream0);
          assertEquals(1, byteArray0.length);
          assertArrayEquals(new byte[] {(byte)0}, byteArray0);
          assertEquals(1, byteArrayInputStream0.available());
          
          try { 
            base64_InputStream0.read();
            fail("Expecting exception: IOException");
          
          } catch(IOException e) {
             //
             // Improperly padded Base64 input.
             //
             verifyException("org.apache.activemq.artemis.utils.Base64$InputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      boolean boolean0 = Base64.encodeToFile(byteArray0, "'Q`E0yVw6)pHL");
      assertTrue(boolean0);
      assertEquals(36, byteArray0.length);
      
      MockFile mockFile0 = new MockFile((File) null, "'Q`E0yVw6)pHL");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(mockFileInputStream0, 8);
      assertNotNull(base64_InputStream0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(48L, mockFile0.length());
      assertEquals(48, mockFileInputStream0.available());
      
      int int0 = base64_InputStream0.read();
      assertEquals(0, int0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(48L, mockFile0.length());
      assertEquals(44, mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 4);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0, (byte)1);
      assertNotNull(base64_InputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      int int0 = base64_InputStream0.read(byteArray0);
      assertEquals(8, int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = base64_InputStream0.read();
      assertEquals((-1), int1);
      assertEquals(9, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(pipedInputStream0, 41);
      assertNotNull(base64_InputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        base64_InputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      boolean boolean0 = Base64.encodeToFile(byteArray0, "'Q`E0yVw6)pHL");
      assertTrue(boolean0);
      assertEquals(36, byteArray0.length);
      
      MockFile mockFile0 = new MockFile((File) null, "'Q`E0yVw6)pHL");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(mockFileInputStream0, 8);
      assertNotNull(base64_InputStream0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(48L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(48, mockFileInputStream0.available());
      
      int int0 = base64_InputStream0.read(byteArray0, 8, 8);
      assertEquals(8, int0);
      assertEquals(36, byteArray0.length);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(48L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(36, mockFileInputStream0.available());
      
      int int1 = base64_InputStream0.read();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(48L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("'Q`E0yVw6)pHL", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(36, mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("H4sIAAAAAAAAAFvzloG1uIiBLyuxLFEvJzEvXc-psiR1jl9Cy7uArzJMDIxODKxliTmlqRVFDAII\nRX6luUmpRW1rpspyT3nQzcTAUFGQCwBxb3yFSwAAAA==", (int) (byte) (-71));
      assertNotNull(byteArray0);
      assertEquals(75, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("rO0ABXA=", 1960);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-112), (byte)75, (byte)50, (byte)34}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("", (int) (byte)22);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("KC4!\"?^s#", 95);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decode(byteArray0, (int) (byte)0, 96, (int) (byte) (-1));
      assertNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)71;
      // Undeclared exception!
      try { 
        Base64.decode(byteArray0, 5, (int) (byte)80, (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((byte[]) null, 486, 2694, 2694);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decode(byteArray0, 2223, (-1), (int) (byte)4);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Base64.encodeBytes(byteArray0, 0, 4, 0);
      assertNotNull(string0);
      assertEquals("AAAAAA==", string0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, 0, 147, (int) (byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(byteArrayOutputStream0);
      assertNotNull(base64_OutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      base64_OutputStream0.close();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = Base64.encodeObject((Serializable) "Rf'/", 40);
      assertNotNull(string0);
      assertEquals("fDo-0MF-048a8mw=", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AAA2AA==", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(mockPrintStream0, 0);
      assertNotNull(base64_OutputStream0);
      assertTrue(mockFile0.canExecute());
      assertEquals("AAA2AA==", mockFile0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons/AAA2AA==", mockFile0.toString());
      
      base64_OutputStream0.suspendEncoding();
      assertTrue(mockFile0.canExecute());
      assertEquals("AAA2AA==", mockFile0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons/AAA2AA==", mockFile0.toString());
      
      base64_OutputStream0.write((int) (byte)42);
      assertTrue(mockFile0.canExecute());
      assertEquals("AAA2AA==", mockFile0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons", mockFile0.getParent());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/activemq-artemis/artemis-commons/AAA2AA==", mockFile0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("rO0ABXA=");
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-19), (byte)0, (byte)5, (byte)112}, byteArray0);
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream((InputStream) null);
      assertNotNull(base64_InputStream0);
      
      int int0 = base64_InputStream0.read(byteArray0, (-1333), (-4022));
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-19), (byte)0, (byte)5, (byte)112}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[47];
      boolean boolean0 = Base64.encodeToFile(byteArray0, "\"|\"$3553");
      assertTrue(boolean0);
      assertEquals(47, byteArray0.length);
      
      String string0 = Base64.encodeFromFile("\"|\"$3553");
      assertNotNull(string0);
      assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFB\nQUFBQUFBPQ==", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 4539);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      Base64.InputStream base64_InputStream0 = new Base64.InputStream(byteArrayInputStream0, 4539);
      assertNotNull(base64_InputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      int int0 = base64_InputStream0.read();
      assertEquals(65, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64.decodeToFile("A0AAbQHA", "A0AAbQHA");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Base64.encodeFromFile("A0AAbQHA");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Base64.decodeToFile(",,UZiu{F~]@Cd ", ",,UZiu{F~]@Cd ");
      boolean boolean1 = Base64.decodeFileToFile(",,UZiu{F~]@Cd ", ",,UZiu{F~]@Cd ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.encodeToFile(byteArray0, "AA==");
      assertTrue(boolean0);
      
      boolean boolean1 = Base64.encodeFileToFile("AA==", "N");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#`'}}Jn}$I");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.append((CharSequence) "#`'}}Jn}$I");
      // Undeclared exception!
      try { 
        Base64.decodeFromFile("#`'}}Jn}$I");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.activemq.artemis.utils.Base64$InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeFromFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Base64.encodeToFile(byteArray0, "AA==");
      byte[] byteArray1 = Base64.decodeFromFile("AA==");
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeToFile(byteArray0, "AA==");
      byte[] byteArray1 = Base64.decodeFromFile("AA==");
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeFromFile("n");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = Base64.decode(" /p");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("3JrieZ=J?M5dK:y!");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Base64.encodeBytes(byteArray0);
      assertEquals("AAAA", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte)3, 73, (-240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("rO0ABXA=");
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (-240), (-240), (-240));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      String string0 = Base64.encodeObject((Serializable) locale_FilteringMode0);
      assertEquals("rO0ABX5yAB5qYXZhLnV0aWwuTG9jYWxlJEZpbHRlcmluZ01vZGUAAAAAAAAAABIAAHhyAA5qYXZh\nLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0ABRBVVRPU0VMRUNUX0ZJTFRFUklORw==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-d";
      // Undeclared exception!
      try { 
        Base64.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-e";
      // Undeclared exception!
      try { 
        Base64.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Base64.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      Base64.main(stringArray0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 47, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      boolean boolean0 = Base64.encodeToFile(byteArray0, "org.apache.logging.log4j.Logger");
      assertTrue(boolean0);
      
      boolean boolean1 = Base64.decodeFileToFile("org.apache.logging.log4j.Logger", "to1/`U:kuRN%))22");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeToObject("p@[f*&~#}zEo#`6`y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, (int) (byte)3, (int) (byte)3, (int) (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.DeflaterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64.OutputStream base64_OutputStream0 = new Base64.OutputStream(pipedOutputStream0, 2473);
      base64_OutputStream0.resumeEncoding();
  }
}
