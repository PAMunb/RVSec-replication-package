/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:07:11 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.utils.ActiveMQThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActiveMQThreadPoolExecutor_ESTest extends ActiveMQThreadPoolExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ActiveMQThreadPoolExecutor activeMQThreadPoolExecutor0 = null;
      try {
        activeMQThreadPoolExecutor0 = new ActiveMQThreadPoolExecutor(1, 1, 1, timeUnit0, (ThreadFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ActiveMQThreadPoolExecutor activeMQThreadPoolExecutor0 = null;
      try {
        activeMQThreadPoolExecutor0 = new ActiveMQThreadPoolExecutor(0, (-330), 0L, timeUnit0, threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ActiveMQThreadPoolExecutor activeMQThreadPoolExecutor0 = new ActiveMQThreadPoolExecutor(5, 5, 5, timeUnit0, threadFactory0);
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Future<Object> future0 = activeMQThreadPoolExecutor0.submit(runnable0, (Object) timeUnit0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ActiveMQThreadPoolExecutor activeMQThreadPoolExecutor0 = new ActiveMQThreadPoolExecutor(2820, 2820, 2820, timeUnit0, threadFactory0);
      activeMQThreadPoolExecutor0.shutdown();
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Future<Object> future0 = activeMQThreadPoolExecutor0.submit(runnable0, (Object) timeUnit0);
      assertNotNull(future0);
  }
}
