/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:03:32 GMT 2022
 */

package org.apache.activemq.artemis.utils.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.function.LongFunction;
import org.apache.activemq.artemis.utils.collections.ConcurrentLongHashMap;
import org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcurrentLongHashMap_ESTest extends ConcurrentLongHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-587);
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-587));
      Long long0 = new Long((-421L));
      Long long1 = new Long((-587));
      long long2 = (-2588L);
      long long3 = (-421L);
      Long long4 = new Long((-421L));
      concurrentLongHashMap0.put((-2588L), long4);
      concurrentLongHashMap0.putIfAbsent((-421L), long4);
      Long long5 = new Long((-558L));
      concurrentLongHashMap0.put((-2588L), long5);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.containsKey((-2588L));
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.keysLongHashSet();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Keys and values must be >= 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>((-2656));
      Long long0 = new Long(0L);
      concurrentLongHashMap1.putIfAbsent(1042L, long0);
      Long long1 = new Long((-5052L));
      concurrentLongHashMap1.put((-2L), long0);
      concurrentLongHashMap1.size();
      concurrentLongHashMap1.containsKey((-558L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap1.computeIfAbsent((-2L), longFunction0);
      concurrentLongHashMap1.remove(0L);
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap2.keys();
      concurrentLongHashMap0.get((-2656));
      concurrentLongHashMap1.isEmpty();
      ConcurrentLongHashMap<Object> concurrentLongHashMap3 = new ConcurrentLongHashMap<Object>((-2059), 231);
      ConcurrentLongHashMap<Object> concurrentLongHashMap4 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap0.keys();
      ConcurrentLongHashMap<Object> concurrentLongHashMap5 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap2.isEmpty();
      concurrentLongHashMap3.keysLongHashSet();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(3749, 3749);
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>();
      Long long0 = new Long((-1248L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(longFunction0).apply(anyLong());
      concurrentLongHashMap1.computeIfAbsent(3749, longFunction0);
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(3749);
      ConcurrentLongHashMap<Object> concurrentLongHashMap3 = new ConcurrentLongHashMap<Object>(3749);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.keys();
      concurrentLongHashMap1.isEmpty();
      Object object0 = new Object();
      concurrentLongHashMap0.put(629L, object0);
      // Undeclared exception!
      concurrentLongHashMap3.values();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      assertNotNull(concurrentLongHashMap0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      boolean boolean0 = concurrentLongHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      ConcurrentLongHashSet concurrentLongHashSet0 = concurrentLongHashMap0.keysLongHashSet();
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.values();
      ConcurrentLongHashMap.alignToPowerOfTwo(0);
      concurrentLongHashMap0.keys();
      concurrentLongHashMap0.putIfAbsent(803L, concurrentLongHashSet0);
      concurrentLongHashMap0.containsKey((-1701L));
      concurrentLongHashMap0.size();
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.forEach((ConcurrentLongHashMap.EntryProcessor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.collections.ConcurrentLongHashMap$Section", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-587));
      Long long0 = new Long((-421L));
      Long long1 = new Long((-587));
      Long long2 = new Long((-421L));
      concurrentLongHashMap0.put((-2588L), long2);
      concurrentLongHashMap0.putIfAbsent((-421L), long2);
      Long long3 = new Long((-558L));
      concurrentLongHashMap0.put(16L, long3);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.containsKey((-2588L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.computeIfAbsent((-421L), longFunction0);
      concurrentLongHashMap0.remove((-2588L));
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap1.keys();
      concurrentLongHashMap1.get((-2588L));
      concurrentLongHashMap0.isEmpty();
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = null;
      try {
        concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(3, (-587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(3749);
      Long long0 = new Long(3749);
      Long long1 = new Long(3749);
      long long2 = (-2588L);
      Long long3 = new Long(1551L);
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>(3749);
      concurrentLongHashMap1.put((-421L), long0);
      Long long4 = new Long((-421L));
      Long long5 = new Long((-421L));
      long long6 = 1L;
      Long long7 = new Long((-27L));
      concurrentLongHashMap1.put(1L, long7);
      concurrentLongHashMap1.containsKey(1L);
      // Undeclared exception!
      try { 
        concurrentLongHashMap1.computeIfAbsent(1L, (LongFunction<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-587));
      long long0 = (-421L);
      Long long1 = new Long((-421L));
      concurrentLongHashMap0.put((-421L), long1);
      long long2 = (-2588L);
      long long3 = (-421L);
      Long long4 = new Long((-421L));
      concurrentLongHashMap0.put((-2588L), long4);
      concurrentLongHashMap0.putIfAbsent((-421L), long4);
      Long long5 = new Long((-558L));
      concurrentLongHashMap0.put(16L, long5);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.containsKey((-2588L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.computeIfAbsent((-421L), longFunction0);
      concurrentLongHashMap0.remove((-2588L));
      long long6 = (-2126L);
      Long long7 = new Long(2135L);
      concurrentLongHashMap0.values();
      concurrentLongHashMap0.remove((-2126L), (Object) long7);
      ConcurrentLongHashMap.EntryProcessor<Long> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Long>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      long long8 = (-1186L);
      // Undeclared exception!
      try { 
        concurrentLongHashMap1.remove((-2588L), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>();
      List<Long> list0 = concurrentLongHashMap0.keys();
      ConcurrentLongHashMap.EntryProcessor<Long> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Long>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
      ConcurrentLongHashMap.signSafeMod(1512L, 47);
      concurrentLongHashMap0.remove((long) 47, (Object) list0);
      ConcurrentLongHashSet concurrentLongHashSet0 = concurrentLongHashMap0.keysLongHashSet();
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      LongFunction<Object> longFunction0 = (LongFunction<Object>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(concurrentLongHashSet0).when(longFunction0).apply(anyLong());
      concurrentLongHashMap1.computeIfAbsent(1512L, longFunction0);
      long long0 = 1502L;
      concurrentLongHashMap1.remove(1502L);
      // Undeclared exception!
      try { 
        concurrentLongHashMap1.putIfAbsent(1512L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      Long long0 = new Long(0);
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(longFunction0).apply(anyLong());
      concurrentLongHashMap0.computeIfAbsent(0L, longFunction0);
      concurrentLongHashMap0.keys();
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(0);
      concurrentLongHashMap1.size();
      concurrentLongHashMap1.size();
      concurrentLongHashMap1.keys();
      concurrentLongHashMap1.get(0);
      concurrentLongHashMap0.isEmpty();
      concurrentLongHashMap1.keys();
      concurrentLongHashMap1.putIfAbsent(0, concurrentLongHashMap0);
      ConcurrentLongHashMap concurrentLongHashMap2 = null;
      try {
        concurrentLongHashMap2 = new ConcurrentLongHashMap<Long>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-1502));
      concurrentLongHashMap0.size();
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>((-1502));
      concurrentLongHashMap1.values();
      concurrentLongHashMap1.isEmpty();
      ConcurrentLongHashMap.hash(3158L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-587));
      Long long0 = new Long((-421L));
      Long long1 = new Long((-587));
      Long long2 = new Long((-421L));
      concurrentLongHashMap0.put((-2588L), long2);
      concurrentLongHashMap0.putIfAbsent((-421L), long2);
      Long long3 = new Long((-558L));
      concurrentLongHashMap0.put((-2588L), long3);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.containsKey((-2588L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.computeIfAbsent((-421L), longFunction0);
      concurrentLongHashMap0.remove((-2588L));
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap1.keys();
      concurrentLongHashMap1.get((-2588L));
      concurrentLongHashMap0.isEmpty();
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = null;
      try {
        concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(2, (-587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-587));
      Long long0 = new Long((-421L));
      concurrentLongHashMap0.put((-421L), long0);
      Long long1 = new Long((-421L));
      concurrentLongHashMap0.put((-2588L), long1);
      concurrentLongHashMap0.putIfAbsent((-421L), long1);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>((-587));
      concurrentLongHashMap1.get((-3261L));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 137;
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(137);
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(137);
      concurrentLongHashMap0.put(137, long0);
      concurrentLongHashMap0.computeIfAbsent(137, longFunction0);
      try { 
        Long.decode("WZH,uC1v RyzR8SVbO@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"WZH,uC1v RyzR8SVbO@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-587));
      Long long0 = new Long((-421L));
      concurrentLongHashMap0.put((-421L), long0);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(0);
      concurrentLongHashMap1.remove((long) (-587));
      concurrentLongHashMap1.getUsedBucketCount();
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap2.containsKey(0L);
      concurrentLongHashMap0.put((-421L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(2784);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap1.put((-2918L), concurrentLongHashMap0);
      concurrentLongHashMap1.remove((long) 2784);
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.remove((long) 2784, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(3749);
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>();
      Long long0 = new Long(1082L);
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(3749);
      concurrentLongHashMap1.containsKey((-2L));
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(3749);
      ConcurrentLongHashMap<Object> concurrentLongHashMap3 = new ConcurrentLongHashMap<Object>(3749);
      concurrentLongHashMap3.size();
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.keys();
      Object object0 = new Object();
      concurrentLongHashMap1.isEmpty();
      Long long2 = new Long(3749);
      Long long3 = new Long(0);
      concurrentLongHashMap1.putIfAbsent(0, long3);
      ConcurrentLongHashMap.EntryProcessor<Object> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Object>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3749;
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(3749);
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>();
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(3749);
      concurrentLongHashMap2.size();
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.keys();
      concurrentLongHashMap0.get(0);
      concurrentLongHashMap1.isEmpty();
      ConcurrentLongHashMap<Object> concurrentLongHashMap3 = new ConcurrentLongHashMap<Object>(0, 3749);
      // Undeclared exception!
      concurrentLongHashMap3.keys();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 866;
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(866);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.capacity();
      concurrentLongHashMap0.values();
      concurrentLongHashMap0.size();
      long long0 = 0L;
      concurrentLongHashMap0.get(0L);
      concurrentLongHashMap0.values();
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>(0);
      concurrentLongHashMap1.values();
      concurrentLongHashMap1.keysLongHashSet();
      concurrentLongHashMap1.clear();
      concurrentLongHashMap0.keys();
      Long long1 = new Long(0L);
      concurrentLongHashMap0.keysLongHashSet();
      concurrentLongHashMap0.get(2048L);
      concurrentLongHashMap1.putIfAbsent(878L, long1);
      concurrentLongHashMap1.getUsedBucketCount();
      ConcurrentLongHashMap.EntryProcessor<Object> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Object>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      concurrentLongHashMap0.keys();
      concurrentLongHashMap0.remove((-1341L));
      concurrentLongHashMap0.remove(2119L);
      concurrentLongHashMap0.clear();
      concurrentLongHashMap0.containsKey(0L);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(0);
      concurrentLongHashMap1.capacity();
      ConcurrentLongHashMap.signSafeMod((-765L), 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      ConcurrentLongHashMap.alignToPowerOfTwo(0);
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>();
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(longFunction0).apply(anyLong());
      concurrentLongHashMap0.computeIfAbsent(0, longFunction0);
      concurrentLongHashMap0.keys();
      concurrentLongHashMap0.containsKey(0);
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      concurrentLongHashMap0.remove(0L);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(11, 11);
      Object object0 = new Object();
      concurrentLongHashMap1.remove(0L, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(1157);
      concurrentLongHashMap0.keys();
      concurrentLongHashMap0.get((-1L));
      ConcurrentLongHashMap.hash((-1L));
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(1157, 256);
      concurrentLongHashMap0.values();
      concurrentLongHashMap1.clear();
      concurrentLongHashMap1.containsKey(263L);
      concurrentLongHashMap1.remove(169L, (Object) concurrentLongHashMap0);
      concurrentLongHashMap1.clear();
      Long long0 = new Long(7689885693698038177L);
      concurrentLongHashMap1.remove(0L, (Object) long0);
      concurrentLongHashMap1.values();
      concurrentLongHashMap0.containsKey((-2L));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(2);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(16L, concurrentLongHashMap0.capacity());
      
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      assertFalse(concurrentLongHashMap1.equals((Object)concurrentLongHashMap0));
      assertNotNull(concurrentLongHashMap1);
      assertEquals(512L, concurrentLongHashMap1.capacity());
      
      concurrentLongHashMap0.put(2, concurrentLongHashMap1);
      concurrentLongHashMap0.values();
      concurrentLongHashMap1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(47, 47);
      Long long0 = new Long((-4132994306676758123L));
      concurrentLongHashMap0.clear();
      concurrentLongHashMap0.putIfAbsent(47, long0);
      concurrentLongHashMap0.size();
      concurrentLongHashMap0.values();
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>((-1867), 47);
      concurrentLongHashMap1.getUsedBucketCount();
      concurrentLongHashMap1.containsKey(1975L);
      concurrentLongHashMap1.remove((long) 1);
      concurrentLongHashMap0.isEmpty();
      concurrentLongHashMap1.keysLongHashSet();
      ConcurrentLongHashMap.signSafeMod((-1867), 16);
      concurrentLongHashMap0.keysLongHashSet();
      concurrentLongHashMap0.get((-4132994306676758123L));
      ConcurrentLongHashMap.EntryProcessor<Object> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Object>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
      Object object0 = new Object();
      concurrentLongHashMap0.put((-1616L), object0);
      concurrentLongHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(3749);
      concurrentLongHashMap0.clear();
      concurrentLongHashMap0.containsKey(841L);
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>(3749);
      concurrentLongHashMap1.size();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      concurrentLongHashMap0.remove((long) 0);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = null;
      try {
        concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(700);
      Long long0 = new Long((-1828L));
      concurrentLongHashMap0.putIfAbsent((-1828L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(3712);
      Long long0 = new Long((-622L));
      concurrentLongHashMap0.remove((long) 3712, (Object) long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>();
      List<Long> list0 = concurrentLongHashMap0.keys();
      ConcurrentLongHashMap.EntryProcessor<Long> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Long>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
      ConcurrentLongHashMap.signSafeMod(1512L, 47);
      concurrentLongHashMap0.remove((long) 47, (Object) list0);
      concurrentLongHashMap0.keysLongHashSet();
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      LongFunction<Object> longFunction0 = (LongFunction<Object>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(longFunction0).apply(anyLong());
      concurrentLongHashMap1.computeIfAbsent(1512L, longFunction0);
      long long0 = 1492L;
      concurrentLongHashMap1.remove(1492L);
      // Undeclared exception!
      try { 
        concurrentLongHashMap1.putIfAbsent(1512L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(700);
      concurrentLongHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = 316;
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(0, 316);
      concurrentLongHashMap0.keys();
      concurrentLongHashMap0.values();
      concurrentLongHashMap0.clear();
      concurrentLongHashMap0.keys();
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = null;
      try {
        concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>(316, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = null;
      try {
        concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap0.isEmpty();
      concurrentLongHashMap0.remove((-854L));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-75);
      int int1 = (-1321);
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = null;
      try {
        concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>((-75), (-1321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = null;
      try {
        concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-102), (-102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(1355);
      concurrentLongHashMap0.clear();
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>((-368), 773);
      concurrentLongHashMap1.get((-421L));
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.put(1355, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>((-2320));
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>((-2320));
      Long long0 = new Long((-4132994306676758123L));
      concurrentLongHashMap1.put((-1631L), long0);
      concurrentLongHashMap1.remove((-3926L));
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.put((-2320), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(3742);
      Long long0 = new Long((-606L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(longFunction0).apply(anyLong());
      concurrentLongHashMap0.computeIfAbsent((-3514L), longFunction0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap0.capacity();
      concurrentLongHashMap0.getUsedBucketCount();
      concurrentLongHashMap0.keysLongHashSet();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap0.isEmpty();
      int int0 = 579;
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>((-667), 579);
      concurrentLongHashMap1.capacity();
      concurrentLongHashMap0.getUsedBucketCount();
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(0, 579);
      ConcurrentLongHashMap<Long> concurrentLongHashMap3 = new ConcurrentLongHashMap<Long>((-667));
      LongFunction<Object> longFunction0 = (LongFunction<Object>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(longFunction0).apply(anyLong());
      concurrentLongHashMap3.computeIfAbsent((-1L), longFunction0);
      // Undeclared exception!
      try { 
        concurrentLongHashMap2.put(0L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>();
      concurrentLongHashMap1.remove((-959L));
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(0, 853);
      Object object0 = new Object();
      concurrentLongHashMap2.keysLongHashSet();
      concurrentLongHashMap2.remove(0L, (Object) concurrentLongHashMap0);
      concurrentLongHashMap2.put(0, concurrentLongHashMap1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      Long long0 = new Long((-2L));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(longFunction0).apply(anyLong());
      concurrentLongHashMap0.computeIfAbsent(0, longFunction0);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(0);
      concurrentLongHashMap1.clear();
      concurrentLongHashMap1.size();
      concurrentLongHashMap1.getUsedBucketCount();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>((-681));
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(longFunction0).apply(anyLong());
      concurrentLongHashMap0.computeIfAbsent((-2260), longFunction0);
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>((-681));
      concurrentLongHashMap1.clear();
      concurrentLongHashMap1.size();
      concurrentLongHashMap1.getUsedBucketCount();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 672;
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(672);
      LongFunction<Long> longFunction0 = null;
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.computeIfAbsent(672, (LongFunction<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConcurrentLongHashMap.hash(0L);
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(16);
      concurrentLongHashMap0.keys();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(3737);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(8192L, concurrentLongHashMap0.capacity());
      
      ConcurrentLongHashMap<Long> concurrentLongHashMap1 = new ConcurrentLongHashMap<Long>();
      assertNotNull(concurrentLongHashMap1);
      assertEquals(512L, concurrentLongHashMap1.capacity());
      
      Long long0 = new Long((-1248L));
      assertEquals((-1248L), (long)long0);
      assertNotNull(long0);
      
      ConcurrentLongHashMap<Object> concurrentLongHashMap2 = new ConcurrentLongHashMap<Object>(3737);
      assertFalse(concurrentLongHashMap2.equals((Object)concurrentLongHashMap0));
      assertNotNull(concurrentLongHashMap2);
      assertEquals(8192L, concurrentLongHashMap2.capacity());
      
      ConcurrentLongHashMap<Object> concurrentLongHashMap3 = new ConcurrentLongHashMap<Object>(3737);
      assertFalse(concurrentLongHashMap3.equals((Object)concurrentLongHashMap0));
      assertFalse(concurrentLongHashMap3.equals((Object)concurrentLongHashMap2));
      assertNotNull(concurrentLongHashMap3);
      assertEquals(8192L, concurrentLongHashMap3.capacity());
      
      int int0 = concurrentLongHashMap0.size();
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap2);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap3);
      assertEquals(0, int0);
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap2));
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap3));
      assertEquals(8192L, concurrentLongHashMap0.capacity());
      
      Long long1 = concurrentLongHashMap1.put(4270L, long0);
      assertNull(long1);
      assertEquals(512L, concurrentLongHashMap1.capacity());
      
      List<Long> list0 = concurrentLongHashMap0.keys();
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap2);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap3);
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap2));
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap3));
      assertNotNull(list0);
      assertFalse(list0.contains(4270L));
      assertEquals(8192L, concurrentLongHashMap0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = concurrentLongHashMap1.isEmpty();
      assertFalse(boolean0);
      assertEquals(512L, concurrentLongHashMap1.capacity());
      
      ConcurrentLongHashMap<Object> concurrentLongHashMap4 = new ConcurrentLongHashMap<Object>(0);
      assertFalse(concurrentLongHashMap4.equals((Object)concurrentLongHashMap2));
      assertFalse(concurrentLongHashMap4.equals((Object)concurrentLongHashMap0));
      assertFalse(concurrentLongHashMap4.equals((Object)concurrentLongHashMap3));
      assertNotNull(concurrentLongHashMap4);
      assertEquals(16L, concurrentLongHashMap4.capacity());
      
      List<Long> list1 = concurrentLongHashMap4.keys();
      assertNotSame(concurrentLongHashMap4, concurrentLongHashMap2);
      assertNotSame(concurrentLongHashMap4, concurrentLongHashMap0);
      assertNotSame(concurrentLongHashMap4, concurrentLongHashMap3);
      assertNotSame(list1, list0);
      assertFalse(concurrentLongHashMap4.equals((Object)concurrentLongHashMap2));
      assertFalse(concurrentLongHashMap4.equals((Object)concurrentLongHashMap0));
      assertFalse(concurrentLongHashMap4.equals((Object)concurrentLongHashMap3));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(4270L));
      assertEquals(16L, concurrentLongHashMap4.capacity());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Object object0 = concurrentLongHashMap0.putIfAbsent(3737, concurrentLongHashMap2);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap2);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap3);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap4);
      assertNotSame(concurrentLongHashMap2, concurrentLongHashMap0);
      assertNotSame(concurrentLongHashMap2, concurrentLongHashMap3);
      assertNotSame(concurrentLongHashMap2, concurrentLongHashMap4);
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap2));
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap3));
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap4));
      assertFalse(concurrentLongHashMap2.equals((Object)concurrentLongHashMap0));
      assertFalse(concurrentLongHashMap2.equals((Object)concurrentLongHashMap3));
      assertFalse(concurrentLongHashMap2.equals((Object)concurrentLongHashMap4));
      assertNull(object0);
      assertEquals(8192L, concurrentLongHashMap0.capacity());
      assertEquals(8192L, concurrentLongHashMap2.capacity());
      
      Object object1 = concurrentLongHashMap0.get(0L);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap2);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap3);
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap4);
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap2));
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap3));
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap4));
      assertNull(object1);
      assertEquals(8192L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(8);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(16L, concurrentLongHashMap0.capacity());
      
      Long long0 = new Long(800L);
      assertEquals(800L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = concurrentLongHashMap0.put(800L, long0);
      assertNull(long1);
      assertEquals(17L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(16L, concurrentLongHashMap0.capacity());
      
      LongFunction<Long> longFunction0 = (LongFunction<Long>) mock(LongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(longFunction0).apply(anyLong());
      Long long0 = concurrentLongHashMap0.computeIfAbsent(0L, longFunction0);
      assertNull(long0);
      assertEquals(17L, concurrentLongHashMap0.capacity());
      
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>(0);
      assertNotNull(concurrentLongHashMap1);
      assertEquals(16L, concurrentLongHashMap1.capacity());
      
      int int0 = concurrentLongHashMap1.size();
      assertEquals(0, int0);
      assertEquals(16L, concurrentLongHashMap1.capacity());
      
      int int1 = concurrentLongHashMap1.size();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(16L, concurrentLongHashMap1.capacity());
      
      List<Long> list0 = concurrentLongHashMap1.keys();
      assertNotNull(list0);
      assertFalse(list0.contains(0L));
      assertEquals(16L, concurrentLongHashMap1.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Object object0 = concurrentLongHashMap1.get(0);
      assertNull(object0);
      assertEquals(16L, concurrentLongHashMap1.capacity());
      
      boolean boolean0 = concurrentLongHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(17L, concurrentLongHashMap0.capacity());
      
      List<Long> list1 = concurrentLongHashMap1.keys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(0L));
      assertEquals(16L, concurrentLongHashMap1.capacity());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Object object1 = concurrentLongHashMap1.putIfAbsent(0, concurrentLongHashMap0);
      assertNull(object1);
      assertEquals(17L, concurrentLongHashMap0.capacity());
      assertEquals(17L, concurrentLongHashMap1.capacity());
      
      ConcurrentLongHashMap concurrentLongHashMap2 = (ConcurrentLongHashMap)concurrentLongHashMap1.get(0L);
      assertNotNull(concurrentLongHashMap2);
      assertEquals(17L, concurrentLongHashMap1.capacity());
      assertEquals(17L, concurrentLongHashMap2.capacity());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 256;
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(256, 1208);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(1208L, concurrentLongHashMap0.capacity());
      
      long long0 = 2584L;
      boolean boolean0 = concurrentLongHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(1208L, concurrentLongHashMap0.capacity());
      
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.putIfAbsent(2584L, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      assertNotNull(concurrentLongHashMap0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      ConcurrentLongHashMap.EntryProcessor<Object> concurrentLongHashMap_EntryProcessor0 = (ConcurrentLongHashMap.EntryProcessor<Object>) mock(ConcurrentLongHashMap.EntryProcessor.class, new ViolatedAssumptionAnswer());
      concurrentLongHashMap0.forEach(concurrentLongHashMap_EntryProcessor0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      Object object0 = concurrentLongHashMap0.get((-2078L));
      assertNull(object0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(0);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(16L, concurrentLongHashMap0.capacity());
      
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.putIfAbsent(0, (Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      assertNotNull(concurrentLongHashMap0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      Object object0 = concurrentLongHashMap0.remove((-4132994306676758123L));
      assertNull(object0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      long long0 = concurrentLongHashMap0.getUsedBucketCount();
      assertEquals(0L, long0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      boolean boolean0 = concurrentLongHashMap0.containsKey(0L);
      assertFalse(boolean0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>(2);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(16L, concurrentLongHashMap0.capacity());
      
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      assertFalse(concurrentLongHashMap1.equals((Object)concurrentLongHashMap0));
      assertNotNull(concurrentLongHashMap1);
      assertEquals(512L, concurrentLongHashMap1.capacity());
      
      List<Object> list0 = concurrentLongHashMap0.values();
      assertNotSame(concurrentLongHashMap0, concurrentLongHashMap1);
      assertFalse(concurrentLongHashMap0.equals((Object)concurrentLongHashMap1));
      assertNotNull(list0);
      assertFalse(list0.contains(2));
      assertEquals(16L, concurrentLongHashMap0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = concurrentLongHashMap1.isEmpty();
      assertNotSame(concurrentLongHashMap1, concurrentLongHashMap0);
      assertTrue(boolean0);
      assertFalse(concurrentLongHashMap1.equals((Object)concurrentLongHashMap0));
      assertEquals(512L, concurrentLongHashMap1.capacity());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConcurrentLongHashMap<Long> concurrentLongHashMap0 = new ConcurrentLongHashMap<Long>(32);
      assertNotNull(concurrentLongHashMap0);
      assertEquals(64L, concurrentLongHashMap0.capacity());
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = concurrentLongHashMap0.putIfAbsent(0L, long0);
      assertNull(long1);
      assertEquals(64L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = ConcurrentLongHashMap.signSafeMod(0L, 47);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      assertNotNull(concurrentLongHashMap0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
      
      Object object0 = concurrentLongHashMap0.get((-2078L));
      assertNull(object0);
      assertEquals(512L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>();
      concurrentLongHashMap0.getUsedBucketCount();
      concurrentLongHashMap0.keysLongHashSet();
      assertEquals(512L, concurrentLongHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-900);
      ConcurrentLongHashMap<Object> concurrentLongHashMap0 = new ConcurrentLongHashMap<Object>((-900));
      ConcurrentLongHashMap.EntryProcessor<Object> concurrentLongHashMap_EntryProcessor0 = null;
      concurrentLongHashMap0.forEach((ConcurrentLongHashMap.EntryProcessor<Object>) null);
      concurrentLongHashMap0.values();
      long long0 = 0L;
      ConcurrentLongHashMap<Object> concurrentLongHashMap1 = new ConcurrentLongHashMap<Object>();
      ConcurrentLongHashMap<Long> concurrentLongHashMap2 = new ConcurrentLongHashMap<Long>(256);
      concurrentLongHashMap2.get(0L);
      // Undeclared exception!
      try { 
        concurrentLongHashMap0.putIfAbsent(0L, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
