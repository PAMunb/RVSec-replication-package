/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:02:51 GMT 2022
 */

package org.apache.activemq.artemis.utils.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.activemq.artemis.utils.collections.LinkedListImpl;
import org.apache.activemq.artemis.utils.collections.LinkedListIterator;
import org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PriorityLinkedListImpl_ESTest extends PriorityLinkedListImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2719);
      assertNotNull(integer0);
      assertEquals(2719, (int)integer0);
      
      int int0 = 10;
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2719);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.addHead(integer0, 10);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      LinkedListImpl<Integer>[] linkedListImplArray0 = (LinkedListImpl<Integer>[]) Array.newInstance(LinkedListImpl.class, 0);
      priorityLinkedListImpl0.levels = linkedListImplArray0;
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.poll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2719);
      assertNotNull(integer0);
      assertEquals(2719, (int)integer0);
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2719);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      LinkedListIterator<Integer> linkedListIterator0 = priorityLinkedListImpl0.iterator();
      assertNotNull(linkedListIterator0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      Integer integer1 = new Integer(10);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(10, (int)integer1);
      
      priorityLinkedListImpl0.addTail(integer1, 10);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      priorityLinkedListImpl0.addHead(integer0, 10);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer2 = priorityLinkedListImpl0.poll();
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2719, (int)integer2);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(4310);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      priorityLinkedListImpl0.addTail(integer0, 0);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.addTail(integer0, 0);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(2, priorityLinkedListImpl0.size());
      
      boolean boolean0 = priorityLinkedListImpl0.isEmpty();
      assertFalse(boolean0);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(2, priorityLinkedListImpl0.size());
      
      boolean boolean1 = priorityLinkedListImpl0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(2, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(4310);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      LinkedListIterator<Integer> linkedListIterator0 = priorityLinkedListImpl0.iterator();
      assertNotNull(linkedListIterator0);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(2, priorityLinkedListImpl0.size());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      LinkedListImpl<Object>[] linkedListImplArray0 = (LinkedListImpl<Object>[]) Array.newInstance(LinkedListImpl.class, 5);
      priorityLinkedListImpl1.clear();
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl0);
      assertEquals(0, linkedListImpl0.numIters());
      assertEquals(0, linkedListImpl0.size());
      
      linkedListImplArray0[0] = linkedListImpl0;
      LinkedListImpl<Object> linkedListImpl1 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl1);
      assertFalse(linkedListImpl1.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl1.numIters());
      assertEquals(0, linkedListImpl1.size());
      
      priorityLinkedListImpl1.addHead(linkedListIterator0, 10);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      assertEquals(1, priorityLinkedListImpl1.size());
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      linkedListImplArray0[1] = linkedListImpl1;
      LinkedListImpl<Object> linkedListImpl2 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl2);
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl2.numIters());
      assertEquals(0, linkedListImpl2.size());
      
      linkedListImplArray0[2] = linkedListImpl2;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl1.addHead(object0, (-1526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1526
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(732);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      Integer integer0 = new Integer(732);
      assertNotNull(integer0);
      assertEquals(732, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      priorityLinkedListImpl0.addTail(object0, 0);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Integer>(1830);
      assertNotNull(priorityLinkedListImpl1);
      assertEquals(0, priorityLinkedListImpl1.size());
      assertTrue(priorityLinkedListImpl1.isEmpty());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      priorityLinkedListImpl1.addTail(integer1, 468);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(priorityLinkedListImpl1.isEmpty());
      assertEquals(1, priorityLinkedListImpl1.size());
      
      int int0 = priorityLinkedListImpl1.size();
      assertEquals(1, int0);
      assertFalse(priorityLinkedListImpl1.isEmpty());
      assertEquals(1, priorityLinkedListImpl1.size());
      
      PriorityLinkedListImpl<LinkedListImpl<Object>> priorityLinkedListImpl2 = new PriorityLinkedListImpl<LinkedListImpl<Object>>(1);
      assertNotNull(priorityLinkedListImpl2);
      assertEquals(0, priorityLinkedListImpl2.size());
      assertTrue(priorityLinkedListImpl2.isEmpty());
      
      LinkedListImpl<Object> linkedListImpl0 = priorityLinkedListImpl2.poll();
      assertNull(linkedListImpl0);
      assertEquals(0, priorityLinkedListImpl2.size());
      assertTrue(priorityLinkedListImpl2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(10);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      priorityLinkedListImpl0.addHead(integer0, 1);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(10);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      priorityLinkedListImpl0.addHead(integer0, 1);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(697);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Only HEAD nodes are allowed to hold null values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(2719);
      assertNotNull(integer0);
      assertEquals(2719, (int)integer0);
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2719);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.addHead(integer0, 10);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      priorityLinkedListImpl0.addHead(integer0, 0);
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(2719, (int)integer1);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer2 = priorityLinkedListImpl0.poll();
      assertNotNull(integer2);
      assertEquals(2719, (int)integer2);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(2719);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(699);
      assertNotNull(integer0);
      assertEquals(699, (int)integer0);
      
      Integer integer1 = new Integer(10);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(10, (int)integer1);
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2719);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.addHead(integer1, 1898);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      Integer integer2 = new Integer(1269);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1269, (int)integer2);
      
      priorityLinkedListImpl0.addTail(integer2, 691);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(2, priorityLinkedListImpl0.size());
      
      Integer integer3 = priorityLinkedListImpl0.poll();
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(10, (int)integer3);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      Integer integer4 = priorityLinkedListImpl0.poll();
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(1269, (int)integer4);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer5 = priorityLinkedListImpl0.poll();
      assertNull(integer5);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(699);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl1.addHead((Object) null, 2719);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2719
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityLinkedListImpl<LinkedListImpl<Object>> priorityLinkedListImpl0 = new PriorityLinkedListImpl<LinkedListImpl<Object>>(3500);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer0 = new Integer(3500);
      assertNotNull(integer0);
      assertEquals(3500, (int)integer0);
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Integer>(3500);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      Integer integer1 = new Integer(407);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(407, (int)integer1);
      
      priorityLinkedListImpl1.addTail(integer1, 407);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, priorityLinkedListImpl1.size());
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1, (int)integer2);
      
      priorityLinkedListImpl1.addHead(integer2, 1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, priorityLinkedListImpl1.size());
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      Integer integer3 = priorityLinkedListImpl1.poll();
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(407, (int)integer3);
      assertEquals(1, priorityLinkedListImpl1.size());
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      priorityLinkedListImpl1.addHead(integer2, 762);
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, priorityLinkedListImpl1.size());
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl2 = null;
      try {
        priorityLinkedListImpl2 = new PriorityLinkedListImpl<Object>((-732));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2719);
      assertNotNull(integer0);
      assertEquals(2719, (int)integer0);
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2719);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      priorityLinkedListImpl0.addHead(integer0, 10);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(2719, (int)integer1);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      Integer integer2 = priorityLinkedListImpl0.poll();
      assertNull(integer2);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(3500);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(3500);
      assertNotNull(priorityLinkedListImpl1);
      assertEquals(0, priorityLinkedListImpl1.size());
      assertTrue(priorityLinkedListImpl1.isEmpty());
      
      boolean boolean0 = priorityLinkedListImpl1.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, priorityLinkedListImpl1.size());
      assertTrue(priorityLinkedListImpl1.isEmpty());
      
      PriorityLinkedListImpl<LinkedListImpl<Object>> priorityLinkedListImpl2 = new PriorityLinkedListImpl<LinkedListImpl<Object>>(3500);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedListImpl<Integer> linkedListImpl0 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl0);
      assertEquals(0, linkedListImpl0.size());
      assertEquals(0, linkedListImpl0.numIters());
      
      LinkedListImpl<Integer> linkedListImpl1 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl1);
      assertFalse(linkedListImpl1.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl1.numIters());
      assertEquals(0, linkedListImpl1.size());
      
      LinkedListImpl<Integer> linkedListImpl2 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl2);
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl1));
      assertEquals(0, linkedListImpl2.numIters());
      assertEquals(0, linkedListImpl2.size());
      
      LinkedListImpl<Integer> linkedListImpl3 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl3);
      assertFalse(linkedListImpl3.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl3.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl3.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl3.size());
      assertEquals(0, linkedListImpl3.numIters());
      
      LinkedListImpl<Integer> linkedListImpl4 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl4);
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl3));
      assertEquals(0, linkedListImpl4.numIters());
      assertEquals(0, linkedListImpl4.size());
      
      LinkedListImpl<Integer> linkedListImpl5 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl5);
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl3));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl4));
      assertEquals(0, linkedListImpl5.numIters());
      assertEquals(0, linkedListImpl5.size());
      
      LinkedListImpl<Integer> linkedListImpl6 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl6);
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl3));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl5));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl4));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl6.size());
      assertEquals(0, linkedListImpl6.numIters());
      
      LinkedListImpl<Integer> linkedListImpl7 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl7);
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl3));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl6));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl4));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl5));
      assertEquals(0, linkedListImpl7.size());
      assertEquals(0, linkedListImpl7.numIters());
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2490);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      Integer integer0 = new Integer(1868);
      assertNotNull(integer0);
      assertEquals(1868, (int)integer0);
      
      priorityLinkedListImpl0.addHead(integer0, 2396);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(1868, (int)integer1);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(2490);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      LinkedListIterator<Object> linkedListIterator0 = priorityLinkedListImpl1.iterator();
      assertNotNull(linkedListIterator0);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      LinkedListIterator<Object> linkedListIterator1 = priorityLinkedListImpl1.iterator();
      assertNotSame(linkedListIterator1, linkedListIterator0);
      assertNotNull(linkedListIterator1);
      assertFalse(linkedListIterator1.equals((Object)linkedListIterator0));
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      LinkedListIterator<Object> linkedListIterator2 = priorityLinkedListImpl1.iterator();
      assertNotSame(linkedListIterator2, linkedListIterator1);
      assertNotSame(linkedListIterator2, linkedListIterator0);
      assertNotNull(linkedListIterator2);
      assertFalse(linkedListIterator2.equals((Object)linkedListIterator1));
      assertFalse(linkedListIterator2.equals((Object)linkedListIterator0));
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(3500);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      Integer integer0 = new Integer(3500);
      assertNotNull(integer0);
      assertEquals(3500, (int)integer0);
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addHead((Integer) null, 1830);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Only HEAD nodes are allowed to hold null values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(1846);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      Integer integer0 = new Integer(1846);
      assertNotNull(integer0);
      assertEquals(1846, (int)integer0);
      
      priorityLinkedListImpl0.addTail(integer0, 1346);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      boolean boolean0 = priorityLinkedListImpl0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(732);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer0 = new Integer(732);
      assertNotNull(integer0);
      assertEquals(732, (int)integer0);
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail(integer0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(4310);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      priorityLinkedListImpl0.addTail(integer0, 0);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      priorityLinkedListImpl0.addTail(integer0, 0);
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      boolean boolean0 = priorityLinkedListImpl0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      boolean boolean1 = priorityLinkedListImpl0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(4310);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      LinkedListIterator<Integer> linkedListIterator0 = priorityLinkedListImpl0.iterator();
      assertNotNull(linkedListIterator0);
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      LinkedListImpl<Object>[] linkedListImplArray0 = (LinkedListImpl<Object>[]) Array.newInstance(LinkedListImpl.class, 5);
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl0);
      assertEquals(0, linkedListImpl0.numIters());
      assertEquals(0, linkedListImpl0.size());
      
      linkedListImplArray0[0] = linkedListImpl0;
      LinkedListImpl<Object> linkedListImpl1 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl1);
      assertFalse(linkedListImpl1.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl1.size());
      assertEquals(0, linkedListImpl1.numIters());
      
      priorityLinkedListImpl1.addHead(linkedListIterator0, 10);
      assertEquals(2, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl1.size());
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      linkedListImplArray0[1] = linkedListImpl1;
      LinkedListImpl<Object> linkedListImpl2 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl2);
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl1));
      assertEquals(0, linkedListImpl2.numIters());
      assertEquals(0, linkedListImpl2.size());
      
      linkedListImplArray0[2] = linkedListImpl2;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl1.addHead(object0, (-1526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1526
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(1868);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      boolean boolean0 = priorityLinkedListImpl0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 933;
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(933);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      LinkedListIterator<Object> linkedListIterator0 = priorityLinkedListImpl0.iterator();
      assertNotNull(linkedListIterator0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Object object0 = priorityLinkedListImpl0.poll();
      assertNull(object0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      int int1 = 0;
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Integer>(0);
      assertNotNull(priorityLinkedListImpl1);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      boolean boolean0 = priorityLinkedListImpl1.isEmpty();
      assertTrue(boolean0);
      assertTrue(priorityLinkedListImpl1.isEmpty());
      assertEquals(0, priorityLinkedListImpl1.size());
      
      Integer integer0 = new Integer(1663);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1663, (int)integer0);
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl1.addTail(integer0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(1);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      LinkedListImpl<Integer>[] linkedListImplArray0 = (LinkedListImpl<Integer>[]) Array.newInstance(LinkedListImpl.class, 9);
      LinkedListImpl<Integer> linkedListImpl0 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl0);
      assertEquals(0, linkedListImpl0.size());
      assertEquals(0, linkedListImpl0.numIters());
      
      linkedListImplArray0[0] = linkedListImpl0;
      LinkedListImpl<Integer> linkedListImpl1 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl1);
      assertFalse(linkedListImpl1.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl1.size());
      assertEquals(0, linkedListImpl1.numIters());
      
      linkedListImplArray0[1] = linkedListImpl1;
      LinkedListImpl<Integer> linkedListImpl2 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl2);
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl2.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl2.size());
      assertEquals(0, linkedListImpl2.numIters());
      
      linkedListImplArray0[2] = linkedListImpl2;
      LinkedListImpl<Integer> linkedListImpl3 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl3);
      assertFalse(linkedListImpl3.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl3.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl3.equals((Object)linkedListImpl2));
      assertEquals(0, linkedListImpl3.size());
      assertEquals(0, linkedListImpl3.numIters());
      
      linkedListImplArray0[3] = linkedListImpl3;
      LinkedListImpl<Integer> linkedListImpl4 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl4);
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl4.equals((Object)linkedListImpl3));
      assertEquals(0, linkedListImpl4.size());
      assertEquals(0, linkedListImpl4.numIters());
      
      linkedListImplArray0[4] = linkedListImpl4;
      LinkedListImpl<Integer> linkedListImpl5 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl5);
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl3));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl4));
      assertFalse(linkedListImpl5.equals((Object)linkedListImpl2));
      assertEquals(0, linkedListImpl5.numIters());
      assertEquals(0, linkedListImpl5.size());
      
      linkedListImplArray0[5] = linkedListImpl5;
      LinkedListImpl<Integer> linkedListImpl6 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl6);
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl5));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl3));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl4));
      assertFalse(linkedListImpl6.equals((Object)linkedListImpl0));
      assertEquals(0, linkedListImpl6.size());
      assertEquals(0, linkedListImpl6.numIters());
      
      linkedListImplArray0[6] = linkedListImpl6;
      LinkedListImpl<Integer> linkedListImpl7 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl7);
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl6));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl4));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl5));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl7.equals((Object)linkedListImpl3));
      assertEquals(0, linkedListImpl7.size());
      assertEquals(0, linkedListImpl7.numIters());
      
      linkedListImplArray0[7] = linkedListImpl7;
      LinkedListImpl<Integer> linkedListImpl8 = new LinkedListImpl<Integer>();
      assertNotNull(linkedListImpl8);
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl1));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl4));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl2));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl7));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl3));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl0));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl6));
      assertFalse(linkedListImpl8.equals((Object)linkedListImpl5));
      assertEquals(0, linkedListImpl8.numIters());
      assertEquals(0, linkedListImpl8.size());
      
      linkedListImplArray0[8] = linkedListImpl8;
      priorityLinkedListImpl0.levels = linkedListImplArray0;
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.addHead(integer0, 1);
      assertFalse(priorityLinkedListImpl0.isEmpty());
      assertEquals(1, priorityLinkedListImpl0.size());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = null;
      try {
        priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>((-419));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2719);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      priorityLinkedListImpl0.addHead(integer0, 10);
      assertEquals(1, priorityLinkedListImpl0.size());
      assertFalse(priorityLinkedListImpl0.isEmpty());
      
      Integer integer1 = priorityLinkedListImpl0.poll();
      assertNotNull(integer1);
      assertEquals(10, (int)integer1);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(802);
      assertNotNull(priorityLinkedListImpl0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
      
      int int0 = priorityLinkedListImpl0.size();
      assertEquals(0, int0);
      assertEquals(0, priorityLinkedListImpl0.size());
      assertTrue(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 806;
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(806);
      assertNotNull(priorityLinkedListImpl0);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      int int1 = priorityLinkedListImpl0.size();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(priorityLinkedListImpl0.isEmpty());
      assertEquals(0, priorityLinkedListImpl0.size());
      
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(0);
      assertNotNull(priorityLinkedListImpl1);
      assertEquals(0, priorityLinkedListImpl1.size());
      assertTrue(priorityLinkedListImpl1.isEmpty());
      
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      assertNotNull(linkedListImpl0);
      assertEquals(0, linkedListImpl0.numIters());
      assertEquals(0, linkedListImpl0.size());
      
      // Undeclared exception!
      try { 
        priorityLinkedListImpl1.addTail(linkedListImpl0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(784);
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Integer>(794);
      priorityLinkedListImpl0.clear();
      Integer integer0 = new Integer(0);
      priorityLinkedListImpl1.addHead(integer0, 0);
      assertFalse(priorityLinkedListImpl1.isEmpty());
      
      PriorityLinkedListImpl<LinkedListImpl<Object>> priorityLinkedListImpl2 = new PriorityLinkedListImpl<LinkedListImpl<Object>>(0);
      priorityLinkedListImpl2.clear();
      priorityLinkedListImpl0.iterator();
      priorityLinkedListImpl0.poll();
      assertEquals(0, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(10);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2665));
      Integer integer2 = new Integer(1);
      priorityLinkedListImpl0.addHead(integer2, 1);
      priorityLinkedListImpl0.poll();
      priorityLinkedListImpl0.poll();
      Integer integer3 = new Integer((-731));
      priorityLinkedListImpl0.addHead(integer3, 0);
      assertFalse(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(3500);
      priorityLinkedListImpl0.clear();
      assertEquals(0, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(1);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail(priorityLinkedListImpl0, (-1118));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1118
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(0);
      priorityLinkedListImpl0.iterator();
      priorityLinkedListImpl0.iterator();
      priorityLinkedListImpl0.clear();
      priorityLinkedListImpl0.iterator();
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(0);
      priorityLinkedListImpl1.poll();
      priorityLinkedListImpl1.iterator();
      priorityLinkedListImpl1.clear();
      PriorityLinkedListImpl<LinkedListImpl<Object>> priorityLinkedListImpl2 = new PriorityLinkedListImpl<LinkedListImpl<Object>>(60);
      LinkedListImpl<Object> linkedListImpl0 = new LinkedListImpl<Object>();
      int int0 = (-1);
      Integer integer0 = new Integer(164);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addHead(integer0, (-2898));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2898
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(802);
      Integer integer0 = priorityLinkedListImpl0.poll();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(2);
      LinkedListIterator<Integer> linkedListIterator0 = priorityLinkedListImpl0.iterator();
      assertNotNull(linkedListIterator0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(2690);
      priorityLinkedListImpl0.levels = null;
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 494;
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(494);
      priorityLinkedListImpl0.levels = null;
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = null;
      try {
        priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>((-5770));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(10);
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(10);
      priorityLinkedListImpl0.addHead(integer1, 1);
      priorityLinkedListImpl0.poll();
      PriorityLinkedListImpl<Object> priorityLinkedListImpl1 = new PriorityLinkedListImpl<Object>(10);
      priorityLinkedListImpl0.addHead(integer1, 1);
      assertEquals(1, priorityLinkedListImpl0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(3500);
      assertTrue(priorityLinkedListImpl0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(732);
      Integer integer0 = new Integer(732);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail(integer0, 732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 732
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addHead(integer0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 487;
      PriorityLinkedListImpl<Object> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Object>(487);
      LinkedListImpl<Object>[] linkedListImplArray0 = (LinkedListImpl<Object>[]) Array.newInstance(LinkedListImpl.class, 0);
      priorityLinkedListImpl0.levels = linkedListImplArray0;
      // Undeclared exception!
      try { 
        priorityLinkedListImpl0.addTail((Object) null, 487);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 487
         //
         verifyException("org.apache.activemq.artemis.utils.collections.PriorityLinkedListImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityLinkedListImpl<Integer> priorityLinkedListImpl0 = new PriorityLinkedListImpl<Integer>(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      PriorityLinkedListImpl<LinkedListImpl<Object>> priorityLinkedListImpl0 = new PriorityLinkedListImpl<LinkedListImpl<Object>>(Integer.MAX_VALUE);
  }
}
