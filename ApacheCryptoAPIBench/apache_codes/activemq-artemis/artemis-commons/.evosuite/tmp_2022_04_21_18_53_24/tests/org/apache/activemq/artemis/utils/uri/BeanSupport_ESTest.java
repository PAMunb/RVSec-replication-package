/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 18:57:46 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.time.ZoneId;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import org.apache.activemq.artemis.utils.uri.BeanSupport;
import org.apache.commons.beanutils.converters.BigIntegerConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeanSupport_ESTest extends BeanSupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean("~a.9<Z");
      Boolean boolean2 = BeanSupport.copyData(boolean1, boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = BeanSupport.setData((Object) null, (Map<String, Object>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Properties properties0 = BeanSupport.getProperties((Object) hashMap0, (Properties) null);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = BeanSupport.encodeURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = BeanSupport.decodeURI("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties("", properties0);
      // Undeclared exception!
      try { 
        BeanSupport.setProperties((Object) hashMap0, properties1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BigIntegerConverter cannot handle conversion from 'String' to 'Object'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        BeanSupport.setProperties(double0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        BeanSupport.setProperties((String) null, properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        BeanSupport.setData(uRI0, hashMap0, (Set<String>) null, (Map<String, String>) hashMap1, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      try { 
        BeanSupport.setData(uRI0, (Object) hashMap1, (Map<String, String>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BigIntegerConverter cannot handle conversion from 'String' to 'Object'
         //
         verifyException("org.apache.commons.beanutils.converters.NumberConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, (List<Object>) linkedList0, map0);
      BeanSupport.setData(uRI0, "K`mR", map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        BeanSupport.setData(uRI0, (Object) map0, (Map<String, String>) hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        BeanSupport.setData((URI) null, (List<Object>) linkedList0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        BeanSupport.setData(uRI0, (AbstractMap.SimpleImmutableEntry<String, List>) null, (Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, (Object) linkedList0, map0);
      Locale locale0 = Locale.CANADA;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      BeanSupport.setData(uRI0, hashMap0, set0, map0, (Map<String, Object>) hashMap0);
      BeanSupport.setData((List<Object>) linkedList0, (Map<String, Object>) hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("VudVgL/o52^*I9[Oc", "VudVgL/o52^*I9[Oc");
      try { 
        BeanSupport.setData("VudVgL/o52^*I9[Oc", (Map<String, Object>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException("org.apache.commons.beanutils.expression.DefaultResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.getProperties((Object) "{eRbyyOX(qz@S?", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        BeanSupport.getProperties((Boolean) null, properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException("org.apache.commons.beanutils.PropertyUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("empty", (Map<String, List<String>>) hashMap0);
      Locale locale0 = new Locale("empty", "AST");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) set0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      try { 
        BeanSupport.getData(list1, objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        BeanSupport.getData(linkedList0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.BeanSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.encodeURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.decodeURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanSupport.decodeURI("%Pr/wFragment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"Pr\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = new Boolean("Fb#p4j&D&W-r#9");
      AbstractMap.SimpleImmutableEntry<Boolean, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, String>(boolean0, "port");
      try { 
        BeanSupport.copyData(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        BeanSupport.copyData("MST", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No origin bean specified
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put(properties0, properties0);
      try { 
        BeanSupport.copyData((Object) properties0, (Object) properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Properties cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.beanutils.BeanUtilsBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = BeanSupport.encodeURI("Error converting from String to '");
      assertEquals("Error+converting+from+String+to+%27", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("userInfo");
      BeanSupport.getProperties(locale_LanguageRange0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[8];
      linkedList0.add("empty");
      objectArray0[7] = (Object) linkedList0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) uRI0;
      String string0 = BeanSupport.getData(linkedList0, objectArray0);
      assertEquals("opaque=java.lang.Boolean%400000000003&scheme=java.lang.String%400000000004&schemeSpecificPart=java.lang.String%400000000005&path=java.lang.String%400000000006&rawPath=java.lang.String%400000000006&port=java.lang.Integer%400000000007&rawSchemeSpecificPart=java.lang.String%400000000005&absolute=java.lang.Boolean%400000000008&rawAuthority=java.lang.String%400000000009&authority=java.lang.String%400000000009&host=java.lang.String%400000000010", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) locale0;
      String string0 = BeanSupport.getData(list0, objectArray0);
      //  // Unstable assertion: assertEquals("ISO3Language=java.lang.String%400000000001&country=java.lang.String%400000000002&displayName=java.lang.String%400000000003&displayVariant=java.lang.String%400000000004&language=java.lang.String%400000000005&displayLanguage=java.lang.String%400000000006&script=java.lang.String%400000000004&displayCountry=java.lang.String%400000000007&ISO3Country=java.lang.String%400000000008&variant=java.lang.String%400000000004&displayScript=java.lang.String%400000000004", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Set<String> set1 = hashMap0.keySet();
      BeanSupport.setData(uRI0, hashMap0, set0, map0, (Map<String, Object>) hashMap0);
      BeanSupport.setData(uRI0, hashMap0, set1, map0, (Map<String, Object>) hashMap0);
      assertFalse(set1.isEmpty());
      assertEquals(28, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("userInfo");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BeanSupport.setData(uRI0, hashMap0, (Set<String>) linkedHashSet0, map0, (Map<String, Object>) hashMap0);
      assertEquals(29, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      URI uRI0 = MockURI.aFileURI;
      linkedHashSet0.add("port");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BeanSupport.setData(uRI0, hashMap1, (Set<String>) linkedHashSet0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("host");
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BeanSupport.setData(uRI0, hashMap1, (Set<String>) linkedHashSet0, (Map<String, String>) hashMap0, (Map<String, Object>) hashMap1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties((Object) properties0, properties0);
      assertSame(properties0, properties1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Properties properties0 = new Properties();
      BeanSupport.getProperties(locale0, properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(11, properties0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      Properties properties0 = new Properties();
      Properties properties1 = BeanSupport.getProperties("", properties0);
      BeanSupport.setProperties((Object) list0, properties1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Properties properties0 = new Properties();
      Locale locale0 = Locale.ITALIAN;
      Object object0 = BeanSupport.setProperties((Object) locale0, properties0);
      assertSame(locale0, object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = BeanSupport.copyData("%29t%3A.n%3E%23%7CK", "%29t%3A.n%3E%23%7CK");
      assertEquals("%29t%3A.n%3E%23%7CK", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = BeanSupport.setData("", (Map<String, Object>) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      Class<String> class0 = String.class;
      BeanSupport.registerConverter(bigIntegerConverter0, class0);
      assertFalse(bigIntegerConverter0.isAllowDecimals());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = BeanSupport.decodeURI("NJ^;:c-~");
      assertEquals("NJ^;:c-~", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BeanSupport beanSupport0 = new BeanSupport();
      Properties properties0 = new Properties();
      Object object0 = BeanSupport.setProperties((Object) beanSupport0, properties0);
      assertSame(beanSupport0, object0);
  }
}
