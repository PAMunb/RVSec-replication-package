/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 18:59:13 GMT 2022
 */

package org.apache.activemq.artemis.utils.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import org.apache.activemq.artemis.api.core.SimpleString;
import org.apache.activemq.artemis.utils.uri.URISupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class URISupport_ESTest extends URISupport_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, ",?z", "/////tmp/foo.bar", ",?z", "$X6");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      assertNull(uRISupport_CompositeData0.getHost());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("&KW[or.?yEoHOa", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // character at indicated position is not a parenthesis
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.URI("i", (String) null, "i", 45, (String) null, "\n", (String) null);
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      URI uRI2 = URISupport.createURIWithQuery(uRI1, "i");
      assertEquals("?%250A?i", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = URISupport.changeScheme(uRI0, "//j");
      URI uRI2 = URISupport.stripScheme(uRI1);
      assertTrue(uRI2.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = URISupport.stripScheme(uRI0);
      assertEquals("foo.bar", uRI1.getRawPath());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      URI uRI2 = URISupport.removeQuery(uRI1);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = URISupport.removeQuery(uRI0);
      assertTrue(uRI1.equals((Object)uRI0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.URI("getInputArguments", "getInputArguments", "", "?", "ge0U");
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      URI uRI2 = URISupport.createURIWithQuery(uRI1, "URI did not contain a matching parenthesis.");
      assertEquals("file:(/tmp/foo.bar)?URI%20did%20not%20contain%20a%20matching%20parenthesis.", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      Map<String, String> map0 = uRISupport_CompositeData0.getParameters();
      URI uRI2 = URISupport.createRemainingURI(uRI1, map0);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      URI uRI0 = MockURI.URI((String) null, "H*_", "i", 2253, "1", (String) null, (String) null);
      URI uRI1 = URISupport.createRemainingURI(uRI0, hashMap0);
      assertEquals("", uRI1.getRawPath());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("//?%2524X6=");
      boolean boolean0 = URISupport.containsQuery(simpleString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = URISupport.containsQuery("//hmNfl~?;!y]cH:hmNfl~?[%23!aW$Gr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = URISupport.containsQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = URISupport.changeScheme(uRI0, "org.apache.activemq.artemis.utils.:ri.URISupport");
      assertEquals("org.apache.activemq.artemis.utils.", uRI1.getScheme());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.URI("i", (String) null, "i", 45, (String) null, "\n", (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      URI uRI1 = URISupport.applyParameters(uRI0, (Map<String, String>) hashMap0, "i");
      assertEquals("i", uRI1.getHost());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = URISupport.applyParameters((URI) null, (Map<String, String>) null);
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      Map<String, String> map0 = uRISupport_CompositeData0.getParameters();
      URI uRI2 = URISupport.applyParameters(uRI1, map0);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.URI("//(foo.bar)", "Not a matching number of '(' and ')' parenthesis", "//(foo.bar)");
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      URI uRI1 = URISupport.applyParameters(uRI0, map0);
      assertNull(uRI1.getHost());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.URI("i", (String) null, "i", 45, (String) null, "\n", (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      URI uRI1 = URISupport.applyParameters(uRI0, (Map<String, String>) hashMap0);
      assertNull(uRI1.getRawFragment());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("");
      StringBuilder stringBuilder0 = new StringBuilder("yZzQkG=,!");
      StringBuilder stringBuilder1 = URISupport.appendParameters(stringBuilder0, map0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URI uRI0 = MockURI.URI("//", "//", "//");
      try { 
        URISupport.stripScheme(uRI0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.stripPrefix((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseQuery("=>N$y5b%v@m. v`XL2N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"v@\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URI uRI0 = MockURI.URI("//(:ampSo.Yr)", "//(:ampSo.Yr)", "//(:ampSo.Yr)", "//(:ampSo.Yr)", "//(:ampSo.Yr)");
      try { 
        URISupport.parseParameters(uRI0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :ampSo.Yr
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseParameters((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, "////(/ampXfoo.bar)://JP=Bml%5C6%25xks%238Q//(/am?JP=Bml%5C6%25xks%238Q");
      // Undeclared exception!
      try { 
        URISupport.parseParameters(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"xk\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.parseComposite((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.isCompositeURI((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("&KW[or.^?EoEHOa", 15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch((String) null, 1357);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.createURIWithQuery((URI) null, "Oq]XY&o^iCt-&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.createQueryString((Map<String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, URISyntaxException> hashMap0 = new HashMap<String, URISyntaxException>();
      URISyntaxException uRISyntaxException0 = new URISyntaxException("address", "address");
      hashMap0.put("address", uRISyntaxException0);
      // Undeclared exception!
      try { 
        URISupport.createQueryString(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.net.URISyntaxException cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.containsQuery((SimpleString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      try { 
        URISupport.changeScheme(uRI0, "UI,apl");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: UI,apl:/tmp/foo.bar
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("/bs");
      // Undeclared exception!
      try { 
        URISupport.applyParameters((URI) null, map0, "/bs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis(")");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis("G2Hs3Ht{rTbD[_^(i{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = URISupport.stripPrefix("i", "h");
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = URISupport.stripPrefix("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = URISupport.indexOfParenthesisMatch("//(/ampXoo.bar)", 2);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, (String) null);
      boolean boolean0 = URISupport.isCompositeURI(uRI0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      URI uRI2 = URISupport.applyParameters(uRI1, (Map<String, String>) hashMap0, (String) null);
      boolean boolean0 = URISupport.isCompositeURI(uRI2);
      assertTrue(boolean0);
      assertEquals("file:(/tmp/foo.bar)", uRI2.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URI uRI0 = MockURI.URI("(");
      boolean boolean0 = URISupport.isCompositeURI(uRI0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "");
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, (String) null);
      URI uRI1 = URISupport.createURIWithQuery(uRI0, (String) null);
      assertNull(uRI1.getHost());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      URI uRI0 = MockURI.URI("A-H", "A-H", "A-H", 1, "//&", "//&", "eW.2rz4N &Hvr");
      URI uRI1 = URISupport.createURIWithQuery(uRI0, "eW.2rz4N &Hvr");
      assertEquals("A-H://A-H@A-H:1//&?eW.2rz4N%20&Hvr#eW.2rz4N%20&Hvr", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Map<String, String> map0 = URISupport.parseQuery("UI,apl");
      URI uRI1 = URISupport.applyParameters(uRI0, map0, "UI,apl");
      assertEquals("ftp://foo.bar?=null", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = URISupport.applyParameters(uRI0, (Map<String, String>) null, "s,08!gQ}j#L");
      assertNull(uRI1.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringBuilder stringBuilder0 = URISupport.appendParameters((StringBuilder) null, hashMap0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      URISupport.CompositeData uRISupport_CompositeData0 = new URISupport.CompositeData();
      Map<String, String> map0 = uRISupport_CompositeData0.getParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = URISupport.checkParenthesis((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        URISupport.createRemainingURI((URI) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("9MV(e.BgeF8L", "9MV(e.BgeF8L");
      URI uRI1 = URISupport.createRemainingURI(uRI0, hashMap0);
      assertEquals("ftp://foo.bar?9MV%2528e.BgeF8L=9MV%2528e.BgeF8L", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(" (expected: 0-", " (expected: 0-");
      hashMap0.put("G)xCnr[32", "G)xCnr[32");
      String string0 = URISupport.createQueryString(hashMap0);
      assertEquals("+%28expected%3A+0-=+%28expected%3A+0-&G%29xCnr%5B32=G%29xCnr%5B32", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("?N.fVCYYAW=null");
      String string0 = URISupport.createQueryString(map0);
      assertEquals(1, map0.size());
      assertEquals("N.fVCYYAW=null", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = URISupport.createQueryString(hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      URI uRI0 = MockURI.create("//25++D");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      assertNull(uRISupport_CompositeData0.getPath());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      URI uRI0 = MockURI.create("//(foo.bar)?=null");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      assertNull(uRISupport_CompositeData0.getScheme());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      URI uRI0 = MockURI.create(")");
      try { 
        URISupport.parseComposite(uRI0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Not a matching number of '(' and ')' parenthesis: )
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      URI uRI0 = MockURI.URI("/", "//(/KmpXfo3.bar)", "/", "/");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      URISupport.parseParameters(uRI1);
      assertEquals("(/:////(/KmpXfo3.bar)/)#/", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      try { 
        URISupport.indexOfParenthesisMatch("[F(H(r~@(F_(_d*", 2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // URI did not contain a matching parenthesis.: [F(H(r~@(F_(_d*
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      try { 
        URISupport.indexOfParenthesisMatch("('53D", 0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // URI did not contain a matching parenthesis.: ('53D
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("aDK3vwg[r;", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // character at indicated position is not a parenthesis
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("Invalid position for first parenthesis: ", 1780);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid position for first parenthesis: 1780
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.indexOfParenthesisMatch("&KW[or.^?EoEHOa", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid position for first parenthesis: -1
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      URI uRI0 = MockURI.URI("?=", "?=", "?=");
      URI uRI1 = URISupport.removeQuery(uRI0);
      assertEquals("?=:#?=", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Map<String, String> map0 = URISupport.parseQuery("P&.&i>@VO");
      URI uRI1 = URISupport.applyParameters(uRI0, map0);
      assertEquals("ftp://foo.bar?P=null&i%3E@VO=null&.=null", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      URI uRI0 = MockURI.URI("//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)");
      Map<String, String> map0 = URISupport.parseQuery("//(/ampXfoo.bar)");
      URI uRI1 = URISupport.applyParameters(uRI0, map0, "//(/ampXfoo.bar)");
      assertEquals("//(/ampXfoo.bar)?//(/ampXfoo.bar)&=null", uRI1.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      Map<String, String> map0 = URISupport.parseQuery("1378+*p?1qd8!d4j ");
      URI uRI1 = URISupport.applyParameters(uRI0, map0, "1378+*p?1qd8!d4j ");
      assertNotSame(uRI1, uRI0);
      assertEquals(1, map0.size());
      assertEquals("ftp://foo.bar", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      URI uRI1 = URISupport.applyParameters(uRI0, map0);
      assertEquals("file", uRI1.getScheme());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      URI uRI0 = MockURI.URI("//('5D", "//('5D", "//('5D", "//('5D", "//('5D");
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("");
      URI uRI0 = URISupport.applyParameters((URI) null, map0, "oN3rOrZSK<DUB%C*NCl");
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery("\"F)vp+&A4o[");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        URISupport.appendParameters(stringBuilder0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      URI uRI0 = MockURI.create(",M*Tz");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      assertEquals("(,M*Tz)", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      URI uRI0 = MockURI.URI("//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      URI uRI1 = uRISupport_CompositeData0.toURI();
      assertEquals("(/ampXfoo.bar)/://(/ampXfoo.bar)#//(/ampXfoo.bar)", uRI1.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      URISupport uRISupport0 = new URISupport();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.changeScheme((URI) null, ",M*TDz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.removeQuery((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Map<String, String> map0 = URISupport.parseQuery(".LkT");
      // Undeclared exception!
      try { 
        URISupport.applyParameters((URI) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.stripScheme((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleString simpleString0 = SimpleString.toSimpleString("");
      boolean boolean0 = URISupport.containsQuery(simpleString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        URISupport.containsQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.uri.URISupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      String string0 = uRISupport_CompositeData0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      URI uRI0 = MockURI.URI("//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)", "//(/ampXfoo.bar)");
      Map<String, String> map0 = URISupport.parseParameters(uRI0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      URISupport.CompositeData uRISupport_CompositeData0 = new URISupport.CompositeData();
      URI[] uRIArray0 = uRISupport_CompositeData0.getComponents();
      assertNull(uRIArray0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (String) null, "1js(6:pv");
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      String string0 = uRISupport_CompositeData0.getScheme();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      String string0 = uRISupport_CompositeData0.getHost();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URISupport.CompositeData uRISupport_CompositeData0 = URISupport.parseComposite(uRI0);
      String string0 = uRISupport_CompositeData0.getFragment();
      assertNull(string0);
  }
}
