/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:03:28 GMT 2022
 */

package org.apache.activemq.artemis.logs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.util.logging.ErrorManager;
import java.util.logging.Level;
import org.apache.activemq.artemis.logs.AssertionLoggerHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jboss.logmanager.ExtLogRecord;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AssertionLoggerHandler_ESTest extends AssertionLoggerHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getResourceBundleName());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getResourceBundleName());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      extLogRecord0.setSourceMethodName("{n");
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getResourceBundleName());
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      AssertionLoggerHandler.startCapture();
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertFalse(boolean1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_l*zscx_3hd@/ }V", "}Mf", 2146788894, (Throwable) null);
      assertEquals("java.sql.SQLTimeoutException: _l*zscx_3hd@/ }V", sQLTimeoutException0.toString());
      assertEquals("}Mf", sQLTimeoutException0.getSQLState());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getMessage());
      assertEquals(2146788894, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("LblP:v$wf?)", "SEVERE", 2146788894, sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("java.sql.SQLTimeoutException: _l*zscx_3hd@/ }V", sQLTimeoutException0.toString());
      assertEquals("}Mf", sQLTimeoutException0.getSQLState());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getMessage());
      assertEquals(2146788894, sQLTimeoutException0.getErrorCode());
      assertEquals("SEVERE", sQLTimeoutException1.getSQLState());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LblP:v$wf?)", sQLTimeoutException1.toString());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getMessage());
      assertNotNull(sQLTimeoutException1);
      
      extLogRecord0.setThrown(sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("java.sql.SQLTimeoutException: _l*zscx_3hd@/ }V", sQLTimeoutException0.toString());
      assertEquals("}Mf", sQLTimeoutException0.getSQLState());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getMessage());
      assertEquals(2146788894, sQLTimeoutException0.getErrorCode());
      assertEquals("SEVERE", sQLTimeoutException1.getSQLState());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LblP:v$wf?)", sQLTimeoutException1.toString());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getMessage());
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getResourceBundleName());
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
      
      assertionLoggerHandler0.close();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "}Mf";
      stringArray1[1] = "}Mf";
      boolean boolean4 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean5 = AssertionLoggerHandler.findText(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(true);
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertFalse(boolean1);
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      extLogRecord0.setSourceMethodName("{n");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      AssertionLoggerHandler.startCapture();
      boolean boolean2 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertFalse(boolean2);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}Mf", "_l*zscx_3hd@/ }V", (Throwable) null);
      assertEquals("}Mf", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException0.toString());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("}Mf", "LblP:v$wf?)", 2146788894);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("}Mf", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException1.toString());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getSQLState());
      assertNotNull(sQLTimeoutException1);
      
      Throwable[] throwableArray0 = sQLTimeoutException1.getSuppressed();
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("}Mf", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException1.toString());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getSQLState());
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      
      extLogRecord0.setThrown(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("}Mf", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException1.toString());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getSQLState());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      
      String[] stringArray0 = new String[0];
      boolean boolean3 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
      
      boolean boolean4 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      
      assertionLoggerHandler0.close();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "}Mf";
      stringArray1[1] = "}Mf";
      boolean boolean5 = AssertionLoggerHandler.findText(2380L, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      System.setCurrentTimeMillis(2380L);
      boolean boolean6 = AssertionLoggerHandler.findText(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      extLogRecord0.setSourceMethodName("{n");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      
      AssertionLoggerHandler.startCapture();
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}Mf", "_l*zscx_3hd@/ }V", (Throwable) null);
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getSQLState());
      assertEquals("}Mf", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      extLogRecord0.setThrown(sQLTimeoutException0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getSQLState());
      assertEquals("}Mf", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
      
      assertionLoggerHandler0.close();
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "}Mf";
      stringArray1[1] = "}Mf";
      boolean boolean4 = AssertionLoggerHandler.findText((long) 2146788894, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean1);
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      extLogRecord0.setSourceMethodName("{n");
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      AssertionLoggerHandler.startCapture();
      boolean boolean2 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean2);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}Mf", "_l*zscx_3hd@/ }V", (Throwable) null);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException0.toString());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getSQLState());
      assertEquals("}Mf", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("LblP:v$wf?)", "SEVERE", 2146788894, sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("SEVERE", sQLTimeoutException1.getSQLState());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getMessage());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LblP:v$wf?)", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException0.toString());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getSQLState());
      assertEquals("}Mf", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException1);
      
      extLogRecord0.setThrown(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertEquals("SEVERE", sQLTimeoutException1.getSQLState());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getMessage());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LblP:v$wf?)", sQLTimeoutException1.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: }Mf", sQLTimeoutException0.toString());
      assertEquals("_l*zscx_3hd@/ }V", sQLTimeoutException0.getSQLState());
      assertEquals("}Mf", sQLTimeoutException0.getMessage());
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      
      String[] stringArray0 = new String[0];
      boolean boolean3 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
      
      boolean boolean4 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      
      assertionLoggerHandler0.close();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "}Mf";
      stringArray1[1] = "}Mf";
      // Undeclared exception!
      AssertionLoggerHandler.findText(2380L, stringArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ed9@`#1t@s?tE", "}Mf", 2146788894, (Throwable) null);
      assertEquals("}Mf", sQLTimeoutException0.getSQLState());
      assertEquals(2146788894, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Ed9@`#1t@s?tE", sQLTimeoutException0.toString());
      assertEquals("Ed9@`#1t@s?tE", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("LblP:v$wf?)", "SEVERE", 2146788894, sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("}Mf", sQLTimeoutException0.getSQLState());
      assertEquals(2146788894, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Ed9@`#1t@s?tE", sQLTimeoutException0.toString());
      assertEquals("Ed9@`#1t@s?tE", sQLTimeoutException0.getMessage());
      assertEquals("SEVERE", sQLTimeoutException1.getSQLState());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LblP:v$wf?)", sQLTimeoutException1.toString());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getMessage());
      assertNotNull(sQLTimeoutException1);
      
      extLogRecord0.setThrown(sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("}Mf", sQLTimeoutException0.getSQLState());
      assertEquals(2146788894, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Ed9@`#1t@s?tE", sQLTimeoutException0.toString());
      assertEquals("Ed9@`#1t@s?tE", sQLTimeoutException0.getMessage());
      assertEquals("SEVERE", sQLTimeoutException1.getSQLState());
      assertEquals(2146788894, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: LblP:v$wf?)", sQLTimeoutException1.toString());
      assertEquals("LblP:v$wf?)", sQLTimeoutException1.getMessage());
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
      
      assertionLoggerHandler0.close();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "}Mf";
      boolean boolean4 = AssertionLoggerHandler.findText(765L, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean5 = AssertionLoggerHandler.findText(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      extLogRecord0.setSourceMethodName("");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      AssertionLoggerHandler.startCapture();
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean1);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getLoggerName());
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = AssertionLoggerHandler.findText(736L, stringArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
      
      boolean boolean4 = AssertionLoggerHandler.findText(736L, stringArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      
      System.setCurrentTimeMillis((-1L));
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        AssertionLoggerHandler.findText(736L, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      Level level1 = Level.CONFIG;
      assertFalse(level1.equals((Object)level0));
      assertEquals("CONFIG", level1.toString());
      assertEquals("CONFIG", level1.getName());
      assertEquals(700, level1.intValue());
      assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      assertNotNull(level1);
      assertNotSame(level1, level0);
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertEquals("CONFIG", level1.toString());
      assertEquals("CONFIG", level1.getName());
      assertEquals(700, level1.intValue());
      assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      assertFalse(boolean1);
      assertNotSame(level1, level0);
      
      Level level2 = Level.FINEST;
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals("sun.util.logging.resources.logging", level2.getResourceBundleName());
      assertEquals("FINEST", level2.getName());
      assertEquals("FINEST", level2.toString());
      assertEquals(300, level2.intValue());
      assertNotNull(level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.MESSAGE_FORMAT;
      ExtLogRecord extLogRecord1 = new ExtLogRecord(level2, "", extLogRecord_FormatStyle0, "5CLvP^Y$x?#/R{L,E0");
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertNotNull(extLogRecord1);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(extLogRecord0, extLogRecord1);
      
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(extLogRecord0, extLogRecord1);
      
      AssertionLoggerHandler assertionLoggerHandler1 = new AssertionLoggerHandler();
      assertFalse(assertionLoggerHandler1.equals((Object)assertionLoggerHandler0));
      assertTrue(assertionLoggerHandler1.isEnabled());
      assertTrue(assertionLoggerHandler1.isAutoFlush());
      assertNull(assertionLoggerHandler1.getEncoding());
      assertNotNull(assertionLoggerHandler1);
      
      AssertionLoggerHandler assertionLoggerHandler2 = new AssertionLoggerHandler();
      assertFalse(assertionLoggerHandler2.equals((Object)assertionLoggerHandler1));
      assertFalse(assertionLoggerHandler2.equals((Object)assertionLoggerHandler0));
      assertTrue(assertionLoggerHandler2.isEnabled());
      assertNull(assertionLoggerHandler2.getEncoding());
      assertTrue(assertionLoggerHandler2.isAutoFlush());
      assertNotNull(assertionLoggerHandler2);
      
      assertionLoggerHandler2.close();
      assertFalse(assertionLoggerHandler2.equals((Object)assertionLoggerHandler1));
      assertFalse(assertionLoggerHandler2.equals((Object)assertionLoggerHandler0));
      assertTrue(assertionLoggerHandler2.isEnabled());
      assertNull(assertionLoggerHandler2.getEncoding());
      assertTrue(assertionLoggerHandler2.isAutoFlush());
      assertNotSame(assertionLoggerHandler2, assertionLoggerHandler1);
      assertNotSame(assertionLoggerHandler2, assertionLoggerHandler0);
      
      boolean boolean2 = AssertionLoggerHandler.hasLevel(level1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertEquals("CONFIG", level1.toString());
      assertEquals("CONFIG", level1.getName());
      assertEquals(700, level1.intValue());
      assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      assertFalse(boolean2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      
      boolean boolean3 = AssertionLoggerHandler.hasLevel(level1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertEquals("CONFIG", level1.toString());
      assertEquals("CONFIG", level1.getName());
      assertEquals(700, level1.intValue());
      assertEquals("sun.util.logging.resources.logging", level1.getResourceBundleName());
      assertFalse(boolean3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      String string0 = "X0Xxdpfk\\<V7nP";
      ExtLogRecord extLogRecord1 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertNotNull(extLogRecord1);
      
      assertionLoggerHandler0.setEnabled(false);
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      ExtLogRecord extLogRecord2 = ExtLogRecord.wrap(extLogRecord1);
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertFalse(extLogRecord2.equals((Object)extLogRecord0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertNull(extLogRecord1.getLoggerName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertEquals(0L, extLogRecord2.getSequenceNumber());
      assertEquals(0, extLogRecord2.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord2.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord2.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord2.getLoggerClassName());
      assertEquals("", extLogRecord2.getNdc());
      assertNull(extLogRecord2.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord2.getThreadName());
      assertEquals(1392409281320L, extLogRecord2.getMillis());
      assertNull(extLogRecord2.getLoggerName());
      assertNotNull(extLogRecord2);
      assertSame(extLogRecord1, extLogRecord2);
      assertNotSame(extLogRecord1, extLogRecord0);
      assertNotSame(extLogRecord2, extLogRecord0);
      assertSame(extLogRecord2, extLogRecord1);
      
      String string1 = "";
      String string2 = ",$I&jRV~OP";
      extLogRecord1.setSourceFileName(",$I&jRV~OP");
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertNull(extLogRecord1.getLoggerName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertSame(extLogRecord1, extLogRecord2);
      assertNotSame(extLogRecord1, extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord1);
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertNull(extLogRecord1.getLoggerName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertSame(extLogRecord1, extLogRecord2);
      assertNotSame(extLogRecord1, extLogRecord0);
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertFalse(boolean1);
      
      String string3 = extLogRecord0.getSourceFileName();
      assertFalse(extLogRecord0.equals((Object)extLogRecord2));
      assertFalse(extLogRecord0.equals((Object)extLogRecord1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.toString());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNotNull(string3);
      assertEquals("<unknown>", string3);
      assertNotSame(extLogRecord0, extLogRecord2);
      assertNotSame(extLogRecord0, extLogRecord1);
      
      // Undeclared exception!
      try { 
        assertionLoggerHandler0.doPublish((ExtLogRecord) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.logs.AssertionLoggerHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotNull(assertionLoggerHandler0);
      
      ErrorManager errorManager0 = new ErrorManager();
      assertNotNull(errorManager0);
      
      assertionLoggerHandler0.setErrorManager(errorManager0);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.clear();
      Level level0 = Level.CONFIG;
      assertEquals("CONFIG", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("CONFIG", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertFalse(boolean0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.PRINTF;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "!+(CU-$6B", extLogRecord_FormatStyle0, "!+(CU-$6B");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals("CONFIG", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertEquals("!+(CU-$6B", extLogRecord0.getLoggerClassName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("!+(CU-$6B", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.PRINTF, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals("CONFIG", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertEquals("!+(CU-$6B", extLogRecord0.getLoggerClassName());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals("!+(CU-$6B", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.PRINTF, extLogRecord0.getFormatStyle());
      assertNull(extLogRecord0.getResourceBundleName());
      
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      AssertionLoggerHandler assertionLoggerHandler1 = new AssertionLoggerHandler();
      assertFalse(assertionLoggerHandler1.equals((Object)assertionLoggerHandler0));
      assertNull(assertionLoggerHandler1.getEncoding());
      assertTrue(assertionLoggerHandler1.isAutoFlush());
      assertTrue(assertionLoggerHandler1.isEnabled());
      assertNotNull(assertionLoggerHandler1);
      
      assertionLoggerHandler0.close();
      assertFalse(assertionLoggerHandler0.equals((Object)assertionLoggerHandler1));
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotSame(assertionLoggerHandler0, assertionLoggerHandler1);
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertFalse(boolean1 == boolean0);
      assertEquals("CONFIG", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(700, level0.intValue());
      assertEquals("CONFIG", level0.toString());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotNull(assertionLoggerHandler0);
      
      Level level0 = Level.INFO;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertNotNull(level0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.NO_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "RS", extLogRecord_FormatStyle0, "RS");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("RS", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("RS", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertFalse(boolean0);
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("RS", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("RS", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      assertNotNull(string0);
      assertEquals("<unknown>", string0);
      
      extLogRecord0.setSourceMethodName("");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("RS", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("RS", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertEquals(ExtLogRecord.FormatStyle.NO_FORMAT, extLogRecord0.getFormatStyle());
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertNotNull(string1);
      assertEquals("INFO", string1);
      
      AssertionLoggerHandler.startCapture();
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertFalse(boolean1);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle1 = ExtLogRecord.FormatStyle.PRINTF;
      ExtLogRecord extLogRecord1 = new ExtLogRecord(level0, "", extLogRecord_FormatStyle1, "p[K");
      assertFalse(extLogRecord_FormatStyle1.equals((Object)extLogRecord_FormatStyle0));
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertNotNull(extLogRecord1);
      
      assertionLoggerHandler0.doPublish(extLogRecord1);
      assertFalse(extLogRecord_FormatStyle1.equals((Object)extLogRecord_FormatStyle0));
      assertFalse(extLogRecord1.equals((Object)extLogRecord0));
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(800, level0.intValue());
      assertEquals("INFO", level0.toString());
      assertEquals("INFO", level0.getName());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals(ExtLogRecord.FormatStyle.PRINTF, extLogRecord1.getFormatStyle());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("p[K", extLogRecord1.getLoggerClassName());
      assertNull(extLogRecord1.getLoggerName());
      assertEquals("", extLogRecord1.getMessage());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertNotSame(extLogRecord_FormatStyle1, extLogRecord_FormatStyle0);
      assertNotSame(extLogRecord1, extLogRecord0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "{n";
      stringArray0[2] = "RS";
      stringArray0[3] = "RS";
      stringArray0[4] = "<unknown>";
      stringArray0[5] = "p[K";
      stringArray0[6] = "<unknown>";
      stringArray0[7] = "";
      stringArray0[8] = "{n";
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      AssertionLoggerHandler.findText(765L, stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      extLogRecord0.setSourceFileName("@/6$X%,2~;R2B");
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNotNull(string0);
      assertEquals("@/6$X%,2~;R2B", string0);
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{`\"'", "DD", 1043, (Throwable) null);
      assertEquals("DD", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: {`\"'", sQLTimeoutException0.toString());
      assertEquals(1043, sQLTimeoutException0.getErrorCode());
      assertEquals("{`\"'", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "", 147, sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("DD", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: {`\"'", sQLTimeoutException0.toString());
      assertEquals(1043, sQLTimeoutException0.getErrorCode());
      assertEquals("{`\"'", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals(147, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      
      extLogRecord0.setThrown(sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("DD", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: {`\"'", sQLTimeoutException0.toString());
      assertEquals(1043, sQLTimeoutException0.getErrorCode());
      assertEquals("{`\"'", sQLTimeoutException0.getMessage());
      assertEquals("", sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals(147, sQLTimeoutException1.getErrorCode());
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.toString());
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertNull(extLogRecord0.getLoggerName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "{`\"'";
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      long long0 = 1392409280063L;
      // Undeclared exception!
      AssertionLoggerHandler.findText(1392409280063L, stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNotNull(level0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertNotNull(extLogRecord1);
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      extLogRecord1.setSourceFileName("");
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord1);
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      extLogRecord0.disableCallerCalculation();
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertSame(extLogRecord0, extLogRecord1);
      
      String string0 = extLogRecord1.getSourceFileName();
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0, extLogRecord1.getThreadID());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("SEVERE", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertSame(extLogRecord0, extLogRecord1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "X0Xxdpfk<V7nP";
      boolean boolean0 = AssertionLoggerHandler.findText(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNotNull(assertionLoggerHandler0);
      
      Level level0 = Level.FINEST;
      assertEquals(300, level0.intValue());
      assertEquals("FINEST", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINEST", level0.toString());
      assertNotNull(level0);
      
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.MESSAGE_FORMAT;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, (String) null, extLogRecord_FormatStyle0, (String) null);
      assertNotNull(extLogRecord0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = level0.getLocalizedName();
      assertEquals(300, level0.intValue());
      assertEquals("FINEST", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINEST", level0.toString());
      assertNotNull(string0);
      assertEquals("FINEST", string0);
      
      stringArray0[3] = null;
      stringArray0[4] = null;
      boolean boolean0 = AssertionLoggerHandler.findText((-123L), stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      assertionLoggerHandler0.setEnabled(false);
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("FINEST", (String) null, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: FINEST", sQLTransactionRollbackException0.toString());
      assertEquals("FINEST", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      extLogRecord0.setThrown(sQLTransactionRollbackException0);
      assertEquals(300, level0.intValue());
      assertEquals("FINEST", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINEST", level0.toString());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getMessage());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerClassName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: FINEST", sQLTransactionRollbackException0.toString());
      assertEquals("FINEST", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      assertEquals("", extLogRecord1.getNdc());
      assertNull(extLogRecord1.getLoggerName());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertNull(extLogRecord1.getLoggerClassName());
      assertEquals(0, extLogRecord1.getThreadID());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertNull(extLogRecord1.getMessage());
      assertEquals(300, level0.intValue());
      assertEquals("FINEST", level0.getName());
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("FINEST", level0.toString());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getMessage());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals(0, extLogRecord0.getThreadID());
      assertNull(extLogRecord0.getLoggerClassName());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNotNull(extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      assertSame(extLogRecord0, extLogRecord1);
      
      // Undeclared exception!
      try { 
        extLogRecord1.getSourceFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.logmanager.ExtLogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MESSAGE_FORMAT";
      stringArray0[1] = "";
      stringArray0[2] = "B^h94<!/V*-$yh";
      stringArray0[3] = "`0q";
      stringArray0[4] = "8N&i%zS(";
      stringArray0[5] = "#:[T[|.;Zr";
      stringArray0[6] = "}qjt/&G+EvB)";
      boolean boolean0 = AssertionLoggerHandler.findText(0L, stringArray0);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      try { 
        Level.parse("#:[T[|.;Zr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"#:[T[|.;Zr\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertNotNull(assertionLoggerHandler0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "io.netty.handler.ssl.Java9SslEngine$AlpnSelector";
      stringArray0[1] = "io.netty.handler.ssl.Java9SslEngine$AlpnSelector";
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNull(assertionLoggerHandler0.getEncoding());
      
      AssertionLoggerHandler.startCapture();
      boolean boolean0 = AssertionLoggerHandler.findText(stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      long long0 = 765L;
      // Undeclared exception!
      AssertionLoggerHandler.findText(765L, stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertNotNull(level0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0xdpfk<V7nP", "X0xdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0, extLogRecord1.getThreadID());
      assertNotNull(extLogRecord1);
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord1);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0, extLogRecord1.getThreadID());
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      String string0 = extLogRecord1.getMdc("C'Kfx");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0, extLogRecord1.getThreadID());
      assertNull(string0);
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      AssertionLoggerHandler.startCapture();
      String string1 = extLogRecord1.getSourceFileName();
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord1.getLoggerName());
      assertNull(extLogRecord1.getResourceBundleName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getLoggerClassName());
      assertEquals("", extLogRecord1.getNdc());
      assertEquals(1392409281320L, extLogRecord1.getMillis());
      assertEquals(0L, extLogRecord1.getSequenceNumber());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord1.getThreadName());
      assertEquals("X0xdpfk<V7nP", extLogRecord1.getMessage());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord1.getFormatStyle());
      assertEquals(0, extLogRecord1.getThreadID());
      assertNotNull(string1);
      assertEquals("<unknown>", string1);
      assertSame(extLogRecord0, extLogRecord1);
      assertSame(extLogRecord1, extLogRecord0);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals(1000, level0.intValue());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0xdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNull(extLogRecord0.getLoggerName());
      assertSame(extLogRecord0, extLogRecord1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<unknown>";
      stringArray0[1] = "X0xdpfk<V7nP";
      // Undeclared exception!
      AssertionLoggerHandler.findText(1565L, stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Level level0 = Level.SEVERE;
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNotNull(level0);
      
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean0);
      
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isEnabled());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertNotNull(assertionLoggerHandler0);
      
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertNotNull(extLogRecord0);
      
      assertionLoggerHandler0.setEnabled(false);
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      extLogRecord0.setSourceFileName("}Mf");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      
      boolean boolean1 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean1);
      
      String string0 = extLogRecord0.getSourceFileName();
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      assertNotNull(string0);
      assertEquals("}Mf", string0);
      
      extLogRecord0.setSourceMethodName("{n");
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      String string1 = level0.getLocalizedName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNotNull(string1);
      assertEquals("SEVERE", string1);
      
      AssertionLoggerHandler.startCapture();
      boolean boolean2 = AssertionLoggerHandler.hasLevel(level0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertFalse(boolean2);
      
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertNull(assertionLoggerHandler0.getEncoding());
      assertTrue(assertionLoggerHandler0.isAutoFlush());
      assertFalse(assertionLoggerHandler0.isEnabled());
      assertEquals(ExtLogRecord.FormatStyle.MESSAGE_FORMAT, extLogRecord0.getFormatStyle());
      assertEquals(0, extLogRecord0.getThreadID());
      assertEquals(0L, extLogRecord0.getSequenceNumber());
      assertEquals("", extLogRecord0.getNdc());
      assertEquals(1392409281320L, extLogRecord0.getMillis());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getLoggerClassName());
      assertEquals("X0Xxdpfk<V7nP", extLogRecord0.getMessage());
      assertEquals("TEST_EXECUTION_THREAD_1", extLogRecord0.getThreadName());
      assertNull(extLogRecord0.getLoggerName());
      assertNull(extLogRecord0.getResourceBundleName());
      
      boolean boolean3 = AssertionLoggerHandler.hasLevel(level0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertTrue(boolean3);
      
      boolean boolean4 = AssertionLoggerHandler.hasLevel(level0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
      assertEquals("SEVERE", level0.getName());
      assertEquals("SEVERE", level0.toString());
      assertEquals(1000, level0.intValue());
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Level level0 = Level.SEVERE;
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      extLogRecord1.setSourceFileName("");
      assertionLoggerHandler0.doPublish(extLogRecord1);
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      AssertionLoggerHandler.hasLevel(level0);
      extLogRecord1.getSourceFileName();
      assertionLoggerHandler0.doPublish(extLogRecord0);
      String[] stringArray0 = new String[0];
      boolean boolean1 = AssertionLoggerHandler.findText(1392409284013L, stringArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = AssertionLoggerHandler.findText(stringArray0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AssertionLoggerHandler.startCapture();
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      AssertionLoggerHandler.findText(0L, (String[]) null);
      assertionLoggerHandler0.close();
      assertTrue(assertionLoggerHandler0.isAutoFlush());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Level level0 = Level.FINEST;
      boolean boolean0 = AssertionLoggerHandler.hasLevel(level0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Level level0 = Level.SEVERE;
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      extLogRecord1.setSourceFileName("");
      assertionLoggerHandler0.doPublish(extLogRecord1);
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      extLogRecord1.getSourceFileName();
      assertionLoggerHandler0.doPublish(extLogRecord0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        AssertionLoggerHandler.findText(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Level level0 = Level.SEVERE;
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertionLoggerHandler0.setEnabled(false);
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      assertionLoggerHandler0.doPublish(extLogRecord1);
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      extLogRecord1.getSourceFileName();
      assertionLoggerHandler0.doPublish(extLogRecord0);
      assertNull(assertionLoggerHandler0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Level level0 = Level.SEVERE;
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0xdpfk<V7nP", "X0xdpfk<V7nP");
      assertionLoggerHandler0.setEnabled(false);
      ExtLogRecord extLogRecord1 = ExtLogRecord.wrap(extLogRecord0);
      assertionLoggerHandler0.doPublish(extLogRecord1);
      AssertionLoggerHandler.startCapture();
      extLogRecord1.getSourceFileName();
      assertionLoggerHandler0.doPublish(extLogRecord0);
      String[] stringArray0 = new String[0];
      boolean boolean0 = AssertionLoggerHandler.findText(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Level level0 = Level.SEVERE;
      AssertionLoggerHandler.hasLevel(level0);
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "X0Xxdpfk<V7nP", "X0Xxdpfk<V7nP");
      assertionLoggerHandler0.setEnabled(false);
      extLogRecord0.setSourceFileName("}Mf");
      assertionLoggerHandler0.doPublish(extLogRecord0);
      AssertionLoggerHandler.startCapture();
      assertionLoggerHandler0.flush();
      AssertionLoggerHandler.hasLevel(level0);
      extLogRecord0.getSourceFileName();
      extLogRecord0.setSourceMethodName("{n");
      level0.getLocalizedName();
      AssertionLoggerHandler.startCapture();
      AssertionLoggerHandler.hasLevel(level0);
      assertionLoggerHandler0.doPublish(extLogRecord0);
      String[] stringArray0 = new String[0];
      AssertionLoggerHandler.findText(stringArray0);
      AssertionLoggerHandler.findText(765L, stringArray0);
      assertionLoggerHandler0.close();
      assertionLoggerHandler0.flush();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "}Mf";
      stringArray1[1] = "}Mf";
      // Undeclared exception!
      AssertionLoggerHandler.findText(2380L, stringArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertionLoggerHandler0.flush();
      Level level0 = Level.INFO;
      level0.getLocalizedName();
      try { 
        Level.parse("org.apache.activemq.artemis.logs.AssertionLoggerHandler");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"org.apache.activemq.artemis.logs.AssertionLoggerHandler\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = AssertionLoggerHandler.findText((String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.activemq.artemis.logs.AssertionLoggerHandler";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "org.jboss.logmanager.ExtLogRecord$1";
      stringArray0[7] = "LKBffPv2!A";
      stringArray0[8] = "9w??KPN3hY'?/.Pn";
      AssertionLoggerHandler.findText(stringArray0);
      AssertionLoggerHandler.clear();
      Level level0 = Level.CONFIG;
      try { 
        Level.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertionLoggerHandler0.flush();
      AssertionLoggerHandler.stopCapture();
      AssertionLoggerHandler.clear();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      assertionLoggerHandler0.close();
      assertTrue(assertionLoggerHandler0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AssertionLoggerHandler assertionLoggerHandler0 = new AssertionLoggerHandler();
      AssertionLoggerHandler.stopCapture();
      assertionLoggerHandler0.close();
      AssertionLoggerHandler.stopCapture();
      Level level0 = Level.CONFIG;
      String string0 = "";
      ExtLogRecord.FormatStyle extLogRecord_FormatStyle0 = ExtLogRecord.FormatStyle.PRINTF;
      String string1 = null;
      ExtLogRecord extLogRecord0 = new ExtLogRecord(level0, "", extLogRecord_FormatStyle0, (String) null);
      ExtLogRecord extLogRecord1 = new ExtLogRecord(extLogRecord0);
      level0.getLocalizedName();
      extLogRecord0.setMillis(0L);
      // Undeclared exception!
      try { 
        extLogRecord1.getSourceMethodName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.logmanager.ExtLogRecord", e);
      }
  }
}
