/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 18:58:25 GMT 2022
 */

package org.apache.activemq.artemis.core.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.URL;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.activemq.artemis.core.server.ActiveMQComponent;
import org.apache.activemq.artemis.core.server.ActiveMQScheduledComponent;
import org.apache.activemq.artemis.core.server.NetworkHealthCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NetworkHealthCheck_ESTest extends NetworkHealthCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("l3=Sl\"A+2pGcj,<");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(activeMQScheduledComponent0);
      networkHealthCheck1.run();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertTrue(networkHealthCheck1.isEmpty());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      networkHealthCheck0.setPeriod((long) 465);
      networkHealthCheck0.start();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals(465L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      networkHealthCheck1.setTimeUnit(timeUnit0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.setTimeUnit(timeUnit0);
      assertEquals(1000, networkHealthCheck2.getNetworkTimeout());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1596L, (-42));
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 1596L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-42), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Jr5smLQ^ONuD:B1KC", (-256L), 818);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod((long) 818, 515L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setTimeUnit(timeUnit0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(818, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod((long) 465);
      networkHealthCheck0.start();
      networkHealthCheck1.setPeriod((long) 465);
      assertTrue(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setPeriod((long) 465);
      assertEquals(465L, networkHealthCheck0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 2067);
      networkHealthCheck0.setNetworkTimeout((-2523));
      networkHealthCheck0.setPeriod((-111L));
      assertEquals((-2523), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(2544L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("5", 0L, 191);
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck0.setPeriod((long) 1);
      NetworkHealthCheck networkHealthCheck3 = networkHealthCheck1.addComponent(networkHealthCheck2);
      networkHealthCheck3.setNetworkTimeout(0);
      assertEquals(0, networkHealthCheck3.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setNetworkTimeout(1786);
      assertEquals(1786, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      networkHealthCheck0.setNetworkTimeout((-1856));
      assertEquals((-1856), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1077L), (-1064));
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, (long) (-1064), timeUnit0);
      networkHealthCheck0.setNetworkTimeout(2);
      assertEquals(2, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("-", 1881L, 30);
      networkHealthCheck0.setInitialDelay(30);
      networkHealthCheck0.setNetworkTimeout(1562);
      assertEquals(1562, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("5", 0L, 191);
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck0.setPeriod((long) 1);
      networkHealthCheck2.addComponent(networkHealthCheck2);
      networkHealthCheck1.setNICName("A9*-LRTW!q");
      assertEquals(1L, networkHealthCheck1.getPeriod());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setNICName("");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      networkHealthCheck1.setNICName("");
      assertFalse(networkHealthCheck0.isEmpty());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", (-1595L), (-3944));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("org.apache.activemq.artemis.core.server.NetworkHealthCheck$1");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-3944), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName("ping -c 1 -t %d %s");
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelay(2544L);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.setNICName("");
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
      assertEquals(1000, networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.run();
      networkHealthCheck1.setIpv6Command("ping6 -c 1 %2$s");
      assertTrue(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setIpv6Command("ping6 -c 1 %2$s");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      
      networkHealthCheck0.setIpv6Command("");
      assertEquals("", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      networkHealthCheck0.setIpv6Command("m%0H`^N3");
      assertEquals("m%0H`^N3", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 631);
      networkHealthCheck0.setInitialDelay(631);
      networkHealthCheck0.setIpv6Command(" (");
      assertEquals(" (", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1596L, (-42));
      networkHealthCheck0.start();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command((String) null);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-42), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.setIpv4Command("ping6 -c 1 %2$s");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", (-1595L), (-3944));
      URL uRL0 = MockURL.getFtpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      
      networkHealthCheck0.setIpv4Command("");
      assertEquals("", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      networkHealthCheck0.setIpv4Command("ping6 -c 1 %2$s");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(3);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command("ping -c 1 -t %d %s");
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      networkHealthCheck0.setPeriod((long) 465);
      networkHealthCheck0.start();
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(false);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("*");
      networkHealthCheck1.setIgnoreLoopback(true);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(0L, 1078L);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("t[?[", 0L, (-171));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(5165L, 0L, timeUnit0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      networkHealthCheck0.removeURL(uRL0);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.removeURL(uRL0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck1.removeURL(uRL0);
      assertFalse(networkHealthCheck0.isEmpty());
      assertEquals((-161), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("5", 0L, 191);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.setNetworkTimeout(0);
      networkHealthCheck0.removeURL(uRL0);
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1596L, (-42));
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 1596L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-42), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("-", 1881L, 30);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck0.setInitialDelay(30);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeURL(uRL0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(30, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck0.run();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck0.removeAddress(inetAddress0);
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck1.removeAddress(inetAddress0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck1.removeAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2788L), 2067);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(2067, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("AMQ202002: Ping Address {0} wasn't reacheable.", 2711L, 1488);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 3840L, timeUnit0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1488, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(2544L);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.removeAddress(inetAddress0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      networkHealthCheck0.setPeriod((long) 465);
      networkHealthCheck0.start();
      networkHealthCheck0.parseURIList("ping -c 1 -t %d %s");
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-120));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.parseURIList("Ig|nEv");
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals((-120), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2788L), 2067);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(2067, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("*");
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 721);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("jboss");
      assertEquals(721, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(2544L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList("ping6 -c 1 %2$s");
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList(",");
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertTrue(networkHealthCheck1.isEmpty());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      networkHealthCheck0.parseAddressList("N^2Z_,Q{{aM|");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(342L, (-837L), timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("");
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      boolean boolean0 = networkHealthCheck0.isIgnoreLoopback();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals(0, int0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals((-161), int0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv6Command("");
      String string0 = networkHealthCheck1.getIpv6Command();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, 1L, (-8));
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv4Command((String) null);
      String string0 = networkHealthCheck1.getIpv4Command();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals((-8), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.jboss.logging.Logger$1", 0L, (-5));
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      
      networkHealthCheck0.setIpv4Command("");
      networkHealthCheck0.getIpv4Command();
      assertEquals("", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("AMQ202002: Ping Address {0} wasn't reacheable.", 2711L, 1488);
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      networkHealthCheck1.clearURL();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(networkHealthCheck0.isStarted());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 373L, 51);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearURL();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, 0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      NetworkHealthCheck networkHealthCheck1 = (NetworkHealthCheck)networkHealthCheck0.setInitialDelayAndPeriod(342L, (-837L), timeUnit0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.clearURL();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearComponents();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", (-1595L), (-3944));
      URL uRL0 = MockURL.getFtpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.clearComponents();
      assertFalse(networkHealthCheck2.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck2.getIpv6Command());
      assertEquals((-3944), networkHealthCheck2.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck2.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", (-1595L), (-3944));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout(0);
      networkHealthCheck1.clearComponents();
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 721);
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(721, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelay(2544L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearComponents();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod((long) 465);
      networkHealthCheck0.start();
      networkHealthCheck1.clearAddresses();
      assertTrue(networkHealthCheck1.isStarted());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.clearAddresses();
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals(1, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-3401L), 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1077L), (-1064));
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(0L, (long) (-1064), timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals((-1064), networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.setInitialDelayAndPeriod(368L, 368L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearAddresses();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      networkHealthCheck1.clearComponents();
      assertTrue(networkHealthCheck0.isStarted());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("ping6 -c 1 %2$s", (-1595L), (-3944));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNetworkTimeout(0);
      URL uRL0 = MockURL.getFtpExample();
      networkHealthCheck1.addURL(uRL0);
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 721);
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals(721, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 631);
      networkHealthCheck0.setInitialDelay(631);
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals(631, networkHealthCheck1.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("Thread-", (-1077L), 465);
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck0.addComponent(networkHealthCheck0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(0, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(0L, 0L, timeUnit0);
      networkHealthCheck0.addComponent(activeMQScheduledComponent0);
      networkHealthCheck0.parseAddressList("N^2Z_,Q{{aM|");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ActiveMQScheduledComponent activeMQScheduledComponent0 = networkHealthCheck0.setInitialDelayAndPeriod(342L, (-837L), timeUnit0);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(activeMQScheduledComponent0);
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.addComponent(networkHealthCheck0);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", 0L, 0);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("7#.#Zf9TpBJv([x", 0L, (-1));
      networkHealthCheck0.setInitialDelay(0L);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      networkHealthCheck0.addAddress(inetAddress0);
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("t[?[", 0L, (-171));
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      networkHealthCheck0.setInitialDelayAndPeriod(5165L, 0L, timeUnit0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addAddress(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertTrue(networkHealthCheck1.isEmpty());
      assertEquals((-171), networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      // Undeclared exception!
      try { 
        networkHealthCheck0.setPeriod(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      networkHealthCheck0.setIpv4Command("0%[>nJ:vJ:W35");
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing(inetAddress0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '['
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.purePing((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setPeriod(0L);
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck0.addComponent(networkHealthCheck1);
      // Undeclared exception!
      try { 
        networkHealthCheck2.addURL(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addComponent((ActiveMQComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      networkHealthCheck1.setPeriod(0L);
      // Undeclared exception!
      try { 
        networkHealthCheck1.addComponent(networkHealthCheck0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.addAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("NetworkChecker", 0L, 1042);
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      InetAddress inetAddress0 = InetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        networkHealthCheck1.addAddress(inetAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ScheduledThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-2788L), 721);
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1L, 721);
      assertTrue(networkHealthCheck0.isEmpty());
      
      networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-120));
      boolean boolean0 = networkHealthCheck0.isEmpty();
      assertEquals((-120), networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getFtpExample();
      boolean boolean0 = networkHealthCheck0.check(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      boolean boolean0 = networkHealthCheck0.check(inetAddress0);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(boolean0);
      assertEquals((-161), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      boolean boolean0 = networkHealthCheck0.check((InetAddress) null);
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertTrue(boolean0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      networkHealthCheck0.addURL(uRL0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ")K");
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 0L, (-161));
      assertTrue(networkHealthCheck0.isEmpty());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("ping6 -c 1 %2$s");
      boolean boolean0 = networkHealthCheck1.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertTrue(networkHealthCheck0.isEmpty());
      
      networkHealthCheck0.parseAddressList("*");
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(networkHealthCheck0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck(",", (-10L), 0);
      boolean boolean0 = networkHealthCheck0.check();
      assertEquals(0, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", (-544L), 1);
      assertTrue(networkHealthCheck0.isEmpty());
      
      URL uRL0 = MockURL.getFileExample();
      networkHealthCheck0.addURL(uRL0);
      boolean boolean0 = networkHealthCheck0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      InetAddress inetAddress0 = MockInetAddress.getByName("ping6 -c 1 %2$s");
      networkHealthCheck1.addAddress(inetAddress0);
      assertTrue(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("", 1596L, (-42));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setNICName((String) null);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals((-42), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.jboss.logging.Logger$1", 0L, (-5));
      boolean boolean0 = networkHealthCheck0.check((URL) null);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(boolean0);
      assertEquals((-5), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          // Undeclared exception!
          try { 
            networkHealthCheck0.purePing(inetAddress0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"<<ALL FILES>>\" \"execute\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkExec(SecurityManager.java:799)
             // java.lang.ProcessBuilder.start(ProcessBuilder.java:1018)
             // org.apache.activemq.artemis.core.server.NetworkHealthCheck.purePing(NetworkHealthCheck.java:354)
             // sun.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("`,L#vjq.!`J_", 0L, (-746));
      boolean boolean0 = networkHealthCheck0.check((InetAddress) null);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(boolean0);
      assertEquals((-746), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getFileExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      networkHealthCheck1.addComponent(networkHealthCheck0);
      assertTrue(networkHealthCheck1.isStarted());
      
      networkHealthCheck1.run();
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck((String) null, (-1064), (-1064));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addComponent(networkHealthCheck0);
      assertTrue(networkHealthCheck1.isEmpty());
      
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.parseAddressList("ping6 -c 1 %2$s");
      networkHealthCheck2.run();
      assertFalse(networkHealthCheck1.isEmpty());
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getHttpExample();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ")K");
      NetworkHealthCheck networkHealthCheck2 = networkHealthCheck1.addComponent(networkHealthCheck1);
      networkHealthCheck2.run();
      assertTrue(networkHealthCheck0.isStarted());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.start();
      networkHealthCheck0.parseAddressList("ping -c 1 -t %d %s");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "ping -c 1 -t %d %s");
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.addURL(uRL0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isStarted());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIgnoreLoopback(true);
      networkHealthCheck1.parseAddressList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseURIList((String) null);
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("`,L#vjq.!`J_", 0L, (-746));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList("`,L#vjq.!`J_");
      networkHealthCheck1.parseURIList("ping6 -c 1 %2$s");
      assertFalse(networkHealthCheck0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.parseAddressList((String) null);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("`,L#vjq.!`J_", 0L, (-746));
      networkHealthCheck0.getNICName();
      assertEquals((-746), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.jboss.logging.Logger$1", 0L, (-5));
      String string0 = networkHealthCheck0.getIpv6Command();
      assertEquals((-5), networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.jboss.logging.Logger$1", 0L, (-5));
      String string0 = networkHealthCheck0.getIpv4Command();
      assertEquals((-5), networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping -c 1 -t %d %s", string0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.removeURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      networkHealthCheck0.getUrls();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      // Undeclared exception!
      try { 
        networkHealthCheck0.removeAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("`,L#vjq.!`J_", 0L, (-746));
      networkHealthCheck0.getThreadFactory();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals((-746), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.jboss.logging.Logger$1", 0L, (-5));
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.clearURL();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck1.getIpv6Command());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertEquals((-5), networkHealthCheck1.getNetworkTimeout());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      
      NetworkHealthCheck networkHealthCheck1 = networkHealthCheck0.setIpv6Command((String) null);
      String string0 = networkHealthCheck1.getIpv6Command();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck1.getIpv4Command());
      assertFalse(networkHealthCheck1.isIgnoreLoopback());
      assertNull(string0);
      assertEquals(1000, networkHealthCheck1.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck("org.jboss.logging.Logger$1", 0L, (-5));
      networkHealthCheck0.getAddresses();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals((-5), networkHealthCheck0.getNetworkTimeout());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      int int0 = networkHealthCheck0.getNetworkTimeout();
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertFalse(networkHealthCheck0.isIgnoreLoopback());
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NetworkHealthCheck networkHealthCheck0 = new NetworkHealthCheck();
      boolean boolean0 = networkHealthCheck0.isIgnoreLoopback();
      assertFalse(boolean0);
      assertEquals("ping6 -c 1 %2$s", networkHealthCheck0.getIpv6Command());
      assertEquals(1000, networkHealthCheck0.getNetworkTimeout());
      assertEquals("ping -c 1 -t %d %s", networkHealthCheck0.getIpv4Command());
  }
}
