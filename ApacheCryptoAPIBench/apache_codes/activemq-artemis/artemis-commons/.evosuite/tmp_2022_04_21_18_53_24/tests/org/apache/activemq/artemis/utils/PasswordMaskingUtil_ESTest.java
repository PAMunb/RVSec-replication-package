/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:00:46 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec;
import org.apache.activemq.artemis.utils.HashProcessor;
import org.apache.activemq.artemis.utils.PasswordMaskingUtil;
import org.apache.activemq.artemis.utils.SensitiveDataCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PasswordMaskingUtil_ESTest extends PasswordMaskingUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordMaskingUtil.getCodec("QrO6;)WXdKe.Ws");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      try { 
        PasswordMaskingUtil.resolveMask(boolean0, "yiqFsIu[p<M", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must be encrypted.
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = PasswordMaskingUtil.unwrap("{@tN:N:Ec;0hh<f^1j");
      assertEquals(":N:Ec;0hh<f^1j", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      String string0 = PasswordMaskingUtil.resolveMask(boolean0, "", "org.jboss.logging.locale");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordMaskingUtil.unwrap(";");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordMaskingUtil.unwrap((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.PasswordMaskingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        PasswordMaskingUtil.resolveMask((Boolean) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        PasswordMaskingUtil.isEncMasked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        PasswordMaskingUtil.getCodec(";");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid PasswordCodec value: ;
         //
         verifyException("org.apache.activemq.artemis.utils.PasswordMaskingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SensitiveDataCodec<String> sensitiveDataCodec0 = PasswordMaskingUtil.getCodec((String) null);
      assertNotNull(sensitiveDataCodec0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = PasswordMaskingUtil.isEncMasked("ENC(trustpass");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = PasswordMaskingUtil.isEncMasked("ENC()");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = PasswordMaskingUtil.isEncMasked("fr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = PasswordMaskingUtil.unwrap("log4j");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = PasswordMaskingUtil.getDefaultCodec();
      assertNotNull(defaultSensitiveStringCodec0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SensitiveDataCodec<String> sensitiveDataCodec0 = PasswordMaskingUtil.getCodec("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec");
      assertNotNull(sensitiveDataCodec0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      try { 
        PasswordMaskingUtil.resolveMask(boolean0, ";", ";");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid PasswordCodec value: ;
         //
         verifyException("org.apache.activemq.artemis.utils.PasswordMaskingUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashProcessor hashProcessor0 = PasswordMaskingUtil.getHashProcessor();
      assertNotNull(hashProcessor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashProcessor hashProcessor0 = PasswordMaskingUtil.getHashProcessor((String) null);
      assertNotNull(hashProcessor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashProcessor hashProcessor0 = PasswordMaskingUtil.getHashProcessor("AOZ^tD");
      assertNotNull(hashProcessor0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashProcessor hashProcessor0 = PasswordMaskingUtil.getHashProcessor("ENC()");
      assertNotNull(hashProcessor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = PasswordMaskingUtil.resolveMask((Boolean) null, "ENC(", "ENC(");
      assertEquals("ENC(", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      try { 
        PasswordMaskingUtil.resolveMask(boolean0, "two-way", "org.apache.activemq.artemis.utils.PasswordMaskingUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = PasswordMaskingUtil.resolveMask((Boolean) null, "QrO6", "ENC(null)");
      assertEquals("QrO6", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec");
      String string0 = PasswordMaskingUtil.resolveMask(boolean0, (String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = PasswordMaskingUtil.wrap("");
      assertEquals("ENC()", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        PasswordMaskingUtil.resolveMask((Boolean) null, "ENC(ENC(ISGq7,b^0jB:IIrNLWg))", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must be encrypted.
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }
}
