/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:05:30 GMT 2022
 */

package org.apache.activemq.artemis.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import javax.crypto.BadPaddingException;
import org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSensitiveStringCodec_ESTest extends DefaultSensitiveStringCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.decode("22fa49a8d8fa115d");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        DefaultSensitiveStringCodec.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.init((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.encode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.encode(defaultSensitiveStringCodec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode(defaultSensitiveStringCodec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec cannot be cast to java.lang.String
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.decode("-6ebe545df9e5e187");
      assertEquals("one-way", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode("algorithm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Password must be encrypted.
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec$BlowfishAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        DefaultSensitiveStringCodec.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        DefaultSensitiveStringCodec.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid algorithm: DYNAMOSA
         //
         verifyException("org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      char[] charArray0 = new char[0];
      boolean boolean0 = defaultSensitiveStringCodec0.verify(charArray0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      try { 
        defaultSensitiveStringCodec0.decode("9");
        fail("Expecting exception: BadPaddingException");
      
      } catch(BadPaddingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultSensitiveStringCodec defaultSensitiveStringCodec0 = new DefaultSensitiveStringCodec();
      String string0 = defaultSensitiveStringCodec0.encode("key");
      assertEquals("-1519c6761e97365f", string0);
  }
}
