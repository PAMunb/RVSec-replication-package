/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:34:12 GMT 2022
 */

package org.apache.tika.fork;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.util.Enumeration;
import org.apache.tika.fork.ClassLoaderProxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassLoaderProxy_ESTest extends ClassLoaderProxy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((byte) (-97));
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      URL uRL0 = classLoaderProxy0.findResource("..*");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(19);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findClass("$d");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Unable to load class $d
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(65535);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResources("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2469);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(12);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2469);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findResources("n?cT&R.<JO(");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((-1));
      File file0 = MockFile.createTempFile("CVS|.svn|.git", "_mm.x'N^sx8\"^.s");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findResources("");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((byte)0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      classLoaderProxy0.findResource("zjp?bW#,)::");
      // Undeclared exception!
      try { 
        classLoaderProxy0.findClass("$d");
        fail("Expecting exception: ClassFormatError");
      
      } catch(ClassFormatError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(55037);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findClass("n?cT&R.<JO(");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Unable to find class n?cT&R.<JO(
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((byte)0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResources("V ,|jiUAZ3=0i3[,(S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: tika-in-memory
         //
         verifyException("org.apache.tika.fork.MemoryURLStreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((byte)0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      Enumeration<URL> enumeration0 = classLoaderProxy0.findResources("..*");
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((-1014));
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResource("..*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: tika-in-memory
         //
         verifyException("org.apache.tika.fork.MemoryURLStreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "..*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[18];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(55037);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      classLoaderProxy0.findResource("..*");
      URL uRL0 = classLoaderProxy0.findResource("..*");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((-1014));
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResource("..*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }
}
