/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:28:41 GMT 2022
 */

package org.apache.tika.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.tika.utils.RereadableInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RereadableInputStream_ESTest extends RereadableInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byteArrayInputStream0.reset();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 0, true, true);
      rereadableInputStream0.read();
      rereadableInputStream0.rewind();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 911);
      pipedOutputStream0.write(911);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 0, false, true);
      rereadableInputStream0.skip(0);
      rereadableInputStream0.getSize();
      int int0 = rereadableInputStream0.read();
      assertEquals(1, rereadableInputStream0.getSize());
      assertEquals(143, int0);
      
      rereadableInputStream0.rewind();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      pipedOutputStream0.flush();
      pushbackInputStream0.available();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pushbackInputStream0, 1, false, false);
      pipedInputStream0.skip((-1L));
      rereadableInputStream0.rewind();
      rereadableInputStream0.rewind();
      rereadableInputStream0.getSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      rereadableInputStream0.rewind();
      rereadableInputStream0.getSize();
      rereadableInputStream0.read();
      rereadableInputStream0.read();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      rereadableInputStream0.read();
      rereadableInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 46, false, true);
      rereadableInputStream0.rewind();
      rereadableInputStream0.rewind();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 911);
      pipedOutputStream0.write(911);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 0, false, true);
      rereadableInputStream0.skip(0);
      rereadableInputStream0.getSize();
      rereadableInputStream0.read();
      rereadableInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 911);
      pipedOutputStream0.write(911);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 0, false, true);
      rereadableInputStream0.skip(0);
      rereadableInputStream0.read();
      rereadableInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-122));
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)2, false, false);
      rereadableInputStream0.read();
      rereadableInputStream0.getSize();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 85, false, false);
      rereadableInputStream0.rewind();
      rereadableInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-122));
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)2, false, false);
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
      
      rereadableInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)1);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 0, false, false);
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)1);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 0, true, true);
      rereadableInputStream0.rewind();
      assertEquals(2, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 0, false, false);
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 0, true, true);
      rereadableInputStream0.rewind();
      assertEquals(1, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 1082, true, true);
      int int0 = rereadableInputStream0.read();
      assertEquals(1, rereadableInputStream0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(dataInputStream0, 1, true, false);
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 0, true, true);
      assertEquals(0, rereadableInputStream0.getSize());
      
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)37);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 525, false, true);
      rereadableInputStream0.close();
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = null;
      try {
        rereadableInputStream0 = new RereadableInputStream((InputStream) null, (-1472), false, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.utils.RereadableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 0, true, false);
      rereadableInputStream0.getSize();
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 63, false, false);
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 0, true, true);
      rereadableInputStream0.close();
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 63, false, true);
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 2045, true, false);
      rereadableInputStream0.close();
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 1890, false, true);
      int int0 = rereadableInputStream0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 0, true, true);
      // Undeclared exception!
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream((InputStream) null, 0, false, false);
      // Undeclared exception!
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
