/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:20:58 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.Patterns;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Patterns_ESTest extends Patterns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add(".*", false, mimeType0);
      patterns0.add("`", true, mimeType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("org.apache.tika.mime.Patterns$LengthComparator", false, mimeType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "Invalid type configuration", "Y37-;", "*.*", "**.movie");
      Magic magic0 = new Magic(mimeType0, 57, magicMatch0);
      mimeType0.addMagic(magic0);
      patterns0.matches("org.apache.tika.mime.Patterns$LengthComparator");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("o +<W][tZJ[&86?r", true, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.matches(".*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // o +<W][tZJ[&86?r
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("Fbr8oIL2nV1f7sNJ?\"", false, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.matches("Fbr8oIL2nV1f7sNJ?\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MimeType mimeType0 = patterns0.matches("X@gg-KV");
      // Undeclared exception!
      try { 
        patterns0.add((String) null, true, mimeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("A", true, mimeType0);
      patterns0.matches("q_'es");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("A", true, mimeType0);
      patterns0.matches("A");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("*{dPX+", false, mimeType0);
      patterns0.matches("q_'es");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.matches((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType1 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType mimeType1 = new MimeType(mediaType1);
      patterns0.add("\"^", true, mimeType1);
      patterns0.add("\"^", true, mimeType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      patterns0.add("**.ice", true, mimeType1);
      try { 
        patterns0.add("**.ice", true, mimeType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting glob pattern: **.ice
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.audio((String) null);
      mediaTypeRegistry0.addSuperType(mediaType0, mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("Conflicting name pattern: ", true, mimeType0);
      patterns0.add("Conflicting name pattern: ", true, mimeType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add(",o$e!LryP;9}5/['U", false, mimeType0);
      patterns0.add(",o$e!LryP;9}5/['U", false, mimeType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("Name is missing", true, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.add("Name is missing", true, mimeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      MediaTypeRegistry.getDefaultRegistry();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*", false, mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      try { 
        patterns0.add("*", false, mimeType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting extension pattern: 
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*", false, mimeType0);
      patterns0.add("*", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MediaType mediaType1 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType1);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("", mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      patterns0.add("", false, mimeType1);
      assertFalse(mimeType1.equals((Object)mimeType0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("", mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      try { 
        patterns0.add("", false, mimeType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting name pattern: 
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType1 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("", mimeType0);
      MimeType mimeType1 = new MimeType(mediaType1);
      patterns0.add("", false, mimeType1);
      assertFalse(mimeType1.hasMagic());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("org.apache.tika.mime.Patterns$LengthComparator", false, mimeType0);
      patterns0.add("org.apache.tika.mime.Patterns$LengthComparator", false, mimeType0);
      assertEquals("", mimeType0.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*jp_7 ;Vuv[t0g", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*?Tg]@.Rz: :~.", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.video("**.fli");
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("**.fli", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*", false, mimeType0);
      MimeType mimeType1 = patterns0.matches("*`T5}k(K2");
      assertEquals("", mimeType1.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.add(".*", false, (MimeType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        patterns0.add((String) null, mimeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("J0E", mimeType0);
      // Undeclared exception!
      try { 
        patterns0.add("J0E", mimeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }
}
