/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:36:19 GMT 2022
 */

package org.apache.tika.language.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.language.detect.LanguageConfidence;
import org.apache.tika.language.detect.LanguageResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LanguageResult_ESTest extends LanguageResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LanguageResult languageResult0 = LanguageResult.NULL;
      float float0 = languageResult0.getRawScore();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.HIGH;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, (-1891.7147F));
      float float0 = languageResult0.getRawScore();
      assertEquals((-1891.7147F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.HIGH;
      LanguageResult languageResult0 = new LanguageResult("9-D`Ay)@|", languageConfidence0, 0.0F);
      LanguageConfidence languageConfidence1 = languageResult0.getConfidence();
      LanguageResult languageResult1 = new LanguageResult((String) null, languageConfidence1, 0.0F);
      languageResult1.getLanguage();
      assertEquals(0.0F, languageResult1.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.HIGH;
      LanguageResult languageResult0 = new LanguageResult("9-D`Ay)@|", languageConfidence0, 0.0F);
      languageResult0.getLanguage();
      assertEquals(0.0F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LanguageResult languageResult0 = new LanguageResult("S", (LanguageConfidence) null, 711.0F);
      languageResult0.getConfidence();
      assertEquals(711.0F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LanguageResult languageResult0 = LanguageResult.NULL;
      // Undeclared exception!
      try { 
        languageResult0.isLanguage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.detect.LanguageResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      boolean boolean0 = languageResult0.isLanguage(": MEDIUM (11.092000)");
      assertEquals(11.092F, languageResult0.getRawScore(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      boolean boolean0 = languageResult0.NULL.isLanguage("");
      assertTrue(boolean0);
      assertEquals(11.092F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LanguageResult languageResult0 = LanguageResult.NULL;
      boolean boolean0 = languageResult0.isUnknown();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      boolean boolean0 = languageResult0.isUnknown();
      assertFalse(boolean0);
      assertEquals(11.092F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.HIGH;
      LanguageResult languageResult0 = new LanguageResult("9-D`Ay)@|", languageConfidence0, 0.0F);
      boolean boolean0 = languageResult0.isReasonablyCertain();
      assertTrue(boolean0);
      assertEquals(0.0F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      boolean boolean0 = languageResult0.isReasonablyCertain();
      assertFalse(boolean0);
      assertEquals(11.092F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      languageResult0.getLanguage();
      assertEquals(11.092F, languageResult0.getRawScore(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      String string0 = languageResult0.NULL.toString();
      assertEquals(11.092F, languageResult0.getRawScore(), 0.01F);
      assertEquals(": NONE (0.000000)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LanguageConfidence languageConfidence0 = LanguageConfidence.MEDIUM;
      LanguageResult languageResult0 = new LanguageResult("", languageConfidence0, 11.092F);
      float float0 = languageResult0.getRawScore();
      assertEquals(11.092F, float0, 0.01F);
  }
}
