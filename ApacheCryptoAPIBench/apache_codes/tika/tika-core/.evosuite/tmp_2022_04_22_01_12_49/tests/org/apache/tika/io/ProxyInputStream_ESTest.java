/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:40:49 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.file.Path;
import java.sql.Blob;
import java.util.Enumeration;
import javax.sql.rowset.serial.SerialBlob;
import org.apache.tika.io.CloseShieldInputStream;
import org.apache.tika.io.CountingInputStream;
import org.apache.tika.io.TikaInputStream;
import org.apache.tika.metadata.Metadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProxyInputStream_ESTest extends ProxyInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      // Undeclared exception!
      try { 
        countingInputStream0.read(byteArray0, (-2811), (int) (byte) (-90));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream(tikaInputStream0);
      closeShieldInputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.beforeRead((-2717));
      assertTrue(tikaInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      countingInputStream0.afterRead(2168);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      CountingInputStream countingInputStream0 = new CountingInputStream(pushbackInputStream0);
      try { 
        countingInputStream0.read((byte[]) null, 226, 226);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(path0, metadata0);
      try { 
        tikaInputStream0.peek(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Is a directory
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      long long0 = tikaInputStream0.skip((byte)1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      int int0 = tikaInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      int int0 = tikaInputStream0.read(byteArray0, 1, 1);
      assertEquals(1L, tikaInputStream0.getPosition());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      byte[] byteArray1 = new byte[0];
      int int0 = tikaInputStream0.read(byteArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.read(byteArray0);
      int int0 = tikaInputStream0.read(byteArray0, 1, 1);
      assertEquals(2L, tikaInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[7];
      int int0 = closeShieldInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      int int0 = tikaInputStream0.read();
      assertEquals(1L, tikaInputStream0.getPosition());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      int int0 = tikaInputStream0.read();
      assertEquals(0L, tikaInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      boolean boolean0 = tikaInputStream0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1));
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream(byteArrayInputStream0);
      int int0 = closeShieldInputStream0.available();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        closeShieldInputStream0.skip((-2151L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        closeShieldInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 86);
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream(pushbackInputStream0);
      try { 
        closeShieldInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      // Undeclared exception!
      try { 
        tikaInputStream0.read((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      // Undeclared exception!
      try { 
        tikaInputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      // Undeclared exception!
      try { 
        tikaInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(path0, metadata0);
      try { 
        tikaInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Is a directory
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        closeShieldInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.markSupported();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        closeShieldInputStream0.mark(255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      MockException mockException0 = new MockException();
      MockIOException mockIOException0 = new MockIOException("org.apache.tika.io.ProxyInputStream", mockException0);
      try { 
        tikaInputStream0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.apache.tika.io.ProxyInputStream
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      // Undeclared exception!
      try { 
        countingInputStream0.handleIOException((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      MockIOException mockIOException0 = new MockIOException("3D.YV7q,Hp");
      try { 
        countingInputStream0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream(pushbackInputStream0);
      try { 
        closeShieldInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      tikaInputStream0.read();
      tikaInputStream0.available();
      assertEquals(1L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      CountingInputStream countingInputStream0 = new CountingInputStream(pushbackInputStream0);
      boolean boolean0 = countingInputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(tikaInputStream0, sequenceInputStream0);
      sequenceInputStream1.read();
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      try { 
        countingInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      int int0 = tikaInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      long long0 = tikaInputStream0.skip((byte) (-1));
      assertEquals(0L, long0);
  }
}
