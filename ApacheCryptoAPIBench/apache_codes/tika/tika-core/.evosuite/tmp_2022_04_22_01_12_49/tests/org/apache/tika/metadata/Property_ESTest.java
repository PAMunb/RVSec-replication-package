/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:25:43 GMT 2022
 */

package org.apache.tika.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.tika.metadata.Property;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Property_ESTest extends Property_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Property property0 = Property.externalDate("org.apache.tika.metadata.PropertyTypeException");
      assertEquals("org.apache.tika.metadata.PropertyTypeException", property0.getName());
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertNotNull(property0);
      
      boolean boolean0 = property0.isInternal();
      assertEquals("org.apache.tika.metadata.PropertyTypeException", property0.getName());
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Property property0 = Property.internalInteger("t");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("t", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[4];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      propertyArray0[2] = property0;
      propertyArray0[3] = propertyArray0[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("t", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals("t", property1.getName());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(4, propertyArray0.length);
      assertNotNull(property1);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      Property[] propertyArray1 = property1.getSecondaryExtractProperties();
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("t", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals("t", property1.getName());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(4, propertyArray0.length);
      assertEquals(4, propertyArray1.length);
      assertNotNull(propertyArray1);
      assertNotSame(property0, property1);
      assertSame(propertyArray0, propertyArray1);
      assertNotSame(property1, property0);
      assertSame(propertyArray1, propertyArray0);
      assertTrue(property0.equals((Object)property1));
      assertTrue(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Property property0 = Property.internalReal(".xSG}L{r@fT");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property0.isInternal());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property1.isExternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isInternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals(0, propertyArray0.length);
      assertNotNull(property1);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      Property[] propertyArray1 = property1.getSecondaryExtractProperties();
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property1.isExternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isInternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals(0, propertyArray0.length);
      assertEquals(0, propertyArray1.length);
      assertNotNull(propertyArray1);
      assertNotSame(property0, property1);
      assertSame(propertyArray0, propertyArray1);
      assertNotSame(property1, property0);
      assertSame(propertyArray1, propertyArray0);
      assertTrue(property0.equals((Object)property1));
      assertTrue(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Property property0 = Property.externalTextBag("{MQBqf|)p\"=28eC`l?");
      assertFalse(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals("{MQBqf|)p\"=28eC`l?", property0.getName());
      assertTrue(property0.isExternal());
      assertNotNull(property0);
      
      Property property1 = property0.getPrimaryProperty();
      assertFalse(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals("{MQBqf|)p\"=28eC`l?", property0.getName());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.TEXT, property1.getValueType());
      assertEquals("{MQBqf|)p\"=28eC`l?", property1.getName());
      assertTrue(property1.isExternal());
      assertTrue(property1.isMultiValuePermitted());
      assertFalse(property1.isInternal());
      assertEquals(Property.PropertyType.BAG, property1.getPropertyType());
      assertNotNull(property1);
      assertSame(property0, property1);
      assertSame(property1, property0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Property property0 = Property.internalRational((String) null);
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNotNull(property0);
      
      Property property1 = property0.getPrimaryProperty();
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertEquals(Property.ValueType.RATIONAL, property1.getValueType());
      assertTrue(property1.isInternal());
      assertNull(property1.getName());
      assertNotNull(property1);
      assertSame(property0, property1);
      assertSame(property1, property0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Property property0 = Property.internalURI((String) null);
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNull(property0.getName());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNotNull(property0);
      
      String string0 = property0.getName();
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNull(property0.getName());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Property property0 = Property.get("");
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isExternal());
      assertFalse(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals("", property0.getName());
      assertNotNull(property0);
      
      String string0 = property0.getName();
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isExternal());
      assertFalse(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals("", property0.getName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Property property0 = Property.get("B4)[(giJaQtL$m=mS/v");
      assertNull(property0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Property property0 = Property.get(")c");
      assertNull(property0);
      
      // Undeclared exception!
      try { 
        Property.composite(property0, (Property[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // primaryProperty must not be null
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Property property0 = Property.externalTextBag("");
      assertEquals("", property0.getName());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isExternal());
      assertTrue(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertNotNull(property0);
      
      Property property1 = Property.internalInteger(" value, but received a ");
      assertEquals(Property.ValueType.INTEGER, property1.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isExternal());
      assertEquals(" value, but received a ", property1.getName());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isInternal());
      assertNotNull(property1);
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      
      int int0 = property1.compareTo(property0);
      assertEquals("", property0.getName());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isExternal());
      assertTrue(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.INTEGER, property1.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isExternal());
      assertEquals(" value, but received a ", property1.getName());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isInternal());
      assertEquals(23, int0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Property property0 = Property.externalReal("g_&%");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      assertEquals("g_&%", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertNotNull(property0);
      
      Property property1 = Property.internalRational("");
      assertTrue(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.ValueType.RATIONAL, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isExternal());
      assertNotNull(property1);
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      
      int int0 = property1.compareTo(property0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      assertEquals("g_&%", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.ValueType.RATIONAL, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isExternal());
      assertEquals((-4), int0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Property property0 = Property.internalBoolean((String) null);
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertNotNull(property0);
      
      // Undeclared exception!
      try { 
        property0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence((String) null);
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertNull(property0.getName());
      assertTrue(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertNotNull(property0);
      
      // Undeclared exception!
      try { 
        property0.equals(property0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Property property0 = Property.internalReal("TEfT");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("TEfT", property0.getName());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[1];
      // Undeclared exception!
      try { 
        Property.composite(property0, propertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Property property0 = Property.internalBoolean((String) null);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertNull(property0.getName());
      assertNotNull(property0);
      
      // Undeclared exception!
      try { 
        property0.compareTo(property0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Property property0 = Property.externalBoolean("Mb_u~hc");
      assertEquals("Mb_u~hc", property0.getName());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertNotNull(property0);
      
      Set<String> set0 = property0.getChoices();
      assertEquals("Mb_u~hc", property0.getName());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Property property0 = Property.internalOpenChoise("ejh8,zB-UP", stringArray0);
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("ejh8,zB-UP", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertEquals(2, stringArray0.length);
      assertNotNull(property0);
      
      Property.PropertyType property_PropertyType0 = property0.getPropertyType();
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("ejh8,zB-UP", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertEquals(2, stringArray0.length);
      assertEquals(Property.PropertyType.SIMPLE, property_PropertyType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence("");
      assertEquals("", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertTrue(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
      assertNotNull(property0);
      
      Property property1 = Property.externalBoolean("+X3t0@i2hV#719");
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertEquals("+X3t0@i2hV#719", property1.getName());
      assertFalse(property1.isInternal());
      assertEquals(Property.ValueType.BOOLEAN, property1.getValueType());
      assertTrue(property1.isExternal());
      assertNotNull(property1);
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      
      boolean boolean0 = property1.equals(property0);
      assertEquals("", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertTrue(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertEquals("+X3t0@i2hV#719", property1.getName());
      assertFalse(property1.isInternal());
      assertEquals(Property.ValueType.BOOLEAN, property1.getValueType());
      assertTrue(property1.isExternal());
      assertFalse(boolean0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence("");
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals("", property0.getName());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
      assertTrue(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertNotNull(property0);
      
      boolean boolean0 = property0.equals(property0);
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals("", property0.getName());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
      assertTrue(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Property property0 = Property.get("TEXT");
      assertNull(property0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Property property0 = Property.internalDate("RATIONAL");
      assertTrue(property0.isInternal());
      assertEquals("RATIONAL", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(property0.isExternal());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertTrue(property0.isInternal());
      assertEquals("RATIONAL", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(property0.isExternal());
      assertTrue(property1.isInternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isExternal());
      assertEquals("RATIONAL", property1.getName());
      assertEquals(0, propertyArray0.length);
      assertNotNull(property1);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      Property[] propertyArray1 = new Property[3];
      assertFalse(propertyArray1.equals((Object)propertyArray0));
      
      propertyArray1[0] = property1;
      // Undeclared exception!
      try { 
        Property.composite(property0, propertyArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Composite Properties must not include other Composite Properties as either Primary or Secondary
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Property property0 = Property.internalDate(" V l");
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(" V l", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[2];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      Property property1 = Property.composite(property0, propertyArray0);
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(" V l", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertTrue(property1.isInternal());
      assertEquals(" V l", property1.getName());
      assertEquals(2, propertyArray0.length);
      assertNotNull(property1);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      // Undeclared exception!
      try { 
        Property.composite(property1, propertyArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Composite Properties must not include other Composite Properties as either Primary or Secondary
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Property[] propertyArray0 = new Property[1];
      // Undeclared exception!
      try { 
        Property.composite((Property) null, propertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // primaryProperty must not be null
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Property.getProperties("org.apache.tika.metadata.PropertyTypeException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Property.PropertyType property_PropertyType0 = Property.getPropertyType("b7,atKb]u{BYW");
      assertEquals(Property.PropertyType.SIMPLE, property_PropertyType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Property.getPropertyType("4suti>1Pg~M!8I");
      Property property0 = Property.internalText("4suti>1Pg~M!8I");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("4suti>1Pg~M!8I", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[1];
      Property property1 = Property.externalDate("4suti>1Pg~M!8I");
      assertEquals(Property.ValueType.DATE, property1.getValueType());
      assertFalse(property1.isInternal());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isExternal());
      assertEquals("4suti>1Pg~M!8I", property1.getName());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertNotNull(property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      Property property2 = Property.internalText("4suti>1Pg~M!8I");
      assertTrue(property2.isInternal());
      assertEquals("4suti>1Pg~M!8I", property2.getName());
      assertEquals(Property.PropertyType.SIMPLE, property2.getPropertyType());
      assertFalse(property2.isMultiValuePermitted());
      assertFalse(property2.isExternal());
      assertEquals(Property.ValueType.TEXT, property2.getValueType());
      assertNotNull(property2);
      assertNotSame(property2, property1);
      assertNotSame(property2, property0);
      assertTrue(property2.equals((Object)property1));
      assertTrue(property2.equals((Object)property0));
      
      Property property3 = Property.internalReal("4suti>1Pg~M!8I");
      assertEquals("4suti>1Pg~M!8I", property3.getName());
      assertEquals(Property.ValueType.REAL, property3.getValueType());
      assertFalse(property3.isExternal());
      assertTrue(property3.isInternal());
      assertFalse(property3.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property3.getPropertyType());
      assertNotNull(property3);
      assertNotSame(property3, property1);
      assertNotSame(property3, property0);
      assertNotSame(property3, property2);
      assertTrue(property3.equals((Object)property2));
      assertTrue(property3.equals((Object)property1));
      assertTrue(property3.equals((Object)property0));
      
      Property property4 = Property.internalIntegerSequence("4suti>1Pg~M!8I");
      assertFalse(property4.isExternal());
      assertEquals(Property.PropertyType.SEQ, property4.getPropertyType());
      assertTrue(property4.isInternal());
      assertEquals("4suti>1Pg~M!8I", property4.getName());
      assertEquals(Property.ValueType.INTEGER, property4.getValueType());
      assertTrue(property4.isMultiValuePermitted());
      assertNotNull(property4);
      assertNotSame(property4, property2);
      assertNotSame(property4, property1);
      assertNotSame(property4, property3);
      assertNotSame(property4, property0);
      assertTrue(property4.equals((Object)property3));
      assertTrue(property4.equals((Object)property2));
      assertTrue(property4.equals((Object)property0));
      assertTrue(property4.equals((Object)property1));
      
      Property property5 = Property.internalIntegerSequence("4suti>1Pg~M!8I");
      assertEquals("4suti>1Pg~M!8I", property5.getName());
      assertTrue(property5.isInternal());
      assertTrue(property5.isMultiValuePermitted());
      assertEquals(Property.ValueType.INTEGER, property5.getValueType());
      assertEquals(Property.PropertyType.SEQ, property5.getPropertyType());
      assertFalse(property5.isExternal());
      assertNotNull(property5);
      assertNotSame(property5, property1);
      assertNotSame(property5, property3);
      assertNotSame(property5, property2);
      assertNotSame(property5, property0);
      assertNotSame(property5, property4);
      assertTrue(property5.equals((Object)property0));
      assertTrue(property5.equals((Object)property4));
      assertTrue(property5.equals((Object)property1));
      assertTrue(property5.equals((Object)property2));
      assertTrue(property5.equals((Object)property3));
      
      propertyArray0[0] = property0;
      Property property6 = Property.composite(property0, propertyArray0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("4suti>1Pg~M!8I", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals("4suti>1Pg~M!8I", property6.getName());
      assertFalse(property6.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property6.getPropertyType());
      assertTrue(property6.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property6.getValueType());
      assertFalse(property6.isMultiValuePermitted());
      assertEquals(1, propertyArray0.length);
      assertNotNull(property6);
      assertNotSame(property0, property2);
      assertNotSame(property0, property1);
      assertNotSame(property0, property5);
      assertNotSame(property0, property4);
      assertNotSame(property0, property6);
      assertNotSame(property0, property3);
      assertNotSame(property6, property1);
      assertNotSame(property6, property0);
      assertNotSame(property6, property5);
      assertNotSame(property6, property4);
      assertNotSame(property6, property2);
      assertNotSame(property6, property3);
      assertTrue(property0.equals((Object)property4));
      assertTrue(property0.equals((Object)property3));
      assertTrue(property0.equals((Object)property2));
      assertTrue(property0.equals((Object)property1));
      assertTrue(property0.equals((Object)property5));
      assertTrue(property6.equals((Object)property4));
      assertTrue(property6.equals((Object)property2));
      assertTrue(property6.equals((Object)property1));
      assertTrue(property6.equals((Object)property3));
      assertTrue(property6.equals((Object)property5));
      assertTrue(property6.equals((Object)property0));
      
      Property property7 = Property.internalTextBag("4suti>1Pg~M!8I");
      assertFalse(property7.isExternal());
      assertTrue(property7.isMultiValuePermitted());
      assertEquals(Property.PropertyType.BAG, property7.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property7.getValueType());
      assertEquals("4suti>1Pg~M!8I", property7.getName());
      assertTrue(property7.isInternal());
      assertNotNull(property7);
      assertNotSame(property7, property6);
      assertNotSame(property7, property0);
      assertNotSame(property7, property3);
      assertNotSame(property7, property5);
      assertNotSame(property7, property4);
      assertNotSame(property7, property2);
      assertNotSame(property7, property1);
      assertTrue(property7.equals((Object)property6));
      assertTrue(property7.equals((Object)property1));
      assertTrue(property7.equals((Object)property5));
      assertTrue(property7.equals((Object)property4));
      assertTrue(property7.equals((Object)property2));
      assertTrue(property7.equals((Object)property0));
      assertTrue(property7.equals((Object)property3));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4suti>1Pg~M!8I";
      stringArray0[1] = "CLOSED_CHOICE";
      stringArray0[2] = "CLOSED_CHOICE";
      stringArray0[3] = "CLOSED_CHOICE";
      stringArray0[4] = "CLOSED_CHOICE";
      stringArray0[5] = "4suti>1Pg~M!8I";
      stringArray0[6] = "4suti>1Pg~M!8I";
      stringArray0[7] = "4suti>1Pg~M!8I";
      Property property8 = Property.externalOpenChoise("CLOSED_CHOICE", stringArray0);
      assertEquals("CLOSED_CHOICE", property8.getName());
      assertTrue(property8.isExternal());
      assertEquals(Property.ValueType.OPEN_CHOICE, property8.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property8.getPropertyType());
      assertFalse(property8.isInternal());
      assertFalse(property8.isMultiValuePermitted());
      assertEquals(8, stringArray0.length);
      assertNotNull(property8);
      assertNotSame(property8, property7);
      assertNotSame(property8, property3);
      assertNotSame(property8, property5);
      assertNotSame(property8, property2);
      assertNotSame(property8, property6);
      assertNotSame(property8, property0);
      assertNotSame(property8, property4);
      assertNotSame(property8, property1);
      assertFalse(property8.equals((Object)property7));
      assertFalse(property8.equals((Object)property3));
      assertFalse(property8.equals((Object)property5));
      assertFalse(property8.equals((Object)property2));
      assertFalse(property8.equals((Object)property6));
      assertFalse(property8.equals((Object)property0));
      assertFalse(property8.equals((Object)property4));
      assertFalse(property8.equals((Object)property1));
      
      Property property9 = Property.internalDate("");
      assertFalse(property9.isMultiValuePermitted());
      assertFalse(property9.isExternal());
      assertTrue(property9.isInternal());
      assertEquals(Property.ValueType.DATE, property9.getValueType());
      assertEquals("", property9.getName());
      assertEquals(Property.PropertyType.SIMPLE, property9.getPropertyType());
      assertNotNull(property9);
      assertNotSame(property9, property4);
      assertNotSame(property9, property5);
      assertNotSame(property9, property8);
      assertNotSame(property9, property6);
      assertNotSame(property9, property0);
      assertNotSame(property9, property1);
      assertNotSame(property9, property7);
      assertNotSame(property9, property3);
      assertNotSame(property9, property2);
      assertFalse(property9.equals((Object)property4));
      assertFalse(property9.equals((Object)property5));
      assertFalse(property9.equals((Object)property8));
      assertFalse(property9.equals((Object)property6));
      assertFalse(property9.equals((Object)property0));
      assertFalse(property9.equals((Object)property1));
      assertFalse(property9.equals((Object)property7));
      assertFalse(property9.equals((Object)property3));
      assertFalse(property9.equals((Object)property2));
      
      Property property10 = Property.externalBoolean("4suti>1Pg~M!8I");
      assertEquals(Property.PropertyType.SIMPLE, property10.getPropertyType());
      assertFalse(property10.isInternal());
      assertFalse(property10.isMultiValuePermitted());
      assertTrue(property10.isExternal());
      assertEquals("4suti>1Pg~M!8I", property10.getName());
      assertEquals(Property.ValueType.BOOLEAN, property10.getValueType());
      assertNotNull(property10);
      assertNotSame(property10, property0);
      assertNotSame(property10, property6);
      assertNotSame(property10, property5);
      assertNotSame(property10, property8);
      assertNotSame(property10, property9);
      assertNotSame(property10, property7);
      assertNotSame(property10, property3);
      assertNotSame(property10, property2);
      assertNotSame(property10, property4);
      assertNotSame(property10, property1);
      assertTrue(property10.equals((Object)property7));
      assertTrue(property10.equals((Object)property6));
      assertTrue(property10.equals((Object)property1));
      assertTrue(property10.equals((Object)property5));
      assertTrue(property10.equals((Object)property4));
      assertTrue(property10.equals((Object)property2));
      assertTrue(property10.equals((Object)property0));
      assertFalse(property10.equals((Object)property8));
      assertFalse(property10.equals((Object)property9));
      assertTrue(property10.equals((Object)property3));
      
      boolean boolean0 = property0.isInternal();
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("4suti>1Pg~M!8I", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(boolean0);
      assertNotSame(property0, property10);
      assertNotSame(property0, property2);
      assertNotSame(property0, property8);
      assertNotSame(property0, property9);
      assertNotSame(property0, property1);
      assertNotSame(property0, property5);
      assertNotSame(property0, property4);
      assertNotSame(property0, property7);
      assertNotSame(property0, property6);
      assertNotSame(property0, property3);
      assertTrue(property0.equals((Object)property4));
      assertTrue(property0.equals((Object)property6));
      assertFalse(property0.equals((Object)property8));
      assertFalse(property0.equals((Object)property9));
      assertTrue(property0.equals((Object)property7));
      assertTrue(property0.equals((Object)property3));
      assertTrue(property0.equals((Object)property2));
      assertTrue(property0.equals((Object)property1));
      assertTrue(property0.equals((Object)property5));
      assertTrue(property0.equals((Object)property10));
      
      String string0 = property10.getName();
      assertEquals(Property.PropertyType.SIMPLE, property10.getPropertyType());
      assertFalse(property10.isInternal());
      assertFalse(property10.isMultiValuePermitted());
      assertTrue(property10.isExternal());
      assertEquals("4suti>1Pg~M!8I", property10.getName());
      assertEquals(Property.ValueType.BOOLEAN, property10.getValueType());
      assertEquals("4suti>1Pg~M!8I", string0);
      assertNotNull(string0);
      assertNotSame(property10, property0);
      assertNotSame(property10, property6);
      assertNotSame(property10, property5);
      assertNotSame(property10, property8);
      assertNotSame(property10, property9);
      assertNotSame(property10, property7);
      assertNotSame(property10, property3);
      assertNotSame(property10, property2);
      assertNotSame(property10, property4);
      assertNotSame(property10, property1);
      assertTrue(property10.equals((Object)property7));
      assertTrue(property10.equals((Object)property6));
      assertTrue(property10.equals((Object)property1));
      assertTrue(property10.equals((Object)property5));
      assertTrue(property10.equals((Object)property4));
      assertTrue(property10.equals((Object)property2));
      assertTrue(property10.equals((Object)property0));
      assertFalse(property10.equals((Object)property8));
      assertFalse(property10.equals((Object)property9));
      assertTrue(property10.equals((Object)property3));
      
      Property property11 = Property.get("aALV,Q=");
      assertNull(property11);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Property property0 = Property.externalBoolean(" value, but received a ");
      Property[] propertyArray0 = new Property[9];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      propertyArray0[2] = property0;
      propertyArray0[3] = property0;
      propertyArray0[4] = property0;
      propertyArray0[5] = property0;
      propertyArray0[6] = property0;
      propertyArray0[7] = property0;
      propertyArray0[8] = property0;
      Property property1 = Property.composite(property0, propertyArray0);
      boolean boolean0 = property1.isMultiValuePermitted();
      assertFalse(boolean0);
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Property property0 = Property.externalTextBag("ap9IkfVLo[CBghsuF");
      boolean boolean0 = property0.isMultiValuePermitted();
      assertTrue(boolean0);
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Property property0 = Property.externalDate("T*aEXT");
      boolean boolean0 = property0.isExternal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Property property0 = Property.internalTextBag(" value, but received a ");
      boolean boolean0 = property0.isExternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Property property0 = Property.externalInteger("b7,atKb]u{BYW");
      assertTrue(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Property property0 = Property.internalClosedChoise("b7,atKb]u{BYW", stringArray0);
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Property property0 = Property.externalBoolean(" value, but received a ");
      boolean boolean0 = property0.isMultiValuePermitted();
      assertTrue(property0.isExternal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Property property0 = Property.get("TEXT");
      // Undeclared exception!
      try { 
        Property.composite(property0, (Property[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // primaryProperty must not be null
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Property property0 = Property.internalTextBag(" value, but received a ");
      property0.compareTo(property0);
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence("");
      property0.getValueType();
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Property property0 = Property.internalReal(".xSG}L{r@fT");
      property0.getSecondaryExtractProperties();
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Property property0 = Property.externalClosedChoise("", stringArray0);
      assertTrue(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Property property0 = Property.externalText("Composite Properties must not include other Composite Properties as either Primary or Secondary");
      Property property1 = property0.getPrimaryProperty();
      assertNotNull(property1);
      assertTrue(property1.isExternal());
  }
}
