/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:27:27 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import org.apache.tika.io.NullInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullInputStream_ESTest extends NullInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1498L);
      nullInputStream0.read();
      nullInputStream0.mark(0);
      nullInputStream0.reset();
      assertEquals(1497, nullInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1717986918);
      byte[] byteArray0 = new byte[1];
      int int0 = nullInputStream0.read(byteArray0, (-1714), 1717986918);
      assertEquals(1717986918L, nullInputStream0.getPosition());
      assertEquals(1717986918, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(4771L);
      int int0 = nullInputStream0.available();
      assertEquals(4771, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-2808L), true, true);
      long long0 = nullInputStream0.skip((-2808L));
      assertEquals((-2808L), long0);
      
      int int0 = nullInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L, true, true);
      long long0 = nullInputStream0.skip(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1439L, false, false);
      byte[] byteArray0 = new byte[3];
      int int0 = nullInputStream0.read(byteArray0, 217, 0);
      assertEquals(0, int0);
      assertEquals(1439, nullInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((byte)94, false, false);
      nullInputStream0.markSupported();
      assertEquals(94L, nullInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, true, true);
      long long0 = nullInputStream0.getSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1L));
      long long0 = nullInputStream0.getSize();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(743L, true, true);
      byte[] byteArray0 = new byte[4];
      nullInputStream0.read(byteArray0);
      long long0 = nullInputStream0.getPosition();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(739L);
      byte[] byteArray0 = new byte[6];
      nullInputStream0.read(byteArray0, (int) (byte)5, (int) (byte) (-1));
      long long0 = nullInputStream0.getPosition();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, true, true);
      try { 
        nullInputStream0.skip(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L);
      // Undeclared exception!
      try { 
        nullInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L);
      byte[] byteArray0 = new byte[0];
      nullInputStream0.read(byteArray0);
      try { 
        nullInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, false, true);
      byte[] byteArray0 = new byte[7];
      try { 
        nullInputStream0.read(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, true, true);
      try { 
        nullInputStream0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2173L);
      byte[] byteArray0 = new byte[9];
      int int0 = nullInputStream0.read(byteArray0, 4647, 4742);
      assertEquals(2173L, nullInputStream0.getPosition());
      assertEquals(2173, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-2808L), true, true);
      nullInputStream0.skip((-2808L));
      byte[] byteArray0 = new byte[0];
      try { 
        nullInputStream0.read(byteArray0, 0, 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(181L);
      nullInputStream0.skip(4783L);
      long long0 = nullInputStream0.skip(2147483647L);
      assertEquals(181L, nullInputStream0.getPosition());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L);
      nullInputStream0.read();
      try { 
        nullInputStream0.skip((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Skip after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((byte) (-122));
      nullInputStream0.mark((byte) (-122));
      try { 
        nullInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Marked position [0] is no longer valid - passed the read limit [-122]
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(3054L, false, false);
      // Undeclared exception!
      try { 
        nullInputStream0.reset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Mark not supported
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      try { 
        nullInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No position has been marked
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1L), false, false);
      nullInputStream0.skip(4087L);
      byte[] byteArray0 = new byte[0];
      int int0 = nullInputStream0.read(byteArray0);
      assertEquals((-1L), nullInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1L));
      byte[] byteArray0 = new byte[0];
      nullInputStream0.read(byteArray0);
      nullInputStream0.read();
      try { 
        nullInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L);
      nullInputStream0.read();
      try { 
        nullInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1L));
      int int0 = nullInputStream0.read();
      assertEquals(1L, nullInputStream0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(3054L, false, false);
      // Undeclared exception!
      try { 
        nullInputStream0.mark(59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Mark not supported
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      assertTrue(nullInputStream0.markSupported());
      
      nullInputStream0.mark(1);
      nullInputStream0.reset();
      assertEquals(2147483647L, nullInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L, true, true);
      nullInputStream0.skip((-2270L));
      int int0 = nullInputStream0.available();
      assertEquals((-2270L), nullInputStream0.getPosition());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-2808L), true, true);
      int int0 = nullInputStream0.available();
      assertEquals(0, int0);
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      int int0 = nullInputStream0.available();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      int int0 = nullInputStream0.processByte();
      assertEquals(0, int0);
      assertTrue(nullInputStream0.markSupported());
      assertEquals(Integer.MAX_VALUE, nullInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      byte[] byteArray0 = new byte[0];
      int int0 = nullInputStream0.read(byteArray0);
      assertEquals(0, int0);
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      boolean boolean0 = nullInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, nullInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      nullInputStream0.close();
      assertEquals(0L, nullInputStream0.getPosition());
      assertEquals(2147483647L, nullInputStream0.getSize());
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      byte[] byteArray0 = new byte[0];
      nullInputStream0.processBytes(byteArray0, 1, 759);
      assertTrue(nullInputStream0.markSupported());
      assertEquals(Integer.MAX_VALUE, nullInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      long long0 = nullInputStream0.getSize();
      assertEquals(2147483647L, long0);
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(743L, true, true);
      nullInputStream0.getPosition();
      assertTrue(nullInputStream0.markSupported());
      assertEquals(743, nullInputStream0.available());
  }
}
