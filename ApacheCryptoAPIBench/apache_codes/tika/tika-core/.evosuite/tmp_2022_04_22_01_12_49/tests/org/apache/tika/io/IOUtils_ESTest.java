/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:16:54 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.channels.Channel;
import java.nio.channels.FileChannel;
import java.util.Enumeration;
import java.util.List;
import org.apache.tika.io.IOUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C<;:]#j5Bt~) Z:L|");
      char[] charArray0 = new char[3];
      stringReader0.read(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      boolean boolean0 = IOUtils.contentEquals((Reader) bufferedReader0, (Reader) bufferedReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)1);
      boolean boolean0 = IOUtils.contentEquals((InputStream) bufferedInputStream0, (InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOUtils.copy((InputStream) dataInputStream0, (Writer) stringWriter0);
      assertEquals("\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      IOUtils.closeQuietly((InputStream) sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aI.nJC");
      String string0 = IOUtils.toString((Reader) stringReader0);
      assertEquals("5aI.nJC", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Y*");
      String string0 = IOUtils.toString(inputStream0, (String) null);
      assertEquals("Y*", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = IOUtils.toString((InputStream) sequenceInputStream0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("Y*W");
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("Y*W", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      String string0 = IOUtils.toString(inputStream0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("", (String) null);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "", (String) null);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 503);
      char[] charArray0 = IOUtils.toCharArray((Reader) bufferedReader0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      char[] charArray0 = IOUtils.toCharArray((InputStream) dataInputStream0, (String) null);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("d[?");
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertArrayEquals(new char[] {'d', '[', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      char[] charArray0 = IOUtils.toCharArray(inputStream0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = IOUtils.toByteArray("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      List<String> list0 = IOUtils.readLines(inputStream0, (String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("7br`-'$^s l;P");
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertTrue(list0.contains("7br`-'$^s l;P"));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("presence:");
      long long0 = IOUtils.copyLarge((Reader) stringReader0, (Writer) stringWriter0);
      assertEquals("presence:", stringWriter0.toString());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "");
      long long0 = IOUtils.copyLarge(inputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.tika.io.IOUtils");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("H #a");
      int int0 = IOUtils.copy((Reader) bufferedReader0, (Writer) mockPrintWriter0);
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.write(charArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[8];
      try { 
        IOUtils.write(charArray0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write(" triggered this exception", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write("#q5)G$|:@", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "H}o}Mw-%> N:", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" `>a");
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) mockPrintStream0, " `>a");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write((CharSequence) "", (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        IOUtils.toString(byteArray0, "w");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#");
      stringReader0.close();
      try { 
        IOUtils.toString((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-42), 819);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("7br`-'$^s l;P");
      try { 
        IOUtils.toString(inputStream0, "7br`-'$^s l;P");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(789);
      try { 
        IOUtils.toString((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      IOUtils.closeQuietly((Reader) stringReader0);
      try { 
        IOUtils.toCharArray((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null, "FHd--#$9&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("jhFni1#5");
      try { 
        IOUtils.toCharArray(inputStream0, "jhFni1#5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toCharArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"?&YD' ");
      try { 
        IOUtils.toByteArray((Reader) stringReader0, "\"?&YD' ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2hEC4y(G6Kg");
      stringReader0.close();
      try { 
        IOUtils.toByteArray((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.toByteArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-21), 4);
      // Undeclared exception!
      try { 
        IOUtils.readLines((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      IOUtils.closeQuietly((Reader) stringReader0);
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((InputStream) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        IOUtils.copyLarge((InputStream) pipedInputStream0, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":.?4/Qci{");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 232);
      bufferedReader0.close();
      try { 
        IOUtils.copy((Reader) bufferedReader0, (Writer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringReader stringReader0 = new StringReader("FHd--#$9&");
      try { 
        IOUtils.copy((Reader) stringReader0, (OutputStream) byteArrayOutputStream0, "FHd--#$9&");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("F}&Z[V6T+EG5Y5");
      try { 
        IOUtils.copy((Reader) stringReader0, (OutputStream) pipedOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("E]*I*+_L#;)");
      try { 
        IOUtils.copy((InputStream) bufferedInputStream0, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.contentEquals((Reader) null, (Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d[?");
      IOUtils.closeQuietly((Reader) stringReader0);
      try { 
        IOUtils.contentEquals((Reader) stringReader0, (Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.contentEquals((InputStream) dataInputStream0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.copy((Reader) stringReader0, (OutputStream) pipedOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      long long0 = IOUtils.copyLarge((Reader) bufferedReader0, (Writer) stringWriter0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kn>$");
      // Undeclared exception!
      try { 
        IOUtils.copyLarge((Reader) stringReader0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 503);
      int int0 = IOUtils.copy((Reader) bufferedReader0, (Writer) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      StringWriter stringWriter0 = new StringWriter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOUtils.copy((InputStream) dataInputStream0, (Writer) stringWriter0, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("7br`-'$^s l;P");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      IOUtils.copyLarge(inputStream0, (OutputStream) bufferedOutputStream0);
      List<String> list0 = IOUtils.readLines(inputStream0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer(4);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      IOUtils.write(stringBuffer0, (OutputStream) mockPrintStream0);
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write("", (OutputStream) pipedOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.write("cb+ZLiv^*c=`XU>L", (OutputStream) dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write("F3, z1XHhv,~u6>>", (Writer) stringWriter0);
      assertEquals("F3, z1XHhv,~u6>>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        IOUtils.write(byteArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        IOUtils.toInputStream("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8j3/o");
      List<String> list0 = IOUtils.readLines((Reader) stringReader0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      List<String> list0 = IOUtils.readLines((Reader) bufferedReader0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1407);
      try { 
        IOUtils.readLines((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        IOUtils.copy((InputStream) null, (Writer) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a$q*kO'wCN>2enZq");
      MockPrintStream mockPrintStream0 = new MockPrintStream("b6f3");
      IOUtils.copy((Reader) stringReader0, (OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" triggered this exception");
      StringReader stringReader1 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 52);
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader1, (Reader) bufferedReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("by");
      StringReader stringReader1 = new StringReader("by");
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) stringReader1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" triggered this exception");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 52);
      boolean boolean0 = IOUtils.contentEquals((Reader) stringReader0, (Reader) bufferedReader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = IOUtils.contentEquals((InputStream) sequenceInputStream0, (InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(")1{vj");
      InputStream inputStream1 = IOUtils.toInputStream(")1{vj");
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream1);
      assertEquals(0, inputStream1.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(")1{vj");
      boolean boolean0 = IOUtils.contentEquals(inputStream0, inputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        IOUtils.contentEquals((InputStream) bufferedInputStream0, (InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F%9}--#$'n");
      // Undeclared exception!
      try { 
        IOUtils.copy((Reader) stringReader0, (OutputStream) null, "F%9}--#$'n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("7br`-'$^s l;P");
      byte[] byteArray0 = IOUtils.toByteArray(inputStream0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer();
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) pipedOutputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.write((StringBuffer) null, (OutputStream) pipedOutputStream0, "");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        IOUtils.write(stringBuffer0, (OutputStream) dataOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((StringBuffer) null, (OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      IOUtils.write(stringBuffer0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      IOUtils.write((StringBuffer) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        IOUtils.write("", (OutputStream) pipedOutputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.write((String) null, (OutputStream) pipedOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("..*");
      IOUtils.write((String) null, (OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      IOUtils.write((String) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer();
      try { 
        IOUtils.write((CharSequence) stringBuffer0, (OutputStream) pipedOutputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = MockFile.createTempFile("kAobf", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      IOUtils.write((CharSequence) null, (OutputStream) dataOutputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.write((CharSequence) "L.,9H", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IOUtils.write((CharSequence) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((CharSequence) stringBuffer0, (Writer) stringWriter0);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write((CharSequence) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      char[] charArray0 = new char[1];
      try { 
        IOUtils.write(charArray0, (OutputStream) pipedOutputStream0, "E6}7V`Othec[rLMzh");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(132);
      IOUtils.write(charArray0, (OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IOUtils.write((char[]) null, (OutputStream) null, "");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTC", true);
      char[] charArray0 = new char[7];
      IOUtils.write(charArray0, (OutputStream) mockFileOutputStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write((char[]) null, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[6];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\\");
      IOUtils.write(charArray0, (Writer) mockPrintWriter0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\\");
      IOUtils.write((char[]) null, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = IOUtils.toByteArray("presence:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      try { 
        IOUtils.write(byteArray0, (Writer) mockPrintWriter0, "PRiCe");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IOUtils.write((byte[]) null, (Writer) null, "");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.write(byteArray0, (Writer) stringWriter0, (String) null);
      assertEquals("\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IOUtils.write((byte[]) null, (Writer) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IOUtils.write(byteArray0, (OutputStream) byteArrayOutputStream0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IOUtils.write((byte[]) null, (OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toInputStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream(")1{vj");
      try { 
        IOUtils.readLines(inputStream0, ")1{vj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = IOUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toString((byte[]) null, "OdK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOUtils.closeQuietly((OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IOUtils.closeQuietly((OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 9);
      IOUtils.closeQuietly((InputStream) pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IOUtils.closeQuietly((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      IOUtils.closeQuietly((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IOUtils.closeQuietly((Writer) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.tika.io.IOUtils");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      IOUtils.closeQuietly((Channel) fileChannel0);
      assertFalse(fileChannel0.isOpen());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IOUtils.closeQuietly((Channel) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Sh=hTd9rP,AQ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      IOUtils.closeQuietly((Reader) bufferedReader0);
      try { 
        IOUtils.readLines((Reader) bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IOUtils.closeQuietly((Reader) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.toByteArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = IOUtils.toByteArray((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      String string0 = IOUtils.toString((Reader) stringReader0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("");
      char[] charArray0 = IOUtils.toCharArray(inputStream0, (String) null);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = IOUtils.toString(byteArray0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        IOUtils.toInputStream((CharSequence) "F3, z1XHhv,~u6>>", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      try { 
        IOUtils.toCharArray((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream("org.apache.tika.io.IOUtils");
      List<String> list0 = IOUtils.readLines(inputStream0, (String) null);
      assertTrue(list0.contains("org.apache.tika.io.IOUtils"));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InputStream inputStream0 = IOUtils.toInputStream((CharSequence) "m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".?");
      try { 
        IOUtils.copy(inputStream0, (Writer) mockPrintWriter0, ".?");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      char[] charArray0 = IOUtils.toCharArray((Reader) stringReader0);
      assertArrayEquals(new char[] {')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        IOUtils.toString((InputStream) dataInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UTC");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0, (String) null);
      assertArrayEquals(new byte[] {(byte)85, (byte)84, (byte)67}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2hEC4y(G6Kg");
      byte[] byteArray0 = IOUtils.toByteArray((Reader) stringReader0);
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-94), 41);
      // Undeclared exception!
      try { 
        IOUtils.toString((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
