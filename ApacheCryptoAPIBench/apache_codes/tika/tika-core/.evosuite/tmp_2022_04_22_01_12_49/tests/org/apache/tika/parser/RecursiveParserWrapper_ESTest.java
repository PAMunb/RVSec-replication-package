/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:26:16 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.time.ZoneId;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.parser.DefaultParser;
import org.apache.tika.parser.DelegatingParser;
import org.apache.tika.parser.DummyInitializableParser;
import org.apache.tika.parser.DummyParser;
import org.apache.tika.parser.EmptyParser;
import org.apache.tika.parser.ErrorParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.ParserDecorator;
import org.apache.tika.parser.RecursiveParserWrapper;
import org.apache.tika.sax.BasicContentHandlerFactory;
import org.apache.tika.sax.ContentHandlerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecursiveParserWrapper_ESTest extends RecursiveParserWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 0);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0);
      recursiveParserWrapper0.setMaxEmbeddedResources(0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
      delegatingParser0.parse((InputStream) null, (ContentHandler) defaultHandler2_0, metadata0, parseContext0);
      assertEquals(3, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 114);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0);
      recursiveParserWrapper0.setMaxEmbeddedResources((-127));
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse(sequenceInputStream0, defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:embedded_resource_path : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      DefaultParser defaultParser0 = new DefaultParser(mediaTypeRegistry0, serviceLoader0);
      Metadata metadata0 = new Metadata();
      Parser parser0 = defaultParser0.getParser(metadata0);
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 30);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(parser0, basicContentHandlerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ParseContext parseContext0 = new ParseContext();
      recursiveParserWrapper0.parse(pipedInputStream0, (ContentHandler) null, metadata0, parseContext0);
      assertEquals(2, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DelegatingParser> linkedList0 = new LinkedList<DelegatingParser>();
      Parser parser0 = ParserDecorator.withFallbacks(linkedList0, (Set<MediaType>) null);
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 107);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(parser0, basicContentHandlerFactory0, false);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes(parseContext0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<MediaType> linkedHashSet0 = new LinkedHashSet<MediaType>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DummyParser dummyParser0 = new DummyParser(linkedHashSet0, hashMap0, "nh::Ua|sYO");
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 63);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyParser0, basicContentHandlerFactory0, false);
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes((ParseContext) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorParser errorParser0 = ErrorParser.INSTANCE;
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 1226);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(errorParser0, basicContentHandlerFactory0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      try { 
        recursiveParserWrapper0.parse(pipedInputStream0, xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error
         //
         verifyException("org.apache.tika.parser.ErrorParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyInitializableParser0, (ContentHandlerFactory) null);
      ParseContext parseContext0 = new ParseContext();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.RecursiveParserWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DummyParser dummyParser0 = new DummyParser((Set<MediaType>) null, map0, "nh::Ua|sYO");
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, (-2518));
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      Metadata metadata0 = new Metadata();
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyParser0, basicContentHandlerFactory0);
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, contentHandler0, metadata0, parseContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 35);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyInitializableParser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = new String[0];
      metadata0.set(recursiveParserWrapper0.EMBEDDED_RESOURCE_LIMIT_REACHED, stringArray0);
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper((Parser) null, (ContentHandlerFactory) null);
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.getSupportedTypes(parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.RecursiveParserWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 35);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyInitializableParser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = new String[2];
      metadata0.set(recursiveParserWrapper0.WRITE_LIMIT_REACHED, stringArray0);
      recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
      assertEquals(4, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 870);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper((Parser) null, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.RecursiveParserWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      ParseContext parseContext0 = new ParseContext();
      EmptyParser emptyParser0 = new EmptyParser();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 3);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(emptyParser0, basicContentHandlerFactory0);
      recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
      // Undeclared exception!
      try { 
        delegatingParser0.parse((InputStream) null, (ContentHandler) defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:EXCEPTION:write_limit_reached : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = delegatingParser0.getSupportedTypes(parseContext0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DummyParser dummyParser0 = new DummyParser(set0, map0, "nh::Ua|sYO");
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 63);
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyParser0, basicContentHandlerFactory0, false);
      Metadata metadata0 = new Metadata();
      recursiveParserWrapper0.parse((InputStream) null, contentHandler0, metadata0, parseContext0);
      delegatingParser0.parse((InputStream) null, contentHandler0, metadata0, parseContext0);
      assertEquals(30, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 0);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0);
      recursiveParserWrapper0.setMaxEmbeddedResources(0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
      assertEquals(3, metadata0.size());
      
      List<Metadata> list0 = recursiveParserWrapper0.getMetadata();
      assertTrue(list0.contains(metadata0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, (-13));
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyInitializableParser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      recursiveParserWrapper0.setMaxEmbeddedResources(45);
      DelegatingParser delegatingParser0 = new DelegatingParser();
      // Undeclared exception!
      try { 
        delegatingParser0.parse((InputStream) null, contentHandler0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:content : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 0);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0);
      List<Metadata> list0 = recursiveParserWrapper0.getMetadata();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = delegatingParser0.getSupportedTypes(parseContext0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DummyParser dummyParser0 = new DummyParser(set0, map0, "nh::Ua|sYO");
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 63);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyParser0, basicContentHandlerFactory0, false);
      recursiveParserWrapper0.reset();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, (-13));
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyInitializableParser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes(parseContext0);
      assertFalse(set0.isEmpty());
  }
}
