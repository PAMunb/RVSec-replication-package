/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:23:26 GMT 2022
 */

package org.apache.tika.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import org.apache.tika.config.InitializableProblemHandler;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.parser.DummyInitializableParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServiceLoader_ESTest extends ServiceLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0);
      boolean boolean0 = serviceLoader0.isDynamic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      InitializableProblemHandler initializableProblemHandler0 = mock(InitializableProblemHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, initializableProblemHandler0, true);
      Class<Object> class0 = Object.class;
      Class<?> class1 = serviceLoader0.getServiceClass(class0, "org.apache.tika.metadata.Property$PropertyType");
      assertTrue(serviceLoader0.isDynamic());
      assertTrue(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      Class<?> class1 = serviceLoader0.getServiceClass(class0, "org.apache.tika.fork.MemoryURLStreamHandler");
      assertTrue(serviceLoader0.isDynamic());
      assertEquals(0, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      serviceLoader0.getLoader();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, (LoadErrorHandler) null);
      serviceLoader0.getLoadErrorHandler();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, (InitializableProblemHandler) null, true);
      serviceLoader0.getInitializableProblemHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      // Undeclared exception!
      try { 
        serviceLoader0.identifyStaticServiceProviders((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        serviceLoader0.getServiceClass(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.getResourceAsStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      serviceLoader0.loadStaticServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.loadStaticServiceProviders((Class<ByteArrayInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getResourceAsStream("META-INF/services/");
      serviceLoader0.findServiceResources("");
      ServiceLoader.removeService(serviceLoader0);
      Class<Object> class0 = Object.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setClassAssertionStatus("org.apache.tika.config.ServiceLoader", true);
      classLoader1.setPackageAssertionStatus("", true);
      ServiceLoader.setContextClassLoader(classLoader1);
      ServiceLoader.addService((Object) null, serviceLoader0, (-1));
      ServiceLoader.setContextClassLoader(classLoader0);
      ServiceLoader.getContextClassLoader();
      Class<Object> class1 = Object.class;
      String string0 = "{$_y";
      try { 
        serviceLoader0.getServiceClass(class1, "{$_y");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, (LoadErrorHandler) null);
      Class<Object> class0 = Object.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      serviceLoader0.loadStaticServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<Object> class0 = Object.class;
      serviceLoader0.identifyStaticServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      serviceLoader0.loadServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      try { 
        serviceLoader0.getServiceClass(class0, "org.apache.tika.config.InitializableProblemHandler");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class org.apache.tika.config.InitializableProblemHandler is an interface
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<Object> class0 = Object.class;
      try { 
        serviceLoader0.getServiceClass(class0, "u[y/3bz_{&*z&UWsffR");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class u[y/3bz_{&*z&UWsffR is not available
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      try { 
        serviceLoader0.getServiceClass(class0, "org.apache.tika.config.ServiceLoader");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class org.apache.tika.config.ServiceLoader does not implement java.io.ByteArrayInputStream
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      serviceLoader0.getResourceAsStream((String) null);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getLoader();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.loadServiceProviders((Class<DummyInitializableParser>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getInitializableProblemHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getLoadErrorHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      // Undeclared exception!
      try { 
        serviceLoader0.findServiceResources("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      boolean boolean0 = serviceLoader0.isDynamic();
      assertTrue(boolean0);
  }
}
