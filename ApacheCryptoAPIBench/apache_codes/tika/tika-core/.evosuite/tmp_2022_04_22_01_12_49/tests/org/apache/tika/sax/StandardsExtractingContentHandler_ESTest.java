/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:41:43 GMT 2022
 */

package org.apache.tika.sax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.sax.StandardsExtractingContentHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardsExtractingContentHandler_ESTest extends StandardsExtractingContentHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-427L));
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      char[] charArray0 = new char[1];
      Metadata metadata0 = new Metadata();
      StandardsExtractingContentHandler standardsExtractingContentHandler1 = new StandardsExtractingContentHandler(standardsExtractingContentHandler0, metadata0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      standardsExtractingContentHandler1.setDocumentLocator(locatorImpl1);
      standardsExtractingContentHandler0.setContentHandler(standardsExtractingContentHandler1);
      charArray0[0] = '\'';
      int int0 = 0;
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters(charArray0, 0, 0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      assertEquals(0.0, standardsExtractingContentHandler0.getThreshold(), 0.01);
      
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters((char[]) null, 231, 231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      Locator locator0 = mock(Locator.class, new ViolatedAssumptionAnswer());
      Locator locator1 = mock(Locator.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.setDocumentLocator(locator1);
      standardsExtractingContentHandler0.setDocumentLocator(locator0);
      standardsExtractingContentHandler0.resolveEntity("OTA", "OTA");
      standardsExtractingContentHandler0.setThreshold((-1.0));
      standardsExtractingContentHandler0.endDocument();
      standardsExtractingContentHandler0.processingInstruction("OTA", "jz");
      standardsExtractingContentHandler0.resolveEntity("?+Xu", ")CpL4M?V/g1]W7xn");
      standardsExtractingContentHandler0.endDocument();
      standardsExtractingContentHandler0.getThreshold();
      char[] charArray0 = new char[4];
      standardsExtractingContentHandler0.resolveEntity("HFSB", "jz");
      charArray0[0] = 's';
      charArray0[1] = '3';
      charArray0[2] = 'r';
      standardsExtractingContentHandler0.notationDecl(",|'40lh9Hz%>vT]77*\"", ",|'40lh9Hz%>vT]77*\"", "GI");
      charArray0[3] = 'p';
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters(charArray0, 336, (-1372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 336 > -1036
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      standardsExtractingContentHandler0.unparsedEntityDecl("", "ld", "Q;ee{ w*bIJT7R\"u", "");
      standardsExtractingContentHandler0.unparsedEntityDecl((String) null, "Cybc|4=r/PAF71.", "", "9`*_<>x#ge");
      standardsExtractingContentHandler0.unparsedEntityDecl("iYLEyz\"Suc9aVki%", "", "9`*_<>x#ge", "Cybc|4=r/PAF71.");
      standardsExtractingContentHandler0.setThreshold(0.0);
      standardsExtractingContentHandler0.setThreshold(1.0);
      standardsExtractingContentHandler0.getThreshold();
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'y';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters(charArray0, (-206), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler((ContentHandler) null, (Metadata) null);
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.endDocument();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.ContentHandlerDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      StandardsExtractingContentHandler standardsExtractingContentHandler1 = new StandardsExtractingContentHandler(standardsExtractingContentHandler0, metadata0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      standardsExtractingContentHandler0.startDocument();
      standardsExtractingContentHandler0.processingInstruction("format", "P.]l'9<;@");
      charArray0[1] = '{';
      SAXParseException sAXParseException0 = mock(SAXParseException.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.setDocumentLocator((Locator) null);
      standardsExtractingContentHandler1.startDocument();
      standardsExtractingContentHandler0.endElement("standard_references", "geo:lat", "rights");
      standardsExtractingContentHandler1.warning(sAXParseException0);
      standardsExtractingContentHandler1.characters(charArray0, 0, 2667);
      assertEquals(0.0, standardsExtractingContentHandler1.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters(charArray0, 11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      standardsExtractingContentHandler0.endDocument();
      assertEquals(0.0, standardsExtractingContentHandler0.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      StandardsExtractingContentHandler standardsExtractingContentHandler1 = new StandardsExtractingContentHandler(standardsExtractingContentHandler0, metadata0);
      standardsExtractingContentHandler1.endDocument();
      standardsExtractingContentHandler1.resolveEntity("", "");
      standardsExtractingContentHandler1.setThreshold(0.0);
      standardsExtractingContentHandler0.getThreshold();
      standardsExtractingContentHandler1.setThreshold(0.0);
      char[] charArray0 = new char[4];
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.startElement("Iyu^l]HU.BLEz~X{\"{", "publisher", "", attributes0);
      charArray0[0] = '6';
      charArray0[1] = ' ';
      charArray0[2] = 'B';
      charArray0[3] = 'G';
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler1.characters(charArray0, (-885), (-885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -885 > -1770
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters(charArray0, (-519), (-519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -519 > -1038
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      double double0 = standardsExtractingContentHandler0.getThreshold();
      assertEquals(0.0, double0, 0.01);
      
      standardsExtractingContentHandler0.endDocument();
      assertEquals(0.0, standardsExtractingContentHandler0.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      SAXParseException sAXParseException0 = mock(SAXParseException.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.skippedEntity("");
      standardsExtractingContentHandler0.warning(sAXParseException0);
      SAXParseException sAXParseException1 = mock(SAXParseException.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.error(sAXParseException1);
      standardsExtractingContentHandler0.setThreshold(0.0);
      standardsExtractingContentHandler0.getThreshold();
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = '|';
      standardsExtractingContentHandler0.skippedEntity((String) null);
      Locator locator0 = mock(Locator.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.setDocumentLocator(locator0);
      charArray0[2] = 'a';
      charArray0[3] = 'z';
      charArray0[4] = '1';
      standardsExtractingContentHandler0.startPrefixMapping((String) null, "");
      charArray0[5] = 'F';
      standardsExtractingContentHandler0.startPrefixMapping(">/g", "");
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.characters(charArray0, 3125, (-151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3125 > 2974
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      assertEquals(0.0, standardsExtractingContentHandler0.getThreshold(), 0.01);
      
      standardsExtractingContentHandler0.setThreshold((-1.0));
      assertEquals((-1.0), standardsExtractingContentHandler0.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      char[] charArray0 = new char[1];
      standardsExtractingContentHandler0.characters(charArray0, 0, 0);
      assertEquals(0.0, standardsExtractingContentHandler0.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      StandardsExtractingContentHandler standardsExtractingContentHandler1 = new StandardsExtractingContentHandler(standardsExtractingContentHandler0, metadata0);
      SAXParseException sAXParseException0 = mock(SAXParseException.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler1.warning(sAXParseException0);
      Metadata metadata1 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      StandardsExtractingContentHandler standardsExtractingContentHandler2 = new StandardsExtractingContentHandler(standardsExtractingContentHandler1, metadata1);
      standardsExtractingContentHandler1.setContentHandler(standardsExtractingContentHandler2);
      standardsExtractingContentHandler1.setThreshold((-723.209297));
      assertEquals((-723.209297), standardsExtractingContentHandler1.getThreshold(), 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'A';
      charArray0[2] = 'G';
      charArray0[3] = '9';
      standardsExtractingContentHandler0.characters(charArray0, 0, 0);
      assertEquals(0.0, standardsExtractingContentHandler0.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler();
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      char char0 = '4';
      SAXParseException sAXParseException0 = mock(SAXParseException.class, new ViolatedAssumptionAnswer());
      standardsExtractingContentHandler0.error(sAXParseException0);
      String string0 = "?%N";
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.fatalError((SAXParseException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.helpers.DefaultHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContentHandler contentHandler0 = null;
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      StandardsExtractingContentHandler standardsExtractingContentHandler0 = new StandardsExtractingContentHandler((ContentHandler) null, metadata0);
      // Undeclared exception!
      try { 
        standardsExtractingContentHandler0.processingInstruction((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.ContentHandlerDecorator", e);
      }
  }
}
