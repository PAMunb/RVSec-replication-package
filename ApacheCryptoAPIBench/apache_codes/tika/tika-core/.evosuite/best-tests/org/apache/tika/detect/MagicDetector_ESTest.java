/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:18:07 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.tika.detect.MagicDetector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MagicDetector_ESTest extends MagicDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      try { 
        magicDetector0.detect(pipedInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[5];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 8);
      Metadata metadata0 = new Metadata();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1570));
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "stringignorecase", (String) null, ":^6KM-tHQK8-a", "0xtype");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ty\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      byte[] byteArray0 = new byte[4];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, (byte)4, (byte)97);
      assertEquals(4, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[8];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, 0, 14);
      assertEquals(8, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MagicDetector.parse((MediaType) null, "3Qdgfz7[0", "8:)*y\u0005", "exi:IsoSpeedRatings", "X!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")*y\u0005\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "stringignorecase", (String) null, "", (String) null);
      assertEquals(0, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 8192);
      int int0 = magicDetector0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MediaType mediaType1 = new MediaType(mediaType0, ":H6+:%!u5", "");
      byte[] byteArray0 = new byte[3];
      MagicDetector magicDetector0 = new MagicDetector(mediaType1, byteArray0);
      Metadata metadata0 = new Metadata();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MediaType mediaType2 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application/octet-stream; :h6+:%!u5=", mediaType2.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[7];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, (byte)47);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        magicDetector0.detect(dataInputStream0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("byte");
      byte[] byteArray0 = new byte[4];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      Metadata metadata0 = new Metadata();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1640394775), (byte)114);
      // Undeclared exception!
      try { 
        magicDetector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, (byte[]) null, (byte[]) null, false, (-329), (-329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[7];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, true, true, 10, 122);
      assertEquals(7, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[8];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, true, true, 0, (byte)0);
      assertEquals(9, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio("0");
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, (byte[]) null, (byte[]) null, true, true, (-1798700107), (-1798700107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, false, true, (byte)0, 3);
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[11];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-85);
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertFalse(mediaType1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-23);
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, (byte)0, (byte)2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application/octet-stream", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      byte[] byteArray0 = new byte[6];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, (byte)0, (byte)2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("text", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[6];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, false, 0, (byte)107);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application/xml", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[5];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application/octet-stream", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("text", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      magicDetector0.detect((InputStream) null, metadata0);
      assertEquals(0, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("octet-stream", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, 43, (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [43,-7]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [-16,-16]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector((MediaType) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matching media type is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", (String) null, "R$+O*P\\B{ydpY", "unicodeBE");
      assertEquals(28, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "regex", (String) null, (String) null, "0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "big32", (String) null, "4", "-v;8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-v;8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "little32", (String) null, "0", "Line-Count");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Line-Count\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "host32", (String) null, ";s DA|E!nrjgtoo~", (String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";s DA|E!nrjgtoo~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "big16", (String) null, "big16", "big16");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"big16\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "little16", (String) null, "little16", "0xbig16");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"little16\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "host16", (String) null, "host16", "host16");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"host16\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "byte", "0", "0xUG?", "byte");
      assertEquals(4, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "string", (String) null, "string", "string");
      assertEquals(6, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, (String) null, (String) null, (String) null, ",|\"OowD;>pxaijR.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "subject", "+4", "0x", "language");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeLE", (String) null, "unicodeLE", ",|\"Oow;,zxaijR.");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      try { 
        magicDetector0.detect(pipedInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 120);
      String string0 = magicDetector0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 120);
      int int0 = magicDetector0.getLength();
      assertEquals(1, int0);
  }
}
