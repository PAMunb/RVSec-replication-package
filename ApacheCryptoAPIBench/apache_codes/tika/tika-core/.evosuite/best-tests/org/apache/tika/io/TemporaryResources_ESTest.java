/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:33:37 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Closeable;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tika.io.TemporaryResources;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemporaryResources_ESTest extends TemporaryResources_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource((Closeable) null);
      Class<MockFileReader> class0 = MockFileReader.class;
      // Undeclared exception!
      try { 
        temporaryResources0.getResource(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TemporaryResources", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource((Closeable) null);
      // Undeclared exception!
      try { 
        temporaryResources0.dispose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TemporaryResources", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource((Closeable) null);
      // Undeclared exception!
      try { 
        temporaryResources0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TemporaryResources", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TemporaryResources temporaryResources0 = new TemporaryResources();
          // Undeclared exception!
          try { 
            temporaryResources0.createTempFile();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      temporaryResources0.addResource(pipedInputStream0);
      temporaryResources0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      Class<MockFileReader> class0 = MockFileReader.class;
      MockFileReader mockFileReader0 = temporaryResources0.getResource(class0);
      assertNull(mockFileReader0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TemporaryResources temporaryResources0 = new TemporaryResources();
          MockFile mockFile0 = new MockFile((File) null, ".");
          temporaryResources0.setTemporaryFileDirectory((File) mockFile0);
          // Undeclared exception!
          try { 
            temporaryResources0.createTempFile();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"./apache-tika-3797772068030394181.tmp\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.Files.newByteChannel(Files.java:361)
             // java.nio.file.Files.createFile(Files.java:632)
             // java.nio.file.TempFileHelper.create(TempFileHelper.java:138)
             // java.nio.file.TempFileHelper.createTempFile(TempFileHelper.java:161)
             // java.nio.file.Files.createTempFile(Files.java:852)
             // org.apache.tika.io.TemporaryResources.createTempFile(TemporaryResources.java:81)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.setTemporaryFileDirectory((File) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.dispose();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      temporaryResources0.addResource(pipedInputStream0);
      Class<MockFileReader> class0 = MockFileReader.class;
      MockFileReader mockFileReader0 = temporaryResources0.getResource(class0);
      assertNull(mockFileReader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TemporaryResources temporaryResources0 = new TemporaryResources();
          // Undeclared exception!
          try { 
            temporaryResources0.createTemporaryFile();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.setTemporaryFileDirectory((Path) null);
  }
}
