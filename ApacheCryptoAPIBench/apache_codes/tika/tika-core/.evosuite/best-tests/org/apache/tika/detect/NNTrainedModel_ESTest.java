/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:33:36 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.detect.NNTrainedModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NNTrainedModel_ESTest extends NNTrainedModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      NNTrainedModel nNTrainedModel0 = new NNTrainedModel(1, 1, 1, floatArray0);
      float float0 = nNTrainedModel0.predict(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[3] = (-1183.0392F);
      NNTrainedModel nNTrainedModel0 = new NNTrainedModel(1, 1, 1, floatArray0);
      float float0 = nNTrainedModel0.predict(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      float[] floatArray0 = new float[7];
      NNTrainedModel nNTrainedModel0 = new NNTrainedModel(1, 1, 1, floatArray0);
      // Undeclared exception!
      try { 
        nNTrainedModel0.predict((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.NNTrainedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[7];
      NNTrainedModel nNTrainedModel0 = new NNTrainedModel(1, 1, 1, floatArray0);
      float[] floatArray1 = new float[0];
      // Undeclared exception!
      try { 
        nNTrainedModel0.predict(floatArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.detect.NNTrainedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NNTrainedModel nNTrainedModel0 = null;
      try {
        nNTrainedModel0 = new NNTrainedModel(1, 1, 1, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.NNTrainedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      float[] floatArray0 = new float[5];
      NNTrainedModel nNTrainedModel0 = null;
      try {
        nNTrainedModel0 = new NNTrainedModel((-1922), (-1922), (-1922), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.NNTrainedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      float[] floatArray0 = new float[10];
      NNTrainedModel nNTrainedModel0 = null;
      try {
        nNTrainedModel0 = new NNTrainedModel(0, 10, 1, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.tika.detect.NNTrainedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      float[] floatArray0 = new float[7];
      NNTrainedModel nNTrainedModel0 = new NNTrainedModel(1, 1, 1, floatArray0);
      double[] doubleArray0 = new double[6];
      double double0 = nNTrainedModel0.predict(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      float[] floatArray0 = new float[7];
      NNTrainedModel nNTrainedModel0 = new NNTrainedModel(1, 1, 2, floatArray0);
      float float0 = nNTrainedModel0.predict(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.5F, float0, 0.01F);
  }
}
