/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:35:08 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.apache.tika.mime.AndClause;
import org.apache.tika.mime.Clause;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.OrClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Magic_ESTest extends Magic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 0, orClause0);
      Magic magic1 = new Magic(mimeType0, 0, orClause0);
      int int0 = magic0.compareTo(magic1);
      assertEquals("[0/or[]]", magic1.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[3];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 2776, andClause0);
      Magic magic1 = new Magic(mimeType0, 2776, andClause0);
      // Undeclared exception!
      try { 
        magic1.compareTo(magic0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.AndClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = new MediaType("application/", "4bdgm{^AfVjwI0I", hashMap0);
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1294, orClause0);
      magic0.hashCode();
      assertEquals("[1294/or[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "", "", "", "application/octet-stream");
      Magic magic0 = new Magic((MimeType) null, 2475, magicMatch0);
      magic0.getType();
      assertEquals("[2475/text/html    application/octet-stream]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "[i9v -,d,?,:Qq.bLq", "[", "/pIIJ", "[i9v -,d,?,:Qq.bLq");
      Magic magic0 = new Magic(mimeType0, (-1), magicMatch0);
      mimeType0.addMagic(magic0);
      magic0.getType();
      assertEquals("[-1/application/zip [i9v -,d,?,:Qq.bLq [ /pIIJ [i9v -,d,?,:Qq.bLq]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 0, orClause0);
      int int0 = magic0.getPriority();
      assertEquals(0, int0);
      assertEquals("[0/or[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "]", (String) null, "[93/[-2123/[93/or[]]]]", "Q2");
      Magic magic0 = new Magic(mimeType0, (-1872), magicMatch0);
      int int0 = magic0.getPriority();
      assertEquals("[-1872/application/zip ] null [93/[-2123/[93/or[]]]] Q2]", magic0.toString());
      assertEquals((-1872), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, (-1885609855), andClause0);
      byte[] byteArray0 = new byte[8];
      magic0.eval(byteArray0);
      assertEquals("[-1885609855/and[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = new MediaType("application/", "4bdgm{^AfVjwI0I", hashMap0);
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1294, orClause0);
      Magic magic1 = new Magic(mimeType0, 0, magic0);
      int int0 = magic0.compareTo(magic1);
      assertEquals((-1294), int0);
      assertEquals("[0/[1294/or[]]]", magic1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 9999, orClause0);
      linkedList0.add((Clause) orClause0);
      // Undeclared exception!
      try { 
        magic0.size();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "[i9v -,d,?,:Qq.bLq", "[", "/pIIJ", "[i9v -,d,?,:Qq.bLq");
      Magic magic0 = new Magic(mimeType0, (-1), magicMatch0);
      // Undeclared exception!
      try { 
        magic0.size();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      OrClause orClause0 = new OrClause((List<Clause>) null);
      Magic magic0 = new Magic(mimeType0, 0, orClause0);
      // Undeclared exception!
      try { 
        magic0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.OrClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "]", (String) null, "[93/[-2123/[93/or[]]]]", "Q2");
      Magic magic0 = new Magic(mimeType0, (-1872), magicMatch0);
      // Undeclared exception!
      try { 
        magic0.size();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("big32");
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 3018, orClause0);
      byte[] byteArray0 = new byte[4];
      linkedList0.add((Clause) orClause0);
      // Undeclared exception!
      try { 
        magic0.eval(byteArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, (String) null, "7 ", "dbt4~@qgQ4<p2", "7 ");
      Magic magic0 = new Magic(mimeType0, 1864, magicMatch0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        magic0.eval(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7 \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      AndClause andClause0 = new AndClause((Clause[]) null);
      Magic magic0 = new Magic(mimeType0, (-2050), andClause0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        magic0.eval(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.AndClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic((MimeType) null, (-1937202758), orClause0);
      // Undeclared exception!
      try { 
        magic0.equals(magic0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Magic", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[3];
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      clauseArray0[0] = (Clause) orClause0;
      clauseArray0[1] = (Clause) orClause0;
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "", "", "", "");
      clauseArray0[2] = (Clause) magicMatch0;
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 2776, andClause0);
      // Undeclared exception!
      try { 
        magic0.compareTo(magic0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      linkedList0.add((Clause) orClause0);
      Magic magic0 = null;
      try {
        magic0 = new Magic(mimeType0, 542, orClause0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MagicMatch magicMatch0 = new MagicMatch((MediaType) null, "`aFk6DNR|wjG3|R}+K%", "u|gQQ", "5Yb{}j VZbmKcl9", "5Yb{}j VZbmKcl9");
      Magic magic0 = null;
      try {
        magic0 = new Magic((MimeType) null, 3304, magicMatch0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MagicMatch", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1752, orClause0);
      String string0 = magic0.toString();
      assertEquals("[1752/or[]]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1752, orClause0);
      magic0.size();
      assertEquals("[1752/or[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 0, orClause0);
      boolean boolean0 = magic0.equals(magic0);
      assertTrue(boolean0);
      assertEquals("[0/or[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1752, orClause0);
      Object object0 = new Object();
      boolean boolean0 = magic0.equals(object0);
      assertFalse(boolean0);
      assertEquals("[1752/or[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1752, orClause0);
      Magic magic1 = new Magic(mimeType0, (-1338), orClause0);
      int int0 = magic1.compareTo(magic0);
      assertEquals("[-1338/or[]]", magic1.toString());
      assertEquals(3090, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "[i9v -,d,?,:Qq.bLq", "[", "/pIIJ", "[i9v -,d,?,:Qq.bLq");
      Magic magic0 = new Magic(mimeType0, (-1), magicMatch0);
      magic0.getType();
      assertEquals("[-1/application/zip [i9v -,d,?,:Qq.bLq [ /pIIJ [i9v -,d,?,:Qq.bLq]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 0, orClause0);
      Magic magic1 = new Magic(mimeType0, 47, magic0);
      boolean boolean0 = magic0.equals(magic1);
      assertFalse(boolean0);
      assertEquals("[47/[0/or[]]]", magic1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1752, orClause0);
      byte[] byteArray0 = new byte[8];
      magic0.eval(byteArray0);
      assertEquals("[1752/or[]]", magic0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "[0/application/zip [i9v -,d,?,:Qq.bLq [ /pIJ [i9v -,d,?,:Qq.bLq]", "[0/application/zip [i9v -,d,?,:Qq.bLq [ /pIJ [i9v -,d,?,:Qq.bLq]", "[0/application/zip [i9v -,d,?,:Qq.bLq [ /pIIJ [i9v -,d,?,:Qq.bLq]", "[0/application/zip [i9v -,d,?,:Qq.bLq [ /pIJ [i9v -,d,?,:Qq.bLq]");
      Magic magic0 = new Magic((MimeType) null, 635, magicMatch0);
      // Undeclared exception!
      try { 
        magic0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Magic", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1752, orClause0);
      int int0 = magic0.getPriority();
      assertEquals("[1752/or[]]", magic0.toString());
      assertEquals(1752, int0);
  }
}
