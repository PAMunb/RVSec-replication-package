/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:35:49 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.tika.io.CountingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CountingInputStream_ESTest extends CountingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-785), 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(211L);
      countingInputStream0.resetCount();
      countingInputStream0.skip((byte)31);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-785), 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(211L);
      countingInputStream0.resetCount();
      countingInputStream0.skip((byte)31);
      int int0 = countingInputStream0.getCount();
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      long long0 = countingInputStream0.skip(1L);
      assertEquals(0L, long0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)1).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(1L);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.resetByteCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-785), 2147483647L, (-1L)).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(211L);
      countingInputStream0.skip((byte)31);
      countingInputStream0.resetCount();
      countingInputStream0.skip(211L);
      assertEquals((-1L), countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.resetByteCount();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1745).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      byte[] byteArray0 = new byte[4];
      int int0 = countingInputStream0.read(byteArray0, 0, (int) (byte)41);
      assertEquals(1745L, countingInputStream0.getByteCount());
      assertEquals(1745, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class));
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      byte[] byteArray0 = new byte[4];
      int int0 = countingInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(372).when(inputStream0).read();
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      int int0 = countingInputStream0.read();
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(372, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-785), 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(211L);
      countingInputStream0.skip((byte)31);
      int int0 = countingInputStream0.getCount();
      assertEquals(2147482862L, countingInputStream0.getByteCount());
      assertEquals(2147482862, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)1, (long)(-1562)).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(1L);
      countingInputStream0.skip(1L);
      int int0 = countingInputStream0.getCount();
      assertEquals((-1561L), countingInputStream0.getByteCount());
      assertEquals((-1561), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)1, (long)(-1562)).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(1L);
      countingInputStream0.skip(1L);
      long long0 = countingInputStream0.getByteCount();
      assertEquals((-1561L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.skip(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.read((byte[]) null, (-1738), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        countingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      long long0 = countingInputStream0.getByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.resetByteCount();
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-785), 2147483647L, 0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(211L);
      countingInputStream0.skip((byte)31);
      countingInputStream0.skip(0);
      assertEquals(2147482862L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(2147482862, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-3105), 2147483647L, 0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.skip(992L);
      countingInputStream0.skip(0);
      countingInputStream0.skip((-3105L));
      int int0 = countingInputStream0.getCount();
      assertEquals(2147480542L, countingInputStream0.getByteCount());
      assertEquals(2147480542, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read();
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.read();
      long long0 = countingInputStream0.getByteCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1562)).when(inputStream0).read();
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      int int0 = countingInputStream0.read();
      assertEquals((-1562), int0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      byte[] byteArray0 = new byte[2];
      int int0 = countingInputStream0.read(byteArray0, (-1), 1);
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-5)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      byte[] byteArray0 = new byte[1];
      int int0 = countingInputStream0.read(byteArray0, 345, (int) (byte)0);
      assertEquals((-5), int0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(inputStream0).read(any(byte[].class));
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      byte[] byteArray0 = new byte[4];
      int int0 = countingInputStream0.read(byteArray0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3105)).when(inputStream0).read(any(byte[].class));
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      byte[] byteArray0 = new byte[6];
      int int0 = countingInputStream0.read(byteArray0);
      assertEquals((-3105), int0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.resetCount();
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      int int0 = countingInputStream0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      String string0 = countingInputStream0.toString();
      assertNotNull(string0);
  }
}
