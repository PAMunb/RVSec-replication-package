/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:30:05 GMT 2022
 */

package org.apache.tika.sax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.tika.io.TikaInputStream;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.sax.SecureContentHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SecureContentHandler_ESTest extends SecureContentHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[7];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      secureContentHandler0.startElement("r6EkN}js|?l0WC]+J", "publisher", "org.apache.tika.sax.SecureContentHandler$SecureSAXException", attributesImpl0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[15];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      secureContentHandler0.setMaximumDepth((byte)1);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      try { 
        secureContentHandler0.startElement("description", (String) null, "KVx", attributes2Impl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Suspected zip bomb: 1 levels of XML element nesting
         //
         verifyException("org.apache.tika.sax.SecureContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) pipedInputStream0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, tikaInputStream0);
      secureContentHandler0.setOutputThreshold((-731L));
      char[] charArray0 = new char[3];
      secureContentHandler0.ignorableWhitespace(charArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) sequenceInputStream0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler0, tikaInputStream0);
      secureContentHandler0.setOutputThreshold((-1180));
      char[] charArray0 = new char[0];
      secureContentHandler0.ignorableWhitespace(charArray0, 100, (-1180));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[7];
      char[] charArray0 = new char[2];
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      secureContentHandler0.characters(charArray0, (-1), 12);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler0, tikaInputStream0);
      secureContentHandler0.setOutputThreshold((byte)0);
      secureContentHandler0.getOutputThreshold();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[3];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      secureContentHandler0.setOutputThreshold((-1933865156L));
      secureContentHandler0.getOutputThreshold();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      byte[] byteArray0 = new byte[6];
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, tikaInputStream0);
      secureContentHandler0.setMaximumPackageEntryDepth((-1313));
      secureContentHandler0.getMaximumPackageEntryDepth();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, (TikaInputStream) null);
      secureContentHandler0.setMaximumDepth(0);
      secureContentHandler0.getMaximumDepth();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) pipedInputStream0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, tikaInputStream0);
      secureContentHandler0.setMaximumDepth((-2147483645));
      secureContentHandler0.getMaximumDepth();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, tikaInputStream0);
      secureContentHandler0.setMaximumCompressionRatio((byte) (-17));
      secureContentHandler0.getMaximumCompressionRatio();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, (TikaInputStream) null);
      // Undeclared exception!
      try { 
        secureContentHandler0.ignorableWhitespace((char[]) null, 1720, 1720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.SecureContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      xMLFilterImpl0.setContentHandler(secureContentHandler0);
      secureContentHandler0.endElement("J6Z#<: 3Ite%*_*", "J6Z#<: 3Ite%*_*", "J6Z#<: 3Ite%*_*");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecureContentHandler secureContentHandler0 = new SecureContentHandler((ContentHandler) null, (TikaInputStream) null);
      // Undeclared exception!
      try { 
        secureContentHandler0.endElement("source", "publisher", "div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      byte[] byteArray0 = new byte[4];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, tikaInputStream0);
      char[] charArray0 = new char[2];
      try { 
        secureContentHandler0.characters(charArray0, 1073741824, 1073741824);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Suspected zip bomb: 4 input bytes produced 1073741824 output characters
         //
         verifyException("org.apache.tika.sax.SecureContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      secureContentHandler0.endElement("J6Z#<: 3Ite%*_*", "J6Z#<: 3Ite%*_*", "J6Z#<: 3Ite%*_*");
      assertEquals(100L, secureContentHandler0.getMaximumCompressionRatio());
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
      assertEquals(100, secureContentHandler0.getMaximumDepth());
      assertEquals(10, secureContentHandler0.getMaximumPackageEntryDepth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, (TikaInputStream) null);
      secureContentHandler0.startElement("div", "div", "div", attributes2Impl0);
      assertEquals(10, secureContentHandler0.getMaximumPackageEntryDepth());
      assertEquals(100L, secureContentHandler0.getMaximumCompressionRatio());
      assertEquals(100, secureContentHandler0.getMaximumDepth());
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      secureContentHandler0.setMaximumDepth((-1879953945));
      try { 
        secureContentHandler0.startElement("+sY&lM?_W@&$;AYSU(", "+sY&lM?_W@&$;AYSU(", "+sY&lM?_W@&$;AYSU(", attributesImpl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Suspected zip bomb: 1 levels of XML element nesting
         //
         verifyException("org.apache.tika.sax.SecureContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SecureContentHandler secureContentHandler0 = new SecureContentHandler((ContentHandler) null, (TikaInputStream) null);
      // Undeclared exception!
      try { 
        secureContentHandler0.startElement("UTK~", "HeA-EP]A#u<=%", "HeA-EP]A#u<=%", (Attributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.ContentHandlerDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler0, tikaInputStream0);
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
      
      secureContentHandler0.setOutputThreshold((byte)0);
      char[] charArray0 = new char[9];
      secureContentHandler0.ignorableWhitespace(charArray0, (byte)0, 501);
      assertEquals(100, secureContentHandler0.getMaximumDepth());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, (TikaInputStream) null);
      secureContentHandler0.throwIfCauseOf((SAXException) null);
      assertEquals(100, secureContentHandler0.getMaximumDepth());
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
      assertEquals(10, secureContentHandler0.getMaximumPackageEntryDepth());
      assertEquals(100L, secureContentHandler0.getMaximumCompressionRatio());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[3];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      try { 
        secureContentHandler0.ignorableWhitespace((char[]) null, 2143904508, 2143904508);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Suspected zip bomb: 3 input bytes produced 2143904508 output characters
         //
         verifyException("org.apache.tika.sax.SecureContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      long long0 = secureContentHandler0.getMaximumCompressionRatio();
      assertEquals(10, secureContentHandler0.getMaximumPackageEntryDepth());
      assertEquals(100, secureContentHandler0.getMaximumDepth());
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
      assertEquals(100L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[18];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      int int0 = secureContentHandler0.getMaximumDepth();
      assertEquals(100L, secureContentHandler0.getMaximumCompressionRatio());
      assertEquals(10, secureContentHandler0.getMaximumPackageEntryDepth());
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      int int0 = secureContentHandler0.getMaximumPackageEntryDepth();
      assertEquals(100L, secureContentHandler0.getMaximumCompressionRatio());
      assertEquals(10, int0);
      assertEquals(100, secureContentHandler0.getMaximumDepth());
      assertEquals(1000000L, secureContentHandler0.getOutputThreshold());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(xMLFilterImpl0, tikaInputStream0);
      long long0 = secureContentHandler0.getOutputThreshold();
      assertEquals(10, secureContentHandler0.getMaximumPackageEntryDepth());
      assertEquals(1000000L, long0);
      assertEquals(100, secureContentHandler0.getMaximumDepth());
      assertEquals(100L, secureContentHandler0.getMaximumCompressionRatio());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SecureContentHandler secureContentHandler0 = new SecureContentHandler(defaultHandler2_0, (TikaInputStream) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        secureContentHandler0.characters(charArray0, 2143101028, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.SecureContentHandler", e);
      }
  }
}
