/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:23:57 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.MimeTypeException;
import org.apache.tika.mime.MimeTypes;
import org.apache.tika.mime.MimeTypesReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.ext.Attributes2Impl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MimeTypesReader_ESTest extends MimeTypesReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((short)4, (short)4).when(document0).getNodeType();
      doReturn((String) null).when(document0).getNodeValue();
      try { 
        mimeTypesReader0.read(document0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse type registry
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader((MimeTypes) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      try { 
        mimeTypesReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'b';
      mimeTypes0.init();
      mimeTypesReader0.characters(charArray0, 50, 50);
      mimeTypesReader0.resolveEntity("text/plain", "application/octet-stream");
      mimeTypesReader0.resolveEntity("Q9ScvL%f", "application/xml");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      mimeTypesReader0.startElement("text/plain", "Q9ScvL%f", "", attributes2Impl0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      MimeTypes.getDefaultMimeTypes();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
      mimeTypesReader0.resolveEntity("text/plain", "application/octet-stream");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader((MimeTypes) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      mimeTypesReader0.startElement("history", "", "", attributes2Impl1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        mimeTypesReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid type configuration
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MockThrowable mockThrowable0 = new MockThrowable("application/xml");
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
      mimeTypesReader0.read((Document) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
      MimeTypeException mimeTypeException0 = new MimeTypeException("");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      try { 
        mimeTypesReader0.handleMimeError("text/plain", mimeTypeException0, "application/xml", attributes2Impl1);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // 
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MimeTypesReader mimeTypesReader0 = new MimeTypesReader(mimeTypes0);
      mimeTypesReader0.endElement("application/xml", "application/octet-stream", "");
      mimeTypesReader0.read((Document) null);
      MimeType mimeType0 = mimeTypesReader0.type;
      MockThrowable mockThrowable0 = new MockThrowable("application/xml");
      MimeTypeException mimeTypeException0 = new MimeTypeException("application/xml", mockThrowable0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      try { 
        mimeTypesReader0.handleGlobError((MimeType) null, "text/plain", mimeTypeException0, "text/plain", attributes2Impl0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // application/xml
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }
}
