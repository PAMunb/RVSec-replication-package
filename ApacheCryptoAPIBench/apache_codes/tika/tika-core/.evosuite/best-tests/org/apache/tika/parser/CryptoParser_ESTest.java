/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:34:48 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.Set;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.parser.CryptoParserTest;
import org.apache.tika.parser.ParseContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CryptoParser_ESTest extends CryptoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("+;2f_RBTL@");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      try { 
        cryptoParserTest_CryptoParserImpl0.parse((InputStream) null, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to decrypt document stream
         //
         verifyException("org.apache.tika.parser.CryptoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("DES");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        cryptoParserTest_CryptoParserImpl0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, (ParseContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.CryptoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("DES");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      try { 
        cryptoParserTest_CryptoParserImpl0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No decryption key provided
         //
         verifyException("org.apache.tika.parser.CryptoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("");
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = cryptoParserTest_CryptoParserImpl0.getSupportedTypes(parseContext0);
      assertEquals(0, set0.size());
  }
}
