/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:32:50 GMT 2022
 */

package org.apache.tika.sax;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.tika.sax.Link;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Link_ESTest extends Link_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Link link0 = new Link("~s", "~s", "~s", "");
      link0.isScript();
      assertEquals("~s", link0.getUri());
      assertEquals("", link0.getText());
      assertEquals("~s", link0.getTitle());
      assertEquals("~s", link0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Link link0 = new Link("link", "link", "link", "link");
      boolean boolean0 = link0.isLink();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Link link0 = new Link("img", "v}4xz#rA", "Q>`", (String) null);
      boolean boolean0 = link0.isImage();
      assertEquals("Q>`", link0.getTitle());
      assertTrue(boolean0);
      assertEquals("v}4xz#rA", link0.getUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Link link0 = new Link("iframe", "", "e", "\"/>", "-PG2&");
      boolean boolean0 = link0.isIframe();
      assertEquals("e", link0.getTitle());
      assertEquals("\"/>", link0.getText());
      assertTrue(boolean0);
      assertEquals("", link0.getUri());
      assertEquals("-PG2&", link0.getRel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Link link0 = new Link("a", (String) null, "Aw;xbZsyRXc^Lln[Go", ">bNp.77aju5|PGUB");
      boolean boolean0 = link0.isAnchor();
      assertEquals(">bNp.77aju5|PGUB", link0.getText());
      assertEquals("Aw;xbZsyRXc^Lln[Go", link0.getTitle());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      String string0 = link0.getUri();
      assertNull(string0);
      assertEquals("c +V", link0.getType());
      assertEquals("hk)D'P`g<", link0.getTitle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Link link0 = new Link("", "", "", "");
      String string0 = link0.getUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Link link0 = new Link((String) null, "a", (String) null, "|u.n|", "");
      String string0 = link0.getType();
      assertEquals("a", link0.getUri());
      assertNull(string0);
      assertEquals("|u.n|", link0.getText());
      assertEquals("", link0.getRel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Link link0 = new Link("", "'v/2BmRD9*-\"(x8=yL", "'v/2BmRD9*-\"(x8=yL", "'v/2BmRD9*-\"(x8=yL");
      String string0 = link0.getType();
      assertEquals("'v/2BmRD9*-\"(x8=yL", link0.getText());
      assertEquals("'v/2BmRD9*-\"(x8=yL", link0.getTitle());
      assertEquals("", string0);
      assertEquals("'v/2BmRD9*-\"(x8=yL", link0.getUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Link link0 = new Link((String) null, "a", (String) null, "|u.n|", "");
      String string0 = link0.getTitle();
      assertNull(string0);
      assertFalse(link0.isAnchor());
      assertEquals("a", link0.getUri());
      assertEquals("|u.n|", link0.getText());
      assertEquals("", link0.getRel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Link link0 = new Link("Px\"dD_", "", "", "g{\"^c7}_sU");
      String string0 = link0.getTitle();
      assertEquals("Px\"dD_", link0.getType());
      assertEquals("g{\"^c7}_sU", link0.getText());
      assertEquals("", string0);
      assertEquals("", link0.getUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Link link0 = new Link("", "'v/2BmRD9*-\"(x8=yL", "'v/2BmRD9*-\"(x8=yL", "'v/2BmRD9*-\"(x8=yL");
      String string0 = link0.getText();
      assertEquals("'v/2BmRD9*-\"(x8=yL", link0.getUri());
      assertEquals("'v/2BmRD9*-\"(x8=yL", string0);
      assertEquals("'v/2BmRD9*-\"(x8=yL", link0.getTitle());
      assertEquals("", link0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Link link0 = new Link("~s", "~s", "~s", "");
      String string0 = link0.getText();
      assertEquals("", string0);
      assertEquals("~s", link0.getType());
      assertEquals("~s", link0.getUri());
      assertEquals("~s", link0.getTitle());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Link link0 = new Link("", "img", "", ">eQvBL?+<", (String) null);
      String string0 = link0.getRel();
      assertEquals("img", link0.getUri());
      assertNull(string0);
      assertEquals(">eQvBL?+<", link0.getText());
      assertEquals("", link0.getType());
      assertEquals("", link0.getTitle());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Link link0 = new Link("~s", "~s", "~s", "");
      link0.getRel();
      assertEquals("~s", link0.getTitle());
      assertEquals("~s", link0.getType());
      assertEquals("", link0.getText());
      assertEquals("~s", link0.getUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      link0.isImage();
      assertEquals("hk)D'P`g<", link0.getTitle());
      assertEquals("c +V", link0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Link link0 = new Link("", "img", "", ">eQvBL?+<", (String) null);
      String string0 = link0.toString();
      assertEquals("< href=\"img\">>eQvBL?+<</>", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Link link0 = new Link("68t ", ":|;a{i", "", "=[$vPLui,@@{", "R#73siUN,Gx10");
      String string0 = link0.toString();
      assertEquals("<68t  href=\":|;a{i\" rel=\"R#73siUN,Gx10\">=[$vPLui,@@{</68t >", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Link link0 = new Link((String) null, "a", (String) null, "|u.n|", "");
      String string0 = link0.toString();
      assertEquals("<null href=\"a\">|u.n|</null>", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Link link0 = new Link("img", (String) null, "img", (String) null, (String) null);
      String string0 = link0.toString();
      assertEquals("<img src=\"null\" title=\"img\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Link link0 = new Link("img", "img", "img", "img");
      String string0 = link0.toString();
      assertEquals("<img src=\"img\" title=\"img\" alt=\"img\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Link link0 = new Link("img", "mg", (String) null, "");
      String string0 = link0.toString();
      assertEquals("<img src=\"mg\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      String string0 = link0.toString();
      assertEquals("<c +V href=\"null\" title=\"hk)D'P`g<\">null</c +V>", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Link link0 = new Link("script", "script", "L2sU2+cN@6{wmL>ub", "script");
      boolean boolean0 = link0.isScript();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      link0.isAnchor();
      assertEquals("hk)D'P`g<", link0.getTitle());
      assertEquals("c +V", link0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      String string0 = link0.getTitle();
      assertEquals("hk)D'P`g<", string0);
      assertEquals("c +V", link0.getType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      link0.isLink();
      assertEquals("hk)D'P`g<", link0.getTitle());
      assertEquals("c +V", link0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      link0.isIframe();
      assertEquals("hk)D'P`g<", link0.getTitle());
      assertEquals("c +V", link0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      String string0 = link0.getText();
      assertEquals("hk)D'P`g<", link0.getTitle());
      assertNull(string0);
      assertEquals("c +V", link0.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Link link0 = new Link("c +V", (String) null, "hk)D'P`g<", (String) null);
      String string0 = link0.getType();
      assertEquals("c +V", string0);
      assertEquals("hk)D'P`g<", link0.getTitle());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Link link0 = new Link("img", "img", "", "img", "img");
      String string0 = link0.toString();
      assertEquals("img", link0.getRel());
      assertEquals("<img src=\"img\" alt=\"img\"/>", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Link link0 = new Link("img", "img", "", "img", "img");
      String string0 = link0.getRel();
      assertEquals("img", link0.getUri());
      assertEquals("img", string0);
      assertEquals("", link0.getTitle());
      assertEquals("img", link0.getText());
      assertEquals("img", link0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Link link0 = new Link("script", "script", "L2sU2+cN@6{wmL>ub", "script");
      link0.getUri();
      assertTrue(link0.isScript());
  }
}
