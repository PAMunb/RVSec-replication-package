/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:38:53 GMT 2022
 */

package org.apache.tika.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.tika.metadata.Property;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Property_ESTest extends Property_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Property property0 = Property.internalBoolean("");
      assertNotNull(property0);
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertEquals("", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      
      boolean boolean0 = property0.isInternal();
      assertTrue(boolean0);
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertEquals("", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Property property0 = Property.externalClosedChoise("ET1Rh6u1J0ZW", stringArray0);
      assertNotNull(property0);
      assertEquals(1, stringArray0.length);
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertEquals("ET1Rh6u1J0ZW", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      
      Property[] propertyArray0 = new Property[5];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      propertyArray0[2] = property0;
      propertyArray0[3] = property0;
      propertyArray0[4] = propertyArray0[3];
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotNull(property1);
      assertEquals(1, stringArray0.length);
      assertEquals(5, propertyArray0.length);
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertEquals("ET1Rh6u1J0ZW", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals("ET1Rh6u1J0ZW", property1.getName());
      assertFalse(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertTrue(property1.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      Property[] propertyArray1 = property1.getSecondaryExtractProperties();
      assertNotNull(propertyArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(5, propertyArray0.length);
      assertEquals(5, propertyArray1.length);
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertEquals("ET1Rh6u1J0ZW", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals("ET1Rh6u1J0ZW", property1.getName());
      assertFalse(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertTrue(property1.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertNotSame(property0, property1);
      assertSame(propertyArray0, propertyArray1);
      assertNotSame(property1, property0);
      assertSame(propertyArray1, propertyArray0);
      assertTrue(property0.equals((Object)property1));
      assertTrue(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Property property0 = Property.internalRational((String) null);
      assertNotNull(property0);
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNull(property0.getName());
      assertTrue(property0.isInternal());
      
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotNull(property1);
      assertEquals(0, propertyArray0.length);
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNull(property0.getName());
      assertTrue(property0.isInternal());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertNull(property1.getName());
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      
      Property[] propertyArray1 = property1.getSecondaryExtractProperties();
      assertNotNull(propertyArray1);
      assertEquals(0, propertyArray0.length);
      assertEquals(0, propertyArray1.length);
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNull(property0.getName());
      assertTrue(property0.isInternal());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertNull(property1.getName());
      assertNotSame(property0, property1);
      assertSame(propertyArray0, propertyArray1);
      assertNotSame(property1, property0);
      assertSame(propertyArray1, propertyArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Property property0 = Property.externalTextBag("");
      assertNotNull(property0);
      assertEquals("", property0.getName());
      assertTrue(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      
      Property property1 = property0.getPrimaryProperty();
      assertNotNull(property1);
      assertEquals("", property0.getName());
      assertTrue(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property1.isExternal());
      assertEquals(Property.ValueType.TEXT, property1.getValueType());
      assertEquals(Property.PropertyType.BAG, property1.getPropertyType());
      assertFalse(property1.isInternal());
      assertTrue(property1.isMultiValuePermitted());
      assertEquals("", property1.getName());
      assertSame(property0, property1);
      assertSame(property1, property0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Property property0 = Property.externalDate("Gd-\")xg% ");
      assertNotNull(property0);
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("Gd-\")xg% ", property0.getName());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      
      Property property1 = property0.getPrimaryProperty();
      assertNotNull(property1);
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("Gd-\")xg% ", property0.getName());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertEquals("Gd-\")xg% ", property1.getName());
      assertTrue(property1.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isInternal());
      assertEquals(Property.ValueType.DATE, property1.getValueType());
      assertSame(property0, property1);
      assertSame(property1, property0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Property property0 = Property.internalInteger("");
      assertNotNull(property0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      
      String string0 = property0.getName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Property property0 = Property.externalInteger("");
      assertNotNull(property0);
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals("", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      
      Set<String> set0 = property0.getChoices();
      assertNull(set0);
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals("", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Property property0 = Property.externalTextBag("A5yz(,vJf@G/w6");
      assertNotNull(property0);
      assertEquals("A5yz(,vJf@G/w6", property0.getName());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isExternal());
      assertTrue(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotNull(property1);
      assertEquals(0, propertyArray0.length);
      assertEquals("A5yz(,vJf@G/w6", property0.getName());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isExternal());
      assertTrue(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertTrue(property1.isExternal());
      assertTrue(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals("A5yz(,vJf@G/w6", property1.getName());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isInternal());
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Property property0 = Property.internalInteger("@_FgQ2;PiLcnmWyl");
      assertNotNull(property0);
      assertEquals("@_FgQ2;PiLcnmWyl", property0.getName());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      
      String[] stringArray0 = new String[4];
      Property property1 = Property.externalOpenChoise("", stringArray0);
      assertNotNull(property1);
      assertEquals(4, stringArray0.length);
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.ValueType.OPEN_CHOICE, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isExternal());
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      
      int int0 = property0.compareTo(property1);
      assertEquals(4, stringArray0.length);
      assertEquals(16, int0);
      assertEquals("@_FgQ2;PiLcnmWyl", property0.getName());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertFalse(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.ValueType.OPEN_CHOICE, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertTrue(property1.isExternal());
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Property property0 = Property.internalURI("}T");
      assertNotNull(property0);
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("}T", property0.getName());
      
      String[] stringArray0 = new String[5];
      Property property1 = Property.internalIntegerSequence(stringArray0[4]);
      assertNotNull(property1);
      assertEquals(5, stringArray0.length);
      assertTrue(property1.isMultiValuePermitted());
      assertFalse(property1.isExternal());
      assertTrue(property1.isInternal());
      assertNull(property1.getName());
      assertEquals(Property.ValueType.INTEGER, property1.getValueType());
      assertEquals(Property.PropertyType.SEQ, property1.getPropertyType());
      assertNotSame(property1, property0);
      
      // Undeclared exception!
      try { 
        property1.equals(property0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Property property0 = Property.externalInteger((String) null);
      assertNotNull(property0);
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      
      // Undeclared exception!
      try { 
        property0.compareTo(property0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Property.getPropertyType("JE'\"c:SZ(/H+");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Property property0 = Property.externalOpenChoise((String) null, stringArray0);
      assertNotNull(property0);
      assertEquals(9, stringArray0.length);
      assertNull(property0.getName());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      
      String string0 = property0.getName();
      assertNull(string0);
      assertEquals(9, stringArray0.length);
      assertNull(property0.getName());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Property property0 = Property.externalOpenChoise((String) null, stringArray0);
      assertNotNull(property0);
      assertEquals(9, stringArray0.length);
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      
      boolean boolean0 = property0.isInternal();
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Property property0 = Property.internalURI("L]o(+H,f=VnR");
      assertNotNull(property0);
      assertFalse(property0.isExternal());
      assertEquals("L]o(+H,f=VnR", property0.getName());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      
      Property.PropertyType property_PropertyType0 = property0.getPropertyType();
      assertEquals(Property.PropertyType.SIMPLE, property_PropertyType0);
      assertFalse(property0.isExternal());
      assertEquals("L]o(+H,f=VnR", property0.getName());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.URI, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Property property0 = Property.internalInteger("K");
      assertNotNull(property0);
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("K", property0.getName());
      
      Property property1 = Property.externalText("I");
      assertNotNull(property1);
      assertFalse(property1.isInternal());
      assertEquals("I", property1.getName());
      assertTrue(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.ValueType.TEXT, property1.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      
      boolean boolean0 = property1.equals(property0);
      assertFalse(boolean0);
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("K", property0.getName());
      assertFalse(property1.isInternal());
      assertEquals("I", property1.getName());
      assertTrue(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.ValueType.TEXT, property1.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Property property0 = Property.internalInteger("K");
      assertNotNull(property0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertEquals("K", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      
      boolean boolean0 = property0.equals(property0);
      assertTrue(boolean0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertEquals("K", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[18];
      Property property0 = Property.internalClosedChoise("5K%;ff}tm", stringArray0);
      assertNotNull(property0);
      assertEquals(18, stringArray0.length);
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertEquals("5K%;ff}tm", property0.getName());
      
      boolean boolean0 = property0.equals(stringArray0[1]);
      assertEquals(18, stringArray0.length);
      assertFalse(boolean0);
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertEquals("5K%;ff}tm", property0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Property property0 = Property.internalOpenChoise("^c|_U[nM", stringArray0);
      assertNotNull(property0);
      assertEquals(2, stringArray0.length);
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertTrue(property0.isInternal());
      assertEquals("^c|_U[nM", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      
      Property[] propertyArray0 = new Property[1];
      propertyArray0[0] = property0;
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotNull(property1);
      assertEquals(2, stringArray0.length);
      assertEquals(1, propertyArray0.length);
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertTrue(property0.isInternal());
      assertEquals("^c|_U[nM", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("^c|_U[nM", property1.getName());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isExternal());
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      
      Property[] propertyArray1 = new Property[4];
      assertFalse(propertyArray1.equals((Object)propertyArray0));
      
      propertyArray1[0] = property0;
      propertyArray1[1] = property1;
      // Undeclared exception!
      try { 
        Property.composite(property0, propertyArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Composite Properties must not include other Composite Properties as either Primary or Secondary
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Property property0 = Property.internalURI("}T");
      assertNotNull(property0);
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("}T", property0.getName());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      
      Property[] propertyArray0 = new Property[3];
      propertyArray0[0] = property0;
      // Undeclared exception!
      try { 
        Property.composite(property0, propertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Property[] propertyArray0 = new Property[9];
      // Undeclared exception!
      try { 
        Property.composite(propertyArray0[2], propertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // primaryProperty must not be null
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Property.getProperties("");
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Property property0 = Property.internalRational((String) null);
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      boolean boolean0 = property1.isMultiValuePermitted();
      assertFalse(boolean0);
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Property property0 = Property.internalRational((String) null);
      boolean boolean0 = property0.isMultiValuePermitted();
      assertFalse(boolean0);
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence(":");
      boolean boolean0 = property0.isMultiValuePermitted();
      assertFalse(property0.isExternal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Property property0 = Property.externalTextBag("");
      boolean boolean0 = property0.isMultiValuePermitted();
      assertTrue(boolean0);
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Property property0 = Property.internalDate(";yqxK}V&B[R6B32");
      boolean boolean0 = property0.isExternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Property property0 = Property.internalText(";yqxK}V&B[R6B32");
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Property property0 = Property.externalReal("");
      assertTrue(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Property property0 = Property.externalTextBag("");
      boolean boolean0 = property0.isExternal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[18];
      Property property0 = Property.internalClosedChoise("5K%;ff}tm", stringArray0);
      Property property1 = Property.composite(property0, (Property[]) null);
      // Undeclared exception!
      try { 
        Property.composite(property1, (Property[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Composite Properties must not include other Composite Properties as either Primary or Secondary
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Property property0 = Property.externalBoolean("*#MwrIB{j");
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence(":");
      property0.getSecondaryExtractProperties();
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Property property0 = Property.internalInteger("k");
      property0.compareTo(property0);
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Property property0 = Property.internalTextBag("Composite Properties must not include other Composite Properties as either Primary or Secondary");
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Property property0 = Property.internalInteger("k");
      property0.getValueType();
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Property property0 = Property.internalInteger(" value, but received a ");
      property0.getName();
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[18];
      Property property0 = Property.internalReal(stringArray0[1]);
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Property property0 = Property.internalDate(";yqxK}V&B[R6B32");
      Property property1 = property0.getPrimaryProperty();
      assertTrue(property1.isInternal());
      assertNotNull(property1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Property property0 = Property.internalBoolean((String) null);
      // Undeclared exception!
      try { 
        property0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Property property0 = Property.externalInteger("");
      property0.hashCode();
      assertFalse(property0.isInternal());
  }
}
