/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:44:33 GMT 2022
 */

package org.apache.tika.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.apache.tika.metadata.Property;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Property_ESTest extends Property_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Property property0 = Property.externalReal("@HL;1d[e");
      assertEquals("@HL;1d[e", property0.getName());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNotNull(property0);
      
      boolean boolean0 = property0.isInternal();
      assertFalse(boolean0);
      assertEquals("@HL;1d[e", property0.getName());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Property property0 = Property.internalRational("BOOLEAN");
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("BOOLEAN", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[2];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertEquals(2, propertyArray0.length);
      assertTrue(property1.equals((Object)property0));
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("BOOLEAN", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals("BOOLEAN", property1.getName());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertNotNull(property1);
      
      Property[] propertyArray1 = property1.getSecondaryExtractProperties();
      assertNotSame(property0, property1);
      assertSame(propertyArray0, propertyArray1);
      assertNotSame(property1, property0);
      assertSame(propertyArray1, propertyArray0);
      assertEquals(2, propertyArray0.length);
      assertEquals(2, propertyArray1.length);
      assertTrue(property0.equals((Object)property1));
      assertTrue(property1.equals((Object)property0));
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals("BOOLEAN", property0.getName());
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals("BOOLEAN", property1.getName());
      assertTrue(property1.isInternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertNotNull(propertyArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Property property0 = Property.internalText("S+EQ");
      assertEquals("S+EQ", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertEquals(0, propertyArray0.length);
      assertTrue(property1.equals((Object)property0));
      assertEquals("S+EQ", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property1.isExternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertEquals("S+EQ", property1.getName());
      assertTrue(property1.isInternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertFalse(property1.isMultiValuePermitted());
      assertNotNull(property1);
      
      Property[] propertyArray1 = property1.getSecondaryExtractProperties();
      assertNotSame(property0, property1);
      assertSame(propertyArray0, propertyArray1);
      assertNotSame(property1, property0);
      assertSame(propertyArray1, propertyArray0);
      assertEquals(0, propertyArray0.length);
      assertEquals(0, propertyArray1.length);
      assertTrue(property0.equals((Object)property1));
      assertTrue(property1.equals((Object)property0));
      assertEquals("S+EQ", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property1.isExternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertEquals("S+EQ", property1.getName());
      assertTrue(property1.isInternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertFalse(property1.isMultiValuePermitted());
      assertNotNull(propertyArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Property property0 = Property.externalDate("");
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertEquals("", property0.getName());
      assertFalse(property0.isInternal());
      assertNotNull(property0);
      
      Property property1 = property0.getPrimaryProperty();
      assertSame(property0, property1);
      assertSame(property1, property0);
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertEquals("", property0.getName());
      assertFalse(property0.isInternal());
      assertTrue(property1.isExternal());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isInternal());
      assertEquals(Property.ValueType.DATE, property1.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertEquals("", property1.getName());
      assertNotNull(property1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Property property0 = Property.internalURI((String) null);
      assertTrue(property0.isInternal());
      assertNull(property0.getName());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertNotNull(property0);
      
      String string0 = property0.getName();
      assertTrue(property0.isInternal());
      assertNull(property0.getName());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Property property0 = Property.externalDate("");
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("", property0.getName());
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNotNull(property0);
      
      String string0 = property0.getName();
      assertEquals("", string0);
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("", property0.getName());
      assertTrue(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Property property0 = Property.get("khDX");
      assertNull(property0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Property property0 = Property.externalText("Expected a property of type ");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("Expected a property of type ", property0.getName());
      assertNotNull(property0);
      
      Property property1 = Property.internalBoolean("Expected a property of type ");
      assertNotSame(property1, property0);
      assertTrue(property1.equals((Object)property0));
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertTrue(property1.isInternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals(Property.ValueType.BOOLEAN, property1.getValueType());
      assertFalse(property1.isExternal());
      assertEquals("Expected a property of type ", property1.getName());
      assertNotNull(property1);
      
      Property property2 = Property.internalText("Expected a property of type ");
      assertNotSame(property2, property0);
      assertNotSame(property2, property1);
      assertTrue(property2.equals((Object)property1));
      assertTrue(property2.equals((Object)property0));
      assertEquals(Property.PropertyType.SIMPLE, property2.getPropertyType());
      assertEquals("Expected a property of type ", property2.getName());
      assertEquals(Property.ValueType.TEXT, property2.getValueType());
      assertFalse(property2.isExternal());
      assertFalse(property2.isMultiValuePermitted());
      assertTrue(property2.isInternal());
      assertNotNull(property2);
      
      Property property3 = Property.internalRational("Expected a property of type ");
      assertNotSame(property3, property1);
      assertNotSame(property3, property2);
      assertNotSame(property3, property0);
      assertTrue(property3.equals((Object)property1));
      assertTrue(property3.equals((Object)property2));
      assertTrue(property3.equals((Object)property0));
      assertEquals(Property.PropertyType.SIMPLE, property3.getPropertyType());
      assertEquals(Property.ValueType.RATIONAL, property3.getValueType());
      assertFalse(property3.isMultiValuePermitted());
      assertTrue(property3.isInternal());
      assertEquals("Expected a property of type ", property3.getName());
      assertFalse(property3.isExternal());
      assertNotNull(property3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected a property of type ";
      stringArray0[1] = "Expected a property of type ";
      Property property4 = Property.externalClosedChoise("Expected a property of type ", stringArray0);
      assertNotSame(property4, property0);
      assertNotSame(property4, property2);
      assertNotSame(property4, property1);
      assertNotSame(property4, property3);
      assertEquals(7, stringArray0.length);
      assertTrue(property4.equals((Object)property1));
      assertTrue(property4.equals((Object)property2));
      assertTrue(property4.equals((Object)property0));
      assertTrue(property4.equals((Object)property3));
      assertEquals(Property.PropertyType.SIMPLE, property4.getPropertyType());
      assertTrue(property4.isExternal());
      assertFalse(property4.isInternal());
      assertFalse(property4.isMultiValuePermitted());
      assertEquals("Expected a property of type ", property4.getName());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property4.getValueType());
      assertNotNull(property4);
      
      Property property5 = Property.internalText(")jf]]B:>:rFzi:{n%JA");
      assertNotSame(property5, property0);
      assertNotSame(property5, property4);
      assertNotSame(property5, property2);
      assertNotSame(property5, property1);
      assertNotSame(property5, property3);
      assertFalse(property5.equals((Object)property0));
      assertFalse(property5.equals((Object)property4));
      assertFalse(property5.equals((Object)property2));
      assertFalse(property5.equals((Object)property1));
      assertFalse(property5.equals((Object)property3));
      assertTrue(property5.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property5.getPropertyType());
      assertFalse(property5.isExternal());
      assertEquals(")jf]]B:>:rFzi:{n%JA", property5.getName());
      assertFalse(property5.isMultiValuePermitted());
      assertEquals(Property.ValueType.TEXT, property5.getValueType());
      assertNotNull(property5);
      
      Property property6 = Property.externalText(")jf]]B:>:rFzi:{n%JA");
      assertNotSame(property6, property3);
      assertNotSame(property6, property2);
      assertNotSame(property6, property1);
      assertNotSame(property6, property5);
      assertNotSame(property6, property4);
      assertNotSame(property6, property0);
      assertFalse(property6.equals((Object)property3));
      assertFalse(property6.equals((Object)property2));
      assertFalse(property6.equals((Object)property1));
      assertTrue(property6.equals((Object)property5));
      assertFalse(property6.equals((Object)property4));
      assertFalse(property6.equals((Object)property0));
      assertFalse(property6.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property6.getPropertyType());
      assertTrue(property6.isExternal());
      assertEquals(")jf]]B:>:rFzi:{n%JA", property6.getName());
      assertEquals(Property.ValueType.TEXT, property6.getValueType());
      assertFalse(property6.isInternal());
      assertNotNull(property6);
      
      Property property7 = Property.internalRational("TEXT");
      assertNotSame(property7, property0);
      assertNotSame(property7, property4);
      assertNotSame(property7, property5);
      assertNotSame(property7, property6);
      assertNotSame(property7, property3);
      assertNotSame(property7, property1);
      assertNotSame(property7, property2);
      assertFalse(property7.equals((Object)property0));
      assertFalse(property7.equals((Object)property4));
      assertFalse(property7.equals((Object)property5));
      assertFalse(property7.equals((Object)property6));
      assertFalse(property7.equals((Object)property3));
      assertFalse(property7.equals((Object)property1));
      assertFalse(property7.equals((Object)property2));
      assertFalse(property7.isMultiValuePermitted());
      assertFalse(property7.isExternal());
      assertEquals("TEXT", property7.getName());
      assertEquals(Property.ValueType.RATIONAL, property7.getValueType());
      assertTrue(property7.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property7.getPropertyType());
      assertNotNull(property7);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Property property8 = Property.get("");
      assertNotSame(property8, property4);
      assertNotSame(property8, property0);
      assertNotSame(property8, property3);
      assertNotSame(property8, property6);
      assertNotSame(property8, property5);
      assertNotSame(property8, property2);
      assertNotSame(property8, property1);
      assertNotSame(property8, property7);
      assertFalse(property8.equals((Object)property4));
      assertFalse(property8.equals((Object)property0));
      assertFalse(property8.equals((Object)property3));
      assertFalse(property8.equals((Object)property6));
      assertFalse(property8.equals((Object)property5));
      assertFalse(property8.equals((Object)property2));
      assertFalse(property8.equals((Object)property1));
      assertFalse(property8.equals((Object)property7));
      assertEquals("", property8.getName());
      assertFalse(property8.isMultiValuePermitted());
      assertEquals(Property.ValueType.REAL, property8.getValueType());
      assertFalse(property8.isInternal());
      assertTrue(property8.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property8.getPropertyType());
      assertNotNull(property8);
      
      boolean boolean0 = property3.equals(property8);
      assertNotSame(property3, property4);
      assertNotSame(property3, property6);
      assertNotSame(property3, property5);
      assertNotSame(property3, property1);
      assertNotSame(property3, property8);
      assertNotSame(property3, property2);
      assertNotSame(property3, property7);
      assertNotSame(property3, property0);
      assertNotSame(property8, property4);
      assertNotSame(property8, property0);
      assertNotSame(property8, property3);
      assertNotSame(property8, property6);
      assertNotSame(property8, property5);
      assertNotSame(property8, property2);
      assertNotSame(property8, property1);
      assertNotSame(property8, property7);
      assertFalse(boolean0);
      assertTrue(property3.equals((Object)property1));
      assertTrue(property3.equals((Object)property2));
      assertFalse(property3.equals((Object)property6));
      assertTrue(property3.equals((Object)property4));
      assertFalse(property3.equals((Object)property5));
      assertTrue(property3.equals((Object)property0));
      assertFalse(property3.equals((Object)property8));
      assertFalse(property3.equals((Object)property7));
      assertFalse(property8.equals((Object)property4));
      assertFalse(property8.equals((Object)property0));
      assertFalse(property8.equals((Object)property3));
      assertFalse(property8.equals((Object)property6));
      assertFalse(property8.equals((Object)property5));
      assertFalse(property8.equals((Object)property2));
      assertFalse(property8.equals((Object)property1));
      assertFalse(property8.equals((Object)property7));
      assertEquals(Property.PropertyType.SIMPLE, property3.getPropertyType());
      assertEquals(Property.ValueType.RATIONAL, property3.getValueType());
      assertFalse(property3.isMultiValuePermitted());
      assertTrue(property3.isInternal());
      assertEquals("Expected a property of type ", property3.getName());
      assertFalse(property3.isExternal());
      assertEquals("", property8.getName());
      assertFalse(property8.isMultiValuePermitted());
      assertEquals(Property.ValueType.REAL, property8.getValueType());
      assertFalse(property8.isInternal());
      assertTrue(property8.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property8.getPropertyType());
      
      Property property9 = Property.externalBoolean("");
      assertNotSame(property9, property0);
      assertNotSame(property9, property4);
      assertNotSame(property9, property5);
      assertNotSame(property9, property6);
      assertNotSame(property9, property3);
      assertNotSame(property9, property1);
      assertNotSame(property9, property2);
      assertNotSame(property9, property8);
      assertNotSame(property9, property7);
      assertFalse(property9.equals((Object)property0));
      assertFalse(property9.equals((Object)property4));
      assertFalse(property9.equals((Object)property5));
      assertFalse(property9.equals((Object)property6));
      assertFalse(property9.equals((Object)property3));
      assertFalse(property9.equals((Object)property1));
      assertFalse(property9.equals((Object)property2));
      assertTrue(property9.equals((Object)property8));
      assertFalse(property9.equals((Object)property7));
      assertFalse(property9.isMultiValuePermitted());
      assertEquals(Property.ValueType.BOOLEAN, property9.getValueType());
      assertEquals("", property9.getName());
      assertFalse(property9.isInternal());
      assertTrue(property9.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property9.getPropertyType());
      assertNotNull(property9);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Property property0 = Property.externalTextBag("p+aQmwIf7");
      assertEquals("p+aQmwIf7", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertFalse(property0.isInternal());
      assertTrue(property0.isExternal());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[0];
      Property property1 = Property.composite(property0, propertyArray0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertEquals(0, propertyArray0.length);
      assertTrue(property1.equals((Object)property0));
      assertEquals("p+aQmwIf7", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertFalse(property0.isInternal());
      assertTrue(property0.isExternal());
      assertFalse(property1.isInternal());
      assertTrue(property1.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertTrue(property1.isMultiValuePermitted());
      assertEquals("p+aQmwIf7", property1.getName());
      assertNotNull(property1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Property property0 = Property.internalReal("org.apache.tika.metadata.Property$ValueType");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("org.apache.tika.metadata.Property$ValueType", property0.getName());
      assertNotNull(property0);
      
      Property property1 = Property.externalReal("");
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      assertTrue(property1.isExternal());
      assertEquals(Property.ValueType.REAL, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertNotNull(property1);
      
      int int0 = property0.compareTo(property1);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertEquals(43, int0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.REAL, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("org.apache.tika.metadata.Property$ValueType", property0.getName());
      assertTrue(property1.isExternal());
      assertEquals(Property.ValueType.REAL, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Property property0 = Property.externalClosedChoise("LOCALE", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertEquals("LOCALE", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertNotNull(property0);
      
      Property property1 = Property.internalText("");
      assertNotSame(property1, property0);
      assertFalse(property1.equals((Object)property0));
      assertTrue(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isExternal());
      assertNotNull(property1);
      
      int int0 = property1.compareTo(property0);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertEquals(2, stringArray0.length);
      assertEquals((-6), int0);
      assertFalse(property0.equals((Object)property1));
      assertFalse(property1.equals((Object)property0));
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertEquals("LOCALE", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertTrue(property1.isInternal());
      assertEquals("", property1.getName());
      assertEquals(Property.PropertyType.SIMPLE, property1.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertFalse(property1.isExternal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Property property0 = Property.internalDate((String) null);
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(property0.getName());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNotNull(property0);
      
      // Undeclared exception!
      try { 
        property0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Property property0 = Property.internalText("org.apache.tika.metadata.PropertyTypeException");
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertEquals("org.apache.tika.metadata.PropertyTypeException", property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[4];
      // Undeclared exception!
      try { 
        Property.composite(property0, propertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Property property0 = Property.internalDate("STRUCTURE");
      assertEquals("STRUCTURE", property0.getName());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertNotNull(property0);
      
      // Undeclared exception!
      try { 
        property0.compareTo((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Property property0 = Property.get(" value, but received a ");
      assertNull(property0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Property property0 = Property.internalText("");
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals("", property0.getName());
      assertNotNull(property0);
      
      boolean boolean0 = property0.isInternal();
      assertTrue(boolean0);
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertEquals("", property0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Property property0 = Property.internalInteger("");
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals("", property0.getName());
      assertNotNull(property0);
      
      Set<String> set0 = property0.getChoices();
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals("", property0.getName());
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Property property0 = Property.internalURI(", but received ");
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(", but received ", property0.getName());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertNotNull(property0);
      
      Property.PropertyType property_PropertyType0 = property0.getPropertyType();
      assertEquals(Property.PropertyType.SIMPLE, property_PropertyType0);
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(", but received ", property0.getName());
      assertEquals(Property.ValueType.URI, property0.getValueType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Property property0 = Property.internalBoolean("m#mYMqkn).");
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertEquals("m#mYMqkn).", property0.getName());
      assertNotNull(property0);
      
      boolean boolean0 = property0.equals(property0);
      assertTrue(boolean0);
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.BOOLEAN, property0.getValueType());
      assertEquals("m#mYMqkn).", property0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Property property0 = Property.internalTextBag("nXT");
      assertTrue(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertEquals("nXT", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertNotNull(property0);
      
      boolean boolean0 = property0.equals("nXT");
      assertFalse(boolean0);
      assertTrue(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertTrue(property0.isInternal());
      assertEquals("nXT", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Property property0 = Property.externalClosedChoise("cn! 1K.fi;,Go,Uw=9", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertEquals("cn! 1K.fi;,Go,Uw=9", property0.getName());
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertNotNull(property0);
      
      Property[] propertyArray0 = new Property[6];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      propertyArray0[2] = property0;
      propertyArray0[3] = property0;
      Property[] propertyArray1 = new Property[1];
      assertFalse(propertyArray1.equals((Object)propertyArray0));
      
      propertyArray1[0] = property0;
      Property property1 = Property.composite(property0, propertyArray1);
      assertNotSame(property0, property1);
      assertNotSame(propertyArray1, propertyArray0);
      assertNotSame(property1, property0);
      assertEquals(6, stringArray0.length);
      assertEquals(1, propertyArray1.length);
      assertFalse(propertyArray1.equals((Object)propertyArray0));
      assertTrue(property1.equals((Object)property0));
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertTrue(property0.isExternal());
      assertEquals("cn! 1K.fi;,Go,Uw=9", property0.getName());
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.ValueType.CLOSED_CHOICE, property0.getValueType());
      assertTrue(property1.isExternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isInternal());
      assertFalse(property1.isMultiValuePermitted());
      assertEquals("cn! 1K.fi;,Go,Uw=9", property1.getName());
      assertNotNull(property1);
      
      propertyArray0[4] = property1;
      // Undeclared exception!
      try { 
        Property.composite(property0, propertyArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Composite Properties must not include other Composite Properties as either Primary or Secondary
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Property property0 = Property.get((String) null);
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertNotNull(property0);
      
      Property property1 = Property.composite(property0, (Property[]) null);
      assertNotSame(property0, property1);
      assertNotSame(property1, property0);
      assertFalse(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      assertNull(property0.getName());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertTrue(property0.isExternal());
      assertFalse(property1.isInternal());
      assertEquals(Property.PropertyType.COMPOSITE, property1.getPropertyType());
      assertNull(property1.getName());
      assertTrue(property1.isExternal());
      assertEquals(Property.ValueType.PROPERTY, property1.getValueType());
      assertFalse(property1.isMultiValuePermitted());
      assertNotNull(property1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Property[] propertyArray0 = new Property[27];
      // Undeclared exception!
      try { 
        Property.composite(propertyArray0[0], propertyArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // primaryProperty must not be null
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Property.getProperties("org.apache.tika.metadata.Property$PropertyType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Property.getPropertyType("B'HWLa");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Property property0 = Property.internalIntegerSequence(" is not supported");
      assertTrue(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals(" is not supported", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
      assertNotNull(property0);
      
      boolean boolean0 = property0.isMultiValuePermitted();
      assertTrue(boolean0);
      assertTrue(property0.isInternal());
      assertTrue(property0.isMultiValuePermitted());
      assertEquals(" is not supported", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SEQ, property0.getPropertyType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Property property0 = Property.internalBoolean("m#mYMqkn).");
      boolean boolean0 = property0.isMultiValuePermitted();
      assertFalse(boolean0);
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Property property0 = Property.externalTextBag("p+aQmwIf7");
      boolean boolean0 = property0.isMultiValuePermitted();
      assertTrue(boolean0);
      assertTrue(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Property property0 = Property.externalDate("m#m_Mqkn).");
      boolean boolean0 = property0.isExternal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Property property0 = Property.internalText("org.apache.tika.metadata.PropertyTypeException");
      boolean boolean0 = property0.isExternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Property property0 = Property.externalOpenChoise((String) null, stringArray0);
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Property property0 = Property.externalInteger("INTEGER");
      assertFalse(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Property property0 = Property.internalText("S+EQ");
      property0.getSecondaryExtractProperties();
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Property property0 = Property.internalClosedChoise("xHIQk>;NP", stringArray0);
      assertFalse(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Property property0 = Property.externalBoolean((String) null);
      // Undeclared exception!
      try { 
        property0.equals(property0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Property property0 = Property.internalOpenChoise("1O", stringArray0);
      Property[] propertyArray0 = new Property[1];
      propertyArray0[0] = property0;
      Property property1 = Property.composite(property0, propertyArray0);
      // Undeclared exception!
      try { 
        Property.composite(property1, propertyArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Composite Properties must not include other Composite Properties as either Primary or Secondary
         //
         verifyException("org.apache.tika.metadata.Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Property property0 = Property.externalClosedChoise("LOCALE", stringArray0);
      property0.compareTo(property0);
      assertTrue(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Property property0 = Property.internalURI(", but received ");
      property0.getValueType();
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Property property0 = Property.internalTextBag("]pCq");
      Property property1 = property0.getPrimaryProperty();
      assertNotNull(property1);
      assertTrue(property1.isInternal());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Property property0 = Property.internalBoolean("m#mYMqkn).");
      Property[] propertyArray0 = new Property[7];
      propertyArray0[0] = property0;
      propertyArray0[1] = property0;
      propertyArray0[2] = property0;
      propertyArray0[3] = property0;
      propertyArray0[4] = property0;
      propertyArray0[5] = property0;
      propertyArray0[6] = property0;
      Property property1 = Property.composite(property0, propertyArray0);
      boolean boolean0 = property1.isMultiValuePermitted();
      assertTrue(property0.isInternal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Property property0 = Property.internalURI(", but received ");
      property0.hashCode();
      assertTrue(property0.isInternal());
  }
}
