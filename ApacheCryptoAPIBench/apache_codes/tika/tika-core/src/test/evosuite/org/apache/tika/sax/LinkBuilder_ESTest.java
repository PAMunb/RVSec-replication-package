/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:48:15 GMT 2022
 */

package org.apache.tika.sax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.sax.Link;
import org.apache.tika.sax.LinkBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkBuilder_ESTest extends LinkBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("script");
      char[] charArray0 = new char[3];
      linkBuilder0.characters(charArray0, 0, 0);
      assertEquals("script", linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("link");
      String string0 = linkBuilder0.getType();
      assertEquals("link", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("");
      String string0 = linkBuilder0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("script");
      Link link0 = linkBuilder0.getLink(true);
      assertFalse(link0.isImage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("link");
      Link link0 = linkBuilder0.getLink(true);
      assertEquals("", link0.getText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("img");
      Link link0 = linkBuilder0.getLink(true);
      assertTrue(link0.isImage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("a");
      Link link0 = linkBuilder0.getLink(false);
      assertEquals("", link0.getText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("script");
      Link link0 = linkBuilder0.getLink();
      assertFalse(link0.isIframe());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("link");
      Link link0 = linkBuilder0.getLink();
      assertFalse(link0.isImage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("img");
      Link link0 = linkBuilder0.getLink();
      assertFalse(link0.isLink());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("iframe");
      Link link0 = linkBuilder0.getLink();
      assertEquals("", link0.getRel());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("a");
      Link link0 = linkBuilder0.getLink();
      assertEquals("", link0.getText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("org.apache.tika.sax.LinkBuilder");
      // Undeclared exception!
      try { 
        linkBuilder0.characters((char[]) null, (-2329), 3676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("iframe");
      Link link0 = linkBuilder0.getLink(false);
      assertFalse(link0.isLink());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("H5i^es/nsNk<x%h");
      linkBuilder0.setRel("H5i^es/nsNk<x%h");
      assertEquals("H5i^es/nsNk<x%h", linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder((String) null);
      linkBuilder0.setRel((String) null);
      assertNull(linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("org.apache.tika.sax.LinkBuilder");
      linkBuilder0.setTitle("org.apache.tika.sax.LinkBuilder");
      assertEquals("org.apache.tika.sax.LinkBuilder", linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder((String) null);
      linkBuilder0.setTitle((String) null);
      assertNull(linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("org.apache.tika.sax.LinkBuilder");
      linkBuilder0.setURI("");
      assertEquals("org.apache.tika.sax.LinkBuilder", linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder((String) null);
      linkBuilder0.setURI((String) null);
      assertNull(linkBuilder0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder("H5i^es/nsNk<x%h");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        linkBuilder0.characters(charArray0, (-36), (-36));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkBuilder linkBuilder0 = new LinkBuilder((String) null);
      String string0 = linkBuilder0.getType();
      assertNull(string0);
  }
}
