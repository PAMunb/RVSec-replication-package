/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:52:16 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.NonDetectingEncodingDetector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.parser.DefaultParser;
import org.apache.tika.parser.DelegatingParser;
import org.apache.tika.parser.DigestingParser;
import org.apache.tika.parser.NetworkParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.ParserPostProcessor;
import org.apache.tika.parser.RecursiveParserWrapper;
import org.apache.tika.parser.digest.InputStreamDigester;
import org.apache.tika.sax.BasicContentHandlerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParserPostProcessor_ESTest extends ParserPostProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 1551);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0, true);
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(recursiveParserWrapper0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        parserPostProcessor0.parse((InputStream) sequenceInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:embedded_resource_path : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(delegatingParser0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      Class<Parser> class0 = Parser.class;
      parseContext0.set(class0, (Parser) delegatingParser0);
      // Undeclared exception!
      try { 
        parserPostProcessor0.parse((InputStream) byteArrayInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(delegatingParser0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 0);
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      try { 
        parserPostProcessor0.parse((InputStream) byteArrayInputStream0, contentHandler0, metadata0, parseContext0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Your document contained more than 0 characters, and so your requested limit has been reached. To receive the full text of the document, increase your limit. (Text up to the limit is however available).
         //
         verifyException("org.apache.tika.sax.WriteOutContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(delegatingParser0);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        parserPostProcessor0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.TeeContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DigestingParser.Encoder digestingParser_Encoder0 = mock(DigestingParser.Encoder.class, new ViolatedAssumptionAnswer());
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(653, "org.apache.tika.exception.EncryptedDocumentException", digestingParser_Encoder0);
      DigestingParser digestingParser0 = new DigestingParser((Parser) null, inputStreamDigester0);
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(digestingParser0);
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 653);
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        parserPostProcessor0.parse((InputStream) null, contentHandler0, metadata0, (ParseContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Stream must not be null
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      LinkedHashSet<MediaType> linkedHashSet0 = new LinkedHashSet<MediaType>(2782, 2782);
      NetworkParser networkParser0 = new NetworkParser(uRI1, linkedHashSet0);
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(networkParser0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        parserPostProcessor0.parse((InputStream) pipedInputStream0, (ContentHandler) defaultHandler0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      NetworkParser networkParser0 = new NetworkParser(uRI0);
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(networkParser0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      try { 
        parserPostProcessor0.parse((InputStream) pipedInputStream0, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(delegatingParser0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      parserPostProcessor0.parse((InputStream) byteArrayInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
      assertNull(parserPostProcessor0.getDecorationName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      DefaultParser defaultParser0 = new DefaultParser((MediaTypeRegistry) null, serviceLoader0, nonDetectingEncodingDetector0);
      ParserPostProcessor parserPostProcessor0 = new ParserPostProcessor(defaultParser0);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, (byte) (-67));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Metadata metadata0 = new Metadata();
      try { 
        parserPostProcessor0.parse((InputStream) sequenceInputStream0, (ContentHandler) null, metadata0, (ParseContext) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected RuntimeException from org.apache.tika.parser.EmptyParser@5
         //
         verifyException("org.apache.tika.parser.CompositeParser", e);
      }
  }
}
