/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:45:08 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.List;
import java.util.Set;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.Property;
import org.apache.tika.metadata.TIFF;
import org.apache.tika.mime.MediaType;
import org.apache.tika.parser.CompositeParser;
import org.apache.tika.parser.CryptoParserTest;
import org.apache.tika.parser.DelegatingParser;
import org.apache.tika.parser.DigestingParser;
import org.apache.tika.parser.DummyParameterizedParser;
import org.apache.tika.parser.ErrorParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.ParserDecorator;
import org.apache.tika.parser.RecursiveParserWrapper;
import org.apache.tika.parser.digest.InputStreamDigester;
import org.apache.tika.sax.BasicContentHandlerFactory;
import org.apache.tika.sax.ContentHandlerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecursiveParserWrapper_ESTest extends RecursiveParserWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.HTML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 3602);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0, false);
      recursiveParserWrapper0.setMaxEmbeddedResources((-931));
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:embedded_resource_path : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      System.setCurrentTimeMillis(0L);
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 51);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, false);
      recursiveParserWrapper0.parse(sequenceInputStream0, (ContentHandler) null, metadata0, parseContext0);
      assertEquals(2, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, false);
      Class<ErrorParser> class0 = ErrorParser.class;
      List<ErrorParser> list0 = serviceLoader0.loadStaticServiceProviders(class0);
      Parser parser0 = ParserDecorator.withFallbacks(list0, (Set<MediaType>) null);
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 1);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(parser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes(parseContext0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("/embedded-1/");
      DigestingParser.Encoder digestingParser_Encoder0 = mock(DigestingParser.Encoder.class, new ViolatedAssumptionAnswer());
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(51, "/embedded-1/", "/embedded-1/", digestingParser_Encoder0);
      DigestingParser digestingParser0 = new DigestingParser(cryptoParserTest_CryptoParserImpl0, inputStreamDigester0);
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 51);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(digestingParser0, basicContentHandlerFactory0, false);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes(parseContext0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 1439);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(dummyParameterizedParser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes(parseContext0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 2837);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, false);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-72), (byte) (-7));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      recursiveParserWrapper0.parse(sequenceInputStream0, (ContentHandler) null, metadata0, parseContext0);
      assertEquals(3, metadata0.size());
      
      List<Metadata> list0 = recursiveParserWrapper0.getMetadata();
      assertTrue(list0.contains(metadata0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorParser errorParser0 = new ErrorParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 0);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(errorParser0, basicContentHandlerFactory0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      try { 
        recursiveParserWrapper0.parse((InputStream) null, defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error
         //
         verifyException("org.apache.tika.parser.ErrorParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, (ContentHandlerFactory) null, false);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.RecursiveParserWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 20);
      Metadata metadata0 = new Metadata();
      DigestingParser.Encoder digestingParser_Encoder0 = mock(DigestingParser.Encoder.class, new ViolatedAssumptionAnswer());
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(1, "J;UU,lFdb", "rK", digestingParser_Encoder0);
      DigestingParser digestingParser0 = new DigestingParser(delegatingParser0, inputStreamDigester0);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(digestingParser0, basicContentHandlerFactory0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse(pipedInputStream0, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.security.NoSuchAlgorithmException: J;UU,lFdb MessageDigest not available
         //
         verifyException("org.apache.tika.parser.digest.InputStreamDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 33);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, true);
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.FOCAL_LENGTH;
      String[] stringArray0 = new String[0];
      metadata0.set(property0, stringArray0);
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 92);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper((Parser) null, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.getSupportedTypes(parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.RecursiveParserWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, (-277));
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, false);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Stream must not be null
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 20);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0, true);
      Metadata metadata0 = new Metadata();
      recursiveParserWrapper0.setMaxEmbeddedResources(20);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20);
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse(pipedInputStream0, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:embedded_resource_path : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 1868);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, false);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      recursiveParserWrapper0.parse(sequenceInputStream0, contentHandler0, metadata0, parseContext0);
      recursiveParserWrapper0.parse(dataInputStream0, contentHandler0, metadata0, parseContext0);
      assertEquals(2, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 20);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(delegatingParser0, basicContentHandlerFactory0, true);
      Metadata metadata0 = new Metadata();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20);
      // Undeclared exception!
      try { 
        recursiveParserWrapper0.parse(pipedInputStream0, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X-TIKA:embedded_resource_path : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 1);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, false);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      recursiveParserWrapper0.parse(pushbackInputStream0, (ContentHandler) null, metadata0, parseContext0);
      assertEquals(4, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.TEXT;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 2837);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0, false);
      List<Metadata> list0 = recursiveParserWrapper0.getMetadata();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.IGNORE;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, (-277));
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(compositeParser0, basicContentHandlerFactory0);
      recursiveParserWrapper0.reset();
  }
}
