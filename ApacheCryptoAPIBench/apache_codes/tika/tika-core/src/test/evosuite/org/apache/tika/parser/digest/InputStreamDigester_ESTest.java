/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:44:54 GMT 2022
 */

package org.apache.tika.parser.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.security.Provider;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.DigestingParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.digest.InputStreamDigester;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InputStreamDigester_ESTest extends InputStreamDigester_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DigestingParser.Encoder digestingParser_Encoder0 = mock(DigestingParser.Encoder.class, new ViolatedAssumptionAnswer());
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(0, "9x+Ezb9H8G~u%l^", (String) null, digestingParser_Encoder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InputStreamDigester inputStreamDigester0 = null;
      try {
        inputStreamDigester0 = new InputStreamDigester((-3343), "_9SJj)(!B>:\"ys", "_9SJj)(!B>:\"ys", (DigestingParser.Encoder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // markLimit must be >= 0
         //
         verifyException("org.apache.tika.parser.digest.InputStreamDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(910, "source", (DigestingParser.Encoder) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        inputStreamDigester0.digest(pipedInputStream0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.security.NoSuchAlgorithmException: source MessageDigest not available
         //
         verifyException("org.apache.tika.parser.digest.InputStreamDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(4354, "type", (DigestingParser.Encoder) null);
      // Undeclared exception!
      try { 
        inputStreamDigester0.digest((InputStream) null, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.digest.InputStreamDigester$SimpleBoundedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(217, "Character Count", "Character Count", (DigestingParser.Encoder) null);
      Provider provider0 = inputStreamDigester0.getProvider();
      assertNull(provider0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InputStreamDigester inputStreamDigester0 = null;
      try {
        inputStreamDigester0 = new InputStreamDigester((-3344), "_9SJj)(!B>:\"ys", (DigestingParser.Encoder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // markLimit must be >= 0
         //
         verifyException("org.apache.tika.parser.digest.InputStreamDigester", e);
      }
  }
}
