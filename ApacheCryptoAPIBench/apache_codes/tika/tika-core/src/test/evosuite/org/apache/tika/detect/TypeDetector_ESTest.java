/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:50:06 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.tika.detect.TypeDetector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.Property;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeDetector_ESTest extends TypeDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeDetector typeDetector0 = new TypeDetector();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        typeDetector0.detect(sequenceInputStream0, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.TypeDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeDetector typeDetector0 = new TypeDetector();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalDate("Content-Type");
      metadata0.add(property0, "modified");
      MediaType mediaType0 = typeDetector0.detect(pipedInputStream0, metadata0);
      assertEquals("application/octet-stream", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeDetector typeDetector0 = new TypeDetector();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = typeDetector0.detect(pipedInputStream0, metadata0);
      assertEquals("application", mediaType0.getType());
  }
}
