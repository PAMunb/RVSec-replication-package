/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:42:48 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.SortedSet;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeTypes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MediaTypeRegistry_ESTest extends MediaTypeRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      assertNotNull(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("octet-stream", mediaType0.getSubtype());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MediaType mediaType1 = new MediaType(mediaType0, hashMap0);
      assertTrue(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      
      mediaTypeRegistry0.addType(mediaType1);
      assertTrue(mediaType0.equals((Object)mediaType1));
      assertTrue(mediaType1.equals((Object)mediaType0));
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
      
      MediaType mediaType2 = mediaTypeRegistry0.normalize(mediaType0);
      assertTrue(mediaType0.equals((Object)mediaType1));
      assertTrue(mediaType2.equals((Object)mediaType0));
      assertNotNull(mediaType2);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application", mediaType2.getType());
      assertEquals("application/octet-stream", mediaType2.toString());
      assertFalse(mediaType2.hasParameters());
      assertEquals("octet-stream", mediaType2.getSubtype());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType0, mediaType2);
      assertNotSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      assertNotNull(mediaType0);
      assertEquals("application", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      
      MediaType mediaType1 = new MediaType(mediaType0, "1", "1");
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("application", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application/zip; 1=1", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertTrue(mediaType1.hasParameters());
      
      MediaType mediaType2 = mediaTypeRegistry0.normalize(mediaType1);
      assertFalse(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertFalse(mediaType2.equals((Object)mediaType0));
      assertNotNull(mediaType2);
      assertEquals("application", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application/zip; 1=1", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertTrue(mediaType1.hasParameters());
      assertEquals("application/zip; 1=1", mediaType2.toString());
      assertEquals("zip", mediaType2.getSubtype());
      assertEquals("application", mediaType2.getType());
      assertTrue(mediaType2.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertNotSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(mediaType2, mediaType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.application((String) null);
      assertNotNull(mediaType0);
      assertEquals("application", mediaType0.getType());
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("application/null", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("application", mediaType0.getType());
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("application/null", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertFalse(mediaType1.hasParameters());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
      
      boolean boolean0 = mediaTypeRegistry0.isSpecializationOf(mediaType0, mediaType1);
      assertFalse(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertEquals("application", mediaType0.getType());
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("application/null", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertFalse(mediaType1.hasParameters());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertTrue(boolean0);
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      mediaTypeRegistry0.addAlias((MediaType) null, (MediaType) null);
      // Undeclared exception!
      try { 
        mediaTypeRegistry0.getTypes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      mediaTypeRegistry0.addSuperType((MediaType) null, (MediaType) null);
      MediaType mediaType0 = MediaType.text("hZ-u#L0-2;][h");
      assertNotNull(mediaType0);
      assertEquals("text/hz-u#l0-2; ][h=", mediaType0.toString());
      assertTrue(mediaType0.hasParameters());
      assertEquals("hz-u#l0-2", mediaType0.getSubtype());
      assertEquals("text", mediaType0.getType());
      
      // Undeclared exception!
      try { 
        mediaTypeRegistry0.getChildTypes(mediaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      mediaTypeRegistry0.addType((MediaType) null);
      // Undeclared exception!
      try { 
        mediaTypeRegistry0.getAliases((MediaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      assertNotNull(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertNull(mediaType1);
      assertFalse(mediaType0.hasParameters());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      boolean boolean0 = mediaTypeRegistry0.isInstanceOf((MediaType) null, (MediaType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      assertNotNull(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      
      MediaType mediaType1 = MediaType.EMPTY;
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("application", mediaType1.getType());
      assertEquals("application/x-empty", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertEquals("x-empty", mediaType1.getSubtype());
      assertNotSame(mediaType1, mediaType0);
      
      boolean boolean0 = mediaTypeRegistry0.isInstanceOf(mediaType0, mediaType1);
      assertFalse(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertFalse(mediaType0.hasParameters());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/x-empty", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertEquals("x-empty", mediaType1.getSubtype());
      assertFalse(boolean0);
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.application((String) null);
      assertNotNull(mediaType0);
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("application/null", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      
      boolean boolean0 = mediaTypeRegistry0.isInstanceOf(mediaType0, mediaType0);
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("application/null", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      MimeTypes.getDefaultMimeTypes((ClassLoader) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = mediaTypeRegistry0.normalize((MediaType) null);
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = new MediaType("empty", "empty");
      assertNotNull(mediaType0);
      assertEquals("empty", mediaType0.getType());
      assertEquals("empty/empty", mediaType0.toString());
      assertEquals("empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("empty", mediaType0.getType());
      assertEquals("empty/empty", mediaType0.toString());
      assertEquals("empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertEquals("x-empty", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/x-empty", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.TEXT_HTML;
      assertNotNull(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("text", mediaType0.getType());
      assertEquals("html", mediaType0.getSubtype());
      assertEquals("text/html", mediaType0.toString());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertFalse(mediaType0.hasParameters());
      assertEquals("text", mediaType0.getType());
      assertEquals("html", mediaType0.getSubtype());
      assertEquals("text/html", mediaType0.toString());
      assertEquals("plain", mediaType1.getSubtype());
      assertEquals("text", mediaType1.getType());
      assertEquals("text/plain", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      assertNotNull(mediaType0);
      assertEquals("text/plain", mediaType0.toString());
      assertEquals("plain", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertEquals("text", mediaType0.getType());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("text/plain", mediaType0.toString());
      assertEquals("plain", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertEquals("text", mediaType0.getType());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.text("+zip");
      assertNotNull(mediaType0);
      assertEquals("text/+zip", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("text", mediaType0.getType());
      assertEquals("+zip", mediaType0.getSubtype());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("text/+zip", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("text", mediaType0.getType());
      assertEquals("+zip", mediaType0.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/zip", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.video("null+xml");
      assertNotNull(mediaType0);
      assertEquals("video/null+xml", mediaType0.toString());
      assertEquals("null+xml", mediaType0.getSubtype());
      assertEquals("video", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("video/null+xml", mediaType0.toString());
      assertEquals("null+xml", mediaType0.getSubtype());
      assertEquals("video", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertFalse(mediaType1.hasParameters());
      assertEquals("xml", mediaType1.getSubtype());
      assertEquals("application/xml", mediaType1.toString());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.video("+zip;zip");
      assertNotNull(mediaType0);
      assertTrue(mediaType0.hasParameters());
      assertEquals("+zip", mediaType0.getSubtype());
      assertEquals("video/+zip; zip=", mediaType0.toString());
      assertEquals("video", mediaType0.getType());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertTrue(mediaType0.hasParameters());
      assertEquals("+zip", mediaType0.getSubtype());
      assertEquals("video/+zip; zip=", mediaType0.toString());
      assertEquals("video", mediaType0.getType());
      assertEquals("+zip", mediaType1.getSubtype());
      assertEquals("video/+zip", mediaType1.toString());
      assertEquals("video", mediaType1.getType());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.EMPTY;
      assertNotNull(mediaType0);
      assertEquals("application/x-empty", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      
      mediaTypeRegistry0.addSuperType(mediaType0, mediaType0);
      assertEquals("application/x-empty", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      
      MediaType mediaType1 = mediaTypeRegistry0.getSupertype(mediaType0);
      assertNotNull(mediaType1);
      assertEquals("application/x-empty", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertEquals("x-empty", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application/x-empty", mediaType1.toString());
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = mediaTypeRegistry0.getSupertype((MediaType) null);
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.EMPTY;
      assertNotNull(mediaType0);
      assertEquals("application/x-empty", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      
      boolean boolean0 = mediaTypeRegistry0.isSpecializationOf(mediaType0, mediaType0);
      assertEquals("application/x-empty", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      assertNotNull(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application/octet-stream", mediaType0.toString());
      
      boolean boolean0 = mediaTypeRegistry0.isInstanceOf("Message:From-Email", mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application", mediaType0.getType());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.EMPTY;
      assertNotNull(mediaType0);
      assertEquals("application", mediaType0.getType());
      assertEquals("application/x-empty", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("x-empty", mediaType0.getSubtype());
      
      MediaType mediaType1 = MediaType.OCTET_STREAM;
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType1, mediaType0);
      
      mediaTypeRegistry0.addSuperType(mediaType1, mediaType0);
      assertFalse(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertEquals("application", mediaType0.getType());
      assertEquals("application/x-empty", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
      
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getChildTypes(mediaType1);
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(sortedSet0);
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertFalse(mediaType1.hasParameters());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(sortedSet0.contains(mediaType1));
      assertNotSame(mediaType1, mediaType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = new MediaType("ream", "ream");
      assertNotNull(mediaType0);
      assertEquals("ream", mediaType0.getSubtype());
      assertEquals("ream/ream", mediaType0.toString());
      assertEquals("ream", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      
      mediaTypeRegistry0.addSuperType(mediaType0, mediaType0);
      assertEquals("ream", mediaType0.getSubtype());
      assertEquals("ream/ream", mediaType0.toString());
      assertEquals("ream", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getChildTypes(mediaType0);
      assertNotNull(sortedSet0);
      assertEquals("ream", mediaType0.getSubtype());
      assertEquals("ream/ream", mediaType0.toString());
      assertEquals("ream", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals(1, sortedSet0.size());
      assertFalse(sortedSet0.isEmpty());
      assertTrue(sortedSet0.contains(mediaType0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.EMPTY;
      assertNotNull(mediaType0);
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty", mediaType0.toString());
      
      MediaType mediaType1 = MediaType.OCTET_STREAM;
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertNotNull(mediaType1);
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType1, mediaType0);
      
      mediaTypeRegistry0.addAlias(mediaType0, mediaType1);
      assertFalse(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType1.equals((Object)mediaType0));
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty", mediaType0.toString());
      assertEquals("application", mediaType1.getType());
      assertEquals("application/octet-stream", mediaType1.toString());
      assertEquals("octet-stream", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType0);
      
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getAliases(mediaType0);
      assertFalse(mediaType0.equals((Object)mediaType1));
      assertNotNull(sortedSet0);
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty", mediaType0.toString());
      assertFalse(sortedSet0.isEmpty());
      assertEquals(1, sortedSet0.size());
      assertFalse(sortedSet0.contains(mediaType0));
      assertTrue(sortedSet0.contains(mediaType1));
      assertNotSame(mediaType0, mediaType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      assertNotNull(mediaType0);
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application", mediaType0.getType());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      
      mediaTypeRegistry0.addType(mediaType0);
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals("application", mediaType0.getType());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getAliases((MediaType) null);
      assertNotNull(sortedSet0);
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(sortedSet0.contains(mediaType0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
      
      MediaType mediaType0 = MediaType.EMPTY;
      assertNotNull(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      
      mediaTypeRegistry0.addAlias(mediaType0, mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getAliases(mediaType0);
      assertNotNull(sortedSet0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("x-empty", mediaType0.getSubtype());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(sortedSet0.contains(mediaType0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      MediaTypeRegistry.getDefaultRegistry();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = new MediaType("applicatson/zip", "applicatson/zip");
      MediaType mediaType1 = MediaType.OCTET_STREAM;
      boolean boolean0 = mediaTypeRegistry0.isInstanceOf(mediaType0, mediaType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      boolean boolean0 = mediaTypeRegistry0.isInstanceOf("application/zip", mediaType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getTypes();
      assertEquals(0, sortedSet0.size());
  }
}
