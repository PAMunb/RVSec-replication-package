/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:45:15 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.UnknownServiceException;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.parser.NetworkParser;
import org.apache.tika.parser.ParseContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NetworkParser_ESTest extends NetworkParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      NetworkParser networkParser0 = new NetworkParser(uRI0, (Set<MediaType>) null);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = networkParser0.getSupportedTypes(parseContext0);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null);
      LinkedList<MediaType> linkedList0 = new LinkedList<MediaType>();
      linkedList0.addLast((MediaType) null);
      LinkedHashSet<MediaType> linkedHashSet0 = new LinkedHashSet<MediaType>(linkedList0);
      NetworkParser networkParser0 = new NetworkParser(uRI0, linkedHashSet0);
      Set<MediaType> set0 = networkParser0.getSupportedTypes((ParseContext) null);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URI uRI0 = MockURI.URI("TEbT", "TEbT", "RJz");
      String[] stringArray0 = new String[6];
      Set<MediaType> set0 = MediaType.set(stringArray0);
      NetworkParser networkParser0 = new NetworkParser(uRI0, set0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ParseContext parseContext0 = new ParseContext();
      try { 
        networkParser0.parse((InputStream) pipedInputStream0, (ContentHandler) null, (Metadata) null, parseContext0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: tebt
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      NetworkParser networkParser0 = new NetworkParser(uRI0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      ParseContext parseContext0 = new ParseContext();
      Metadata metadata0 = new Metadata();
      try { 
        networkParser0.parse((InputStream) bufferedInputStream0, (ContentHandler) defaultHandler0, metadata0, parseContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      NetworkParser networkParser0 = new NetworkParser(uRI0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Presentation-Format");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      try { 
        networkParser0.parse((InputStream) pushbackInputStream0, (ContentHandler) defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      URI uRI0 = MockURI.URI("telnet", "telnet", "telnet");
      NetworkParser networkParser0 = new NetworkParser(uRI0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        networkParser0.parse((InputStream) byteArrayInputStream0, (ContentHandler) xMLFilterImpl0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      NetworkParser networkParser0 = new NetworkParser(uRI0);
      ParseContext parseContext0 = new ParseContext();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3832);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        networkParser0.parse((InputStream) pipedInputStream0, (ContentHandler) defaultHandler2_0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.NetworkParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null);
      LinkedList<MediaType> linkedList0 = new LinkedList<MediaType>();
      LinkedHashSet<MediaType> linkedHashSet0 = new LinkedHashSet<MediaType>(linkedList0);
      NetworkParser networkParser0 = new NetworkParser(uRI0, linkedHashSet0);
      Set<MediaType> set0 = networkParser0.getSupportedTypes((ParseContext) null);
      assertTrue(set0.isEmpty());
  }
}
