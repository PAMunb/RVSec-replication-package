/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:54:47 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.tika.io.CountingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CountingInputStream_ESTest extends CountingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        countingInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        countingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3964)).when(inputStream0).available();
      doReturn(false).when(inputStream0).markSupported();
      doReturn((-3964)).when(inputStream0).read();
      doReturn(4946L, 2147483647L, 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      int int2 = countingInputStream0.getCount();
      assertEquals(0, int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = countingInputStream0.available();
      assertEquals((-3964), int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = countingInputStream0.read();
      assertEquals((-3964), int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      
      CountingInputStream countingInputStream1 = new CountingInputStream(countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(countingInputStream1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long1 = countingInputStream1.getByteCount();
      assertEquals(0L, long1);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(long1 == long0);
      
      int int5 = countingInputStream1.getCount();
      assertEquals(0, int5);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      
      long long2 = countingInputStream1.skip((-3964));
      assertEquals(2147483647L, long2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertEquals(2147483647L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = countingInputStream1.skip(2147483647L);
      assertEquals(2147483647L, long3);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(4294967294L, countingInputStream0.getByteCount());
      assertEquals(4294967294L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      
      // Undeclared exception!
      try { 
        countingInputStream1.resetCount();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The byte count 4294967294 is too large to be converted to an int
         //
         verifyException("org.apache.tika.io.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3949)).when(inputStream0).available();
      doReturn(false).when(inputStream0).markSupported();
      doReturn((-3949)).when(inputStream0).read();
      doReturn(4946L, 2147483647L, 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      int int2 = countingInputStream0.getCount();
      assertEquals(0, int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      long long1 = countingInputStream0.skip(4946);
      assertEquals(2147483647L, long1);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      int int3 = countingInputStream0.available();
      assertEquals((-3949), int3);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = countingInputStream0.read();
      assertEquals((-3949), int4);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      
      long long2 = countingInputStream0.getByteCount();
      assertEquals(2147483647L, long2);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      byte[] byteArray0 = new byte[1];
      long long3 = countingInputStream0.skip(4914L);
      assertEquals(2147483647L, long3);
      assertEquals(4294967294L, countingInputStream0.getByteCount());
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      
      // Undeclared exception!
      try { 
        countingInputStream0.getCount();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The byte count 4294967294 is too large to be converted to an int
         //
         verifyException("org.apache.tika.io.CountingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3964), (-3964)).when(inputStream0).available();
      doReturn(true, true).when(inputStream0).markSupported();
      doReturn((-297)).when(inputStream0).read();
      doReturn((-3964)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(4946L, 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      countingInputStream0.mark((byte)0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int2 = countingInputStream0.available();
      assertEquals((-3964), int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      countingInputStream0.mark((byte)0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int3 = countingInputStream0.getCount();
      assertEquals(0, int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      long long1 = countingInputStream0.resetByteCount();
      assertEquals(0L, long1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      int int4 = countingInputStream0.available();
      assertEquals((-3964), int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      int int5 = countingInputStream0.read();
      assertEquals((-297), int5);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      
      long long2 = countingInputStream0.getByteCount();
      assertEquals(0L, long2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int6 = countingInputStream0.read(byteArray0, (-1), (int) (byte)0);
      assertEquals((-3964), int6);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertEquals(1, byteArray0.length);
      
      long long3 = countingInputStream0.resetByteCount();
      assertEquals(0L, long3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      
      long long4 = countingInputStream0.skip((-3964));
      assertEquals(2147483647L, long4);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      
      boolean boolean1 = countingInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertTrue(boolean1 == boolean0);
      
      String string1 = countingInputStream0.toString();
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int7 = countingInputStream0.getCount();
      assertEquals(Integer.MAX_VALUE, int7);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3964), (-3964)).when(inputStream0).available();
      doReturn(true, true).when(inputStream0).markSupported();
      doReturn((-297)).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class));
      doReturn((-3964)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(4946L, (long)(-1768)).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      countingInputStream0.mark((byte)0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int2 = countingInputStream0.available();
      assertEquals((-3964), int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      countingInputStream0.mark((byte)0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int3 = countingInputStream0.getCount();
      assertEquals(0, int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      long long1 = countingInputStream0.resetByteCount();
      assertEquals(0L, long1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      int int4 = countingInputStream0.available();
      assertEquals((-3964), int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      
      int int5 = countingInputStream0.read();
      assertEquals((-297), int5);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      
      long long2 = countingInputStream0.getByteCount();
      assertEquals(0L, long2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int6 = countingInputStream0.read(byteArray0, (-1), (int) (byte)0);
      assertEquals((-3964), int6);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertEquals(1, byteArray0.length);
      
      long long3 = countingInputStream0.resetByteCount();
      assertEquals(0L, long3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertTrue(long3 == long2);
      
      long long4 = countingInputStream0.skip((-3964));
      assertEquals((-1768L), long4);
      assertEquals((-1768L), countingInputStream0.getByteCount());
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      
      boolean boolean1 = countingInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals((-1768L), countingInputStream0.getByteCount());
      assertTrue(boolean1 == boolean0);
      
      String string1 = countingInputStream0.toString();
      assertEquals((-1768L), countingInputStream0.getByteCount());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int7 = countingInputStream0.read(byteArray0);
      assertEquals(0, int7);
      assertEquals((-1768L), countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertTrue(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertEquals(1, byteArray0.length);
      
      String string2 = countingInputStream0.toString();
      assertEquals((-1768L), countingInputStream0.getByteCount());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int8 = countingInputStream0.resetCount();
      assertEquals((-1768), int8);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      
      long long5 = countingInputStream0.resetByteCount();
      assertEquals(0L, long5);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long5 == long4);
      assertTrue(long5 == long1);
      assertTrue(long5 == long2);
      assertTrue(long5 == long3);
      assertFalse(long5 == long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3964), (-3964)).when(inputStream0).available();
      doReturn(true, true).when(inputStream0).markSupported();
      doReturn((-297)).when(inputStream0).read();
      doReturn((-3964), (-1), (-1768), (-103), (-1540)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(4946L, 2147483647L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = countingInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      countingInputStream0.mark((byte)0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int2 = countingInputStream0.available();
      assertEquals((-3964), int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      countingInputStream0.mark((byte)0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      byteArray0[0] = (byte)0;
      int int3 = countingInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals((-3964), int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, byteArray0.length);
      
      int int4 = countingInputStream0.getCount();
      assertEquals(0, int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      
      long long1 = countingInputStream0.resetByteCount();
      assertEquals(0L, long1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      int int5 = countingInputStream0.available();
      assertEquals((-3964), int5);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      
      int int6 = countingInputStream0.read();
      assertEquals((-297), int6);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      
      long long2 = countingInputStream0.getByteCount();
      assertEquals(0L, long2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      int int7 = countingInputStream0.read(byteArray0, 762, (-3964));
      assertEquals((-1), int7);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      int int8 = countingInputStream0.read(byteArray1, (-1), (int) (byte)0);
      assertEquals((-1768), int8);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertEquals(1, byteArray1.length);
      
      long long3 = countingInputStream0.resetByteCount();
      assertEquals(0L, long3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long3 == long2);
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      
      int int9 = countingInputStream0.read(byteArray0, (-1), (-297));
      assertEquals((-103), int9);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int9 == int0);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int4);
      assertEquals(1, byteArray0.length);
      
      long long4 = countingInputStream0.skip((-3964));
      assertEquals(2147483647L, long4);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      
      boolean boolean1 = countingInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertTrue(boolean1 == boolean0);
      
      String string1 = countingInputStream0.toString();
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = countingInputStream0.toString();
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int10 = countingInputStream0.resetCount();
      assertEquals(Integer.MAX_VALUE, int10);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertFalse(int10 == int0);
      assertFalse(int10 == int2);
      assertFalse(int10 == int4);
      assertFalse(int10 == int1);
      
      long long5 = countingInputStream0.resetByteCount();
      assertEquals(0L, long5);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long5 == long3);
      assertTrue(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertTrue(long5 == long1);
      
      int int11 = countingInputStream0.read(byteArray0, 3569, 0);
      assertEquals((-1540), int11);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(int11 == int0);
      assertFalse(int11 == int1);
      assertFalse(int11 == int4);
      assertFalse(int11 == int7);
      assertFalse(int11 == int3);
      assertFalse(int11 == int2);
      assertFalse(int11 == int10);
      assertFalse(int11 == int5);
      assertFalse(int11 == int6);
      assertFalse(int11 == int9);
      assertFalse(int11 == int8);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(inputStream0).read(any(byte[].class));
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = countingInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-544)).when(inputStream0).available();
      doReturn((-544)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((long)(-544), (-1716L), 0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      int int1 = countingInputStream0.read(byteArray0, 0, 0);
      assertEquals((-544), int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)115}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1, byteArray0.length);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.mark(0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int2 = countingInputStream0.resetCount();
      assertEquals(0, int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = countingInputStream0.available();
      assertEquals((-544), int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = countingInputStream0.getCount();
      assertEquals(0, int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      
      long long0 = countingInputStream0.skip((byte)115);
      assertEquals((-544L), long0);
      assertEquals((-544L), countingInputStream0.getByteCount());
      
      int int5 = countingInputStream0.getCount();
      assertEquals((-544), int5);
      assertEquals((-544L), countingInputStream0.getByteCount());
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      
      int int6 = countingInputStream0.getCount();
      assertEquals((-544), int6);
      assertEquals((-544L), countingInputStream0.getByteCount());
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      
      long long1 = countingInputStream0.resetByteCount();
      assertEquals((-544L), long1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long1 == long0);
      
      int int7 = countingInputStream0.resetCount();
      assertEquals(0, int7);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertTrue(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertTrue(int7 == int2);
      
      int int8 = countingInputStream0.resetCount();
      assertEquals(0, int8);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int8 == int5);
      assertTrue(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertTrue(int8 == int0);
      assertFalse(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      
      long long2 = countingInputStream0.skip((-544));
      assertEquals((-1716L), long2);
      assertEquals((-1716L), countingInputStream0.getByteCount());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      long long3 = countingInputStream0.getByteCount();
      assertEquals((-1716L), long3);
      assertEquals((-1716L), countingInputStream0.getByteCount());
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      String string0 = countingInputStream0.toString();
      assertEquals((-1716L), countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      long long4 = countingInputStream0.skip((-1716L));
      assertEquals((-1716L), long4);
      assertEquals((-3432L), countingInputStream0.getByteCount());
      assertTrue(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertTrue(long4 == long3);
      
      long long5 = countingInputStream0.getByteCount();
      assertEquals((-3432L), long5);
      assertEquals((-3432L), countingInputStream0.getByteCount());
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long3);
      
      String string1 = countingInputStream0.toString();
      assertEquals((-3432L), countingInputStream0.getByteCount());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-122);
      int int9 = countingInputStream0.getCount();
      assertEquals((-3432), int9);
      assertEquals((-3432L), countingInputStream0.getByteCount());
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int3);
      
      long long6 = countingInputStream0.resetByteCount();
      assertEquals((-3432L), long6);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long6 == long5);
      assertFalse(long6 == long1);
      assertFalse(long6 == long3);
      assertFalse(long6 == long0);
      assertFalse(long6 == long2);
      assertFalse(long6 == long4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(inputStream0).read();
      doReturn(312, 0).when(inputStream0).read(any(byte[].class));
      doReturn(0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[1];
      countingInputStream0.mark((-812));
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.read();
      assertEquals(1, int0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      byteArray0[0] = (byte) (-67);
      long long0 = countingInputStream0.skip(1L);
      assertEquals(0L, long0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.read(byteArray0);
      assertEquals(312, int1);
      assertEquals(313L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte) (-67)}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1, byteArray0.length);
      
      int int2 = countingInputStream0.read(byteArray0);
      assertEquals(312, int2);
      assertEquals(625L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte) (-67)}, byteArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, byteArray0.length);
      
      int int3 = countingInputStream0.read();
      assertEquals(1, int3);
      assertEquals(626L, countingInputStream0.getByteCount());
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-297)).when(inputStream0).read();
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      int int0 = countingInputStream0.read();
      assertEquals((-297), int0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1495)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = countingInputStream0.read(byteArray0, 39, 3569);
      assertEquals((-1495), int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(inputStream0).markSupported();
      doReturn(518, 0).when(inputStream0).read(any(byte[].class));
      doReturn(484, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(110L, 0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      CountingInputStream countingInputStream1 = new CountingInputStream(countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(countingInputStream1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long0 = countingInputStream1.skip(2147483647L);
      assertEquals(110L, long0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(110L, countingInputStream0.getByteCount());
      assertEquals(110L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertTrue(boolean0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(110L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = countingInputStream1.read(byteArray0, (-1505), 1491);
      assertEquals(484, int0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(594L, countingInputStream0.getByteCount());
      assertEquals(594L, countingInputStream1.getByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertEquals(3, byteArray0.length);
      
      countingInputStream0.mark((-1));
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(594L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      
      int int1 = countingInputStream1.resetCount();
      assertEquals(594, int1);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(594L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(int1 == int0);
      
      int int2 = countingInputStream0.read(byteArray0, (-2147483646), (-1892));
      assertEquals(484, int2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(1078L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3, byteArray0.length);
      
      countingInputStream0.close();
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(1078L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      
      long long1 = countingInputStream1.skip((-1153L));
      assertEquals(110L, long1);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1188L, countingInputStream0.getByteCount());
      assertEquals(110L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertTrue(long1 == long0);
      
      int int3 = countingInputStream0.getCount();
      assertEquals(1188, int3);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(1188L, countingInputStream0.getByteCount());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      
      int int4 = countingInputStream1.resetCount();
      assertEquals(110, int4);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1188L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long2 = countingInputStream1.getByteCount();
      assertEquals(0L, long2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1188L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      String string1 = countingInputStream1.toString();
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1188L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(string1);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long3 = countingInputStream0.resetByteCount();
      assertEquals(1188L, long3);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      int int5 = countingInputStream0.read(byteArray0);
      assertEquals(518, int5);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(518L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(3, byteArray0.length);
      
      String string2 = countingInputStream1.toString();
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(518L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(string2);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = countingInputStream1.toString();
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(518L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(string3);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int6 = countingInputStream0.read(byteArray0);
      assertEquals(518, int6);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(1036L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertTrue(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-95);
      // Undeclared exception!
      try { 
        countingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).read();
      doReturn(0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      long long0 = countingInputStream0.getByteCount();
      assertEquals(0L, long0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long1 = countingInputStream0.getByteCount();
      assertEquals(0L, long1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long1 == long0);
      
      int int0 = countingInputStream0.read();
      assertEquals(0, int0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-51);
      int int1 = countingInputStream0.read(byteArray0, (int) (byte)1, 756);
      assertEquals(0, int1);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-51)}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      int int2 = countingInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int2);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-51)}, byteArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, byteArray0.length);
      
      long long2 = countingInputStream0.resetByteCount();
      assertEquals(1L, long2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      int int3 = countingInputStream0.read();
      assertEquals(0, int3);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = countingInputStream0.getCount();
      assertEquals(1, int4);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      doReturn(false).when(inputStream0).markSupported();
      doReturn((-3964)).when(inputStream0).read();
      doReturn(4946L, 2147483647L, 2147483647L, 0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      countingInputStream0.mark((byte)28);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.mark((byte)28);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int2 = countingInputStream0.getCount();
      assertEquals(0, int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      long long1 = countingInputStream0.skip(4946L);
      assertEquals(2147483647L, long1);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      int int3 = countingInputStream0.available();
      assertEquals(0, int3);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = countingInputStream0.read();
      assertEquals((-3964), int4);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      CountingInputStream countingInputStream1 = new CountingInputStream(countingInputStream0);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(countingInputStream1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long2 = countingInputStream1.getByteCount();
      assertEquals(0L, long2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      int int5 = countingInputStream1.getCount();
      assertEquals(0, int5);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long3 = countingInputStream1.skip((-3964));
      assertEquals(2147483647L, long3);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(4294967294L, countingInputStream0.getByteCount());
      assertEquals(2147483647L, countingInputStream1.getByteCount());
      assertFalse(long3 == long0);
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long4 = countingInputStream1.skip(2147483647L);
      assertEquals(2147483647L, long4);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(6442450941L, countingInputStream0.getByteCount());
      assertEquals(4294967294L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(long4 == long0);
      assertTrue(long4 == long3);
      assertFalse(long4 == long2);
      assertTrue(long4 == long1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      countingInputStream1.resetCount();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(inputStream0).markSupported();
      doReturn(0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class));
      doReturn(0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      long long0 = countingInputStream0.skip((-1L));
      assertEquals(0L, long0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      int int0 = countingInputStream0.getCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.getCount();
      assertEquals(0, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int1 == int0);
      
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-48);
      int int2 = countingInputStream0.read(byteArray0, (-562), 0);
      assertEquals(0, int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte) (-93), (byte)0, (byte)1, (byte) (-54), (byte)55, (byte) (-73), (byte) (-48)}, byteArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(9, byteArray0.length);
      
      int int3 = countingInputStream0.getCount();
      assertEquals(0, int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = countingInputStream0.read(byteArray0, (-1509), (int) (byte)0);
      assertEquals(0, int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte) (-93), (byte)0, (byte)1, (byte) (-54), (byte)55, (byte) (-73), (byte) (-48)}, byteArray0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(9, byteArray0.length);
      
      int int5 = countingInputStream0.read();
      assertEquals(0, int5);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      
      int int6 = countingInputStream0.getCount();
      assertEquals(1, int6);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int7 = countingInputStream0.read(byteArray1);
      assertEquals(0, int7);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertFalse(int7 == int6);
      assertEquals(0, byteArray1.length);
      
      int int8 = countingInputStream0.resetCount();
      assertEquals(1, int8);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(inputStream0).markSupported();
      doReturn(0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class));
      doReturn((-1095)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(5236L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      int int0 = countingInputStream0.read();
      assertEquals(0, int0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      countingInputStream0.reset();
      assertEquals(1L, countingInputStream0.getByteCount());
      
      countingInputStream0.mark(0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      int int1 = countingInputStream0.read(byteArray0, 0, (int) (byte) (-18));
      assertEquals((-1095), int1);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      long long0 = countingInputStream0.getByteCount();
      assertEquals(1L, long0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      boolean boolean1 = countingInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertTrue(boolean1 == boolean0);
      
      int int2 = countingInputStream0.getCount();
      assertEquals(1, int2);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = countingInputStream0.resetCount();
      assertEquals(1, int3);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      long long1 = countingInputStream0.skip((-954L));
      assertEquals(5236L, long1);
      assertEquals(5236L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      long long2 = countingInputStream0.resetByteCount();
      assertEquals(5236L, long2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      int int4 = countingInputStream0.read(byteArray0);
      assertEquals(0, int4);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(2, byteArray0.length);
      
      int int5 = countingInputStream0.resetCount();
      assertEquals(0, int5);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-812)).when(inputStream0).read();
      doReturn((-812)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((long)0, (long)(-1562)).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      CountingInputStream countingInputStream1 = new CountingInputStream(countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(countingInputStream1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      long long0 = countingInputStream0.skip(1L);
      assertEquals(0L, long0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      
      long long1 = countingInputStream1.resetByteCount();
      assertEquals(0L, long1);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertTrue(long1 == long0);
      
      int int0 = countingInputStream1.read();
      assertEquals((-812), int0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      int int1 = countingInputStream1.resetCount();
      assertEquals(0, int1);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(int1 == int0);
      
      long long2 = countingInputStream1.resetByteCount();
      assertEquals(0L, long2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      long long3 = countingInputStream1.skip((-2876L));
      assertEquals((-1562L), long3);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals((-1562L), countingInputStream0.getByteCount());
      assertEquals((-1562L), countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      int int2 = countingInputStream1.read(byteArray0, (int) (byte) (-1), (int) (byte) (-114));
      assertEquals((-812), int2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals((-1562L), countingInputStream0.getByteCount());
      assertEquals((-1562L), countingInputStream1.getByteCount());
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)0, (byte)1}, byteArray0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3964)).when(inputStream0).available();
      doReturn(false).when(inputStream0).markSupported();
      doReturn((-3964)).when(inputStream0).read();
      doReturn(4946L, 2147483647L, 0L, 0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
      
      countingInputStream0.reset();
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int0 = countingInputStream0.resetCount();
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      long long0 = countingInputStream0.skip(0);
      assertEquals(4946L, long0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      boolean boolean0 = countingInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(4946L, countingInputStream0.getByteCount());
      
      int int1 = countingInputStream0.resetCount();
      assertEquals(4946, int1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(int1 == int0);
      
      countingInputStream0.mark((byte)28);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      countingInputStream0.mark((byte)28);
      assertEquals(0L, countingInputStream0.getByteCount());
      
      int int2 = countingInputStream0.getCount();
      assertEquals(0, int2);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      long long1 = countingInputStream0.skip(4946);
      assertEquals(2147483647L, long1);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(long1 == long0);
      
      int int3 = countingInputStream0.available();
      assertEquals((-3964), int3);
      assertEquals(2147483647L, countingInputStream0.getByteCount());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      long long2 = countingInputStream0.skip(0L);
      assertEquals(2147483647L, long2);
      assertEquals(4294967294L, countingInputStream0.getByteCount());
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      int int4 = countingInputStream0.read();
      assertEquals((-3964), int4);
      assertEquals(4294967294L, countingInputStream0.getByteCount());
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      
      long long3 = countingInputStream0.getByteCount();
      assertEquals(4294967294L, long3);
      assertEquals(4294967294L, countingInputStream0.getByteCount());
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      countingInputStream0.getCount();
      countingInputStream0.resetByteCount();
      countingInputStream0.skip(int1);
      countingInputStream0.resetCount();
      countingInputStream0.resetCount();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, 1).when(inputStream0).read();
      doReturn((-1)).when(inputStream0).read(any(byte[].class));
      doReturn((-2147483646)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn((long)(-1)).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      int int0 = countingInputStream0.read();
      assertEquals(1, int0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      CountingInputStream countingInputStream1 = new CountingInputStream(countingInputStream0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(countingInputStream1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      countingInputStream1.reset();
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      int int1 = countingInputStream1.read();
      assertEquals(1, int1);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(2L, countingInputStream0.getByteCount());
      assertEquals(1L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertTrue(int1 == int0);
      
      int int2 = countingInputStream0.read();
      assertEquals(1, int2);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(3L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      long long0 = countingInputStream1.skip(0L);
      assertEquals((-1L), long0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(2L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      int int3 = countingInputStream1.getCount();
      assertEquals(0, int3);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(2L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = countingInputStream0.resetCount();
      assertEquals(2, int4);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      
      byteArray0[1] = (byte)0;
      countingInputStream1.reset();
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      int int5 = countingInputStream0.read(byteArray0, 0, (int) (byte)0);
      assertEquals((-2147483646), int5);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(2, byteArray0.length);
      
      int int6 = countingInputStream1.read();
      assertEquals(1, int6);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(1L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertFalse(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      
      int int7 = countingInputStream0.getCount();
      assertEquals(1, int7);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertFalse(int7 == int3);
      assertTrue(int7 == int1);
      assertFalse(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      
      int int8 = countingInputStream1.read(byteArray0);
      assertEquals((-1), int8);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(1L, countingInputStream1.getByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      assertEquals(2, byteArray0.length);
      
      int int9 = countingInputStream1.resetCount();
      assertEquals(1, int9);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(1L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertTrue(int9 == int0);
      assertFalse(int9 == int4);
      assertTrue(int9 == int2);
      assertTrue(int9 == int6);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertTrue(int9 == int7);
      assertTrue(int9 == int1);
      assertFalse(int9 == int3);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      int int10 = countingInputStream0.resetCount();
      assertEquals(1, int10);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(int10 == int5);
      assertTrue(int10 == int7);
      assertTrue(int10 == int9);
      assertFalse(int10 == int8);
      assertTrue(int10 == int2);
      assertTrue(int10 == int6);
      assertFalse(int10 == int4);
      assertTrue(int10 == int0);
      assertFalse(int10 == int3);
      assertTrue(int10 == int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = countingInputStream0.read(byteArray0, 39, 3569);
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read();
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      int int0 = countingInputStream0.read();
      assertEquals(0, int0);
      assertEquals(1L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      CountingInputStream countingInputStream1 = new CountingInputStream(countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertNotNull(countingInputStream1);
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
      
      int int0 = countingInputStream1.getCount();
      assertEquals(0, int0);
      assertNotSame(countingInputStream0, countingInputStream1);
      assertNotSame(countingInputStream1, countingInputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertEquals(0L, countingInputStream1.getByteCount());
      assertFalse(countingInputStream0.equals((Object)countingInputStream1));
      assertFalse(countingInputStream1.equals((Object)countingInputStream0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      long long0 = countingInputStream0.resetByteCount();
      assertEquals(0L, long0);
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class));
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = countingInputStream0.read(byteArray0);
      assertEquals(0, int0);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string0 = countingInputStream0.toString();
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      // Undeclared exception!
      try { 
        countingInputStream0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      assertEquals(0L, countingInputStream0.getByteCount());
      assertNotNull(countingInputStream0);
      
      // Undeclared exception!
      try { 
        countingInputStream0.skip((-3703L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).available();
      doReturn(false).when(inputStream0).markSupported();
      doReturn(0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class));
      doReturn(0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      doReturn(0L).when(inputStream0).skip(anyLong());
      CountingInputStream countingInputStream0 = new CountingInputStream(inputStream0);
      countingInputStream0.close();
      countingInputStream0.toString();
      countingInputStream0.skip((-1L));
      countingInputStream0.markSupported();
      countingInputStream0.available();
      countingInputStream0.reset();
      countingInputStream0.resetByteCount();
      countingInputStream0.read();
      countingInputStream0.toString();
      countingInputStream0.getCount();
      byte[] byteArray0 = new byte[1];
      countingInputStream0.mark(0);
      byteArray0[0] = (byte)76;
      countingInputStream0.read(byteArray0);
      countingInputStream0.getByteCount();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      countingInputStream0.toString();
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)42;
      countingInputStream0.read(byteArray1, 0, (int) (byte)0);
      assertEquals(1L, countingInputStream0.getByteCount());
      
      countingInputStream0.resetByteCount();
      countingInputStream0.toString();
      countingInputStream0.read(byteArray0, 1475, 0);
      int int0 = countingInputStream0.read(byteArray1, 784, (int) (byte)0);
      assertEquals(0, int0);
  }
}
