/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:53:12 GMT 2022
 */

package org.apache.tika.parser.external;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.List;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.config.TikaConfig;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.parser.CompositeParser;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.external.ExternalParser;
import org.apache.tika.parser.external.ExternalParsersFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExternalParsersFactory_ESTest extends ExternalParsersFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL[] uRLArray0 = new URL[1];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      try { 
        ExternalParsersFactory.create(uRLArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
      List<ExternalParser> list0 = ExternalParsersFactory.create();
      // Undeclared exception!
      try { 
        ExternalParsersFactory.attachExternalParsers(list0, (TikaConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      List<ExternalParser> list0 = ExternalParsersFactory.create(uRLArray0);
      CompositeParser compositeParser0 = new CompositeParser();
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn(compositeParser0).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(list0, tikaConfig0);
      ExternalParsersFactory.create(uRLArray0);
      ExternalParsersFactory.create();
      TikaConfig tikaConfig1 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn(compositeParser0).when(tikaConfig1).getParser();
      ExternalParsersFactory.attachExternalParsers(tikaConfig1);
      Enumeration<URL> enumeration0 = (Enumeration<URL>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      ServiceLoader serviceLoader0 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(serviceLoader0).findServiceResources(anyString());
      ExternalParsersFactory.create("", serviceLoader0);
      ServiceLoader serviceLoader1 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(serviceLoader1).findServiceResources(anyString());
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create(serviceLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
      CompositeParser compositeParser0 = new CompositeParser();
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn(compositeParser0).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(tikaConfig0);
      MediaTypeRegistry mediaTypeRegistry0 = mock(MediaTypeRegistry.class, new ViolatedAssumptionAnswer());
      compositeParser0.setMediaTypeRegistry(mediaTypeRegistry0);
      List<ExternalParser> list0 = ExternalParsersFactory.create();
      TikaConfig tikaConfig1 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn(compositeParser0).when(tikaConfig1).getParser();
      ExternalParsersFactory.attachExternalParsers(list0, tikaConfig1);
      URL[] uRLArray0 = new URL[3];
      String string0 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 967, "gBEwP*m>tq<.on{f", uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler1);
      uRLArray0[0] = uRL1;
      try { 
        MockURL.URL(uRL1, "gBEwP*m>tq<.on{f");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeParser compositeParser0 = new CompositeParser();
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn(compositeParser0).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(tikaConfig0);
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = mock(MediaTypeRegistry.class, new ViolatedAssumptionAnswer());
      Parser[] parserArray0 = new Parser[7];
      CompositeParser compositeParser0 = new CompositeParser();
      parserArray0[0] = (Parser) compositeParser0;
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Parser) null).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(tikaConfig0);
      Enumeration<URL> enumeration0 = (Enumeration<URL>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      ServiceLoader serviceLoader0 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(serviceLoader0).findServiceResources(anyString());
      ExternalParsersFactory.create(serviceLoader0);
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
      URL[] uRLArray0 = new URL[5];
      String string0 = "";
      String string1 = "`j f \"XxL$+";
      try { 
        MockURL.URL("", "", 1453, "`j f \"XxL$+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL[] uRLArray0 = new URL[5];
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "?8*A0u+E", uRLStreamHandler0);
      uRLArray0[0] = uRL1;
      URL uRL2 = MockURL.getHttpExample();
      uRLArray0[1] = uRL2;
      URL uRL3 = MockURL.getFileExample();
      uRLArray0[2] = uRL3;
      URL uRL4 = MockURL.getFileExample();
      uRLArray0[3] = uRL4;
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL5 = MockURL.URL(uRL3, "?8*A0u+E", uRLStreamHandler1);
      URL uRL6 = MockURL.URL(uRL5, "?8*A0u+E");
      uRLArray0[4] = uRL6;
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create(uRLArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
      // Undeclared exception!
      try { 
        ExternalParsersFactory.attachExternalParsers((TikaConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
      ExternalParsersFactory.create();
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Parser) null).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(tikaConfig0);
      TikaConfig tikaConfig1 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Parser) null).when(tikaConfig1).getParser();
      ExternalParsersFactory.attachExternalParsers(tikaConfig1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      List<ExternalParser> list0 = ExternalParsersFactory.create(uRLArray0);
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Parser) null).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(list0, tikaConfig0);
      ServiceLoader serviceLoader0 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(serviceLoader0).findServiceResources(anyString());
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create("t8=5=0\")']+vt{*G", serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<ExternalParser> list0 = ExternalParsersFactory.create();
      assertTrue(list0.isEmpty());
      
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Parser) null).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers(list0, tikaConfig0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TikaConfig tikaConfig0 = mock(TikaConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Parser) null).when(tikaConfig0).getParser();
      ExternalParsersFactory.attachExternalParsers((List<ExternalParser>) null, tikaConfig0);
      URL[] uRLArray0 = new URL[7];
      String string0 = "";
      String string1 = "";
      try { 
        MockURL.URL("", "", "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create("c3mGC^#U^D&xYrI<", (ServiceLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      ServiceLoader serviceLoader0 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(serviceLoader0).findServiceResources(anyString());
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create("", serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create((ServiceLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExternalParsersFactory.create();
      ExternalParsersFactory externalParsersFactory0 = new ExternalParsersFactory();
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create((ServiceLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create((URL[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL[] uRLArray0 = null;
      // Undeclared exception!
      try { 
        ExternalParsersFactory.create((URL[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParsersFactory", e);
      }
  }
}
