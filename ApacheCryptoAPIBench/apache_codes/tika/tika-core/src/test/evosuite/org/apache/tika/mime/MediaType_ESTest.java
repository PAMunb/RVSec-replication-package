/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:36:11 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MediaType_ESTest extends MediaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType1 = new MediaType("^_$r1(FhPkF", "^_$r1(FhPkF", hashMap0);
      boolean boolean0 = mediaType0.equals(mediaType1);
      assertEquals("^_$r1(fhpkf/^_$r1(fhpkf", mediaType1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.application("zP$\"\"");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.text("0#aNA");
      //  // Unstable assertion: assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MediaType mediaType1 = new MediaType(mediaType0, "", "");
      assertEquals("application/xml; =", mediaType1.toString());
      assertEquals("xml", mediaType1.getSubtype());
      
      MediaType[] mediaTypeArray0 = new MediaType[1];
      mediaTypeArray0[0] = mediaType1;
      Set<MediaType> set0 = MediaType.set(mediaTypeArray0);
      assertTrue(set0.contains(mediaType1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("c_");
      assertNotNull(mediaType0);
      assertEquals("c_", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      MediaType mediaType0 = MediaType.text(stringArray0[2]);
      assertNotNull(mediaType0);
      assertEquals("text/null", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = MediaType.image((String) null);
      assertNotNull(mediaType0);
      assertEquals("image/null", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      String string0 = mediaType0.getType();
      assertEquals("text", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = new MediaType("", "");
      String string0 = mediaType0.getType();
      assertEquals("", string0);
      assertEquals("/", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      String string0 = mediaType0.getSubtype();
      assertEquals("html", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = new MediaType("", "");
      String string0 = mediaType0.getSubtype();
      assertEquals("/", mediaType0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = new MediaType("\u0000]/\u0000]$", ")");
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      MediaType mediaType2 = mediaType1.getBaseType();
      assertEquals("]/\u0000]$/); charset=UTF-8", mediaType1.toString());
      assertEquals("]/\u0000]$/)", mediaType0.toString());
      assertNull(mediaType2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MediaType mediaType1 = new MediaType(mediaType0, "", "");
      int int0 = mediaType1.compareTo(mediaType0);
      assertEquals("xml", mediaType1.getSubtype());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio((String) null);
      assertEquals("audio", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.application("application");
      assertEquals("application", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.set((MediaType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.set((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0000]/\u0000]$";
      // Undeclared exception!
      try { 
        MediaType.set(stringArray0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      // Undeclared exception!
      try { 
        mediaType0.compareTo((MediaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      Map<String, String> map0 = mediaType0.getParameters();
      MediaType mediaType1 = null;
      try {
        mediaType1 = new MediaType((MediaType) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType((MediaType) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType((MediaType) null, ",{QG;gDg", ",{QG;gDg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType("application/zip", "application/zip", (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("aplication/ip");
      assertNotNull(mediaType0);
      assertEquals("aplication", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      boolean boolean0 = mediaType0.equals(mediaType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      Object object0 = new Object();
      boolean boolean0 = mediaType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      boolean boolean0 = mediaType0.hasParameters();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MediaType mediaType1 = new MediaType(mediaType0, ".4;x.u#><K;REmN2`", ".4;x.u#><K;REmN2`");
      boolean boolean0 = mediaType1.hasParameters();
      assertTrue(boolean0);
      assertEquals("x-empty", mediaType1.getSubtype());
      assertEquals("application/x-empty; .4;x.u#><k;remn2`=\".4\\;x.u#\\>\\<K\\;REmN2`\"", mediaType1.toString());
      assertFalse(mediaType0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MediaType mediaType1 = mediaType0.getBaseType();
      assertSame(mediaType0, mediaType1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      Map<String, String> map0 = mediaType0.getParameters();
      MediaType mediaType2 = new MediaType(mediaType1, map0);
      assertEquals("application/octet-stream; charset=UTF-8", mediaType2.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MediaType mediaType1 = new MediaType(mediaType0, "N{hx.M:q", "N{hx.M:q");
      MediaType mediaType2 = new MediaType(mediaType1, "N{hx.M:q", "N{hx.M:q");
      assertEquals("text/html; n{hx.m:q=\"N{hx.M\\:q\"", mediaType2.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("apl~cation/ip");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.application("_I\u0000]/\u0000]");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.text("org.apache.tika.ime.MediaType");
      //  // Unstable assertion: assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("applicatioj/octet-s=rjjm");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.parse("\u0000]/\u0000]$");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.parse("?ischarset=\u0000];\u0000]/\u0000]");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("application/xml");
      assertNotNull(mediaType0);
      assertEquals("xml", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5/l";
      Set<MediaType> set0 = MediaType.set(stringArray0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Set<MediaType> set0 = MediaType.set(stringArray0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MediaType[] mediaTypeArray0 = new MediaType[3];
      mediaTypeArray0[0] = mediaType0;
      Set<MediaType> set0 = MediaType.set(mediaTypeArray0);
      assertTrue(set0.contains(mediaType0));
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      int int0 = mediaType0.compareTo(mediaType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      String string0 = mediaType0.toString();
      assertEquals("text/html", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      int int0 = mediaType0.compareTo(mediaType1);
      assertEquals("xml", mediaType1.getSubtype());
      assertEquals("application", mediaType1.getType());
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MediaType mediaType0 = MediaType.text("+e99?fh}");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      mediaType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio("78I");
      //  // Unstable assertion: assertNull(mediaType0);
  }
}
