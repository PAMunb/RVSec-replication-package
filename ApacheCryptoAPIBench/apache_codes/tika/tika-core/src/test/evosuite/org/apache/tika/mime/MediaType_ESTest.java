/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:31:44 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MediaType_ESTest extends MediaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType1 = new MediaType(mediaType0, hashMap0);
      boolean boolean0 = mediaType0.equals(mediaType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = new MediaType("", "^4/WFHz@S8I-H5}b6+");
      MediaType mediaType1 = mediaType0.TEXT_HTML.getBaseType();
      MediaType mediaType2 = mediaType0.APPLICATION_ZIP.getBaseType();
      MediaType.parse("");
      MediaType[] mediaTypeArray0 = new MediaType[1];
      MediaType.image((String) null);
      MediaType.image((String) null);
      MediaType.text("");
      MediaType.audio("5!~S7uAfPNOWpu!H");
      MediaType.set(mediaTypeArray0);
      mediaType0.getSubtype();
      mediaType0.hashCode();
      mediaType1.hashCode();
      mediaType2.getSubtype();
      mediaType0.getType();
      mediaType1.hasParameters();
      MediaType.audio("; ");
      MediaType.text("=");
      mediaType2.getType();
      MediaType.video("zip");
      MediaType mediaType3 = MediaType.parse("zip");
      assertNull(mediaType3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.application("93-ZKW6KbO;~7b=7Xg");
      //  // Unstable assertion: assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.text("0PsR{<");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MediaType[] mediaTypeArray0 = new MediaType[4];
      mediaTypeArray0[0] = mediaType0;
      Set<MediaType> set0 = MediaType.set(mediaTypeArray0);
      assertEquals(1, set0.size());
      assertTrue(set0.contains(mediaType0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = new MediaType("", "");
      String string0 = mediaType0.getSubtype();
      assertEquals("", string0);
      assertEquals("/", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = new MediaType("`(!", "_5%34YnH\" $f~");
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      MediaType mediaType2 = mediaType1.getBaseType();
      assertEquals("`(!/_5%34ynh\" $f~; charset=UTF-8", mediaType1.toString());
      assertNull(mediaType2);
      assertEquals("`(!/_5%34ynh\" $f~", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      int int0 = mediaType1.compareTo(mediaType0);
      assertEquals("x-empty", mediaType1.getSubtype());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MediaType mediaType1 = MediaType.parse("application/xml");
      int int0 = mediaType0.compareTo(mediaType1);
      assertEquals((-64), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio((String) null);
      assertEquals("null", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.set((MediaType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        MediaType.set((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      // Undeclared exception!
      try { 
        mediaType0.compareTo((MediaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MediaType mediaType1 = null;
      try {
        mediaType1 = new MediaType(mediaType0, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MediaType mediaType1 = null;
      try {
        mediaType1 = new MediaType(mediaType0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType((String) null, "^!wu", hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = null;
      try {
        mediaType0 = new MediaType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MediaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("5{ 'S/rN1Y*j", "");
      MediaType mediaType0 = new MediaType("5{ 'S/rN1Y*j", "5{ 'S/rN1Y*j", hashMap0);
      assertEquals("5{ 's/rn1y*j/5{ 's/rn1y*j; 5{ 's/rn1y*j=", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("i#'/vFuBA3w[D#Rbdn[", "application/octet-stream");
      MediaType mediaType0 = new MediaType("application/octet-stream", "", hashMap0);
      assertEquals("application/octet-stream", mediaType0.getType());
      assertEquals("", mediaType0.getSubtype());
      assertEquals("application/octet-stream/; i#'/vfuba3w[d#rbdn[=\"application\\/octet-stream\"", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.text("_Mpn");
      //  // Unstable assertion: assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType.parse("\u0000]/\u0000]$");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("audio/aq; charset=UTF-8");
      //  // Unstable assertion: assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse((String) null);
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      boolean boolean0 = mediaType0.equals("application");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      boolean boolean0 = mediaType1.hasParameters();
      assertEquals("x-empty", mediaType1.getSubtype());
      assertTrue(boolean0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("application/x-empty; charset=UTF-8", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("applcation/xml");
      MediaType mediaType1 = mediaType0.getBaseType();
      assertEquals("applcation/xml", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType2 = new MediaType(mediaType1, hashMap0);
      assertEquals("application/octet-stream; charset=UTF-8", mediaType2.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.video(".{*-i)9A77.");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.image(".Bz|Cey(");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.text("+K7=%Z!L8{");
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "application/octet-steam";
      stringArray0[2] = "application/octet-steam";
      stringArray0[2] = stringArray0[1];
      Set<MediaType> set0 = MediaType.set(stringArray0);
      assertEquals(1, set0.size());
      
      MediaType mediaType0 = MediaType.text(stringArray0[2]);
      assertEquals("text/null", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "?ischarset=\u0000];\u0000]/\u0000]";
      MediaType.set(stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      int int0 = mediaType0.compareTo(mediaType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      String string0 = mediaType0.toString();
      assertEquals("application/x-empty", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      MediaType mediaType2 = new MediaType(mediaType1, charset0);
      assertEquals("application/x-empty; charset=UTF-8", mediaType2.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = new MediaType("", "");
      MediaType mediaType1 = new MediaType(mediaType0, "; ", "; ");
      assertEquals("/; ;=\"\\; \"", mediaType1.toString());
      assertEquals("/", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.application((String) null);
      assertNotNull(mediaType0);
      
      boolean boolean0 = mediaType0.equals(mediaType0);
      assertTrue(boolean0);
      assertEquals("null", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType0 = new MediaType("5{ 'S/rN1Y*j", "5{ 'S/rN1Y*j", hashMap0);
      mediaType0.getParameters();
      assertEquals("5{ 's/rn1y*j/5{ 's/rn1y*j", mediaType0.toString());
      assertEquals("5{ 's/rn1y*j", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MediaType[] mediaTypeArray0 = new MediaType[2];
      mediaTypeArray0[0] = mediaType0;
      Set<MediaType> set0 = MediaType.set(mediaTypeArray0);
      assertTrue(set0.contains(mediaType0));
      assertEquals(1, set0.size());
  }
}
