/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:33:02 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.Property;
import org.apache.tika.metadata.TIFF;
import org.apache.tika.mime.Clause;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.MimeTypes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MimeTypes_ESTest extends MimeTypes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      int int0 = mimeTypes0.getMinLength();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals(65536, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      List<MimeType> list0 = mimeTypes0.getMimeType(byteArray0);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, byteArray0.length);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      
      // Undeclared exception!
      try { 
        mimeTypes0.readMagicHeader((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream is missing
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-3)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-3)}, byteArray0);
      
      byte[] byteArray1 = mimeTypes0.readMagicHeader(dataInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-3)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-3)}, byteArray1);
      
      String string0 = "embeddedStorageClassId";
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-3)}, byteArray0);
      
      String string1 = "x!6]jvE`ZjsqA$";
      MockFile mockFile0 = new MockFile("application/xml");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "application/xml");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        mockFile1.setLastModified((byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative time
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.forName("application/xml");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/xml", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertNotNull(mimeType0);
      
      mimeTypes0.setSuperType(mimeType0, (MediaType) null);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/xml", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      
      MimeType mimeType1 = mimeTypes0.getRegisteredMimeType("text/plain");
      assertFalse(mimeType1.equals((Object)mimeType0));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("text/plain", mimeType1.getName());
      assertEquals("text/plain", mimeType1.toString());
      assertEquals("", mimeType1.getExtension());
      assertFalse(mimeType1.hasMagic());
      assertEquals("", mimeType1.getAcronym());
      assertEquals("", mimeType1.getUniformTypeIdentifier());
      assertEquals("", mimeType1.getDescription());
      assertNotSame(mimeType1, mimeType0);
      assertNotNull(mimeType1);
      
      mimeType0.addRootXML("custom-mimetypes.xml", "prg_ID");
      assertFalse(mimeType0.equals((Object)mimeType1));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/xml", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertNotSame(mimeType0, mimeType1);
      
      mimeTypes0.add(mimeType0);
      assertFalse(mimeType0.equals((Object)mimeType1));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/xml", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertNotSame(mimeType0, mimeType1);
      
      mimeTypes0.add(mimeType0);
      assertFalse(mimeType0.equals((Object)mimeType1));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/xml", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertNotSame(mimeType0, mimeType1);
      
      // Undeclared exception!
      MimeTypes.getDefaultMimeTypes();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.getMimeType("^B}lpx");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertNotNull(mimeType0);
      
      List<String> list0 = mimeType0.getExtensions();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("^B}lpx"));
      assertNotNull(list0);
      
      mimeType0.addExtension("application/xml");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getExtension());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      
      Magic magic0 = new Magic(mimeType0, 433, (Clause) null);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/xml", mimeType0.getExtension());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertEquals("[433/null]", magic0.toString());
      assertNotNull(magic0);
      
      mimeType0.addMagic(magic0);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getAcronym());
      assertTrue(mimeType0.hasMagic());
      assertEquals("application/xml", mimeType0.getExtension());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertEquals("[433/null]", magic0.toString());
      
      MediaType mediaType0 = MediaType.text("");
      assertNull(mediaType0);
      
      mimeType0.setUniformTypeIdentifier("");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getAcronym());
      assertTrue(mimeType0.hasMagic());
      assertEquals("application/xml", mimeType0.getExtension());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      
      mimeTypes0.setSuperType(mimeType0, (MediaType) null);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getAcronym());
      assertTrue(mimeType0.hasMagic());
      assertEquals("application/xml", mimeType0.getExtension());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      
      mimeTypes0.addPattern(mimeType0, "^B}lpx", true);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getAcronym());
      assertTrue(mimeType0.hasMagic());
      assertEquals("application/xml", mimeType0.getExtension());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      
      MimeType mimeType1 = mimeTypes0.getMimeType("3Ax:RI@yMLL:!1]3");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/octet-stream", mimeType1.toString());
      assertEquals("application/octet-stream", mimeType1.getName());
      assertEquals("", mimeType1.getUniformTypeIdentifier());
      assertEquals("", mimeType1.getDescription());
      assertEquals("", mimeType1.getAcronym());
      assertEquals("application/xml", mimeType1.getExtension());
      assertTrue(mimeType1.hasMagic());
      assertSame(mimeType1, mimeType0);
      assertNotNull(mimeType1);
      
      try { 
        mimeTypes0.getRegisteredMimeType((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: null
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      String string0 = "eP-M";
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        mimeTypes0.readMagicHeader(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      int int0 = sequenceInputStream0.read(byteArray0, 124, 65536);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-44), (byte)36, (byte) (-83), (byte) (-78), (byte)0, (byte)1}, byteArray0);
      
      Metadata metadata0 = new Metadata();
      assertEquals(0, metadata0.size());
      assertNotNull(metadata0);
      
      try { 
        mimeTypes0.detect(sequenceInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.getMimeType("application/octet-stream");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getDescription());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertNotNull(mimeType0);
      
      MediaTypeRegistry mediaTypeRegistry0 = mimeTypes0.getMediaTypeRegistry();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mediaTypeRegistry0);
      
      MimeType mimeType1 = mimeTypes0.getRegisteredMimeType("application/octet-stream");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType1.getExtension());
      assertEquals("", mimeType1.getAcronym());
      assertEquals("", mimeType1.getDescription());
      assertEquals("", mimeType1.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType1.toString());
      assertEquals("application/octet-stream", mimeType1.getName());
      assertFalse(mimeType1.hasMagic());
      assertSame(mimeType1, mimeType0);
      assertNotNull(mimeType1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1948);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      mimeTypes0.getMimeType((File) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)87;
      byte byte0 = (byte)72;
      byteArray0[2] = (byte)72;
      // Undeclared exception!
      try { 
        mimeTypes0.add((MimeType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      
      try { 
        mimeTypes0.detect(sequenceInputStream0, (Metadata) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.getMimeType("|ffZrS0S{x)Y");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertNotNull(mimeType0);
      
      mimeTypes0.addPattern(mimeType0, "y^", false);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertEquals("application/octet-stream", mimeType0.getName());
      
      File file0 = MockFile.createTempFile("application/xml", "%Gnaq8p");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("xml0%Gnaq8p", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/application/xml0%Gnaq8p", file0.toString());
      assertEquals("/tmp/application", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      // Undeclared exception!
      mimeTypes0.getMimeType(file0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      // Undeclared exception!
      try { 
        mimeTypes0.addPattern((MimeType) null, "_SJysyip", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      assertEquals("application", mediaType0.getType());
      assertEquals("application/xml", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("xml", mediaType0.getSubtype());
      assertNotNull(mediaType0);
      
      // Undeclared exception!
      try { 
        mimeTypes0.addAlias((MimeType) null, mediaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      String string0 = ":GHzAJN";
      // Undeclared exception!
      try { 
        mimeTypes0.getMimeType((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data is missing
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      mimeTypes0.init();
      assertEquals(65536, mimeTypes0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertNotNull(mediaType0);
      
      MimeType mimeType0 = new MimeType(mediaType0);
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("", mimeType0.getDescription());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/zip", mimeType0.getName());
      assertEquals("application/zip", mimeType0.toString());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertNotNull(mimeType0);
      
      mimeTypes0.addPattern(mimeType0, "ocO\"y4\"mqocnEt");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals("", mimeType0.getDescription());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("application/zip", mimeType0.getName());
      assertEquals("application/zip", mimeType0.toString());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      
      Map<String, String> map0 = mediaType0.getParameters();
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      MediaType mediaType1 = new MediaType(mediaType0, map0);
      assertTrue(mediaType1.equals((Object)mediaType0));
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("application/zip", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertNotNull(mediaType1);
      
      MimeType mimeType1 = new MimeType(mediaType1);
      assertTrue(mediaType0.equals((Object)mediaType1));
      assertTrue(mediaType1.equals((Object)mediaType0));
      assertTrue(mimeType1.equals((Object)mimeType0));
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("application/zip", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertEquals("", mimeType1.getExtension());
      assertEquals("", mimeType1.getDescription());
      assertEquals("", mimeType1.getAcronym());
      assertEquals("", mimeType1.getUniformTypeIdentifier());
      assertEquals("application/zip", mimeType1.getName());
      assertEquals("application/zip", mimeType1.toString());
      assertFalse(mimeType1.hasMagic());
      assertNotNull(mimeType1);
      
      MediaType mediaType2 = MediaType.audio((String) null);
      assertFalse(mediaType2.equals((Object)mediaType1));
      assertFalse(mediaType2.equals((Object)mediaType0));
      assertEquals("null", mediaType2.getSubtype());
      assertEquals("audio/null", mediaType2.toString());
      assertEquals("audio", mediaType2.getType());
      assertFalse(mediaType2.hasParameters());
      assertNotSame(mediaType2, mediaType1);
      assertNotSame(mediaType2, mediaType0);
      assertNotNull(mediaType2);
      
      mimeType1.setUniformTypeIdentifier("zJJMCpB]ngWdS/\",");
      assertTrue(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType0.equals((Object)mediaType2));
      assertFalse(mediaType1.equals((Object)mediaType2));
      assertTrue(mediaType1.equals((Object)mediaType0));
      assertTrue(mimeType1.equals((Object)mimeType0));
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("application/zip", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertEquals("zJJMCpB]ngWdS/\",", mimeType1.getUniformTypeIdentifier());
      assertEquals("", mimeType1.getExtension());
      assertEquals("", mimeType1.getDescription());
      assertEquals("", mimeType1.getAcronym());
      assertEquals("application/zip", mimeType1.getName());
      assertEquals("application/zip", mimeType1.toString());
      assertFalse(mimeType1.hasMagic());
      assertNotSame(mediaType0, mediaType2);
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType2);
      assertNotSame(mediaType1, mediaType0);
      assertNotSame(mimeType1, mimeType0);
      
      mimeTypes0.addAlias(mimeType1, mediaType1);
      assertTrue(mediaType0.equals((Object)mediaType1));
      assertFalse(mediaType0.equals((Object)mediaType2));
      assertFalse(mediaType1.equals((Object)mediaType2));
      assertTrue(mediaType1.equals((Object)mediaType0));
      assertTrue(mimeType1.equals((Object)mimeType0));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertFalse(mediaType0.hasParameters());
      assertEquals("zip", mediaType0.getSubtype());
      assertEquals("application/zip", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("application/zip", mediaType1.toString());
      assertEquals("zip", mediaType1.getSubtype());
      assertFalse(mediaType1.hasParameters());
      assertEquals("application", mediaType1.getType());
      assertEquals("zJJMCpB]ngWdS/\",", mimeType1.getUniformTypeIdentifier());
      assertEquals("", mimeType1.getExtension());
      assertEquals("", mimeType1.getDescription());
      assertEquals("", mimeType1.getAcronym());
      assertEquals("application/zip", mimeType1.getName());
      assertEquals("application/zip", mimeType1.toString());
      assertFalse(mimeType1.hasMagic());
      assertNotSame(mediaType0, mediaType2);
      assertNotSame(mediaType0, mediaType1);
      assertNotSame(mediaType1, mediaType2);
      assertNotSame(mediaType1, mediaType0);
      assertNotSame(mimeType1, mimeType0);
      
      try { 
        mimeTypes0.getRegisteredMimeType("d2TfTg/=Z~r6RY)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: d2TfTg/=Z~r6RY)
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        mimeTypes0.getMimeType((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      MimeTypes.getDefaultMimeTypes((ClassLoader) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.forName("application/xml");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/xml", mimeType0.toString());
      assertEquals("", mimeType0.getDescription());
      assertEquals("application/xml", mimeType0.getName());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getExtension());
      assertFalse(mimeType0.hasMagic());
      assertNotNull(mimeType0);
      
      String string0 = "";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setDefaultAssertionStatus(true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        MimeTypes.getDefaultMimeTypes(classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.getMimeType("Unable to read the default media type registry");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getDescription());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertNotNull(mimeType0);
      
      MediaType mediaType0 = new MediaType("S6m0)", "text/plain");
      assertEquals("s6m0)/text/plain", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("s6m0)", mediaType0.getType());
      assertEquals("text/plain", mediaType0.getSubtype());
      assertNotNull(mediaType0);
      
      MediaType mediaType1 = MediaType.audio("text/plain");
      assertNull(mediaType1);
      
      mimeTypes0.setSuperType(mimeType0, mediaType0);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getDescription());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("s6m0)/text/plain", mediaType0.toString());
      assertFalse(mediaType0.hasParameters());
      assertEquals("s6m0)", mediaType0.getType());
      assertEquals("text/plain", mediaType0.getSubtype());
      
      MediaType mediaType2 = MediaType.application("Unable to read the default media type registry");
      assertNull(mediaType2);
      
      mimeTypes0.addAlias(mimeType0, (MediaType) null);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getDescription());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      String string0 = "q~~8V";
      try { 
        mimeTypes0.forName("q~~8V");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: q~~8V
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertNotNull(sequenceInputStream1);
      
      long long0 = sequenceInputStream1.skip(47);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertEquals(0L, long0);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      
      sequenceInputStream1.mark(47);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      
      byte[] byteArray0 = mimeTypes0.readMagicHeader(sequenceInputStream1);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      MediaTypeRegistry mediaTypeRegistry0 = mimeTypes0.getMediaTypeRegistry();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mediaTypeRegistry0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      // Undeclared exception!
      try { 
        MimeTypes.getDefaultMimeTypes(classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      String string0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string1 = null;
      MediaType mediaType0 = MediaType.image((String) null);
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("image/null", mediaType0.toString());
      assertEquals("image", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertNotNull(mediaType0);
      
      MimeType mimeType0 = new MimeType(mediaType0);
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("image/null", mediaType0.toString());
      assertEquals("image", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("", mimeType0.getExtension());
      assertEquals("image/null", mimeType0.getName());
      assertEquals("image/null", mimeType0.toString());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getDescription());
      assertNotNull(mimeType0);
      
      mimeTypes0.add(mimeType0);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("image/null", mediaType0.toString());
      assertEquals("image", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("", mimeType0.getExtension());
      assertEquals("image/null", mimeType0.getName());
      assertEquals("image/null", mimeType0.toString());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getDescription());
      
      MediaType mediaType1 = MediaType.parse("iC");
      assertNull(mediaType1);
      
      mimeType0.addRootXML((String) null, "<8 <");
      assertEquals("null", mediaType0.getSubtype());
      assertEquals("image/null", mediaType0.toString());
      assertEquals("image", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("", mimeType0.getExtension());
      assertEquals("image/null", mimeType0.getName());
      assertEquals("image/null", mimeType0.toString());
      assertEquals("", mimeType0.getAcronym());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getDescription());
      
      // Undeclared exception!
      try { 
        MimeType.isValid((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MediaTypeRegistry mediaTypeRegistry0 = mimeTypes0.getMediaTypeRegistry();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mediaTypeRegistry0);
      
      File file0 = null;
      // Undeclared exception!
      mimeTypes0.getMimeType((File) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      MimeTypes.getDefaultMimeTypes(classLoader0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      MimeType mimeType0 = mimeTypes0.getMimeType("eP-M");
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals("", mimeType0.getUniformTypeIdentifier());
      assertEquals("application/octet-stream", mimeType0.getName());
      assertEquals("application/octet-stream", mimeType0.toString());
      assertEquals("", mimeType0.getExtension());
      assertEquals("", mimeType0.getAcronym());
      assertFalse(mimeType0.hasMagic());
      assertEquals("", mimeType0.getDescription());
      assertNotNull(mimeType0);
      
      MediaTypeRegistry mediaTypeRegistry0 = mimeTypes0.getMediaTypeRegistry();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mediaTypeRegistry0);
      
      String string0 = "fs46<QFOYfS(D";
      try { 
        mimeTypes0.getRegisteredMimeType("fs46<QFOYfS(D");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: fs46<QFOYfS(D
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      try { 
        mimeTypes0.getRegisteredMimeType("`J");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: `J
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      // Undeclared exception!
      try { 
        MimeTypes.getDefaultMimeTypes(classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      try { 
        mimeTypes0.getRegisteredMimeType("r}c16Y=08;8KX+{j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: r}c16Y=08;8KX+{j
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      // Undeclared exception!
      mimeTypes0.getMimeType((File) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      MimeTypes mimeTypes0 = new MimeTypes();
      assertEquals(65536, mimeTypes0.getMinLength());
      assertNotNull(mimeTypes0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 120, (byte) (-49));
      assertEquals((-119), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
      
      Metadata metadata0 = new Metadata();
      assertEquals(0, metadata0.size());
      assertNotNull(metadata0);
      
      Property property0 = TIFF.ORIGINAL_DATE;
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("exif:DateTimeOriginal", property0.getName());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNotNull(property0);
      
      Date date0 = metadata0.getDate(property0);
      assertEquals(0, metadata0.size());
      assertTrue(property0.isInternal());
      assertFalse(property0.isExternal());
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("exif:DateTimeOriginal", property0.getName());
      assertEquals(Property.ValueType.DATE, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertNull(date0);
      
      MediaType mediaType0 = mimeTypes0.detect(byteArrayInputStream0, metadata0);
      assertEquals(65536, mimeTypes0.getMinLength());
      assertEquals((-119), byteArrayInputStream0.available());
      assertEquals(0, metadata0.size());
      assertEquals("application/octet-stream", mediaType0.toString());
      assertEquals("application", mediaType0.getType());
      assertFalse(mediaType0.hasParameters());
      assertEquals("octet-stream", mediaType0.getSubtype());
      assertEquals(1, byteArray0.length);
      assertNotNull(mediaType0);
      assertArrayEquals(new byte[] {(byte) (-49)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      MimeTypes.getDefaultMimeTypes();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-76);
      mimeTypes0.getMimeType(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(32);
      try { 
        mimeTypes0.readMagicHeader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      try { 
        mimeTypes0.forName("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid media type name: 
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      sequenceInputStream0.read(byteArray0, 124, 65536);
      Metadata metadata0 = new Metadata();
      try { 
        mimeTypes0.detect(sequenceInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      MimeType mimeType0 = mimeTypes0.getMimeType("");
      assertNotNull(mimeType0);
      
      mimeType0.setDescription("");
      Magic magic0 = new Magic(mimeType0, 624, (Clause) null);
      Magic magic1 = new Magic(mimeType0, 0, (Clause) null);
      magic0.compareTo(magic1);
      MimeType.isValid("Message:");
      mimeType0.addMagic(magic0);
      File file0 = MockFile.createTempFile("3,w]/|*Pux-", "(VHN^*0*B");
      mimeTypes0.addPattern(mimeType0, "K", true);
      mimeTypes0.addPattern(mimeType0, "(VHN^*0*B", true);
      mimeTypes0.addPattern(mimeType0, "K");
      mimeTypes0.getMediaTypeRegistry();
      mimeTypes0.getMediaTypeRegistry();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = mimeTypes0.readMagicHeader(mockFileInputStream0);
      assertEquals(0, byteArray0.length);
      
      mimeTypes0.addPattern(mimeType0, "OirU!kWH# r*<5il8v");
      mimeTypes0.addPattern(mimeType0, "hs~L,;[^0M^1OoHb");
      assertEquals(65536, mimeTypes0.getMinLength());
  }
}
