/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:52:55 GMT 2022
 */

package org.apache.tika.fork;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URL;
import java.util.Enumeration;
import org.apache.tika.fork.ClassLoaderProxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassLoaderProxy_ESTest extends ClassLoaderProxy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)81);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Unable to load class 
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy((-1));
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResources("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(3);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findResources("Unable to find class ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.skipBytes((byte)81);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findResources("{dAr)^=C^");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)81);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResource(".class");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(1264);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findClass("org.apache.tika.fork.MemoryURLStreamHandlerFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findClass("/|RU}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      URL uRL0 = classLoaderProxy0.findResource(".class");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findClass("");
        fail("Expecting exception: ClassFormatError");
      
      } catch(ClassFormatError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(47);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      try { 
        classLoaderProxy0.findClass("8?69Qa&+.5gb`2nr");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Unable to find class 8?69Qa&+.5gb`2nr
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResources("org.osgi.service.url.AbstractURLStreamHandlerService");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: tika-in-memory
         //
         verifyException("org.apache.tika.fork.MemoryURLStreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      Enumeration<URL> enumeration0 = classLoaderProxy0.findResources("AA");
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResource(".class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: unknown protocol: tika-in-memory
         //
         verifyException("org.apache.tika.fork.MemoryURLStreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      PipedOutputStream pipedOutputStream0 = mock(PipedOutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      classLoaderProxy0.init(dataInputStream0, dataOutputStream0);
      classLoaderProxy0.findResource("/|RU}");
      URL uRL0 = classLoaderProxy0.findResource("/|RU}");
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoaderProxy classLoaderProxy0 = new ClassLoaderProxy(0);
      // Undeclared exception!
      try { 
        classLoaderProxy0.findResource(".class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ClassLoaderProxy", e);
      }
  }
}
