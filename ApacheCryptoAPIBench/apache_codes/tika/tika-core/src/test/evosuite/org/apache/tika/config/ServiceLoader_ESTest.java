/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:42:15 GMT 2022
 */

package org.apache.tika.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.config.InitializableProblemHandler;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.parser.DummyInitializableParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServiceLoader_ESTest extends ServiceLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader();
      LoadErrorHandler loadErrorHandler0 = serviceLoader0.getLoadErrorHandler();
      int int0 = 12;
      ServiceLoader.addService(loadErrorHandler0, classLoader0, int0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, (InitializableProblemHandler) null, true);
      boolean boolean0 = serviceLoader0.isDynamic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      Class<?> class1 = serviceLoader0.getServiceClass(class0, "org.apache.tika.metadata.Property$PropertyType");
      assertTrue(serviceLoader0.isDynamic());
      assertEquals(16393, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null, loadErrorHandler0, false);
      serviceLoader0.getLoader();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      serviceLoader0.getLoadErrorHandler();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, (InitializableProblemHandler) null, true);
      serviceLoader0.getInitializableProblemHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, (InitializableProblemHandler) null, true);
      String string0 = " is an interface";
      serviceLoader0.findServiceResources(string0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.identifyStaticServiceProviders((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        serviceLoader0.getServiceClass(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.getResourceAsStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      serviceLoader0.loadStaticServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.loadStaticServiceProviders((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null, loadErrorHandler0, false);
      Class<Object> class0 = Object.class;
      serviceLoader0.loadStaticServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      InitializableProblemHandler initializableProblemHandler0 = mock(InitializableProblemHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, initializableProblemHandler0, true);
      Class<DummyInitializableParser> class0 = DummyInitializableParser.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      Class<DummyInitializableParser> class0 = DummyInitializableParser.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<DummyInitializableParser> class0 = DummyInitializableParser.class;
      serviceLoader0.loadServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<Object> class0 = Object.class;
      serviceLoader0.identifyStaticServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      Class<?> class1 = serviceLoader0.getServiceClass(class0, "org.apache.tika.fork.MemoryURLStreamHandlerFactory");
      assertTrue(serviceLoader0.isDynamic());
      assertEquals("class org.apache.tika.fork.MemoryURLStreamHandlerFactory", class1.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      try { 
        serviceLoader0.getServiceClass(class0, "org.apache.tika.metadata.Message");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class org.apache.tika.metadata.Message is an interface
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<DummyInitializableParser> class0 = DummyInitializableParser.class;
      try { 
        serviceLoader0.getServiceClass(class0, "#.*");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class #.* is not available
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<DummyInitializableParser> class0 = DummyInitializableParser.class;
      try { 
        serviceLoader0.getServiceClass(class0, "org.apache.tika.config.ServiceLoader$RankedService");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class org.apache.tika.config.ServiceLoader$RankedService does not implement org.apache.tika.parser.DummyInitializableParser
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getResourceAsStream("");
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      serviceLoader0.getResourceAsStream("KpWvxAslWn66y=C");
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader.setContextClassLoader(classLoader0);
      ClassLoader classLoader1 = ServiceLoader.getContextClassLoader();
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      serviceLoader0.loadServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, (LoadErrorHandler) null, false);
      serviceLoader0.getLoader();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.loadServiceProviders((Class<Object>) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getInitializableProblemHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, (LoadErrorHandler) null, false);
      serviceLoader0.getLoadErrorHandler();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      boolean boolean0 = serviceLoader0.isDynamic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      Object object0 = ServiceLoader.removeService(dummyInitializableParser0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      // Undeclared exception!
      try { 
        serviceLoader0.findServiceResources("<U1V=}0m:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }
}
