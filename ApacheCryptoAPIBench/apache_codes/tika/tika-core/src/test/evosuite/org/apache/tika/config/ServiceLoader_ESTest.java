/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:37:29 GMT 2022
 */

package org.apache.tika.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.util.List;
import org.apache.tika.config.InitializableProblemHandler;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ServiceLoader_ESTest extends ServiceLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1073);
      Object object0 = ServiceLoader.removeService(integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Integer> class0 = Integer.class;
      serviceLoader0.loadServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      boolean boolean0 = serviceLoader0.isDynamic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      Class<Object> class0 = Object.class;
      Class<?> class1 = serviceLoader0.getServiceClass(class0, "org.apache.tika.config.InitializableProblemHandler$4");
      assertFalse(serviceLoader0.isDynamic());
      assertEquals(0, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      serviceLoader0.getResourceAsStream("");
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null, loadErrorHandler0, true);
      serviceLoader0.getLoader();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, (LoadErrorHandler) null);
      serviceLoader0.getLoadErrorHandler();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, (InitializableProblemHandler) null, true);
      serviceLoader0.getInitializableProblemHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Integer> class0 = null;
      // Undeclared exception!
      try { 
        serviceLoader0.loadStaticServiceProviders(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      // Undeclared exception!
      try { 
        serviceLoader0.identifyStaticServiceProviders((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      Class<URL> class0 = URL.class;
      // Undeclared exception!
      try { 
        serviceLoader0.getServiceClass(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      // Undeclared exception!
      try { 
        serviceLoader0.getResourceAsStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Integer> class0 = Integer.class;
      serviceLoader0.loadStaticServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<Integer> class0 = Integer.class;
      serviceLoader0.loadStaticServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      Class<Object> class0 = Object.class;
      serviceLoader0.loadDynamicServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<Object> class0 = Object.class;
      serviceLoader0.identifyStaticServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      ServiceLoader.addService(serviceLoader0, serviceLoader0, 0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.setContextClassLoader(classLoader0);
      serviceLoader0.getResourceAsStream("B");
      ServiceLoader.getContextClassLoader();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = serviceLoader0.loadServiceProviders(class0);
      List<Integer> list1 = serviceLoader0.loadStaticServiceProviders(class0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<Integer> class0 = Integer.class;
      serviceLoader0.loadServiceProviders(class0);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Object> class0 = Object.class;
      Class<?> class1 = serviceLoader0.getServiceClass(class0, "org.apache.tika.config.ServiceLoader$RankedService");
      assertEquals(10, class1.getModifiers());
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ServiceLoader.getContextClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      Class<Object> class0 = Object.class;
      try { 
        serviceLoader0.getServiceClass(class0, "org.apache.tika.metadata.Geographic");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class org.apache.tika.metadata.Geographic is an interface
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      Class<URL> class0 = URL.class;
      try { 
        serviceLoader0.getServiceClass(class0, "SUM");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class SUM is not available
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<String> class0 = String.class;
      try { 
        serviceLoader0.getServiceClass(class0, "org.apache.tika.config.ServiceLoader$RankedService");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Service class org.apache.tika.config.ServiceLoader$RankedService does not implement java.lang.String
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      serviceLoader0.getResourceAsStream((String) null);
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getLoader();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      serviceLoader0.getInitializableProblemHandler();
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      serviceLoader0.getLoadErrorHandler();
      assertFalse(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      boolean boolean0 = serviceLoader0.isDynamic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null, loadErrorHandler0);
      // Undeclared exception!
      try { 
        serviceLoader0.findServiceResources("application/x-empty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.ServiceLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      serviceLoader0.findServiceResources("");
      assertTrue(serviceLoader0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      Class<String> class0 = String.class;
      List<String> list0 = serviceLoader0.loadDynamicServiceProviders(class0);
      assertTrue(serviceLoader0.isDynamic());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ServiceLoader.addService(class0, classLoader0, 0);
  }
}
