/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:46:13 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.util.Enumeration;
import org.apache.tika.mime.MimeTypes;
import org.apache.tika.mime.MimeTypesFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MimeTypesFactory_ESTest extends MimeTypesFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL[] uRLArray0 = new URL[6];
      URL uRL0 = MockURL.getHttpExample();
      uRLArray0[0] = uRL0;
      try { 
        MimeTypesFactory.create(uRLArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)125, (byte)125);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      try { 
        MimeTypesFactory.create(inputStreamArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid type configuration
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeTypesFactory.create((InputStream[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MimeTypesFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStream[] inputStreamArray0 = new InputStream[4];
      inputStreamArray0[0] = (InputStream) mockFileInputStream0;
      try { 
        MimeTypesFactory.create(inputStreamArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-126);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      try { 
        MimeTypesFactory.create(inputStreamArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((NamedNodeMap) null).when(document0).getAttributes();
      doReturn((String) null).when(document0).getNodeName();
      doReturn((short)1, (short)1).when(document0).getNodeType();
      try { 
        MimeTypesFactory.create(document0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to parse type registry
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        MimeTypesFactory.create(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        MimeTypesFactory.create("", "wIJ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid type configuration
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeTypesFactory.create(",V>m3*}Vk{oE_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeTypesFactory.create((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.SAXParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3897), 234);
      // Undeclared exception!
      try { 
        MimeTypesFactory.create((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      try { 
        MimeTypesFactory.create((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-123);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        MimeTypesFactory.create((InputStream) byteArrayInputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeTypesFactory.create("Im9$~kA`a2SHJQ", "Im9$~kA`a2SHJQ", (ClassLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL[] uRLArray0 = new URL[6];
      // Undeclared exception!
      try { 
        MimeTypesFactory.create(uRLArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      // Undeclared exception!
      try { 
        MimeTypesFactory.create(inputStreamArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.SAXParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[0];
      MimeTypes mimeTypes0 = MimeTypesFactory.create(inputStreamArray0);
      assertEquals(65536, mimeTypes0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        MimeTypesFactory.create("", "Specified custom mimetypes file not found: ", classLoader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid type configuration
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      MimeTypes mimeTypes0 = MimeTypesFactory.create(uRLArray0);
      assertEquals(65536, mimeTypes0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((short)0, (short)0).when(document0).getNodeType();
      MimeTypes mimeTypes0 = MimeTypesFactory.create(document0);
      assertEquals(65536, mimeTypes0.getMinLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        MimeTypesFactory.create("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid type configuration
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MimeTypesFactory mimeTypesFactory0 = new MimeTypesFactory();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        MimeTypesFactory.create(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      try { 
        MimeTypesFactory.create((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid type configuration
         //
         verifyException("org.apache.tika.mime.MimeTypesReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeTypesFactory.create("_;05<UNkpp#rxN", "_;05<UNkpp#rxN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MimeTypes mimeTypes0 = MimeTypesFactory.create();
      assertEquals(65536, mimeTypes0.getMinLength());
  }
}
