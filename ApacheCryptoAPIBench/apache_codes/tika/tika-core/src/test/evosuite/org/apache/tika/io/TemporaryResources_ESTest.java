/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:52:31 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Closeable;
import java.io.File;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tika.io.TemporaryResources;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TemporaryResources_ESTest extends TemporaryResources_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      TemporaryResources temporaryResources1 = new TemporaryResources();
      temporaryResources1.addResource(temporaryResources0);
      temporaryResources1.dispose();
      assertFalse(temporaryResources1.equals((Object)temporaryResources0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource((Closeable) null);
      Class<MockFileReader> class0 = MockFileReader.class;
      // Undeclared exception!
      try { 
        temporaryResources0.getResource(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TemporaryResources", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.close();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource((Closeable) null);
      // Undeclared exception!
      try { 
        temporaryResources0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TemporaryResources", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TemporaryResources temporaryResources0 = new TemporaryResources();
          // Undeclared exception!
          try { 
            temporaryResources0.createTempFile();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource(temporaryResources0);
      Class<MockFileReader> class0 = MockFileReader.class;
      MockFileReader mockFileReader0 = temporaryResources0.getResource(class0);
      assertNull(mockFileReader0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.setTemporaryFileDirectory((File) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.addResource((Closeable) null);
      // Undeclared exception!
      try { 
        temporaryResources0.dispose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TemporaryResources", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TemporaryResources temporaryResources0 = new TemporaryResources();
          // Undeclared exception!
          try { 
            temporaryResources0.createTemporaryFile();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      temporaryResources0.setTemporaryFileDirectory((Path) null);
  }
}
