/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:42:24 GMT 2022
 */

package org.apache.tika.parser.external;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.external.ExternalParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExternalParser_ESTest extends ExternalParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      HashMap<Pattern, String> hashMap0 = new HashMap<Pattern, String>(1049);
      externalParser0.setMetadataExtractionPatterns(hashMap0);
      Map<Pattern, String> map0 = externalParser0.getMetadataExtractionPatterns();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      HashMap<Pattern, String> hashMap0 = new HashMap<Pattern, String>();
      Pattern pattern0 = Pattern.compile("rights");
      hashMap0.put(pattern0, "${INPUT}");
      externalParser0.setMetadataExtractionPatterns(hashMap0);
      Map<Pattern, String> map0 = externalParser0.getMetadataExtractionPatterns();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      externalParser0.setCommand((String[]) null);
      String[] stringArray0 = externalParser0.getCommand();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      String[] stringArray0 = new String[0];
      externalParser0.setCommand(stringArray0);
      String[] stringArray1 = externalParser0.getCommand();
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      // Undeclared exception!
      try { 
        externalParser0.setSupportedTypes((Set<MediaType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        ExternalParser.check(stringArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int[] intArray0 = new int[0];
      boolean boolean0 = ExternalParser.check(stringArray0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      String[] stringArray0 = new String[6];
      boolean boolean0 = ExternalParser.check(stringArray0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      Set<MediaType> set0 = externalParser0.getSupportedTypes();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ExternalParser.check("", intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ExternalParser externalParser0 = new ExternalParser();
          String[] stringArray0 = new String[1];
          stringArray0[0] = "${OUTPUT}";
          externalParser0.setCommand(stringArray0);
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          Metadata metadata0 = new Metadata();
          ParseContext parseContext0 = new ParseContext();
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          // Undeclared exception!
          try { 
            externalParser0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ExternalParser externalParser0 = new ExternalParser();
          String[] stringArray0 = new String[1];
          stringArray0[0] = "${INPUT}";
          externalParser0.setCommand(stringArray0);
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          Metadata metadata0 = new Metadata();
          ParseContext parseContext0 = new ParseContext();
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          // Undeclared exception!
          try { 
            externalParser0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      String[] stringArray0 = new String[16];
      externalParser0.setCommand(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      // Undeclared exception!
      try { 
        externalParser0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      HashMap<Pattern, String> hashMap0 = new HashMap<Pattern, String>();
      hashMap0.put((Pattern) null, "${INPUT}");
      externalParser0.setMetadataExtractionPatterns(hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      // Undeclared exception!
      try { 
        externalParser0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLFilterImpl0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      LinkedHashSet<MediaType> linkedHashSet0 = new LinkedHashSet<MediaType>();
      externalParser0.setSupportedTypes(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      externalParser0.setIgnoredLineConsumer((ExternalParser.LineConsumer) null);
      ExternalParser.LineConsumer externalParser_LineConsumer0 = externalParser0.getIgnoredLineConsumer();
      assertNull(externalParser_LineConsumer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      ExternalParser.LineConsumer externalParser_LineConsumer0 = externalParser0.getIgnoredLineConsumer();
      assertNotNull(externalParser_LineConsumer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      String[] stringArray0 = new String[0];
      externalParser0.setCommand(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      // Undeclared exception!
      try { 
        externalParser0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      String[] stringArray0 = externalParser0.getCommand();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      HashMap<Pattern, String> hashMap0 = new HashMap<Pattern, String>();
      externalParser0.setMetadataExtractionPatterns(hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      // Undeclared exception!
      try { 
        externalParser0.parse((InputStream) pipedInputStream0, (ContentHandler) xMLFilterImpl0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      Map<Pattern, String> map0 = externalParser0.getMetadataExtractionPatterns();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExternalParser.check("${INPUT}", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.external.ExternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExternalParser externalParser0 = new ExternalParser();
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = externalParser0.getSupportedTypes(parseContext0);
      assertTrue(set0.isEmpty());
  }
}
