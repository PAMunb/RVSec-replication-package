/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:37:25 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeTypes;
import org.apache.tika.mime.ProbabilisticMimeDetectionSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProbabilisticMimeDetectionSelector_ESTest extends ProbabilisticMimeDetectionSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.extension_trust((-599.75F));
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder1 = probabilisticMimeDetectionSelector_Builder0.priorMetaFileType((-702.824F));
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.priorExtensionFileType(1658.8F);
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder1 = probabilisticMimeDetectionSelector_Builder0.priorMagicFileType((-1029.74F));
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      Metadata metadata0 = new Metadata();
      metadata0.add("Content-Type", "Content-Type");
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect((InputStream) null, metadata0);
      assertFalse(mediaType0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      metadata0.add("resourceName", "Data is missing");
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0);
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
      assertFalse(mediaType0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.threshold((-3826.351F));
      probabilisticMimeDetectionSelector_Builder0.magic_trust((-1525.938F));
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector((MimeTypes) null, probabilisticMimeDetectionSelector_Builder0);
      // Undeclared exception!
      try { 
        probabilisticMimeDetectionSelector0.getMediaTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.ProbabilisticMimeDetectionSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      byte[] byteArray0 = new byte[1];
      Metadata metadata0 = new Metadata();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1288524552), 1640);
      // Undeclared exception!
      try { 
        probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      metadata0.add("Content-Type", "application/octet-stream");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)119);
      probabilisticMimeDetectionSelector0.detect(bufferedInputStream0, metadata0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      metadata0.add("Content-Type", "application/xml");
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("plain", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      metadata0.add("resourceName", "application/xml");
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("plain", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      byte[] byteArray0 = new byte[4];
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      metadata0.add("Content-Type", "application/xml");
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application/xml", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      metadata0.add("resourceName", "");
      MediaType mediaType0 = probabilisticMimeDetectionSelector0.detect(byteArrayInputStream0, metadata0);
      assertFalse(mediaType0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector((MimeTypes) null);
      // Undeclared exception!
      try { 
        probabilisticMimeDetectionSelector0.detect((InputStream) null, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.ProbabilisticMimeDetectionSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.meta_neg((-574.77F));
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder1 = probabilisticMimeDetectionSelector_Builder0.extension_neg(0.9F);
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.magic_neg((-702.824F));
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.meta_trust(2469.058F);
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.extension_trust(0.5001F);
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder1 = probabilisticMimeDetectionSelector_Builder0.priorMetaFileType(0.5001F);
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.priorExtensionFileType((-574.77F));
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.priorMagicFileType(198.7743F);
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      try { 
        probabilisticMimeDetectionSelector0.detect(pipedInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      probabilisticMimeDetectionSelector_Builder0.magic_trust(0.5001F);
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0, probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      // Undeclared exception!
      probabilisticMimeDetectionSelector_Builder0.build2();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProbabilisticMimeDetectionSelector.Builder probabilisticMimeDetectionSelector_Builder0 = new ProbabilisticMimeDetectionSelector.Builder();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(probabilisticMimeDetectionSelector_Builder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0);
      MediaTypeRegistry mediaTypeRegistry0 = probabilisticMimeDetectionSelector0.getMediaTypeRegistry();
      assertNotNull(mediaTypeRegistry0);
  }
}
