/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:48:03 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.apache.tika.io.TaggedIOException;
import org.apache.tika.io.TaggedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TaggedInputStream_ESTest extends TaggedInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(mockFileInputStream0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        taggedInputStream0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4);
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pushbackInputStream0);
      // Undeclared exception!
      try { 
        taggedInputStream0.handleIOException((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TaggedIOException", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(pipedInputStream0);
      MockIOException mockIOException0 = new MockIOException("TUB");
      TaggedIOException taggedIOException0 = new TaggedIOException(mockIOException0, taggedInputStream0);
      taggedInputStream0.throwIfCauseOf(taggedIOException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pipedInputStream0);
      MockException mockException0 = new MockException();
      taggedInputStream0.throwIfCauseOf(mockException0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(pipedInputStream0);
      MockIOException mockIOException0 = new MockIOException("TUB");
      TaggedIOException taggedIOException0 = new TaggedIOException(mockIOException0, taggedInputStream0);
      boolean boolean0 = taggedInputStream0.isCauseOf(taggedIOException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pipedInputStream0);
      boolean boolean0 = taggedInputStream0.isCauseOf((IOException) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pipedInputStream0);
      TaggedInputStream taggedInputStream1 = TaggedInputStream.get(taggedInputStream0);
      assertSame(taggedInputStream0, taggedInputStream1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pipedInputStream0);
      String string0 = taggedInputStream0.toString();
      assertNotNull(string0);
  }
}
