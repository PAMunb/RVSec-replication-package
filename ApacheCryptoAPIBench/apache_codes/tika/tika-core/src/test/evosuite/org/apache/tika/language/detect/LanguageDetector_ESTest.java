/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:57:57 GMT 2022
 */

package org.apache.tika.language.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.language.detect.LanguageDetector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LanguageDetector_ESTest extends LanguageDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ServiceLoader serviceLoader0 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(serviceLoader0).loadStaticServiceProviders(any(java.lang.Class.class));
      // Undeclared exception!
      try { 
        LanguageDetector.getLanguageDetectors(serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      List<LanguageDetector> list0 = LanguageDetector.getLanguageDetectors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        LanguageDetector.getDefaultLanguageDetector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No language detectors available
         //
         verifyException("org.apache.tika.language.detect.LanguageDetector", e);
      }
  }
}
