/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:00:00 GMT 2022
 */

package org.apache.tika.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.config.TikaActivator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Filter;
import org.osgi.framework.ServiceReference;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TikaActivator_ESTest extends TikaActivator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      ServiceReference serviceReference0 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      BundleContext bundleContext0 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn(filter0, filter0).when(bundleContext0).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext0).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext0);
      Filter filter1 = mock(Filter.class, new ViolatedAssumptionAnswer());
      BundleContext bundleContext1 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn(filter1, filter1).when(bundleContext1).createFilter(anyString());
      doReturn(tikaActivator0, (Object) null, (Object) null).when(bundleContext1).getService(any(org.osgi.framework.ServiceReference.class));
      doReturn((Object) null, (Object) null).when(bundleContext1).getServiceReferences(anyString() , anyString());
      doReturn(false, true).when(bundleContext1).ungetService(any(org.osgi.framework.ServiceReference.class));
      Filter filter2 = mock(Filter.class, new ViolatedAssumptionAnswer());
      BundleContext bundleContext2 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn(filter2, filter2).when(bundleContext2).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext2).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext2);
      tikaActivator0.start(bundleContext1);
      ServiceReference serviceReference1 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference1).getProperty(anyString());
      Object object0 = tikaActivator0.addingService(serviceReference1);
      ServiceReference serviceReference2 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(serviceReference2).getProperty(anyString());
      Object object1 = tikaActivator0.addingService(serviceReference2);
      tikaActivator0.removedService(serviceReference2, object1);
      BundleContext bundleContext3 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      tikaActivator0.stop(bundleContext3);
      tikaActivator0.removedService(serviceReference0, serviceReference0);
      Filter filter3 = mock(Filter.class, new ViolatedAssumptionAnswer());
      ServiceReference serviceReference3 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference3).getProperty(anyString());
      Object object2 = tikaActivator0.addingService(serviceReference3);
      BundleContext bundleContext4 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn(filter3, filter3).when(bundleContext4).createFilter(anyString());
      doReturn(object0, object2, (Object) null).when(bundleContext4).getService(any(org.osgi.framework.ServiceReference.class));
      doReturn((Object) null, (Object) null).when(bundleContext4).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext4);
      ServiceReference serviceReference4 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(serviceReference4).getProperty(anyString());
      ServiceReference serviceReference5 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference5).getProperty(anyString());
      Object object3 = tikaActivator0.addingService(serviceReference5);
      ServiceReference serviceReference6 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn(object3).when(serviceReference6).getProperty(anyString());
      tikaActivator0.addingService(serviceReference6);
      tikaActivator0.addingService(serviceReference4);
      ServiceReference serviceReference7 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      tikaActivator0.modifiedService(serviceReference7, (Object) null);
      TikaActivator tikaActivator1 = new TikaActivator();
      BundleContext bundleContext5 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext5).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext5).getServiceReferences(anyString() , anyString());
      tikaActivator1.start(bundleContext5);
      BundleContext bundleContext6 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      tikaActivator0.stop(bundleContext6);
      BundleContext bundleContext7 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext7).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext7).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext7);
      assertSame(tikaActivator0, object2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      ServiceReference serviceReference0 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      BundleContext bundleContext0 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext0).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext0).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext0);
      BundleContext bundleContext1 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext1).createFilter(anyString());
      doReturn((Object) null).when(bundleContext1).getService(any(org.osgi.framework.ServiceReference.class));
      doReturn((Object) null, (Object) null).when(bundleContext1).getServiceReferences(anyString() , anyString());
      doReturn(false, false).when(bundleContext1).ungetService(any(org.osgi.framework.ServiceReference.class));
      BundleContext bundleContext2 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext2).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext2).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext2);
      tikaActivator0.start(bundleContext1);
      ServiceReference serviceReference1 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference1).getProperty(anyString());
      tikaActivator0.addingService(serviceReference1);
      tikaActivator0.removedService(serviceReference1, (Object) null);
      BundleContext bundleContext3 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      tikaActivator0.stop(bundleContext3);
      tikaActivator0.removedService(serviceReference0, serviceReference0);
      BundleContext bundleContext4 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext4).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext4).getService(any(org.osgi.framework.ServiceReference.class));
      doReturn((Object) null, (Object) null).when(bundleContext4).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext4);
      ServiceReference serviceReference2 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference2).getProperty(anyString());
      ServiceReference serviceReference3 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference3).getProperty(anyString());
      tikaActivator0.addingService(serviceReference3);
      tikaActivator0.addingService(serviceReference2);
      BundleContext bundleContext5 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext5).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext5).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext5);
      BundleContext bundleContext6 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext6).createFilter(anyString());
      doReturn((Object) null).when(bundleContext6).getService(any(org.osgi.framework.ServiceReference.class));
      doReturn((Object) null, (Object) null).when(bundleContext6).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext6);
      ServiceReference serviceReference4 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      tikaActivator0.modifiedService(serviceReference4, (Object) null);
      ServiceReference serviceReference5 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference5).getProperty(anyString());
      tikaActivator0.addingService(serviceReference5);
      BundleContext bundleContext7 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext7).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext7).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext7);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      ServiceReference serviceReference0 = null;
      tikaActivator0.modifiedService((ServiceReference) null, (Object) null);
      // Undeclared exception!
      try { 
        tikaActivator0.addingService((ServiceReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      BundleContext bundleContext0 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      doReturn((Filter) null, (Filter) null).when(bundleContext0).createFilter(anyString());
      doReturn((Object) null, (Object) null).when(bundleContext0).getServiceReferences(anyString() , anyString());
      tikaActivator0.start(bundleContext0);
      ServiceReference serviceReference0 = null;
      tikaActivator0.modifiedService((ServiceReference) null, (Object) null);
      // Undeclared exception!
      try { 
        tikaActivator0.addingService((ServiceReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      BundleContext bundleContext0 = null;
      try { 
        tikaActivator0.start((BundleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.osgi.util.tracker.ServiceTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      BundleContext bundleContext0 = null;
      try { 
        tikaActivator0.start((BundleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.osgi.util.tracker.ServiceTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      // Undeclared exception!
      try { 
        tikaActivator0.addingService((ServiceReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      ServiceReference serviceReference0 = mock(ServiceReference.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(serviceReference0).getProperty(anyString());
      // Undeclared exception!
      try { 
        tikaActivator0.addingService(serviceReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      BundleContext bundleContext0 = null;
      try { 
        tikaActivator0.stop((BundleContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      BundleContext bundleContext0 = mock(BundleContext.class, new ViolatedAssumptionAnswer());
      try { 
        tikaActivator0.stop(bundleContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TikaActivator tikaActivator0 = new TikaActivator();
      // Undeclared exception!
      try { 
        tikaActivator0.removedService((ServiceReference) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.TikaActivator", e);
      }
  }
}
