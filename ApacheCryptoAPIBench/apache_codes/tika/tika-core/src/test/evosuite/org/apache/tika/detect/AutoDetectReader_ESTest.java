/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:46:20 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.AutoDetectReader;
import org.apache.tika.detect.DefaultEncodingDetector;
import org.apache.tika.detect.EncodingDetector;
import org.apache.tika.detect.NonDetectingEncodingDetector;
import org.apache.tika.metadata.Metadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xml.sax.InputSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AutoDetectReader_ESTest extends AutoDetectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader();
      InputStream inputStream0 = serviceLoader0.getResourceAsStream("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      Metadata metadata0 = new Metadata();
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      AutoDetectReader autoDetectReader0 = new AutoDetectReader(pushbackInputStream0, metadata0, nonDetectingEncodingDetector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, (EncodingDetector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      Charset charset0 = Charset.defaultCharset();
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector(charset0);
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, nonDetectingEncodingDetector0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1030), (byte) (-116));
      Metadata metadata0 = new Metadata();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, serviceLoader0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(bufferedInputStream0, metadata0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1372);
      Metadata metadata0 = new Metadata();
      DefaultEncodingDetector defaultEncodingDetector0 = new DefaultEncodingDetector();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, defaultEncodingDetector0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      AutoDetectReader autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, nonDetectingEncodingDetector0);
      InputSource inputSource0 = autoDetectReader0.asInputSource();
      assertNotNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null, metadata0, serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      AutoDetectReader autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, nonDetectingEncodingDetector0);
      Charset charset0 = autoDetectReader0.getCharset();
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }
}
