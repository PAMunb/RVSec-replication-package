/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:53:01 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.List;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.AutoDetectReader;
import org.apache.tika.detect.EncodingDetector;
import org.apache.tika.metadata.Metadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AutoDetectReader_ESTest extends AutoDetectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(inputStream0).markSupported();
      CharsetDecoder charsetDecoder0 = mock(CharsetDecoder.class, new ViolatedAssumptionAnswer());
      Charset charset0 = mock(Charset.class, new ViolatedAssumptionAnswer());
      doReturn((CharsetDecoder) null).when(charset0).newDecoder();
      EncodingDetector encodingDetector0 = mock(EncodingDetector.class, new ViolatedAssumptionAnswer());
      doReturn(charset0).when(encodingDetector0).detect(any(java.io.InputStream.class) , any(org.apache.tika.metadata.Metadata.class));
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(inputStream0, (Metadata) null, encodingDetector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(inputStream0).markSupported();
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = mock(ServiceLoader.class, new ViolatedAssumptionAnswer());
      doReturn((LoadErrorHandler) null).when(serviceLoader0).getLoadErrorHandler();
      doReturn((List) null).when(serviceLoader0).loadServiceProviders(any(java.lang.Class.class));
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(inputStream0, metadata0, serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(inputStream0).markSupported();
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metadata0).get(anyString());
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(inputStream0, metadata0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(inputStream0).markSupported();
      doReturn((String) null).when(inputStream0).toString();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(inputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(inputStream0).markSupported();
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metadata0).get(anyString());
      EncodingDetector encodingDetector0 = mock(EncodingDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(encodingDetector0).detect(any(java.io.InputStream.class) , any(org.apache.tika.metadata.Metadata.class));
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(inputStream0, metadata0, encodingDetector0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }
}
