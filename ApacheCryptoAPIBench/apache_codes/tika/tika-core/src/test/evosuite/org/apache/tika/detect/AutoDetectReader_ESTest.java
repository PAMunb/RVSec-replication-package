/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:34:27 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.AutoDetectReader;
import org.apache.tika.detect.DefaultEncodingDetector;
import org.apache.tika.detect.EncodingDetector;
import org.apache.tika.detect.NonDetectingEncodingDetector;
import org.apache.tika.metadata.Metadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.InputSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AutoDetectReader_ESTest extends AutoDetectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      AutoDetectReader autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, nonDetectingEncodingDetector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, (EncodingDetector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      Metadata metadata0 = new Metadata();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-99), 123);
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, nonDetectingEncodingDetector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, nonDetectingEncodingDetector0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      ServiceLoader serviceLoader0 = new ServiceLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, serviceLoader0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      DefaultEncodingDetector defaultEncodingDetector0 = new DefaultEncodingDetector();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0, metadata0, defaultEncodingDetector0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader(pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Failed to detect the character encoding of a document
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, nonDetectingEncodingDetector0);
      InputSource inputSource0 = autoDetectReader0.asInputSource();
      assertNotNull(inputSource0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null, metadata0, (ServiceLoader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      Metadata metadata0 = new Metadata();
      AutoDetectReader autoDetectReader0 = new AutoDetectReader(byteArrayInputStream0, metadata0, nonDetectingEncodingDetector0);
      Charset charset0 = autoDetectReader0.getCharset();
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AutoDetectReader autoDetectReader0 = null;
      try {
        autoDetectReader0 = new AutoDetectReader((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.AutoDetectReader", e);
      }
  }
}
