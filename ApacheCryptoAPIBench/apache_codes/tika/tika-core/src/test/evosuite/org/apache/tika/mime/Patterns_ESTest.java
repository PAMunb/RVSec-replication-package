/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:39:41 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.Patterns;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Patterns_ESTest extends Patterns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("*", false, mimeType0);
      patterns0.matches("*");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = new MediaType("or", "Media type name is missing");
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "**.nml", "org.apache.tika.mime.Patterns", "Media type name is missing", (String) null);
      Magic magic0 = new Magic(mimeType0, 1526, magicMatch0);
      mimeType0.addMagic(magic0);
      patterns0.add("or", false, mimeType0);
      patterns0.matches("or");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("zRx(2d~", true, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.matches("zRx(2d~");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 7
         // zRx(2d~
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("Z8^L&noe$QKr*}Z\"", true, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.matches("**.wmv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("zbRxd*~", mimeType0);
      // Undeclared exception!
      try { 
        patterns0.add("zbRxd*~", false, mimeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = new MediaType("", "");
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("", mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      try { 
        patterns0.add("", mimeType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting name pattern: 
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("zbRxd*~", false, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.add("zbRxd*~", mimeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.add("**.mp4v", (MimeType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("0{4n%Cji0:B{?VheV/B", true, mimeType0);
      patterns0.add("0{4n%Cji0:B{?VheV/B", true, mimeType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("<s^`Axf039wYb_$W/", true, mimeType0);
      patterns0.matches("<s^`Axf039wYb_$W/");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*G}vZ", mimeType0);
      patterns0.matches("*G}vZ");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.matches((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = new MediaType("[or", "Media type name is missing");
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("[or", mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      try { 
        patterns0.add("[or", false, mimeType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting glob pattern: \\A\\[or\\z
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = new MediaType("[or", "[or");
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("[or", mimeType0);
      MediaType mediaType1 = MediaType.OCTET_STREAM;
      MimeType mimeType1 = new MimeType(mediaType1);
      patterns0.add("[or", false, mimeType1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      MediaTypeRegistry.getDefaultRegistry();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("*", false, mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      try { 
        patterns0.add("*", false, mimeType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting extension pattern: 
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("*", false, mimeType0);
      patterns0.add("*", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MediaType mediaType1 = MediaType.OCTET_STREAM;
      MimeType mimeType1 = new MimeType(mediaType1);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add(")s0++i", mimeType1);
      patterns0.add(")s0++i", false, mimeType0);
      assertEquals("text/html", mimeType0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MediaType mediaType1 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType1);
      patterns0.add("", mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      patterns0.add("", false, mimeType1);
      assertEquals("application/octet-stream", mimeType1.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("Conflicting extension pattern: ", mimeType0);
      patterns0.add("Conflicting extension pattern: ", false, mimeType0);
      assertEquals("", mimeType0.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("*6Q[}D", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("**.wspolicy", mimeType0);
      MediaType mediaType1 = MediaType.EMPTY;
      MimeType mimeType1 = new MimeType(mediaType1);
      patterns0.add("**.wspolicy", false, mimeType1);
      assertEquals("", mimeType1.getExtension());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.add("B8[PPy<{+72E>4$6C", false, mimeType0);
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("([^c()<>@,;:\\\"/[]?=s]+)", false, mimeType0);
      assertFalse(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      // Undeclared exception!
      try { 
        patterns0.add("ZKrS-r", true, (MimeType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = new MediaType("or", "Media type name is missing");
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        patterns0.add((String) null, false, mimeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add(">UhTy.*0<Um2", false, mimeType0);
      patterns0.add("=mvU{~", true, mimeType0);
      assertEquals("", mimeType0.getAcronym());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("*G}vZ", mimeType0);
      MimeType mimeType1 = patterns0.matches("**.flv");
      assertNull(mimeType1);
  }
}
