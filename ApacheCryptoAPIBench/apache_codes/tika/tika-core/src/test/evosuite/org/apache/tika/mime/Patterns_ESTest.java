/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:35:20 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.Patterns;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Patterns_ESTest extends Patterns_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "", "2", "", "appli^>cation/");
      Magic magic0 = new Magic(mimeType0, 1307, magicMatch0);
      patterns0.add("", true, mimeType0);
      mimeType0.addMagic(magic0);
      patterns0.matches("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("[", true, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.matches("2");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 0
         // [
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("tX-Y&H?.3%Rs~.j^", mimeType0);
      // Undeclared exception!
      try { 
        patterns0.add("tX-Y&H?.3%Rs~.j^", false, mimeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("", false, mimeType0);
      // Undeclared exception!
      try { 
        patterns0.add("", mimeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.add("", (MimeType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add(">(h<-t]zK]][y`D", false, mimeType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("", true, mimeType0);
      patterns0.matches("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("$L7A-D", false, mimeType0);
      patterns0.matches("$L7A-D");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      // Undeclared exception!
      try { 
        patterns0.matches((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      patterns0.matches("$L7A-D");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MediaType mediaType1 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType1);
      patterns0.add("ZUdwF&60cKSjsket.WZ", true, mimeType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      try { 
        patterns0.add("ZUdwF&60cKSjsket.WZ", true, mimeType1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Conflicting glob pattern: ZUdwF&60cKSjsket.WZ
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("**.wvx", true, mimeType0);
      patterns0.add("**.wvx", true, mimeType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("$L7A-D", false, mimeType0);
      patterns0.add("$L7A-D", false, mimeType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Patterns patterns0 = new Patterns((MediaTypeRegistry) null);
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("**.asciidoc", false, mimeType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      MediaTypeRegistry.getDefaultRegistry();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("[", mimeType0);
      MimeType mimeType1 = patterns0.matches("[");
      //  // Unstable assertion: assertNull(mimeType1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.add("&]xT", false, (MimeType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      // Undeclared exception!
      try { 
        patterns0.add((String) null, true, (MimeType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern and/or mime type is missing
         //
         verifyException("org.apache.tika.mime.Patterns", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      Patterns patterns0 = new Patterns(mediaTypeRegistry0);
      MimeType mimeType0 = new MimeType(mediaType0);
      patterns0.add("WaSf?6(8Z[Z", mimeType0);
      patterns0.add(".*", mimeType0);
      assertEquals("text/plain", mimeType0.getName());
  }
}
