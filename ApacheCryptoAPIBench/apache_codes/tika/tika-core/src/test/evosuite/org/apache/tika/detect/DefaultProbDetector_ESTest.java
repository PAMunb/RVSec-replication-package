/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:50:42 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.DefaultProbDetector;
import org.apache.tika.detect.Detector;
import org.apache.tika.mime.MimeTypes;
import org.apache.tika.mime.ProbabilisticMimeDetectionSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultProbDetector_ESTest extends DefaultProbDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ServiceLoader serviceLoader0 = new ServiceLoader((ClassLoader) null);
      DefaultProbDetector defaultProbDetector0 = null;
      try {
        defaultProbDetector0 = new DefaultProbDetector((ProbabilisticMimeDetectionSelector) null, serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.DefaultProbDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultProbDetector defaultProbDetector0 = null;
      try {
        defaultProbDetector0 = new DefaultProbDetector((MimeTypes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.ProbabilisticMimeDetectionSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(probabilisticMimeDetectionSelector0, classLoader0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(probabilisticMimeDetectionSelector0, serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultProbDetector defaultProbDetector0 = null;
      try {
        defaultProbDetector0 = new DefaultProbDetector((ProbabilisticMimeDetectionSelector) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.DefaultProbDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(mimeTypes0);
      List<Detector> list0 = defaultProbDetector0.getDetectors();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(classLoader0);
  }
}
