/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:32:02 GMT 2022
 */

package org.apache.tika.language;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URISyntaxException;
import java.nio.channels.FileChannel;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import org.apache.tika.language.LanguageProfilerBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LanguageProfilerBuilder_ESTest extends LanguageProfilerBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = "ch8bW1K+g5lBtVP(";
      stringArray0[2] = "-score";
      stringArray0[3] = "aQute.lib.osgi.Instruction";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".oMW0*r");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      stringArray0[4] = ".oMW0*r";
      stringArray0[5] = "FcD|`(Uo85FE[";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("vs_");
      assertEquals("vs_", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("-score");
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(6, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("-score", languageProfilerBuilder_NGramEntry0.toString());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = languageProfilerBuilder_NGramEntry0.getProfile();
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(6, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("-score", languageProfilerBuilder_NGramEntry0.toString());
      assertNull(languageProfilerBuilder1);
      
      try { 
        languageProfilerBuilder0.getSimilarity((LanguageProfilerBuilder) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not calculate a score how well NGramProfiles match each other
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Rwsi\"";
      stringArray0[1] = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Rwsi\"");
      assertFalse(boolean0);
      
      stringArray0[2] = "Could not calculate a score how well NGramProfiles match each other";
      stringArray0[3] = "|";
      stringArray0[4] = "-create";
      String string0 = "aQute.lib.osgi.InstructionFilter";
      stringArray0[5] = "aQute.lib.osgi.InstructionFilter";
      stringArray0[6] = "inn";
      stringArray0[7] = "aQute.lib.osgi.Instruction";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      String string1 = "WG$,~~ Xk%R><";
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 3525);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("Could not create profile, ", 1, 1);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("Could not create profile, ");
      assertEquals("Could not create profile, ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) languageProfilerBuilder0);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Could not create profile, NGramProfile: Could not create profile, \n", stringBuilder0.toString());
      assertEquals("Could not create profile, NGramProfile: Could not create profile, \n", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = new StringBuilder("Could not create profile, ");
      assertEquals("Could not create profile, ", stringBuilder2.toString());
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder2);
      
      languageProfilerBuilder0.analyze(stringBuilder2);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Could not create profile, ", stringBuilder2.toString());
      assertNotSame(stringBuilder2, stringBuilder1);
      assertNotSame(stringBuilder2, stringBuilder0);
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      languageProfilerBuilder0.analyze(stringBuilder0);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Could not create profile, NGramProfile: Could not create profile, \n", stringBuilder0.toString());
      assertNotSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder0);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-1851117573);
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", (-2040949092), (-1851117573));
      assertEquals("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = ".*";
      String string1 = languageProfilerBuilder0.toString();
      assertEquals("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ".*";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]";
      objectArray0[3] = (Object) languageProfilerBuilder0;
      objectArray0[4] = (Object) pipedOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ".*", objectArray0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "..*");
      assertFalse(boolean0);
      
      // Undeclared exception!
      languageProfilerBuilder0.save(printStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = "ch8bW1K+g5lBtVP(";
      stringArray0[2] = "ch8bW1K+g5lBtVP(";
      stringArray0[3] = "aQute.lib.osgi.Instruction";
      stringArray0[4] = ".oMW0*r";
      stringArray0[5] = "FcD|`(Uo85FE[";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder(".");
      assertEquals(".", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)55, (byte)16, (byte)46, (byte)1, (byte) (-22), (byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load(byteArrayInputStream0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("Could not create profile, ", 1, 1);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("Could not create profile, ");
      assertEquals("Could not create profile, ", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) languageProfilerBuilder0);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Could not create profile, NGramProfile: Could not create profile, \n", stringBuilder0.toString());
      assertEquals("Could not create profile, NGramProfile: Could not create profile, \n", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer("Could not create profile, ");
      assertEquals(26, stringBuffer0.length());
      assertEquals("Could not create profile, ", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals(26, stringBuffer0.length());
      assertEquals("Could not create profile, ", stringBuffer0.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(1, 'j');
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Cjould not create profile, NGramProfile: Could not create profile, \n", stringBuilder0.toString());
      assertEquals("Cjould not create profile, NGramProfile: Could not create profile, \n", stringBuilder1.toString());
      assertEquals("Cjould not create profile, NGramProfile: Could not create profile, \n", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder0.toString());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder1.toString());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder2.toString());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotNull(stringBuilder3);
      
      languageProfilerBuilder0.analyze(stringBuilder2);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder0.toString());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder1.toString());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder4 = new StringBuilder("Could not create profile, ");
      assertEquals("Could not create profile, ", stringBuilder4.toString());
      assertFalse(stringBuilder4.equals((Object)stringBuilder1));
      assertFalse(stringBuilder4.equals((Object)stringBuilder3));
      assertFalse(stringBuilder4.equals((Object)stringBuilder0));
      assertFalse(stringBuilder4.equals((Object)stringBuilder2));
      assertNotNull(stringBuilder4);
      
      languageProfilerBuilder0.analyze(stringBuilder4);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Could not create profile, ", stringBuilder4.toString());
      assertNotSame(stringBuilder4, stringBuilder1);
      assertNotSame(stringBuilder4, stringBuilder3);
      assertNotSame(stringBuilder4, stringBuilder0);
      assertNotSame(stringBuilder4, stringBuilder2);
      assertFalse(stringBuilder4.equals((Object)stringBuilder1));
      assertFalse(stringBuilder4.equals((Object)stringBuilder3));
      assertFalse(stringBuilder4.equals((Object)stringBuilder0));
      assertFalse(stringBuilder4.equals((Object)stringBuilder2));
      
      languageProfilerBuilder0.analyze(stringBuilder0);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("\n ,eliforp etaerc ton dluoC :eliforPmarGN ,eliforp etaerc ton dluojC", stringBuilder0.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertFalse(stringBuilder0.equals((Object)stringBuilder4));
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("Could not create profile, ", 1, 0);
      assertEquals("Could not create profile, ", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals("Could not create profile, ", languageProfilerBuilder0.getName());
      assertEquals("Could not create profile, ", languageProfilerBuilder1.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertEquals(1.0000001F, float0, 0.01F);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ".*";
      int int0 = 2;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder(".*", 2, 2);
      assertEquals(".*", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      int int1 = (-313);
      char[] charArray0 = new char[4];
      languageProfilerBuilder0.analyze(stringBuilder1);
      assertEquals(".*", languageProfilerBuilder0.getName());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      charArray0[0] = 'G';
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      charArray0[1] = '~';
      char char0 = 'V';
      charArray0[2] = 'V';
      StringBuffer stringBuffer0 = new StringBuffer(".*");
      assertEquals(2, stringBuffer0.length());
      assertEquals(".*", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals(".*", languageProfilerBuilder0.getName());
      assertEquals(2, stringBuffer0.length());
      assertEquals(".*", stringBuffer0.toString());
      
      String string1 = languageProfilerBuilder0.toString();
      assertEquals(".*", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: .*\n[_f/1/0.16666667]\n[al/1/0.16666667]\n[e_/1/0.16666667]\n[fa/1/0.16666667]\n[ls/1/0.16666667]\n[se/1/0.16666667]\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charArray0[3] = '';
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-313), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -313
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = LanguageProfilerBuilder.FILE_EXTENSION;
      assertEquals("ngp", string0);
      assertNotNull(string0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("ngp");
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "ngp";
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.seq.length());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.seq.toString());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("k{]Wz[E=&mX)&t)0");
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ngp";
      stringArray0[1] = "ngp";
      stringArray0[2] = "ngp";
      stringArray0[3] = "k{]Wz[E=&mX)&t)0";
      stringArray0[4] = "ngp";
      stringArray0[5] = "ngp";
      stringArray0[6] = "k{]Wz[E=&mX)&t)0";
      stringArray0[7] = ".";
      stringArray0[8] = "k{]Wz[E=&mX)&t)0";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string1 = languageProfilerBuilder0.toString();
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: k{]Wz[E=&mX)&t)0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer");
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer");
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "k{]Wz[E=&mX)&t)0");
      assertEquals(16, stringBuffer0.length());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(4, (CharSequence) stringBuffer1);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuilder2);
      
      languageProfilerBuilder1.analyze(stringBuilder2);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder2.toString());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals(1.0000007F, float0, 0.01F);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = ",lQ[Ue$P+eLfD:tD";
      String string0 = "-similarity";
      stringArray0[1] = "-similarity";
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("eF4&Y<Y|Inn w<^e$");
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      //  // Unstable assertion: assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder0.normalize();
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("eF4&Y<Y|Inn w<^e$", 1005);
      //  // Unstable assertion: assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      //  // Unstable assertion: assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      //  // Unstable assertion: assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      //  // Unstable assertion: assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      //  // Unstable assertion: assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      //  // Unstable assertion: assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      //  // Unstable assertion: assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      
      languageProfilerBuilder0.normalize();
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      //  // Unstable assertion: assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      //  // Unstable assertion: assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      //  // Unstable assertion: assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      
      String string0 = languageProfilerBuilder_NGramEntry0.toString();
      //  // Unstable assertion: assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      //  // Unstable assertion: assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      //  // Unstable assertion: assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", string0);
      //  // Unstable assertion: assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "eF4&Y<Y|Inn w<^e$");
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", stringBuilder0.toString());
      //  // Unstable assertion: assertNotNull(stringBuilder0);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder1);
      //  // Unstable assertion: assertSame(stringBuilder1, stringBuilder0);
      //  // Unstable assertion: assertNotNull(stringBuilder1);
      
      languageProfilerBuilder0.analyze(stringBuilder0);
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      //  // Unstable assertion: assertSame(stringBuilder0, stringBuilder1);
      
      OutputStream outputStream0 = null;
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertEquals(23, list0.size());
      //  // Unstable assertion: assertNotNull(list0);
      //  // Unstable assertion: assertFalse(list0.contains(languageProfilerBuilder_NGramEntry0));
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder((String) null);
      //  // Unstable assertion: assertNull(languageProfilerBuilder1.getName());
      //  // Unstable assertion: assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      //  // Unstable assertion: assertNotNull(languageProfilerBuilder1);
      
      List<LanguageProfilerBuilder.NGramEntry> list1 = languageProfilerBuilder1.getSorted();
      //  // Unstable assertion: assertNull(languageProfilerBuilder1.getName());
      //  // Unstable assertion: assertTrue(list1.isEmpty());
      //  // Unstable assertion: assertEquals(0, list1.size());
      //  // Unstable assertion: assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      //  // Unstable assertion: assertNotSame(list1, list0);
      //  // Unstable assertion: assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertNotNull(list1);
      //  // Unstable assertion: assertFalse(list1.contains(languageProfilerBuilder_NGramEntry0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "eF4&Y<Y|Inn w<^e$");
      //  // Unstable assertion: assertEquals(18, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", stringBuffer0.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      String string1 = languageProfilerBuilder0.toString();
      //  // Unstable assertion: assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      //  // Unstable assertion: assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      //  // Unstable assertion: assertEquals("NGramProfile: eF4&Y<Y|Inn w<^e$\n[_y_/2/0.083333336]\n[_e_/1/0.041666668]\n[_ef/1/0.041666668]\n[_f_/1/0.041666668]\n[_in/1/0.041666668]\n[_ja/1/0.041666668]\n[_la/1/0.041666668]\n[_ob/1/0.041666668]\n[_w_/1/0.041666668]\n[ang/1/0.041666668]\n[ava/1/0.041666668]\n[bje/1/0.041666668]\n[ct_/1/0.041666668]\n[ect/1/0.041666668]\n[ef_/1/0.041666668]\n[inn/1/0.041666668]\n[jav/1/0.041666668]\n[jec/1/0.041666668]\n[lan/1/0.041666668]\n[ng_/1/0.041666668]\n[nn_/1/0.041666668]\n[obj/1/0.041666668]\n[va_/1/0.041666668]\n", string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      //  // Unstable assertion: assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1055), (float) 1005);
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1055
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      byteArrayInputStream0.reset();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = byteArrayInputStream0.read(byteArray0, 1, (int) (byte)0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(1, byteArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = LanguageProfilerBuilder.create((String) null, byteArrayInputStream0, "M0Ha9Lft/");
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(languageProfilerBuilder0.getName());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(languageProfilerBuilder0);
      assertEquals(1, byteArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = LanguageProfilerBuilder.create("M0Ha9Lft/", byteArrayInputStream0, (String) null);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("M0Ha9Lft/", languageProfilerBuilder1.getName());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      assertEquals(1, byteArray0.length);
      
      String string0 = languageProfilerBuilder0.getName();
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertNull(string0);
      assertEquals(1, byteArray0.length);
      
      languageProfilerBuilder0.normalize();
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertEquals(1, byteArray0.length);
      
      System.setCurrentTimeMillis((-1L));
      String string1 = languageProfilerBuilder0.toString();
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals("NGramProfile: null\n", string1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertNotNull(string1);
      assertEquals(1, byteArray0.length);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("NGramProfile: null\n", (-1221));
      assertEquals("NGramProfile: null\n", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(19, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-1221), languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry1 = new LanguageProfilerBuilder.NGramEntry("M0Ha9Lft/");
      assertEquals("M0Ha9Lft/", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(10, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertFalse(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertNotNull(languageProfilerBuilder_NGramEntry1);
      
      languageProfilerBuilder_NGramEntry1.seq = (CharSequence) "NGramProfile: null\n";
      assertEquals("NGramProfile: null\n", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals(19, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(19, languageProfilerBuilder_NGramEntry1.seq.length());
      assertEquals("NGramProfile: null\n", languageProfilerBuilder_NGramEntry1.seq.toString());
      
      int int2 = languageProfilerBuilder_NGramEntry0.compareTo(languageProfilerBuilder_NGramEntry1);
      assertEquals("NGramProfile: null\n", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(19, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-1221), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("NGramProfile: null\n", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals(19, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertNotSame(languageProfilerBuilder_NGramEntry1, languageProfilerBuilder_NGramEntry0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      assertTrue(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M0Ha9Lft/";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "SUr.CAek)";
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("SUr.CAek)");
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("SUr.CAek)");
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(10, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("SUr.CAek)", languageProfilerBuilder_NGramEntry0.toString());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(languageProfilerBuilder_NGramEntry0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        languageProfilerBuilder0.save(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-1503L));
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("-score", 1012);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(6, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("-score", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(1012, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry1 = new LanguageProfilerBuilder.NGramEntry("-score");
      assertEquals(6, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals("-score", languageProfilerBuilder_NGramEntry1.toString());
      assertTrue(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertNotNull(languageProfilerBuilder_NGramEntry1);
      
      languageProfilerBuilder_NGramEntry1.seq = (CharSequence) "-score";
      assertEquals(6, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals("-score", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals("-score", languageProfilerBuilder_NGramEntry1.seq.toString());
      assertEquals(6, languageProfilerBuilder_NGramEntry1.seq.length());
      
      languageProfilerBuilder_NGramEntry1.seq = (CharSequence) "-score";
      assertEquals(6, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals("-score", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals("-score", languageProfilerBuilder_NGramEntry1.seq.toString());
      assertEquals(6, languageProfilerBuilder_NGramEntry1.seq.length());
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder((String) null);
      assertNull(languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(6, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("-score", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(1012, languageProfilerBuilder_NGramEntry0.getCount());
      assertNull(languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertTrue(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      
      int int0 = languageProfilerBuilder_NGramEntry0.compareTo(languageProfilerBuilder_NGramEntry1);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(6, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("-score", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(1012, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(6, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals("-score", languageProfilerBuilder_NGramEntry1.toString());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertNotSame(languageProfilerBuilder_NGramEntry1, languageProfilerBuilder_NGramEntry0);
      assertEquals(0, int0);
      assertTrue(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      assertTrue(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("F", 508, 0);
      assertEquals("F", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-28), (byte)54);
      assertEquals(36, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)75, (byte)26, (byte)54, (byte)60, (byte) (-28), (byte) (-128), (byte) (-1), (byte)113}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.create("-score", byteArrayInputStream0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("eF4&Y<Y|Inn w<^e$");
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder0.normalize();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("eF4&Y<Y|Inn w<^e$", 1005);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      
      languageProfilerBuilder0.normalize();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      
      String string0 = languageProfilerBuilder_NGramEntry0.toString();
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals("eF4&Y<Y|Inn w<^e$", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "eF4&Y<Y|Inn w<^e$");
      assertEquals("eF4&Y<Y|Inn w<^e$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      languageProfilerBuilder0.analyze(stringBuilder0);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertEquals("eF4&Y<Y|Inn w<^e$", stringBuilder0.toString());
      
      OutputStream outputStream0 = null;
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(languageProfilerBuilder_NGramEntry0));
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder((String) null);
      assertNull(languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      List<LanguageProfilerBuilder.NGramEntry> list1 = languageProfilerBuilder1.getSorted();
      assertNull(languageProfilerBuilder1.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertNotSame(list1, list0);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(languageProfilerBuilder_NGramEntry0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "eF4&Y<Y|Inn w<^e$");
      assertEquals(18, stringBuffer0.length());
      assertEquals("eF4&Y<Y|Inn w<^e$", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      String string1 = languageProfilerBuilder0.toString();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals("NGramProfile: eF4&Y<Y|Inn w<^e$\n[_y_/2/0.22222222]\n[_e_/1/0.11111111]\n[_ef/1/0.11111111]\n[_in/1/0.11111111]\n[_w_/1/0.11111111]\n[ef_/1/0.11111111]\n[inn/1/0.11111111]\n[nn_/1/0.11111111]\n", string1);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1055), (float) 1005);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1055
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = LanguageProfilerBuilder.FILE_EXTENSION;
      assertEquals("ngp", string0);
      assertNotNull(string0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("ngp");
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      
      String string1 = "k{]Wz[E=&mX)&t)0";
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("k{]Wz[E=&mX)&t)0");
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3126);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-63), (byte)18, (byte)71, (byte) (-41), (byte)0, (byte) (-128), (byte)93, (byte) (-111)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("HJC#q>0LDcRw(");
      assertEquals("HJC#q>0LDcRw(", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      int int0 = (-1807382277);
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.save((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("", 0, (-59));
      assertEquals("", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string0 = languageProfilerBuilder0.getName();
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("");
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "";
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("", languageProfilerBuilder_NGramEntry0.seq.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.seq.length());
      
      float float0 = languageProfilerBuilder_NGramEntry0.getFrequency();
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, float0, 0.01F);
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load(sequenceInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("", (-604));
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-604), languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("SUr.CAek)");
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-604), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "";
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-604), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.seq.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.seq.length());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-603), languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      
      languageProfilerBuilder_NGramEntry0.setProfile((LanguageProfilerBuilder) null);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      
      int int0 = languageProfilerBuilder_NGramEntry0.getCount();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), int0);
      
      int int1 = languageProfilerBuilder_NGramEntry0.size();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry1 = new LanguageProfilerBuilder.NGramEntry("SUr.CAek)");
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(10, languageProfilerBuilder_NGramEntry1.size());
      assertEquals("SUr.CAek)", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertFalse(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertNotNull(languageProfilerBuilder_NGramEntry1);
      
      int int2 = languageProfilerBuilder_NGramEntry0.compareTo(languageProfilerBuilder_NGramEntry1);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(10, languageProfilerBuilder_NGramEntry1.size());
      assertEquals("SUr.CAek)", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertNotSame(languageProfilerBuilder_NGramEntry1, languageProfilerBuilder_NGramEntry0);
      assertEquals((-10), int2);
      assertFalse(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      assertFalse(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      languageProfilerBuilder_NGramEntry0.setProfile((LanguageProfilerBuilder) null);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertFalse(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(languageProfilerBuilder_NGramEntry1));
      
      StringBuilder stringBuilder0 = new StringBuilder("! &I3:p :Z");
      assertEquals("! &I3:p :Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      languageProfilerBuilder0.analyze(stringBuilder0);
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertEquals("! &I3:p :Z", stringBuilder0.toString());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-601), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertFalse(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      
      String string0 = languageProfilerBuilder0.toString();
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: SUr.CAek)\n[_i_/1/0.33333334]\n[_p_/1/0.33333334]\n[_z_/1/0.33333334]\n", string0);
      assertNotNull(string0);
      
      String string1 = languageProfilerBuilder0.getName();
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertEquals("SUr.CAek)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("`Cadt]4of~8nl!", (-36), (-36));
      assertEquals("`Cadt]4of~8nl!", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      MockFile mockFile0 = new MockFile("`Cadt]4of~8nl!");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("`Cadt]4of~8nl!", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("`Cadt]4of~8nl!", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      languageProfilerBuilder0.save(mockFileOutputStream0);
      assertEquals("`Cadt]4of~8nl!", languageProfilerBuilder0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("`Cadt]4of~8nl!", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(97L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("`Cadt]4of~8nl!", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      String string0 = languageProfilerBuilder0.toString();
      assertEquals("`Cadt]4of~8nl!", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: `Cadt]4of~8nl!\n", string0);
      assertNotNull(string0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("`Cadt]4of~8nl!");
      assertEquals(15, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("`Cadt]4of~8nl!", languageProfilerBuilder_NGramEntry0.toString());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NGramProfile: `Cadt]4of~8nl!\n");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder_NGramEntry0.compareTo((LanguageProfilerBuilder.NGramEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      File file0 = MockFile.createTempFile(")lQ[_[$P+eLfD\tD", ")lQ[_[$P+eLfD\tD");
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      int int0 = mockFileInputStream0.read();
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals((-1), int0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = LanguageProfilerBuilder.create(")lQ[_[$P+eLfD\tD", mockFileInputStream0, "aQute.lib.osgi.InstructionFilter");
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ")lQ[_[$P+eLfD\tD");
      assertEquals(15, stringBuffer0.length());
      assertEquals(")lQ[_[$P+eLfD\tD", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertEquals(15, stringBuffer0.length());
      assertEquals(")lQ[_[$P+eLfD\tD", stringBuffer0.toString());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(bufferedOutputStream0);
      
      bufferedOutputStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(objectOutputStream0);
      
      languageProfilerBuilder0.save(objectOutputStream0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertEquals(181, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\uFFFD# NgramProfile generated at Thu Jan 01 00:00:00 GMT 1970 for Apache Tika Language Identification\n$P+ 1\n)lQ 1\n+eL 1\nD\tD 1\nLfD 1\nP+e 1\nQ[_ 1\n[$P 1\n[_[ 1\n_[$ 1\neLf 1\nfD\t 1\nlQ[ 1\n", byteArrayOutputStream0.toString());
      
      String string0 = languageProfilerBuilder0.getName();
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertEquals(")lQ[_[$P+eLfD\tD", string0);
      assertNotNull(string0);
      
      List<LanguageProfilerBuilder.NGramEntry> list1 = languageProfilerBuilder0.getSorted();
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertSame(list1, list0);
      assertNotNull(list1);
      
      languageProfilerBuilder0.load(mockFileInputStream0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      
      List<LanguageProfilerBuilder.NGramEntry> list2 = languageProfilerBuilder0.getSorted();
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertSame(list2, list1);
      assertSame(list2, list0);
      assertNotNull(list2);
      
      languageProfilerBuilder0.load(mockFileInputStream0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-4), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      
      languageProfilerBuilder0.load(mockFileInputStream0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-5), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-5), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertEquals(15, stringBuffer0.length());
      assertEquals(")lQ[_[$P+eLfD\tD", stringBuffer0.toString());
      
      String string1 = languageProfilerBuilder0.toString();
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/)lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.toString());
      assertEquals(")lQ[_[$P+eLfD\tD0)lQ[_[$P+eLfD\tD", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals((-5), mockFileInputStream0.available());
      assertEquals(")lQ[_[$P+eLfD\tD", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: )lQ[_[$P+eLfD\tD\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aQute.lib.osgi.InstructionFilter";
      stringArray0[1] = ")lQ[_[$P+eLfD\tD";
      stringArray0[2] = ")lQ[_[$P+eLfD\tD";
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9";
      stringArray0[1] = "";
      stringArray0[2] = "pq.5rVnnc{+m9%u4";
      stringArray0[3] = "z`/Ha";
      stringArray0[4] = "";
      stringArray0[5] = "2";
      stringArray0[6] = "";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("z`/Ha");
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("z`/Ha", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(5, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("z`/Ha", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(5, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("z`/Ha", (-1), (-1));
      assertEquals("z`/Ha", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("z`/Ha", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(5, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("z`/Ha", languageProfilerBuilder0.getName());
      
      LanguageProfilerBuilder languageProfilerBuilder1 = languageProfilerBuilder_NGramEntry0.getProfile();
      assertEquals("z`/Ha", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(5, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("z`/Ha", languageProfilerBuilder1.getName());
      assertSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertNotNull(languageProfilerBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder1.add(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry((CharSequence) null);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      String string0 = "o<*b ,8KY5";
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("o<*b ,8KY5");
      assertEquals("o<*b ,8KY5", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o<*b ,8KY5", false);
      assertNotNull(mockFileOutputStream0);
      
      languageProfilerBuilder0.save(mockFileOutputStream0);
      assertEquals("o<*b ,8KY5", languageProfilerBuilder0.getName());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(3423, 'i');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", 1683);
      assertEquals("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(1683, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(125, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      String string0 = null;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder((String) null);
      assertNull(languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      InputStream inputStream0 = null;
      String string1 = "0";
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("eF4&Y<Y|Inn w<^e$", (-1978), 0);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder0.normalize();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      
      int int0 = 1005;
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("eF4&Y<Y|Inn w<^e$", 1005);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      
      String string0 = languageProfilerBuilder_NGramEntry0.toString();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(1005, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(18, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("eF4&Y<Y|Inn w<^e$", string0);
      assertNotNull(string0);
      
      languageProfilerBuilder0.normalize();
      assertEquals("eF4&Y<Y|Inn w<^e$", languageProfilerBuilder0.getName());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "eF4&Y<Y|Inn w<^e$");
      assertEquals("eF4&Y<Y|Inn w<^e$", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.analyze(stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("`xVK-(kfGL%*lV(F]'v", 3256, 4460);
      assertEquals("`xVK-(kfGL%*lV(F]'v", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("F=IEcnP;om>j&<u,<");
      assertEquals("F=IEcnP;om>j&<u,<", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals("`xVK-(kfGL%*lV(F]'v", languageProfilerBuilder0.getName());
      assertEquals("F=IEcnP;om>j&<u,<", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("\n", 2, 2);
      assertEquals("\n", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string0 = "";
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("\n", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "L{H4I6D%3Jn'S+";
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("L{H4I6D%3Jn'S+", 4602, 4602);
      assertEquals("L{H4I6D%3Jn'S+", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder0.normalize();
      assertEquals("L{H4I6D%3Jn'S+", languageProfilerBuilder0.getName());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        languageProfilerBuilder0.load(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-2214));
      assertEquals((-2214), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-58), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = LanguageProfilerBuilder.create("gC9X'K", byteArrayInputStream0, "gC9X'K");
      assertEquals((-2214), byteArrayInputStream0.available());
      assertEquals("gC9X'K", languageProfilerBuilder0.getName());
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-58), (byte)0}, byteArray0);
      assertNotNull(languageProfilerBuilder0);
      assertEquals(7, byteArray0.length);
      
      String string0 = languageProfilerBuilder0.getName();
      assertEquals((-2214), byteArrayInputStream0.available());
      assertEquals("gC9X'K", languageProfilerBuilder0.getName());
      assertEquals("gC9X'K", string0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)0, (byte)0, (byte) (-1), (byte)0, (byte) (-58), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("");
      assertEquals("", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string0 = languageProfilerBuilder0.getName();
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = languageProfilerBuilder0.toString();
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: \n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", 0);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(66, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(66, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(66, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(66, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(66, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(2, languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "";
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(2, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.seq.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.seq.length());
      
      String string2 = languageProfilerBuilder_NGramEntry0.toString();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(2, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence charSequence0 = languageProfilerBuilder_NGramEntry0.getSeq();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(2, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("");
      assertEquals("", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.add((StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder((String) null, 0, (-275));
      assertNull(languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.normalize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("", (-604));
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-604), languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("SUr.CAek)");
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-604), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "";
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-604), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.seq.length());
      assertEquals("", languageProfilerBuilder_NGramEntry0.seq.toString());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-603), languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      
      languageProfilerBuilder_NGramEntry0.setProfile((LanguageProfilerBuilder) null);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      
      int int0 = languageProfilerBuilder_NGramEntry0.getCount();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals((-602), int0);
      
      int int1 = languageProfilerBuilder_NGramEntry0.size();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry1 = new LanguageProfilerBuilder.NGramEntry("SUr.CAek)");
      assertEquals(10, languageProfilerBuilder_NGramEntry1.size());
      assertEquals("SUr.CAek)", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertFalse(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertNotNull(languageProfilerBuilder_NGramEntry1);
      
      int int2 = languageProfilerBuilder_NGramEntry0.compareTo(languageProfilerBuilder_NGramEntry1);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(10, languageProfilerBuilder_NGramEntry1.size());
      assertEquals("SUr.CAek)", languageProfilerBuilder_NGramEntry1.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry1.getCount());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertNotSame(languageProfilerBuilder_NGramEntry1, languageProfilerBuilder_NGramEntry0);
      assertEquals((-10), int2);
      assertFalse(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      assertFalse(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      languageProfilerBuilder_NGramEntry0.setProfile((LanguageProfilerBuilder) null);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-602), languageProfilerBuilder_NGramEntry0.getCount());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertFalse(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(languageProfilerBuilder_NGramEntry0));
      
      StringBuilder stringBuilder0 = new StringBuilder("! &I3:p :Z");
      assertEquals("! &I3:p :Z", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      languageProfilerBuilder0.analyze(stringBuilder0);
      assertEquals("SUr.CAek)", languageProfilerBuilder0.getName());
      assertEquals("! &I3:p :Z", stringBuilder0.toString());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-601), languageProfilerBuilder_NGramEntry0.getCount());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertFalse(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(333, (CharSequence) "! &I3:p :Z", 333, 333);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 333
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("}`1ua", (-1));
      assertEquals(5, languageProfilerBuilder_NGramEntry0.size());
      assertEquals((-1), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("}`1ua", languageProfilerBuilder_NGramEntry0.toString());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("}`1ua", 0, (-1833));
      assertEquals("}`1ua", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string0 = languageProfilerBuilder0.toString();
      assertEquals("}`1ua", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: }`1ua\n", string0);
      assertNotNull(string0);
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("}`1ua", languageProfilerBuilder0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(languageProfilerBuilder_NGramEntry0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "}`1ua");
      assertEquals(5, stringBuffer0.length());
      assertEquals("}`1ua", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals("}`1ua", languageProfilerBuilder0.getName());
      assertEquals(5, stringBuffer0.length());
      assertEquals("}`1ua", stringBuffer0.toString());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "NGramProfile: }`1ua\n");
      assertEquals("NGramProfile: }`1ua\n", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.analyze(stringBuilder0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("#A_rNj6u[`U", 3776, 3776);
      assertEquals("#A_rNj6u[`U", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(3776);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals("#A_rNj6u[`U", languageProfilerBuilder0.getName());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("#A_rNj6u[`U", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<LanguageProfilerBuilder.NGramEntry> list1 = languageProfilerBuilder0.getSorted();
      assertEquals("#A_rNj6u[`U", languageProfilerBuilder0.getName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("CVS|.svn|.git", 4000);
      assertEquals("CVS|.svn|.git", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(13, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(4000, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      int int0 = languageProfilerBuilder_NGramEntry0.getCount();
      assertEquals("CVS|.svn|.git", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(13, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(4000, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(4000, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("new profile ", 2810, 2810);
      assertEquals("new profile ", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2810, (byte)0);
      assertEquals((-2809), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      languageProfilerBuilder0.load(byteArrayInputStream0);
      assertEquals("new profile ", languageProfilerBuilder0.getName());
      assertEquals((-2809), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1028, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1028
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2163);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)15, (byte) (-96), (byte)0, (byte)0, (byte) (-84), (byte)35, (byte) (-46), (byte) (-116)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      
      try { 
        LanguageProfilerBuilder.create("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", byteArrayInputStream0, "1TuA`(_q");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create profile, 1TuA`(_q
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-70);
      byte byte0 = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-69);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-69), (byte)16, (byte)107, (byte) (-81), (byte) (-70), (byte)113, (byte) (-69)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.create((String) null, byteArrayInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("M9GrQ0\"}r9", (-155));
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-155), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("M9GrQ0\"}r9", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(10, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      int int0 = languageProfilerBuilder_NGramEntry0.size();
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-155), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("M9GrQ0\"}r9", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(10, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(10, int0);
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-154), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("M9GrQ0\"}r9", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(10, languageProfilerBuilder_NGramEntry0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M9GrQ0\"}r9";
      stringArray0[1] = "M9GrQ0\"}r9";
      stringArray0[2] = "M9GrQ0\"}r9";
      stringArray0[3] = "M9GrQ0\"}r9";
      stringArray0[4] = "q<kg";
      stringArray0[5] = " for Apache Tika Language Identification\n";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean0 = languageProfilerBuilder_NGramEntry0.equals(" for Apache Tika Language Identification\n");
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals((-154), languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("M9GrQ0\"}r9", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(10, languageProfilerBuilder_NGramEntry0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("", 3032);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3032, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      CharSequence charSequence0 = languageProfilerBuilder_NGramEntry0.getSeq();
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3032, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("", 2365);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(2365, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("", 2365, 2365);
      assertEquals("", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(2365, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder0.getName());
      
      int int0 = languageProfilerBuilder_NGramEntry0.size();
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(2365, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0, int0);
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(2366, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("}@p{Mj);d`{|,him9", (-1879), 42);
      assertEquals("}@p{Mj);d`{|,him9", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("", 42, 1392);
      assertEquals("", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals("}@p{Mj);d`{|,him9", languageProfilerBuilder0.getName());
      assertEquals("", languageProfilerBuilder1.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1579));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("CVS|.svn|.git", 16, 16);
      assertEquals("CVS|.svn|.git", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string0 = languageProfilerBuilder0.toString();
      assertEquals("CVS|.svn|.git", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: CVS|.svn|.git\n", string0);
      assertNotNull(string0);
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("CVS|.svn|.git", languageProfilerBuilder0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Jm'L,W\"NR-Y$\"";
      stringArray0[1] = "presence:";
      stringArray0[2] = "]XXrFw&;";
      stringArray0[3] = "/4X8\"I~:~XZXE";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("A$i=)/d#");
      assertEquals("A$i=)/d#", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      PipedOutputStream pipedOutputStream0 = null;
      int int0 = (-544);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        languageProfilerBuilder0.load(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("");
      assertEquals("", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("", 0, 0);
      assertEquals("", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("", languageProfilerBuilder1.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("");
      assertEquals("", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("", 0);
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = languageProfilerBuilder_NGramEntry0.getProfile();
      assertEquals("", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.size());
      assertNull(languageProfilerBuilder1);
      
      try { 
        languageProfilerBuilder0.getSimilarity((LanguageProfilerBuilder) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not calculate a score how well NGramProfiles match each other
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-28));
      assertEquals((-28), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = LanguageProfilerBuilder.create("", byteArrayInputStream0, "");
      assertEquals((-28), byteArrayInputStream0.available());
      assertEquals("", languageProfilerBuilder0.getName());
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertNotNull(languageProfilerBuilder0);
      assertEquals(4, byteArray0.length);
      
      String string0 = languageProfilerBuilder0.toString();
      assertEquals((-28), byteArrayInputStream0.available());
      assertEquals("", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: \n", string0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-28), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("[", 63, 63);
      assertEquals("[", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.analyze((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("L?<qldd");
      assertEquals("L?<qldd", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string0 = languageProfilerBuilder0.toString();
      assertEquals("L?<qldd", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: L?<qldd\n", string0);
      assertNotNull(string0);
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertEquals("L?<qldd", languageProfilerBuilder0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("NGramProfile: L?<qldd\n");
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("NGramProfile: L?<qldd\n", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(22, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      float float0 = languageProfilerBuilder_NGramEntry0.getFrequency();
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("NGramProfile: L?<qldd\n", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(22, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, float0, 0.01F);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "NGramProfile: L?<qldd\n");
      assertEquals("NGramProfile: L?<qldd\n", stringBuffer0.toString());
      assertEquals(22, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals("L?<qldd", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: L?<qldd\n", stringBuffer0.toString());
      assertEquals(22, stringBuffer0.length());
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry1 = new LanguageProfilerBuilder.NGramEntry("NGramProfile: L?<qldd\n", 969);
      assertEquals(22, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(969, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals("NGramProfile: L?<qldd\n", languageProfilerBuilder_NGramEntry1.toString());
      assertTrue(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
      assertNotNull(languageProfilerBuilder_NGramEntry1);
      
      int int0 = languageProfilerBuilder_NGramEntry0.compareTo(languageProfilerBuilder_NGramEntry1);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("NGramProfile: L?<qldd\n", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(22, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(22, languageProfilerBuilder_NGramEntry1.size());
      assertEquals(969, languageProfilerBuilder_NGramEntry1.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry1.getFrequency(), 0.01F);
      assertEquals("NGramProfile: L?<qldd\n", languageProfilerBuilder_NGramEntry1.toString());
      assertNotSame(languageProfilerBuilder_NGramEntry0, languageProfilerBuilder_NGramEntry1);
      assertNotSame(languageProfilerBuilder_NGramEntry1, languageProfilerBuilder_NGramEntry0);
      assertEquals(0, int0);
      assertTrue(languageProfilerBuilder_NGramEntry0.equals((Object)languageProfilerBuilder_NGramEntry1));
      assertTrue(languageProfilerBuilder_NGramEntry1.equals((Object)languageProfilerBuilder_NGramEntry0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("Eg", 384, 384);
      assertEquals("Eg", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Eg");
      assertEquals(2, stringBuffer0.length());
      assertEquals("Eg", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      languageProfilerBuilder0.add(stringBuffer0);
      assertEquals("Eg", languageProfilerBuilder0.getName());
      assertEquals(2, stringBuffer0.length());
      assertEquals("Eg", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String string1 = " was created.";
      try { 
        LanguageProfilerBuilder.create("", pipedInputStream0, " was created.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create profile, Pipe not connected
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      try { 
        LanguageProfilerBuilder.create("Similarity is ", sequenceInputStream0, "4;<P$GQ)DV&g?7z F[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create profile, Pipe not connected
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder(">q]<]tNM 28? Fq", 0, 0);
      assertEquals(">q]<]tNM 28? Fq", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      File file0 = MockFile.createTempFile("..*", "n,hY7tfdz9YxXY}i");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = LanguageProfilerBuilder.create(":H{<lgLsdQ&0.`YWT", mockFileInputStream0, "pc:v!_jm6W");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals(":H{<lgLsdQ&0.`YWT", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      languageProfilerBuilder0.load(mockFileInputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals(":H{<lgLsdQ&0.`YWT", languageProfilerBuilder0.getName());
      
      LanguageProfilerBuilder languageProfilerBuilder1 = LanguageProfilerBuilder.create("5% W", mockFileInputStream0, ".*");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals("5% W", languageProfilerBuilder1.getName());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      String string0 = languageProfilerBuilder1.toString();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals("5% W", languageProfilerBuilder1.getName());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertEquals("NGramProfile: 5% W\n", string0);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(string0);
      
      String string1 = languageProfilerBuilder0.toString();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals(":H{<lgLsdQ&0.`YWT", languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals("NGramProfile: :H{<lgLsdQ&0.`YWT\n", string1);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry(".*", 63);
      assertEquals(63, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(2, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(".*", languageProfilerBuilder_NGramEntry0.toString());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = languageProfilerBuilder_NGramEntry0.equals(pipedInputStream0);
      assertEquals(63, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(2, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(".*", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      boolean boolean1 = languageProfilerBuilder_NGramEntry0.equals((Object) null);
      assertEquals(63, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(2, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(".*", languageProfilerBuilder_NGramEntry0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = languageProfilerBuilder_NGramEntry0.equals(object0);
      assertEquals(63, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(2, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(".*", languageProfilerBuilder_NGramEntry0.toString());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = languageProfilerBuilder0.toString();
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals(":H{<lgLsdQ&0.`YWT", languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals("NGramProfile: :H{<lgLsdQ&0.`YWT\n", string2);
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      System.setCurrentTimeMillis(96L);
      LanguageProfilerBuilder languageProfilerBuilder2 = LanguageProfilerBuilder.create("n,hY7tfdz9YxXY}i", mockFileInputStream0, ":H{<lgLsdQ&0.`YWT");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/..*0n,hY7tfdz9YxXY}i", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("..*0n,hY7tfdz9YxXY}i", file0.getName());
      assertEquals((-4), mockFileInputStream0.available());
      assertEquals("n,hY7tfdz9YxXY}i", languageProfilerBuilder2.getName());
      assertNotSame(languageProfilerBuilder2, languageProfilerBuilder1);
      assertNotSame(languageProfilerBuilder2, languageProfilerBuilder0);
      assertFalse(languageProfilerBuilder2.equals((Object)languageProfilerBuilder1));
      assertFalse(languageProfilerBuilder2.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Could not create profile, ";
      String string0 = "5U;&(Nd5iw}0\\H;j ";
      stringArray0[1] = "5U;&(Nd5iw}0H;j ";
      stringArray0[2] = "Eh-N'h9*2g";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[3] = "-simjlarity";
      stringArray0[4] = "=vCG6IV)0q7}h";
      stringArray0[5] = "NGramProfile: CVS|.svn|.git\n";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      InputStream inputStream0 = null;
      try { 
        LanguageProfilerBuilder.create("inn", (InputStream) null, "Mk`W:<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create profile, Stream closed
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = null;
      int int0 = 2099;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder((String) null, 2099, 2099);
      assertNull(languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String string1 = languageProfilerBuilder0.toString();
      assertNull(languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: null\n", string1);
      assertNotNull(string1);
      
      List<LanguageProfilerBuilder.NGramEntry> list0 = languageProfilerBuilder0.getSorted();
      assertNull(languageProfilerBuilder0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = null;
      String string3 = "9`K(XvI*#ll,VOJao";
      String string4 = "org.apache.tika.language.LanguageProfilerBuilder";
      String string5 = ".*";
      try { 
        MockURI.URI("org.apache.tika.language.LanguageProfilerBuilder", (String) null, ".*", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.apache.tika.language.LanguageProfilerBuilder:.*
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "-create";
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = LanguageProfilerBuilder.FILE_EXTENSION;
      assertEquals("ngp", string0);
      assertNotNull(string0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("ngp");
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "ngp";
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.seq.length());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.seq.toString());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("k{]Wz[E=&mX)&t)0");
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ngp";
      stringArray0[1] = "ngp";
      stringArray0[2] = "ngp";
      stringArray0[3] = "k{]Wz[E=&mX)&t)0";
      stringArray0[4] = "ngp";
      stringArray0[5] = "ngp";
      stringArray0[6] = "k{]Wz[E=&mX)&t)0";
      stringArray0[7] = ".";
      stringArray0[8] = "k{]Wz[E=&mX)&t)0";
      String string1 = languageProfilerBuilder0.toString();
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: k{]Wz[E=&mX)&t)0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer");
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer");
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "k{]Wz[E=&mX)&t)0");
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(4, (CharSequence) stringBuffer1);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuilder2);
      
      languageProfilerBuilder1.analyze(stringBuilder2);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder2.toString());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals(1.0000007F, float0, 0.01F);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = LanguageProfilerBuilder.FILE_EXTENSION;
      assertEquals("ngp", string0);
      assertNotNull(string0);
      
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("ngp");
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertNotNull(languageProfilerBuilder_NGramEntry0);
      
      languageProfilerBuilder_NGramEntry0.seq = (CharSequence) "ngp";
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals(0, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.seq.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.seq.length());
      
      languageProfilerBuilder_NGramEntry0.inc();
      assertEquals(1, languageProfilerBuilder_NGramEntry0.getCount());
      assertEquals(0.0F, languageProfilerBuilder_NGramEntry0.getFrequency(), 0.01F);
      assertEquals("ngp", languageProfilerBuilder_NGramEntry0.toString());
      assertEquals(3, languageProfilerBuilder_NGramEntry0.size());
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("k{]Wz[E=&mX)&t)0");
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ngp";
      stringArray0[1] = "ngp";
      stringArray0[2] = "ngp";
      stringArray0[3] = "k{]Wz[E=&mX)&t)0";
      stringArray0[4] = "ngp";
      stringArray0[5] = "ngp";
      stringArray0[6] = "k{]Wz[E=&mX)&t)0";
      stringArray0[7] = ".";
      stringArray0[8] = "k{]Wz[E=&mX)&t)0";
      String string1 = languageProfilerBuilder0.toString();
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertEquals("NGramProfile: k{]Wz[E=&mX)&t)0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer");
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertNotNull(languageProfilerBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer");
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "k{]Wz[E=&mX)&t)0");
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuffer stringBuffer1 = new StringBuffer("ngp");
      assertEquals(3, stringBuffer1.length());
      assertEquals("ngp", stringBuffer1.toString());
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuffer1);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(4, (CharSequence) stringBuffer1);
      assertEquals("org.ngpapache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("org.ngpapache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertEquals(3, stringBuffer1.length());
      assertEquals("ngp", stringBuffer1.toString());
      assertEquals("org.ngpapache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertNotNull(stringBuilder2);
      
      languageProfilerBuilder1.analyze(stringBuilder2);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertEquals("org.ngpapache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder0.toString());
      assertEquals("k{]Wz[E=&mX)&t)0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals("org.ngpapache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder1.toString());
      assertEquals(3, stringBuffer1.length());
      assertEquals("ngp", stringBuffer1.toString());
      assertEquals("org.ngpapache.tika.language.LanguageProfilerBuilder$QuickStringBufferk{]Wz[E=&mX)&t)0", stringBuilder2.toString());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals("org.apache.tika.language.LanguageProfilerBuilder$QuickStringBuffer", languageProfilerBuilder1.getName());
      assertEquals("k{]Wz[E=&mX)&t)0", languageProfilerBuilder0.getName());
      assertNotSame(languageProfilerBuilder1, languageProfilerBuilder0);
      assertNotSame(languageProfilerBuilder0, languageProfilerBuilder1);
      assertEquals(1.0000005F, float0, 0.01F);
      assertFalse(languageProfilerBuilder1.equals((Object)languageProfilerBuilder0));
      assertFalse(languageProfilerBuilder0.equals((Object)languageProfilerBuilder1));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("-similarity", 864, 864);
      assertEquals("-similarity", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-similarity";
      stringArray0[1] = "-similarity";
      stringArray0[2] = "-similarity";
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "FGXTyG=!=\\b";
      int int0 = 16;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      int int1 = 16;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("FGXTyG=!=\b", 16, 16);
      assertEquals("FGXTyG=!=\b", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(">");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "-=Ah";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("-=Ah", 0, 5);
      assertEquals("-=Ah", languageProfilerBuilder0.getName());
      assertNotNull(languageProfilerBuilder0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load(byteArrayInputStream0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("Could not create profile, ", 1, 1);
      StringBuilder stringBuilder0 = new StringBuilder("Could not create profile, ");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) languageProfilerBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer("Could not create profile, ");
      languageProfilerBuilder0.add(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(1, 'v');
      stringBuilder2.reverse();
      languageProfilerBuilder0.analyze(stringBuilder2);
      StringBuilder stringBuilder3 = new StringBuilder("Could not create profile, ");
      languageProfilerBuilder0.analyze(stringBuilder3);
      languageProfilerBuilder0.analyze(stringBuilder0);
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("Could not create profile, ", 1, 0);
      float float0 = languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      assertEquals(1.0000001F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("SF");
      languageProfilerBuilder0.normalize();
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("SF");
      StringBuffer stringBuffer0 = new StringBuffer("SF");
      languageProfilerBuilder1.add(stringBuffer0);
      languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      languageProfilerBuilder0.toString();
      String string0 = LanguageProfilerBuilder.FILE_EXTENSION;
      languageProfilerBuilder0.getSorted();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-825), (-825));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".";
      stringArray0[1] = "ch8bW1K+g5lBtVP(";
      stringArray0[2] = "-score";
      stringArray0[3] = "aQute.lib.osgi.Instruction";
      stringArray0[4] = ".oMW0*r";
      stringArray0[5] = "FcD|`(Uo85FE[";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "u<$*dF&#ETGHX";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "u<$*dF&#ETGHX";
      LanguageProfilerBuilder.main(stringArray0);
      LanguageProfilerBuilder.main(stringArray0);
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("u<$*dF&#ETGHX");
      languageProfilerBuilder_NGramEntry0.getProfile();
      StringBuilder stringBuilder0 = new StringBuilder(2235);
      StringBuilder stringBuilder1 = stringBuilder0.append("n15iAofe");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(2235);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-113), 'S');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("/bk~yd]rI+2#=nBAQ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-61);
      byteArray1[5] = (byte) (-1);
      byteArrayInputStream0.read(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load(pushbackInputStream0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2163);
      byteArrayInputStream0.close();
      try { 
        LanguageProfilerBuilder.create("Usage: NGramProfile [-create profilename filename encoding] [-similarity file1 file2] [-score profile-name filename encoding]", byteArrayInputStream0, "1TuA`(_q");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not create profile, 1TuA`(_q
         //
         verifyException("org.apache.tika.language.LanguageProfilerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      File file0 = MockFile.createTempFile("t''X?>?^ ", "t''X?>?^ ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.read();
      LanguageProfilerBuilder languageProfilerBuilder0 = LanguageProfilerBuilder.create("t''X?>?^ ", mockFileInputStream0, "aQute.lib.osgi.InstructionFilter");
      languageProfilerBuilder0.getSorted();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "t''X?>?^ ");
      languageProfilerBuilder0.add(stringBuffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      bufferedOutputStream0.flush();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      languageProfilerBuilder0.save(objectOutputStream0);
      languageProfilerBuilder0.getName();
      languageProfilerBuilder0.getSorted();
      languageProfilerBuilder0.load(mockFileInputStream0);
      languageProfilerBuilder0.getSorted();
      languageProfilerBuilder0.load(mockFileInputStream0);
      languageProfilerBuilder0.load(mockFileInputStream0);
      languageProfilerBuilder0.add(stringBuffer0);
      languageProfilerBuilder0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aQute.lib.osgi.InstructionFilter";
      stringArray0[1] = "t''X?>?^ ";
      stringArray0[2] = "t''X?>?^ ";
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        LanguageProfilerBuilder.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("eF4&Y<Y|Inn w<^e$");
      languageProfilerBuilder0.normalize();
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("eF4&Y<Y|Inn w<^e$", 1005);
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      languageProfilerBuilder0.normalize();
      languageProfilerBuilder_NGramEntry0.setProfile(languageProfilerBuilder0);
      languageProfilerBuilder_NGramEntry0.toString();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "eF4&Y<Y|Inn w<^e$");
      stringBuilder0.append('P');
      languageProfilerBuilder0.analyze(stringBuilder0);
      languageProfilerBuilder0.getSorted();
      languageProfilerBuilder0.getSorted();
      languageProfilerBuilder0.toString();
      languageProfilerBuilder0.getSimilarity(languageProfilerBuilder0);
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.save((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = LanguageProfilerBuilder.FILE_EXTENSION;
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("k{]Wz[E=&mX)&t)0");
      languageProfilerBuilder0.toString();
      LanguageProfilerBuilder languageProfilerBuilder1 = new LanguageProfilerBuilder("k{]Wz[E=&mX)&t)0");
      languageProfilerBuilder0.getSimilarity(languageProfilerBuilder1);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1854572146));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 347);
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("-score", (-819), 2);
      languageProfilerBuilder0.getName();
      // Undeclared exception!
      try { 
        languageProfilerBuilder0.load((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LanguageProfilerBuilder languageProfilerBuilder0 = new LanguageProfilerBuilder("SUr.CAek)");
      LanguageProfilerBuilder.NGramEntry languageProfilerBuilder_NGramEntry0 = new LanguageProfilerBuilder.NGramEntry("SUr.CAek)");
      languageProfilerBuilder0.getSorted();
      StringBuilder stringBuilder0 = new StringBuilder("! &I3:p 7:Z");
      languageProfilerBuilder0.analyze(stringBuilder0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      String[] stringArray0 = new String[8];
      sequenceInputStream0.mark(333);
      stringArray0[0] = "SUr.CAek)";
      stringArray0[1] = "L{S3a%$7[`}afX+9";
      stringArray0[2] = "SUr.CAek)";
      stringArray0[3] = "! &I3:p 7:Z";
      languageProfilerBuilder0.load(bufferedInputStream0);
      stringArray0[4] = "! &I3:p 7:Z";
      stringArray0[5] = "";
      stringArray0[6] = "L{S3a%$7[`}afX+9";
      stringArray0[7] = "L{S3a%$7[`}afX+9";
      LanguageProfilerBuilder.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }
}
