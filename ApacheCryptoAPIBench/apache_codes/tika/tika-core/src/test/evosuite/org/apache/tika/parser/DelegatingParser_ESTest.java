/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:54:23 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.util.Set;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.parser.CryptoParserTest;
import org.apache.tika.parser.DelegatingParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.sax.BasicContentHandlerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatingParser_ESTest extends DelegatingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("");
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = cryptoParserTest_CryptoParserImpl0.getSupportedTypes(parseContext0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      Parser parser0 = delegatingParser0.getDelegateParser(parseContext0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("");
      ParseContext parseContext0 = new ParseContext();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Metadata metadata0 = new Metadata();
      try { 
        cryptoParserTest_CryptoParserImpl0.parse((InputStream) null, (ContentHandler) xMLFilterImpl0, metadata0, parseContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to decrypt document stream
         //
         verifyException("org.apache.tika.parser.CryptoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.HTML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 0);
      ContentHandler contentHandler0 = basicContentHandlerFactory0.getNewContentHandler();
      ParseContext parseContext0 = new ParseContext();
      try { 
        delegatingParser0.parse((InputStream) null, contentHandler0, metadata0, parseContext0);
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // Your document contained more than 0 characters, and so your requested limit has been reached. To receive the full text of the document, increase your limit. (Text up to the limit is however available).
         //
         verifyException("org.apache.tika.sax.WriteOutContentHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ParseContext parseContext0 = new ParseContext();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        delegatingParser0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.ContentHandlerDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      // Undeclared exception!
      try { 
        delegatingParser0.getDelegateParser((ParseContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.DelegatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      delegatingParser0.parse((InputStream) dataInputStream0, (ContentHandler) defaultHandler2_0, metadata0, parseContext0);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DelegatingParser delegatingParser0 = new DelegatingParser();
      // Undeclared exception!
      try { 
        delegatingParser0.getSupportedTypes((ParseContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.DelegatingParser", e);
      }
  }
}
