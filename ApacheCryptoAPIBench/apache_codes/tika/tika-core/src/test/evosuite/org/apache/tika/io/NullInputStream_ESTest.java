/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:40:17 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import org.apache.tika.io.NullInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NullInputStream_ESTest extends NullInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L), true, false);
      nullInputStream0.mark(0);
      nullInputStream0.reset();
      assertEquals((-1584L), nullInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1458L);
      byte[] byteArray0 = new byte[3];
      nullInputStream0.read(byteArray0);
      nullInputStream0.mark((-929));
      try { 
        nullInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Marked position [3] is no longer valid - passed the read limit [-929]
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(364L);
      byte[] byteArray0 = new byte[4];
      int int0 = nullInputStream0.read(byteArray0, 0, 364);
      assertEquals(364L, nullInputStream0.getPosition());
      assertEquals(364, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L), true, false);
      int int0 = nullInputStream0.read();
      assertEquals(1L, nullInputStream0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1L);
      int int0 = nullInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1L), true, true);
      long long0 = nullInputStream0.skip((-1L));
      assertEquals((-1L), long0);
      
      int int0 = nullInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L), true, false);
      nullInputStream0.processBytes((byte[]) null, 0, (-1584));
      assertEquals((-1584L), nullInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(3811L, false, false);
      long long0 = nullInputStream0.skip((byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(18L);
      byte[] byteArray0 = new byte[2];
      int int0 = nullInputStream0.read(byteArray0, (-1245), 0);
      assertEquals(0, int0);
      assertEquals(0L, nullInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(214L, true, true);
      byte[] byteArray0 = new byte[0];
      int int0 = nullInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L), true, false);
      int int0 = nullInputStream0.processByte();
      assertEquals((-1584L), nullInputStream0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1L, false, false);
      nullInputStream0.markSupported();
      assertEquals(1L, nullInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, false, false);
      long long0 = nullInputStream0.getSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(18L);
      long long0 = nullInputStream0.getSize();
      assertEquals(18L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1L);
      byte[] byteArray0 = new byte[6];
      nullInputStream0.read(byteArray0, (int) (byte)42, 2631);
      long long0 = nullInputStream0.getPosition();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1L);
      byte[] byteArray0 = new byte[6];
      nullInputStream0.read(byteArray0, (int) (byte)42, (int) (byte) (-31));
      long long0 = nullInputStream0.getPosition();
      assertEquals(32, nullInputStream0.available());
      assertEquals((-31L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, false, true);
      byte[] byteArray0 = new byte[6];
      try { 
        nullInputStream0.read(byteArray0, (int) (byte) (-1), (int) (byte)47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      // Undeclared exception!
      try { 
        nullInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, true, true);
      byte[] byteArray0 = new byte[0];
      try { 
        nullInputStream0.read(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L, true, true);
      try { 
        nullInputStream0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(3811L, false, false);
      byte[] byteArray0 = new byte[3];
      nullInputStream0.skip(4029L);
      int int0 = nullInputStream0.read(byteArray0, (-1785), (int) (byte) (-1));
      assertEquals(3811L, nullInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1L, false, false);
      byte[] byteArray0 = new byte[2];
      nullInputStream0.skip(2871L);
      nullInputStream0.skip(2871L);
      try { 
        nullInputStream0.read(byteArray0, 1, (int) (byte) (-105));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1L, true, true);
      nullInputStream0.read();
      try { 
        nullInputStream0.skip(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(150L, false, true);
      // Undeclared exception!
      try { 
        nullInputStream0.reset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Mark not supported
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      try { 
        nullInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No position has been marked
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2482L);
      byte[] byteArray0 = new byte[9];
      nullInputStream0.skip(2482L);
      nullInputStream0.read();
      try { 
        nullInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(0L);
      byte[] byteArray0 = new byte[2];
      nullInputStream0.read(byteArray0);
      try { 
        nullInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(1809L, false, false);
      // Undeclared exception!
      try { 
        nullInputStream0.mark(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Mark not supported
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      assertTrue(nullInputStream0.markSupported());
      
      nullInputStream0.mark((byte)28);
      nullInputStream0.reset();
      assertEquals(2147483647L, nullInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      byte[] byteArray0 = new byte[1];
      nullInputStream0.read(byteArray0, (-2920), (-2030));
      int int0 = nullInputStream0.available();
      assertEquals((-2030L), nullInputStream0.getPosition());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L));
      int int0 = nullInputStream0.available();
      assertTrue(nullInputStream0.markSupported());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      int int0 = nullInputStream0.available();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1513L));
      boolean boolean0 = nullInputStream0.markSupported();
      assertEquals(0, nullInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream(2147483647L);
      nullInputStream0.close();
      assertEquals(2147483647L, nullInputStream0.getSize());
      assertEquals(0L, nullInputStream0.getPosition());
      assertTrue(nullInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1513L));
      byte[] byteArray0 = new byte[9];
      nullInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)7);
      nullInputStream0.read();
      try { 
        nullInputStream0.skip((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Skip after end of file
         //
         verifyException("org.apache.tika.io.NullInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L));
      long long0 = nullInputStream0.getSize();
      assertTrue(nullInputStream0.markSupported());
      assertEquals((-1584L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NullInputStream nullInputStream0 = new NullInputStream((-1584L));
      nullInputStream0.getPosition();
      assertEquals((-1584L), nullInputStream0.getSize());
      assertTrue(nullInputStream0.markSupported());
  }
}
