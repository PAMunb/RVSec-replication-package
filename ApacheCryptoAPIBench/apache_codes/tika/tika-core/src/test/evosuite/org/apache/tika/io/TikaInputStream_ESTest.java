/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:37:31 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.Blob;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.serial.SerialBlob;
import javax.sql.rowset.serial.SerialException;
import org.apache.tika.io.TaggedInputStream;
import org.apache.tika.io.TemporaryResources;
import org.apache.tika.io.TikaInputStream;
import org.apache.tika.metadata.Metadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TikaInputStream_ESTest extends TikaInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      long long0 = tikaInputStream0.skip((-1155L));
      assertEquals(0L, tikaInputStream0.getPosition());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[0];
          TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
          tikaInputStream0.afterRead((-4893));
          // Undeclared exception!
          try { 
            tikaInputStream0.getPath();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      InputStream inputStream0 = serialBlob0.getBinaryStream();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(inputStream0);
      byte[] byteArray1 = new byte[6];
      int int0 = tikaInputStream0.peek(byteArray1);
      assertEquals(1, int0);
      assertEquals(0L, tikaInputStream0.getPosition());
      assertFalse(tikaInputStream0.hasLength());
      assertEquals(1, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.read(byteArray0);
      int int0 = tikaInputStream0.peek(byteArray0);
      assertEquals(6L, tikaInputStream0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = TikaInputStream.isTikaInputStream((InputStream) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+MFu*8du", "the.os");
      File file0 = MockFile.createTempFile("ftp", "ftp", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      tikaInputStream0.skip(1L);
      long long0 = tikaInputStream0.getPosition();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+MFu*8du", "the.os");
      File file0 = MockFile.createTempFile("ftp", "ftp", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      tikaInputStream0.afterRead((-2346));
      long long0 = tikaInputStream0.getPosition();
      assertEquals((-2346L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.setOpenContainer(metadata0);
      tikaInputStream0.getOpenContainer();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      assertTrue(tikaInputStream0.hasLength());
      
      long long0 = tikaInputStream0.getLength();
      assertEquals(1L, long0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<5j~");
      MockFile mockFile0 = new MockFile("<5j~");
      TikaInputStream tikaInputStream0 = TikaInputStream.get((File) mockFile0);
      tikaInputStream0.getFile();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(path0, metadata0);
      tikaInputStream0.skip(0L);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(path0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "(3tyui'n!<ee,3bvft");
      URI uRI0 = MockURI.aHttpURI;
      TikaInputStream tikaInputStream0 = TikaInputStream.get(uRI0);
      assertEquals(0L, tikaInputStream0.getPosition());
      assertFalse(tikaInputStream0.hasLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<5j~");
      MockFile mockFile0 = new MockFile("<5j~");
      TikaInputStream tikaInputStream0 = TikaInputStream.get((File) mockFile0);
      TemporaryResources temporaryResources0 = new TemporaryResources();
      TikaInputStream tikaInputStream1 = TikaInputStream.get((InputStream) tikaInputStream0, temporaryResources0);
      assertEquals(0L, tikaInputStream1.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.skip(1L);
      TemporaryResources temporaryResources0 = new TemporaryResources();
      TikaInputStream.get((InputStream) tikaInputStream0, temporaryResources0);
      assertEquals(1L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      assertEquals(0L, tikaInputStream0.getPosition());
      
      TemporaryResources temporaryResources0 = new TemporaryResources();
      tikaInputStream0.reset();
      TikaInputStream.get((InputStream) tikaInputStream0, temporaryResources0);
      assertEquals((-1L), tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PROPERTY", "");
      File file0 = MockFile.createTempFile("PROPERTY", "file", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      TikaInputStream tikaInputStream1 = TikaInputStream.get((InputStream) tikaInputStream0);
      assertEquals(0L, tikaInputStream1.getPosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.afterRead((byte)35);
      TikaInputStream.get((InputStream) tikaInputStream0);
      assertEquals(35L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      assertEquals(0L, tikaInputStream0.getPosition());
      
      tikaInputStream0.reset();
      TikaInputStream.get((InputStream) tikaInputStream0);
      assertEquals((-1L), tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      TemporaryResources temporaryResources0 = new TemporaryResources();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) pipedInputStream0, temporaryResources0);
      TikaInputStream tikaInputStream1 = TikaInputStream.cast(tikaInputStream0);
      assertEquals(0L, tikaInputStream1.getPosition());
      assertFalse(tikaInputStream1.hasLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.skip(1L);
      TikaInputStream.cast(tikaInputStream0);
      assertEquals(1L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      tikaInputStream0.reset();
      TikaInputStream.cast(tikaInputStream0);
      assertEquals(1, metadata0.size());
      assertEquals((-1L), tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(taggedInputStream0, 160);
      TemporaryResources temporaryResources0 = new TemporaryResources();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) pushbackInputStream0, temporaryResources0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        tikaInputStream0.peek(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("Content-Encoding", "Content-Encoding");
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0, metadata0);
      try { 
        tikaInputStream0.getFileChannel();
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.skip(1L);
      try { 
        tikaInputStream0.getFileChannel();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream is already being read
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[1];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      tikaInputStream0.read();
      try { 
        tikaInputStream0.getFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream is already being read
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TikaInputStream.get((byte[]) null, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TikaInputStream.get((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get((Blob) null, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      try { 
        TikaInputStream.get((Blob) serialBlob0);
        fail("Expecting exception: SerialException");
      
      } catch(SerialException e) {
         //
         // Invalid arguments: position cannot be less than 1 or greater than the length of the SerialBlob
         //
         verifyException("javax.sql.rowset.serial.SerialBlob", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        TikaInputStream.get((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get((Path) null, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        TikaInputStream.get((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a+@DB}! T:TX0Q", "a+@DB}! T:TX0Q");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        TikaInputStream.get(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      URI uRI0 = MockURI.URI("contributor", "rights", (String) null, "relation");
      try { 
        TikaInputStream.get(uRI0, metadata0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: contributor
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URI uRI0 = MockURI.URI((String) null, "", (String) null, 7, "", "", "");
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRI0, metadata0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URI uRI0 = MockURI.create("description");
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      try { 
        TikaInputStream.get(uRI0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get((InputStream) null);
      TemporaryResources temporaryResources0 = new TemporaryResources();
      // Undeclared exception!
      try { 
        TikaInputStream.get((InputStream) taggedInputStream0, temporaryResources0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get((InputStream) null);
      // Undeclared exception!
      try { 
        TikaInputStream.get((InputStream) taggedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.tika.io.TikaInputStream$1");
      Metadata metadata0 = new Metadata();
      try { 
        TikaInputStream.get((File) mockFile0, metadata0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        TikaInputStream.get((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        TikaInputStream.get((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[0];
          TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
          // Undeclared exception!
          try { 
            tikaInputStream0.getPath();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+MFu*8du", "the.os");
      File file0 = MockFile.createTempFile("ftp", "ftp", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      tikaInputStream0.getPath();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PROPERTY", "");
      File file0 = MockFile.createTempFile("PROPERTY", "file", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      boolean boolean0 = tikaInputStream0.hasFile();
      assertTrue(boolean0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("~LRFP:)", "~LRFP:)", 2073432487, "", uRLStreamHandler0);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRL0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRL0, metadata0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        TikaInputStream.get(uRL0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRI0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      try { 
        TikaInputStream.get((Blob) serialBlob0, metadata0);
        fail("Expecting exception: SerialException");
      
      } catch(SerialException e) {
         //
         // Invalid arguments: position cannot be less than 1 or greater than the length of the SerialBlob
         //
         verifyException("javax.sql.rowset.serial.SerialBlob", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      InputStream inputStream0 = serialBlob0.getBinaryStream();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(inputStream0, (TemporaryResources) null);
      // Undeclared exception!
      try { 
        tikaInputStream0.getFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "description");
      URL uRL0 = MockURL.getHttpExample();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(uRL0);
      TemporaryResources temporaryResources0 = new TemporaryResources();
      TikaInputStream tikaInputStream1 = TikaInputStream.get((InputStream) tikaInputStream0, temporaryResources0);
      assertFalse(tikaInputStream1.hasLength());
      assertEquals(0L, tikaInputStream1.getPosition());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TemporaryResources temporaryResources0 = new TemporaryResources();
      // Undeclared exception!
      try { 
        TikaInputStream.get((InputStream) null, temporaryResources0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Stream must not be null
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        TikaInputStream.get((File) null, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.getOpenContainer();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.mark(43);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.setOpenContainer(metadata0);
      tikaInputStream0.toString();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      assertFalse(tikaInputStream0.hasFile());
      
      tikaInputStream0.toString();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          PipedInputStream pipedInputStream0 = new PipedInputStream(67);
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
          TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) bufferedInputStream0);
          // Undeclared exception!
          try { 
            tikaInputStream0.getLength();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockFile mockFile0 = new MockFile("PROPERTY", "");
      File file0 = MockFile.createTempFile("PROPERTY", "file", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      tikaInputStream0.getLength();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      boolean boolean0 = tikaInputStream0.hasLength();
      assertTrue(boolean0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(67);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) bufferedInputStream0);
      boolean boolean0 = tikaInputStream0.hasLength();
      assertFalse(boolean0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.skip(1L);
      try { 
        tikaInputStream0.getPath();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream is already being read
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      File file0 = MockFile.createTempFile("relation", "publisher");
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      String string0 = tikaInputStream0.toString();
      assertEquals(0L, tikaInputStream0.getPosition());
      assertTrue(tikaInputStream0.hasFile());
      assertEquals("TikaInputStream of /tmp/relation0publisher", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      boolean boolean0 = tikaInputStream0.hasFile();
      assertFalse(boolean0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1048576);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      tikaInputStream0.setOpenContainer(mockPrintStream0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      Metadata metadata0 = new Metadata();
      try { 
        TikaInputStream.get(uRI0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      serialBlob0.free();
      try { 
        TikaInputStream.get((Blob) serialBlob0, metadata0);
        fail("Expecting exception: SerialException");
      
      } catch(SerialException e) {
         //
         // Error: You cannot call a method on a SerialBlob instance once free() has been called.
         //
         verifyException("javax.sql.rowset.serial.SerialBlob", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+MFu*8du", "the.os");
      File file0 = MockFile.createTempFile("ftp", "ftp", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      TikaInputStream tikaInputStream1 = TikaInputStream.cast(tikaInputStream0);
      assertEquals(0L, tikaInputStream1.getPosition());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn(mockFileInputStream0).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      TikaInputStream tikaInputStream0 = TikaInputStream.cast(sequenceInputStream0);
      assertNull(tikaInputStream0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      try { 
        tikaInputStream0.peek(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        TikaInputStream.get((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Stream must not be null
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+MFu*8du", "the.os");
      File file0 = MockFile.createTempFile("ftp", "ftp", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      tikaInputStream0.getFile();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      TikaInputStream.isTikaInputStream(tikaInputStream0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Content-Type", "Content-Type");
      Path path0 = mockFile0.toPath();
      try { 
        TikaInputStream.get(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(93);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) bufferedInputStream0);
      try { 
        tikaInputStream0.skip(93);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.close();
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      MockFile mockFile0 = new MockFile("tiff:xresolution");
      Path path0 = mockFile0.toPath();
      try { 
        TikaInputStream.get(path0, metadata0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      URI uRI0 = MockURI.create("the.oS:8Y");
      try { 
        TikaInputStream.get(uRI0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: the.os
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      boolean boolean0 = tikaInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        TikaInputStream.get(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+MFu*8du", "the.os");
      File file0 = MockFile.createTempFile("ftp", "ftp", (File) mockFile0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get(file0);
      long long0 = tikaInputStream0.getPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0);
      int int0 = tikaInputStream0.peek(byteArray0);
      assertEquals(3, int0);
      assertEquals(0L, tikaInputStream0.getPosition());
  }
}
