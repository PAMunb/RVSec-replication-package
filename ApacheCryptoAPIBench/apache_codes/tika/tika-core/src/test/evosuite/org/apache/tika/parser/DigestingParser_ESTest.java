/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:51:49 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Map;
import java.util.Set;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.parser.DefaultParser;
import org.apache.tika.parser.DigestingParser;
import org.apache.tika.parser.DummyInitializableParser;
import org.apache.tika.parser.DummyParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.digest.CompositeDigester;
import org.apache.tika.parser.digest.InputStreamDigester;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DigestingParser_ESTest extends DigestingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DigestingParser.Digester[] digestingParser_DigesterArray0 = new DigestingParser.Digester[0];
      CompositeDigester compositeDigester0 = new CompositeDigester(digestingParser_DigesterArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(813);
      ParseContext parseContext0 = new ParseContext();
      compositeDigester0.digest(pipedInputStream0, (Metadata) null, parseContext0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Set<MediaType> set0 = MediaType.set(stringArray0);
      MediaType mediaType0 = MediaType.video("byte");
      Map<String, String> map0 = mediaType0.getParameters();
      DummyParser dummyParser0 = new DummyParser(set0, map0, "U.");
      DigestingParser digestingParser0 = new DigestingParser(dummyParser0, (DigestingParser.Digester) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ParseContext parseContext0 = new ParseContext();
      XMLReader xMLReader0 = parseContext0.getXMLReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLReader0);
      Metadata metadata0 = new Metadata();
      digestingParser0.parse((InputStream) mockFileInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
      assertNull(digestingParser0.getDecorationName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      DigestingParser.Encoder digestingParser_Encoder0 = mock(DigestingParser.Encoder.class, new ViolatedAssumptionAnswer());
      InputStreamDigester inputStreamDigester0 = new InputStreamDigester(3057, "SUM", digestingParser_Encoder0);
      DigestingParser digestingParser0 = new DigestingParser(dummyInitializableParser0, inputStreamDigester0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3057);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        digestingParser0.parse((InputStream) bufferedInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.security.NoSuchAlgorithmException: SUM MessageDigest not available
         //
         verifyException("org.apache.tika.parser.digest.InputStreamDigester", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DigestingParser digestingParser0 = new DigestingParser((Parser) null, (DigestingParser.Digester) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        digestingParser0.parse((InputStream) sequenceInputStream0, (ContentHandler) xMLFilterImpl0, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.ParserDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultParser defaultParser0 = new DefaultParser((MediaTypeRegistry) null, classLoader0);
      DigestingParser.Digester[] digestingParser_DigesterArray0 = new DigestingParser.Digester[0];
      CompositeDigester compositeDigester0 = new CompositeDigester(digestingParser_DigesterArray0);
      DigestingParser digestingParser0 = new DigestingParser(defaultParser0, compositeDigester0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ParseContext parseContext0 = new ParseContext();
      Metadata metadata0 = new Metadata();
      try { 
        digestingParser0.parse((InputStream) sequenceInputStream0, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected RuntimeException from org.apache.tika.parser.EmptyParser@5
         //
         verifyException("org.apache.tika.parser.CompositeParser", e);
      }
  }
}
