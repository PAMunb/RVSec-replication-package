/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:50:37 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.tika.detect.ZeroSizeFileDetector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZeroSizeFileDetector_ESTest extends ZeroSizeFileDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZeroSizeFileDetector zeroSizeFileDetector0 = new ZeroSizeFileDetector();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)46);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        zeroSizeFileDetector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZeroSizeFileDetector zeroSizeFileDetector0 = new ZeroSizeFileDetector();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      try { 
        zeroSizeFileDetector0.detect(pipedInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZeroSizeFileDetector zeroSizeFileDetector0 = new ZeroSizeFileDetector();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)71, (byte)0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = zeroSizeFileDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("x-empty", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZeroSizeFileDetector zeroSizeFileDetector0 = new ZeroSizeFileDetector();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = zeroSizeFileDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("octet-stream", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ZeroSizeFileDetector zeroSizeFileDetector0 = new ZeroSizeFileDetector();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        zeroSizeFileDetector0.detect(dataInputStream0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ZeroSizeFileDetector zeroSizeFileDetector0 = new ZeroSizeFileDetector();
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = zeroSizeFileDetector0.detect((InputStream) null, metadata0);
      assertFalse(mediaType0.hasParameters());
  }
}
