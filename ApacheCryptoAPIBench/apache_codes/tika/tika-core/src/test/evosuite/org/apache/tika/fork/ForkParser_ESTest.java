/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:39:46 GMT 2022
 */

package org.apache.tika.fork;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.List;
import java.util.Set;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.fork.ForkParser;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.parser.DefaultParser;
import org.apache.tika.parser.DelegatingParser;
import org.apache.tika.parser.EmptyParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.ParserDecorator;
import org.apache.tika.parser.RecursiveParserWrapper;
import org.apache.tika.sax.BasicContentHandlerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForkParser_ESTest extends ForkParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      DefaultParser defaultParser0 = new DefaultParser(mediaTypeRegistry0, classLoader0);
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.XML;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, (-166));
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(defaultParser0, basicContentHandlerFactory0);
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = recursiveParserWrapper0.getSupportedTypes(parseContext0);
      Parser parser0 = ParserDecorator.withoutTypes(defaultParser0, set0);
      ForkParser forkParser0 = new ForkParser(classLoader0, parser0);
      forkParser0.getSupportedTypes(parseContext0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyParser emptyParser0 = EmptyParser.INSTANCE;
      BasicContentHandlerFactory.HANDLER_TYPE basicContentHandlerFactory_HANDLER_TYPE0 = BasicContentHandlerFactory.HANDLER_TYPE.BODY;
      BasicContentHandlerFactory basicContentHandlerFactory0 = new BasicContentHandlerFactory(basicContentHandlerFactory_HANDLER_TYPE0, 3);
      RecursiveParserWrapper recursiveParserWrapper0 = new RecursiveParserWrapper(emptyParser0, basicContentHandlerFactory0);
      ForkParser forkParser0 = new ForkParser((ClassLoader) null, recursiveParserWrapper0);
      forkParser0.close();
      forkParser0.getPoolSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ForkParser forkParser0 = new ForkParser(classLoader0, delegatingParser0);
      forkParser0.setPoolSize((-166));
      forkParser0.getPoolSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ForkParser forkParser0 = new ForkParser(classLoader0, (Parser) null);
      // Undeclared exception!
      try { 
        forkParser0.setJavaCommand((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyParser emptyParser0 = EmptyParser.INSTANCE;
      ForkParser forkParser0 = new ForkParser(classLoader0, emptyParser0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ParseContext parseContext0 = new ParseContext();
      XMLReader xMLReader0 = parseContext0.getXMLReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLReader0);
      Metadata metadata0 = new Metadata();
      try { 
        forkParser0.parse((InputStream) pushbackInputStream0, (ContentHandler) xMLReaderAdapter0, metadata0, parseContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ForkParser forkParser0 = new ForkParser(classLoader0, (Parser) null);
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        forkParser0.getSupportedTypes(parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.fork.ForkParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ForkParser forkParser0 = new ForkParser(classLoader0, (Parser) null);
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<String> class0 = String.class;
      List<String> list0 = serviceLoader0.loadStaticServiceProviders(class0);
      forkParser0.setJavaCommand(list0);
      // Undeclared exception!
      try { 
        forkParser0.getJavaCommand();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ForkParser forkParser0 = new ForkParser(classLoader0, delegatingParser0);
      ParseContext parseContext0 = new ParseContext();
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        forkParser0.parse((InputStream) null, (ContentHandler) null, metadata0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null stream
         //
         verifyException("org.apache.tika.fork.ForkParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ForkParser forkParser0 = new ForkParser(classLoader0, delegatingParser0);
      String string0 = forkParser0.getJavaCommand();
      assertEquals(5, forkParser0.getPoolSize());
      assertEquals("java -Xmx32m", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ForkParser forkParser0 = new ForkParser(classLoader0, (Parser) null);
      ForkParser forkParser1 = null;
      try {
        forkParser1 = new ForkParser(classLoader0, forkParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The underlying parser of a ForkParser should not be a ForkParser, but a specific implementation.
         //
         verifyException("org.apache.tika.fork.ForkParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ForkParser forkParser0 = new ForkParser(classLoader0, delegatingParser0);
      int int0 = forkParser0.getPoolSize();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ForkParser forkParser0 = new ForkParser(classLoader0, delegatingParser0);
      forkParser0.setServerPulseMillis(0L);
      assertEquals(5, forkParser0.getPoolSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ForkParser forkParser0 = new ForkParser(classLoader0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DelegatingParser delegatingParser0 = new DelegatingParser();
      ForkParser forkParser0 = new ForkParser(classLoader0, delegatingParser0);
      forkParser0.setJavaCommand("QwfqxJFqo 1z'|3{");
      assertEquals(5, forkParser0.getPoolSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      EmptyParser emptyParser0 = EmptyParser.INSTANCE;
      ForkParser forkParser0 = new ForkParser(classLoader0, emptyParser0);
      List<String> list0 = forkParser0.getJavaCommandAsList();
      assertEquals(2, list0.size());
      assertEquals(5, forkParser0.getPoolSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForkParser forkParser0 = new ForkParser();
  }
}
