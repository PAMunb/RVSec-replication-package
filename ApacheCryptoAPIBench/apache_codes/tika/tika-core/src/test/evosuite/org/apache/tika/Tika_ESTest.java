/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:39:42 GMT 2022
 */

package org.apache.tika;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.time.ZoneId;
import java.util.Enumeration;
import java.util.Map;
import java.util.Set;
import org.apache.tika.Tika;
import org.apache.tika.config.InitializableProblemHandler;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.DefaultDetector;
import org.apache.tika.detect.EmptyDetector;
import org.apache.tika.detect.NonDetectingEncodingDetector;
import org.apache.tika.detect.TextDetector;
import org.apache.tika.language.translate.DefaultTranslator;
import org.apache.tika.language.translate.EmptyTranslator;
import org.apache.tika.language.translate.Translator;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeTypes;
import org.apache.tika.parser.DefaultParser;
import org.apache.tika.parser.DummyInitializableParser;
import org.apache.tika.parser.DummyParameterizedParser;
import org.apache.tika.parser.DummyParser;
import org.apache.tika.parser.EmptyParser;
import org.apache.tika.parser.ErrorParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tika_ESTest extends Tika_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      EmptyTranslator emptyTranslator0 = new EmptyTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, emptyTranslator0);
      tika0.translate("", "application/xml");
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector((-3205));
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      InitializableProblemHandler initializableProblemHandler0 = mock(InitializableProblemHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, initializableProblemHandler0, true);
      NonDetectingEncodingDetector nonDetectingEncodingDetector0 = new NonDetectingEncodingDetector();
      DefaultParser defaultParser0 = new DefaultParser(mediaTypeRegistry0, serviceLoader0, nonDetectingEncodingDetector0);
      Tika tika0 = new Tika(textDetector0, defaultParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      tika0.parseToString(path0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0);
      DefaultTranslator defaultTranslator0 = new DefaultTranslator(serviceLoader0);
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Metadata metadata0 = new Metadata();
      tika0.parseToString((InputStream) sequenceInputStream0, metadata0, 24);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2766);
      Metadata metadata0 = new Metadata();
      tika0.parseToString((InputStream) pushbackInputStream0, metadata0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0);
      DefaultTranslator defaultTranslator0 = new DefaultTranslator(serviceLoader0);
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      tika0.parseToString((InputStream) sequenceInputStream0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("resourceName");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("resourceName");
      tika0.parseToString((File) mockFile0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 182);
      Metadata metadata0 = new Metadata();
      tika0.detect((InputStream) pushbackInputStream0, metadata0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      // Undeclared exception!
      try { 
        tika0.parseToString((InputStream) null, (Metadata) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.Tika", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ErrorParser errorParser0 = new ErrorParser();
      Tika tika0 = new Tika(mimeTypes0, errorParser0, (Translator) null);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        tika0.parseToString((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error
         //
         verifyException("org.apache.tika.parser.ErrorParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0);
      DefaultTranslator defaultTranslator0 = new DefaultTranslator(serviceLoader0);
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        tika0.parseToString((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      Metadata metadata0 = new Metadata();
      MockFile mockFile0 = new MockFile("", "XCh8R7oR_xffbw:");
      Path path0 = mockFile0.toPath();
      try { 
        tika0.parse(path0, metadata0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        tika0.parse(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        tika0.parse(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("^?H+7j");
      Metadata metadata0 = new Metadata();
      try { 
        tika0.parse((File) mockFile0, metadata0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      // Undeclared exception!
      try { 
        tika0.detect((byte[]) null, " P*a(_&MO%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      EmptyTranslator emptyTranslator0 = new EmptyTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, emptyTranslator0);
      // Undeclared exception!
      try { 
        tika0.detect((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("format", "application/xml");
      Path path0 = mockFile0.toPath();
      try { 
        tika0.detect(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        tika0.detect(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      // Undeclared exception!
      try { 
        tika0.detect((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        tika0.detect(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        tika0.detect((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      EmptyTranslator emptyTranslator0 = new EmptyTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, emptyTranslator0);
      // Undeclared exception!
      try { 
        tika0.detect((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("text/plain", "text/plain");
      try { 
        tika0.detect((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader.setContextClassLoader(classLoader1);
      Tika tika0 = null;
      try {
        tika0 = new Tika();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        tika0.parse((Path) null, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      tika0.detect((InputStream) null, "resourceName");
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      String string0 = tika0.toString();
      assertEquals(100000, tika0.getMaxStringLength());
      assertEquals("Apache Tika", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector((-3205));
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      EmptyTranslator emptyTranslator0 = new EmptyTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, emptyTranslator0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        tika0.detect(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      byte[] byteArray0 = new byte[3];
      tika0.detect(byteArray0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      byte[] byteArray0 = new byte[0];
      tika0.detect(byteArray0, "org.apache.tika.sax.xpath.SubtreeMatcher");
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Metadata metadata0 = new Metadata();
      try { 
        tika0.detect((InputStream) pipedInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("application/octet-stream", "{DCg b(2QZ@ibB(L");
      File file0 = MockFile.createTempFile("application/octet-stream", "{DCg b(2QZ@ibB(L", (File) mockFile0);
      tika0.detect(file0);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, (Parser) null, defaultTranslator0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        tika0.parseToString((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.Tika", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      tika0.getTranslator();
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector((-3184));
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        tika0.translate((InputStream) sequenceInputStream0, "", "'m>^EV4q>,8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error translating data.
         //
         verifyException("org.apache.tika.Tika", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("hk087;,9`+`]6{cfD", "RM#VO");
      try { 
        tika0.parse((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      int int0 = tika0.getMaxStringLength();
      assertEquals(100000, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      Tika tika0 = new Tika(textDetector0, dummyInitializableParser0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("H@", "/descendant:node()");
      // Undeclared exception!
      try { 
        tika0.parse((File) mockFile0, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        tika0.translate((InputStream) sequenceInputStream0, "!Zg|5{a");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error translating data.
         //
         verifyException("org.apache.tika.Tika", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      tika0.detect((InputStream) null);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      tika0.getDetector();
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmptyParser emptyParser0 = new EmptyParser();
      ParseContext parseContext0 = new ParseContext();
      Set<MediaType> set0 = emptyParser0.getSupportedTypes(parseContext0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DummyParser dummyParser0 = new DummyParser(set0, map0, "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      DefaultTranslator defaultTranslator0 = new DefaultTranslator(serviceLoader0);
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultDetector defaultDetector0 = new DefaultDetector(mimeTypes0, serviceLoader0);
      Tika tika0 = new Tika(defaultDetector0, dummyParser0, defaultTranslator0);
      // Undeclared exception!
      try { 
        tika0.translate("7Ly*+@", "application/octet-stream", "TJ*\"}f+pQA3FF!e?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error translating data.
         //
         verifyException("org.apache.tika.Tika", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Tika tika0 = new Tika();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      tika0.detect(":");
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 930, "application/xml", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        tika0.parse(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EmptyDetector emptyDetector0 = new EmptyDetector();
      DummyInitializableParser dummyInitializableParser0 = new DummyInitializableParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(emptyDetector0, dummyInitializableParser0, defaultTranslator0);
      // Undeclared exception!
      try { 
        tika0.parse((InputStream) null, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.ParsingReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      Tika tika0 = new Tika(textDetector0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector((-3198));
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LoadErrorHandler loadErrorHandler0 = mock(LoadErrorHandler.class, new ViolatedAssumptionAnswer());
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, loadErrorHandler0, true);
      DefaultTranslator defaultTranslator0 = new DefaultTranslator(serviceLoader0);
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      // Undeclared exception!
      try { 
        tika0.translate("X@8ojPJfh4wr", "Apache Tika");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Error translating data.
         //
         verifyException("org.apache.tika.Tika", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      tika0.setMaxStringLength(100000);
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      tika0.getParser();
      assertEquals(100000, tika0.getMaxStringLength());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("f(TI-Q0");
      Path path0 = mockFile0.toPath();
      try { 
        tika0.parseToString(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDetector textDetector0 = new TextDetector();
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(textDetector0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("resourceName");
      try { 
        tika0.parseToString((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DummyParameterizedParser dummyParameterizedParser0 = new DummyParameterizedParser();
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultTranslator defaultTranslator0 = new DefaultTranslator();
      Tika tika0 = new Tika(mimeTypes0, dummyParameterizedParser0, defaultTranslator0);
      MockFile mockFile0 = new MockFile("text/plain");
      Path path0 = mockFile0.toPath();
      try { 
        tika0.parse(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }
}
