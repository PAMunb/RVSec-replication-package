/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:51:44 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.tika.io.LookaheadInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LookaheadInputStream_ESTest extends LookaheadInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      byte[] byteArray0 = new byte[2];
      int int0 = lookaheadInputStream0.read(byteArray0);
      assertEquals(62, lookaheadInputStream0.available());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-787), (-2951)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      byte[] byteArray0 = new byte[2];
      lookaheadInputStream0.skip((byte)1);
      int int0 = lookaheadInputStream0.read(byteArray0, (int) (byte)1, 0);
      assertEquals((-2951), lookaheadInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-787)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      byte[] byteArray0 = new byte[2];
      lookaheadInputStream0.read(byteArray0, (int) (byte)1, 0);
      int int0 = lookaheadInputStream0.read();
      assertEquals((-787), lookaheadInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1193);
      long long0 = lookaheadInputStream0.skip(1193);
      assertEquals(4L, long0);
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      byte[] byteArray0 = new byte[2];
      int int0 = lookaheadInputStream0.read(byteArray0, (int) (byte)1, 0);
      assertEquals(64, lookaheadInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1193);
      int int0 = lookaheadInputStream0.read();
      assertEquals(3, lookaheadInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1236);
      lookaheadInputStream0.skip((-1));
      int int0 = lookaheadInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-787)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      byte[] byteArray0 = new byte[2];
      lookaheadInputStream0.read(byteArray0, (int) (byte)1, 0);
      int int0 = lookaheadInputStream0.available();
      assertEquals((-787), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 0);
      lookaheadInputStream0.skip((-396L));
      LookaheadInputStream lookaheadInputStream1 = new LookaheadInputStream(lookaheadInputStream0, 35);
      // Undeclared exception!
      try { 
        lookaheadInputStream1.skip(35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        lookaheadInputStream0.read(byteArray0, 345, 1974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = null;
      try {
        lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, (-74));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.LookaheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1892);
      lookaheadInputStream0.close();
      byte[] byteArray0 = new byte[3];
      int int0 = lookaheadInputStream0.read(byteArray0, (int) (byte) (-1), (int) (byte)9);
      assertEquals((-1), int0);
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      lookaheadInputStream0.reset();
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 255);
      int int0 = lookaheadInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1193);
      lookaheadInputStream0.mark(1193);
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1236);
      lookaheadInputStream0.skip((-1));
      // Undeclared exception!
      try { 
        lookaheadInputStream0.read((byte[]) null, 426, (-1766));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1193);
      lookaheadInputStream0.skip((-1L));
      // Undeclared exception!
      try { 
        lookaheadInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.tika.io.LookaheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(inputStream0, 1193);
      lookaheadInputStream0.close();
      lookaheadInputStream0.close();
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, 0);
      long long0 = lookaheadInputStream0.skip(0);
      assertEquals(0, lookaheadInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, 0);
      boolean boolean0 = lookaheadInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, 2737);
      LookaheadInputStream lookaheadInputStream1 = new LookaheadInputStream(lookaheadInputStream0, 397);
      int int0 = lookaheadInputStream1.read();
      assertEquals((-1), int0);
      assertEquals(0, lookaheadInputStream0.available());
      assertEquals(0, lookaheadInputStream1.available());
  }
}
