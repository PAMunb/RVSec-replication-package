/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:45:16 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.tika.io.LookaheadInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LookaheadInputStream_ESTest extends LookaheadInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1090);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)31);
      int int0 = lookaheadInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)1);
      int int0 = lookaheadInputStream0.read(byteArray0, 1, (int) (byte)1);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)5);
      int int0 = lookaheadInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(231, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      lookaheadInputStream0.read(byteArray0);
      lookaheadInputStream0.reset();
      int int0 = lookaheadInputStream0.available();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(pipedInputStream0, 3565);
      try { 
        lookaheadInputStream0.skip((-1775L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1090);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, 84);
      lookaheadInputStream0.skip((byte) (-1));
      // Undeclared exception!
      try { 
        lookaheadInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(sequenceInputStream0, 4066);
      byte[] byteArray0 = new byte[1];
      try { 
        lookaheadInputStream0.read(byteArray0, (int) (byte)15, (-3104));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, 0);
      lookaheadInputStream0.skip((byte) (-1));
      // Undeclared exception!
      try { 
        lookaheadInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.tika.io.LookaheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(bufferedInputStream0, 64);
      try { 
        lookaheadInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("NX\"T-", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(mockFileInputStream0, 0);
      try { 
        lookaheadInputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      LookaheadInputStream lookaheadInputStream0 = null;
      try {
        lookaheadInputStream0 = new LookaheadInputStream(dataInputStream0, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      LookaheadInputStream lookaheadInputStream0 = null;
      try {
        lookaheadInputStream0 = new LookaheadInputStream(sequenceInputStream0, (-2020));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.LookaheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      lookaheadInputStream0.read(byteArray0);
      lookaheadInputStream0.reset();
      int int0 = lookaheadInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      lookaheadInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      lookaheadInputStream0.skip((byte)63);
      int int0 = lookaheadInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)51);
      lookaheadInputStream0.close();
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      int int0 = lookaheadInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      lookaheadInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      lookaheadInputStream0.skip((byte)63);
      lookaheadInputStream0.close();
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      long long0 = lookaheadInputStream0.skip((byte)63);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1105);
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream(byteArrayInputStream0, (byte)63);
      boolean boolean0 = lookaheadInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, lookaheadInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, 0);
      int int0 = lookaheadInputStream0.read();
      assertEquals(0, lookaheadInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LookaheadInputStream lookaheadInputStream0 = new LookaheadInputStream((InputStream) null, 0);
      lookaheadInputStream0.mark((byte) (-1));
      assertEquals(0, lookaheadInputStream0.available());
  }
}
