/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:49:01 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.SortedSet;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.parser.CryptoParserTest;
import org.apache.tika.parser.NetworkParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.ParserDecorator;
import org.apache.tika.parser.ParsingReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParsingReader_ESTest extends ParsingReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1575);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ParsingReader parsingReader0 = new ParsingReader((Parser) null, pipedInputStream0, metadata0, parseContext0, forkJoinPool0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CryptoParserTest cryptoParserTest0 = new CryptoParserTest();
      CryptoParserTest.CryptoParserImpl cryptoParserTest_CryptoParserImpl0 = cryptoParserTest0.new CryptoParserImpl("_E736?4B$(");
      ParseContext parseContext0 = new ParseContext();
      Parser parser0 = cryptoParserTest_CryptoParserImpl0.getDelegateParser(parseContext0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      ParsingReader parsingReader0 = new ParsingReader(parser0, byteArrayInputStream0, metadata0, parseContext0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        parsingReader0.read(charArray0, (int) (byte)0, 2609);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e1R+AU-Rg,pb?V", "e1R+AU-Rg,pb?V");
      Path path0 = mockFile0.toPath();
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      ParsingReader parsingReader0 = new ParsingReader(sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "7%L3l");
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkParser networkParser0 = new NetworkParser((URI) null);
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      SortedSet<MediaType> sortedSet0 = mediaTypeRegistry0.getTypes();
      Parser parser0 = ParserDecorator.withTypes(networkParser0, sortedSet0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader(parser0, pushbackInputStream0, metadata0, parseContext0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.ParsingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 11);
      Metadata metadata0 = new Metadata();
      ParseContext parseContext0 = new ParseContext();
      ParsingReader parsingReader0 = new ParsingReader((Parser) null, pushbackInputStream0, metadata0, parseContext0);
      parsingReader0.close();
      char[] charArray0 = new char[2];
      try { 
        parsingReader0.read(charArray0, 11, 11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.tika.parser.ParsingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("J8w+", "6b=3GX~n-o@\"n[G", (File) null);
      ParsingReader parsingReader0 = new ParsingReader(file0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParsingReader parsingReader0 = new ParsingReader((InputStream) null, "");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ParsingReader parsingReader0 = new ParsingReader(sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      ParsingReader parsingReader0 = new ParsingReader(path0);
  }
}
