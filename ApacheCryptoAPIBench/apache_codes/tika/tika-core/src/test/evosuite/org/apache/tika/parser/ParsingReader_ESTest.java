/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:56:25 GMT 2022
 */

package org.apache.tika.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileSystem;
import java.nio.file.Path;
import java.util.concurrent.Executor;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.parser.ParsingReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParsingReader_ESTest extends ParsingReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metadata0).get(anyString());
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = new ParsingReader(parser0, inputStream0, metadata0, parseContext0);
      char[] charArray0 = new char[8];
      int int0 = parsingReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader(parser0, inputStream0, metadata0, parseContext0, (Executor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.ParsingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader((Parser) null, (InputStream) null, (Metadata) null, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.parser.ParsingReader$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metadata0).get(anyString());
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = new ParsingReader(parser0, (InputStream) null, metadata0, parseContext0);
      try { 
        parsingReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("org.apache.tika.parser.ParsingReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metadata0).get(anyString());
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = new ParsingReader(parser0, inputStream0, metadata0, parseContext0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        parsingReader0.read(charArray0, 3282, (-1580));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn("%Cj.S{!||").when(metadata0).get(anyString());
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = new ParsingReader(parser0, inputStream0, metadata0, parseContext0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = new ParsingReader(inputStream0, "6@Z8ENk^lp2{D$");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystem) null).when(path0).getFileSystem();
      ParsingReader parsingReader0 = null;
      try {
        parsingReader0 = new ParsingReader(path0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Parser parser0 = mock(Parser.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Metadata metadata0 = mock(Metadata.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(metadata0).get(anyString());
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      ParsingReader parsingReader0 = new ParsingReader(parser0, inputStream0, metadata0, parseContext0);
      parsingReader0.close();
      char[] charArray0 = new char[2];
      try { 
        parsingReader0.read(charArray0, 3282, (-1580));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedReader", e);
      }
  }
}
