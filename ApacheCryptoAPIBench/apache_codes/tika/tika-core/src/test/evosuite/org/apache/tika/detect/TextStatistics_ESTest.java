/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:42:10 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.detect.TextStatistics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextStatistics_ESTest extends TextStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.looksLikeUTF8();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      textStatistics0.addData(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertFalse(boolean1);
      
      byteArray0[1] = (byte) (-1);
      int int2 = textStatistics0.countControl();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int2);
      
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      textStatistics0.addData(byteArray0, 0, (byte)4);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)9, (byte)0, (byte)4}, byteArray0);
      assertEquals(5, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, textStatistics0.count());
      assertFalse(boolean2);
      
      int int3 = textStatistics0.count((int) (byte)0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(5, textStatistics0.count());
      assertEquals(3, int3);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      textStatistics0.addData(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)51;
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      textStatistics0.addData(byteArray1, 0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)51, (byte) (-1), (byte) (-108), (byte)51, (byte)51, (byte)51, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(1, textStatistics0.count());
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byteArray0[1] = (byte) (-1);
      int int2 = textStatistics0.countSafeAscii();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int2);
      
      int int3 = textStatistics0.countControl();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int3);
      
      boolean boolean2 = textStatistics0.looksLikeUTF8();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean2);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      textStatistics0.addData(byteArray0, (byte)0, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)51, (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean3 = textStatistics0.isMostlyAscii();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean3);
      
      int int4 = textStatistics0.count((int) (byte)51);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      textStatistics0.addData(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)51;
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      byteArray1[6] = (byte)1;
      textStatistics0.addData(byteArray1, 0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)51, (byte) (-1), (byte) (-108), (byte)51, (byte)51, (byte)51, (byte)1, (byte)0, (byte)0}, byteArray1);
      assertEquals(1, textStatistics0.count());
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byteArray0[1] = (byte) (-1);
      int int2 = textStatistics0.countSafeAscii();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int2);
      
      int int3 = textStatistics0.countControl();
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int3);
      
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      textStatistics0.addData(byteArray0, 0, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)51, (byte) (-1), (byte)9, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean2);
      
      int int4 = textStatistics0.count((int) (byte)51);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      int int0 = textStatistics0.count((-1818));
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[2] = (byte) (-27);
      textStatistics0.addData(byteArray0, 0, 1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0, (byte) (-27)}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(3, byteArray0.length);
      
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int1);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean2);
      
      textStatistics0.addData(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      byteArray0[0] = (byte) (-36);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-36);
      byteArray1[3] = (byte) (-36);
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte) (-36);
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int1);
      
      byteArray1[6] = (byte)1;
      textStatistics0.addData(byteArray1, 0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte) (-36), (byte) (-36), (byte) (-36), (byte) (-36), (byte)1}, byteArray1);
      assertEquals(2, textStatistics0.count());
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byteArray0[1] = (byte) (-1);
      int int2 = textStatistics0.countSafeAscii();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, textStatistics0.count());
      assertEquals(0, int2);
      
      int int3 = textStatistics0.countControl();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2, textStatistics0.count());
      assertEquals(1, int3);
      
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean3 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, textStatistics0.count());
      assertFalse(boolean3);
      
      textStatistics0.addData(byteArray0, 0, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte)9, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean4 = textStatistics0.isMostlyAscii();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(2, textStatistics0.count());
      assertFalse(boolean4);
      
      int int4 = textStatistics0.count((int) (byte) (-36));
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(2, textStatistics0.count());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      int int0 = textStatistics0.count((-1818));
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-27);
      textStatistics0.addData(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-21), (byte) (-27)}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(3, byteArray0.length);
      
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int1);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-1);
      byteArray1[3] = (byte) (-36);
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte) (-36);
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      byteArray1[6] = (byte)1;
      textStatistics0.addData(byteArray1, 0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte)0, (byte) (-36), (byte) (-36), (byte) (-36), (byte)1}, byteArray1);
      assertEquals(1, textStatistics0.count());
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byteArray0[1] = (byte) (-1);
      int int2 = textStatistics0.countSafeAscii();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int2);
      
      int int3 = textStatistics0.countControl();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int3);
      
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      textStatistics0.addData(byteArray0, 0, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte)9, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, textStatistics0.count());
      assertFalse(boolean2);
      
      int int4 = textStatistics0.count((int) (byte) (-36));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      textStatistics0.addData((byte[]) null, 147, (-3493));
      assertEquals(0, textStatistics0.count());
      
      int int0 = textStatistics0.countControl();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      int int2 = textStatistics0.countEightBit();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int2);
      
      boolean boolean0 = textStatistics0.looksLikeUTF8();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-32);
      textStatistics0.addData(byteArray0, (byte)0, (byte)8);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)77, (byte)0, (byte)8, (byte)0, (byte) (-63), (byte) (-113), (byte) (-32)}, byteArray0);
      assertEquals(8, textStatistics0.count());
      assertEquals(8, byteArray0.length);
      
      int int3 = textStatistics0.countSafeAscii();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(8, textStatistics0.count());
      assertEquals(1, int3);
      
      int int4 = textStatistics0.countEightBit();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(8, textStatistics0.count());
      assertEquals(4, int4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      int int0 = textStatistics0.countEightBit();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean2);
      
      boolean boolean3 = textStatistics0.isMostlyAscii();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean3);
      
      int int1 = textStatistics0.countEightBit();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      boolean boolean4 = textStatistics0.isMostlyAscii();
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean4);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      textStatistics0.addData(byteArray0, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte)115, (byte)1, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(3, byteArray0.length);
      
      int int2 = textStatistics0.countControl();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int2);
      
      int int3 = textStatistics0.count(1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int3);
      
      int int4 = textStatistics0.countSafeAscii();
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int4);
      
      int int5 = textStatistics0.count();
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int5);
      
      int int6 = textStatistics0.countSafeAscii();
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertTrue(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int6);
      
      int int7 = textStatistics0.count(0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int7);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte) (-65);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray1, 1, 2381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.looksLikeUTF8();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      textStatistics0.addData(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      byteArray0[0] = (byte) (-36);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-36);
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte) (-36);
      byteArray1[6] = (byte) (-8);
      textStatistics0.addData(byteArray1, 0, (byte) (-8));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte) (-108), (byte) (-36), (byte) (-36), (byte) (-36), (byte) (-8)}, byteArray1);
      assertEquals(1, textStatistics0.count());
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byteArray0[1] = (byte) (-1);
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int1);
      
      int int2 = textStatistics0.countControl();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int2);
      
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      textStatistics0.addData(byteArray0, 0, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte)9, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertFalse(boolean2);
      
      int int3 = textStatistics0.count((int) (byte) (-36));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int3);
      
      textStatistics0.addData(byteArray0, (byte)9, 0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte)9, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      int int4 = textStatistics0.countControl();
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(1, textStatistics0.count());
      assertEquals(1, int4);
      
      boolean boolean3 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.looksLikeUTF8();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      byte[] byteArray0 = null;
      boolean boolean2 = textStatistics0.isMostlyAscii();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean2);
      
      boolean boolean3 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData((byte[]) null, 0, 243);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = textStatistics0.countEightBit();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      textStatistics0.addData(byteArray0, (-1), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray1, (byte)0, (byte)45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      int int0 = textStatistics0.countEightBit();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      int int1 = textStatistics0.count();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      int int2 = textStatistics0.countSafeAscii();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      int int0 = textStatistics0.countSafeAscii();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      int int1 = textStatistics0.count(424);
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
      
      int int2 = textStatistics0.countControl();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      int int0 = textStatistics0.count(1706);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      textStatistics0.addData(byteArray0, (byte)1, (-1));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(0, textStatistics0.count());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      int int0 = textStatistics0.countControl();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)12, (byte)119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      int int0 = textStatistics0.countEightBit();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (-1), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      int int0 = textStatistics0.countEightBit();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      boolean boolean0 = textStatistics0.looksLikeUTF8();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      textStatistics0.addData(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, textStatistics0.count());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean1);
      
      int int0 = textStatistics0.count();
      assertEquals(0, textStatistics0.count());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      textStatistics0.addData(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      
      byteArray0[0] = (byte) (-36);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-108);
      int int1 = textStatistics0.countSafeAscii();
      assertTrue(int1 == int0);
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int1);
      
      byteArray1[6] = (byte)1;
      textStatistics0.addData(byteArray1, 0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertEquals(2, textStatistics0.count());
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byteArray0[1] = (byte) (-1);
      int int2 = textStatistics0.countSafeAscii();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, textStatistics0.count());
      assertEquals(0, int2);
      
      int int3 = textStatistics0.countControl();
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, textStatistics0.count());
      assertEquals(1, int3);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean2 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, textStatistics0.count());
      assertFalse(boolean2);
      
      textStatistics0.addData(byteArray0, 0, (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, textStatistics0.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean3 = textStatistics0.isMostlyAscii();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(2, textStatistics0.count());
      assertFalse(boolean3);
      
      int int4 = textStatistics0.count((int) (byte) (-36));
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(2, textStatistics0.count());
      assertEquals(1, int4);
      
      boolean boolean4 = textStatistics0.looksLikeUTF8();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(2, textStatistics0.count());
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      assertEquals(0, textStatistics0.count());
      assertNotNull(textStatistics0);
      
      boolean boolean0 = textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-27);
      textStatistics0.addData(byteArray0, 1, 1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-27)}, byteArray0);
      assertEquals(1, textStatistics0.count());
      assertEquals(3, byteArray0.length);
      
      int int0 = textStatistics0.countSafeAscii();
      assertEquals(1, textStatistics0.count());
      assertEquals(0, int0);
      
      boolean boolean1 = textStatistics0.looksLikeUTF8();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      textStatistics0.looksLikeUTF8();
      byte[] byteArray0 = new byte[5];
      textStatistics0.addData(byteArray0, 1, 1);
      textStatistics0.looksLikeUTF8();
      byteArray0[1] = (byte) (-1);
      textStatistics0.countControl();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      textStatistics0.count((int) (byte)0);
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      textStatistics0.looksLikeUTF8();
      textStatistics0.count();
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-1);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-36);
      textStatistics0.addData(byteArray0, 0, (byte)1);
      textStatistics0.countSafeAscii();
      textStatistics0.countControl();
      textStatistics0.isMostlyAscii();
      textStatistics0.isMostlyAscii();
      boolean boolean0 = textStatistics0.looksLikeUTF8();
      assertEquals(1, textStatistics0.count());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      textStatistics0.looksLikeUTF8();
      textStatistics0.count();
      byte[] byteArray0 = new byte[5];
      textStatistics0.looksLikeUTF8();
      textStatistics0.addData(byteArray0, 0, 0);
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte) (-1);
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)51;
      textStatistics0.countSafeAscii();
      textStatistics0.addData(byteArray1, 0, (byte)1);
      byteArray0[1] = (byte) (-1);
      textStatistics0.countSafeAscii();
      textStatistics0.countControl();
      textStatistics0.looksLikeUTF8();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      textStatistics0.addData(byteArray0, (byte)0, (byte)0);
      textStatistics0.isMostlyAscii();
      textStatistics0.count((int) (byte)51);
      // Undeclared exception!
      try { 
        textStatistics0.addData(byteArray0, (byte)9, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.tika.detect.TextStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextStatistics textStatistics0 = new TextStatistics();
      int int0 = textStatistics0.countEightBit();
      assertEquals(0, int0);
      
      textStatistics0.isMostlyAscii();
      assertEquals(0, textStatistics0.count());
  }
}
