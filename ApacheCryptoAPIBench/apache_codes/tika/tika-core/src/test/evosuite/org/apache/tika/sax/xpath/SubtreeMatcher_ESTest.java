/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:57:29 GMT 2022
 */

package org.apache.tika.sax.xpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.tika.sax.xpath.Matcher;
import org.apache.tika.sax.xpath.SubtreeMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubtreeMatcher_ESTest extends SubtreeMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher((Matcher) null);
      // Undeclared exception!
      try { 
        subtreeMatcher0.matchesText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.xpath.SubtreeMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher((Matcher) null);
      // Undeclared exception!
      try { 
        subtreeMatcher0.matchesElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.xpath.SubtreeMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher((Matcher) null);
      // Undeclared exception!
      try { 
        subtreeMatcher0.matchesAttribute("org.apache.tika.sax.xpath.SubtreeMatcher", "org.apache.tika.sax.xpath.SubtreeMatcher");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.xpath.SubtreeMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher((Matcher) null);
      // Undeclared exception!
      try { 
        subtreeMatcher0.descend("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.sax.xpath.SubtreeMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Matcher matcher0 = Matcher.FAIL;
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher(matcher0);
      SubtreeMatcher subtreeMatcher1 = new SubtreeMatcher(subtreeMatcher0);
      Matcher matcher1 = subtreeMatcher1.descend((String) null, "");
      assertNotSame(subtreeMatcher0, matcher1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Matcher matcher0 = Matcher.FAIL;
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher(matcher0);
      Matcher matcher1 = subtreeMatcher0.descend((String) null, "ge|.+@t)T}I");
      assertSame(matcher1, subtreeMatcher0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Matcher matcher0 = Matcher.FAIL;
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher(matcher0);
      boolean boolean0 = subtreeMatcher0.matchesElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Matcher matcher0 = Matcher.FAIL;
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher(matcher0);
      boolean boolean0 = subtreeMatcher0.matchesAttribute("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Matcher matcher0 = Matcher.FAIL;
      SubtreeMatcher subtreeMatcher0 = new SubtreeMatcher(matcher0);
      boolean boolean0 = subtreeMatcher0.matchesText();
      assertFalse(boolean0);
  }
}
