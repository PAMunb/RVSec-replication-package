/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:41:28 GMT 2022
 */

package org.apache.tika.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.tika.utils.RereadableInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RereadableInputStream_ESTest extends RereadableInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1827, false, false);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      long long0 = rereadableInputStream0.skip(1L);
      assertEquals(0L, long0);
      assertEquals(1, rereadableInputStream0.getSize());
      
      rereadableInputStream0.rewind();
      assertEquals(1, rereadableInputStream0.getSize());
      
      int int0 = rereadableInputStream0.read();
      assertEquals(255, int0);
      assertEquals(1, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1827, false, false);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      int int0 = rereadableInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(1, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1827, false, false);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      long long0 = rereadableInputStream0.skip(1L);
      assertEquals(0L, long0);
      assertEquals(1, rereadableInputStream0.getSize());
      
      int int0 = rereadableInputStream0.getSize();
      assertEquals(1, int0);
      assertEquals(1, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(bufferedInputStream0, 0, false, true);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 63);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 63);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pushbackInputStream0, 2597, true, true);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(rereadableInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, rereadableInputStream0.getSize());
      
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, false, false);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(rereadableInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, rereadableInputStream0.getSize());
      
      int int0 = rereadableInputStream0.read(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, rereadableInputStream0.getSize());
      
      rereadableInputStream0.close();
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, rereadableInputStream0.getSize());
      
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1827, false, false);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
      
      rereadableInputStream0.close();
      assertEquals(0, rereadableInputStream0.getSize());
      
      // Undeclared exception!
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.utils.RereadableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("TIKA_streamstore_", "TIKA_streamstore_");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("TIKA_streamstore_0TIKA_streamstore_", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/TIKA_streamstore_0TIKA_streamstore_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("TIKA_streamstore_0TIKA_streamstore_", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/TIKA_streamstore_0TIKA_streamstore_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, mockFileInputStream0.available());
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1, false, false);
      assertNotNull(rereadableInputStream0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("TIKA_streamstore_0TIKA_streamstore_", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/TIKA_streamstore_0TIKA_streamstore_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0, rereadableInputStream0.getSize());
      
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.close();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 0, true, true);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      // Undeclared exception!
      try { 
        rereadableInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-998), (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      RereadableInputStream rereadableInputStream0 = null;
      try {
        rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte) (-1), false, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.utils.RereadableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(dataInputStream0, 0, true, false);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      byte[] byteArray0 = new byte[2];
      int int0 = rereadableInputStream0.read(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, rereadableInputStream0.getSize());
      
      rereadableInputStream0.rewind();
      assertEquals(2, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 63, true, true);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(rereadableInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, rereadableInputStream0.getSize());
      
      rereadableInputStream0.rewind();
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1830, false, false);
      assertNotNull(rereadableInputStream0);
      assertEquals(0, rereadableInputStream0.getSize());
      
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
      
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 0, true, true);
      rereadableInputStream0.rewind();
      rereadableInputStream0.close();
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 1830, false, false);
      rereadableInputStream0.rewind();
      int int0 = rereadableInputStream0.read();
      assertEquals(0, rereadableInputStream0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(sequenceInputStream0, 0, true, true);
      int int0 = rereadableInputStream0.getSize();
      assertEquals(0, int0);
  }
}
