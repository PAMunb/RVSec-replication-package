/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:47:05 GMT 2022
 */

package org.apache.tika.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.tika.utils.RereadableInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RereadableInputStream_ESTest extends RereadableInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 0, false, false);
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(dataInputStream0, 2774, false, true);
      rereadableInputStream0.read();
      rereadableInputStream0.rewind();
      int int0 = rereadableInputStream0.read();
      assertEquals(1, rereadableInputStream0.getSize());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(dataInputStream0, 2774, false, true);
      rereadableInputStream0.read();
      int int0 = rereadableInputStream0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4056), (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, true, true);
      rereadableInputStream0.close();
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.utils.RereadableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-25), (byte)63);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)89, true, true);
      // Undeclared exception!
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4056), (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        rereadableInputStream0.rewind();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-794), (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, true, true);
      rereadableInputStream0.close();
      // Undeclared exception!
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.utils.RereadableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, 1186, false, false);
      try { 
        rereadableInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RereadableInputStream rereadableInputStream0 = null;
      try {
        rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (-1918), true, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.utils.RereadableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(pipedInputStream0, (byte)117, false, true);
      rereadableInputStream0.close();
      rereadableInputStream0.close();
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-794), (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, false, false);
      rereadableInputStream0.read();
      rereadableInputStream0.read();
      assertEquals(2, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4056), (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, true, true);
      rereadableInputStream0.read();
      rereadableInputStream0.close();
      assertEquals(1, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 102);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 102, true, false);
      rereadableInputStream0.rewind();
      assertEquals(2, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, 1171, false, false);
      rereadableInputStream0.rewind();
      rereadableInputStream0.rewind();
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(byteArrayInputStream0, (byte)0, true, false);
      rereadableInputStream0.rewind();
      assertEquals(1, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(dataInputStream0, 2774, false, true);
      rereadableInputStream0.rewind();
      int int0 = rereadableInputStream0.read();
      assertEquals(0, int0);
      assertEquals(0, rereadableInputStream0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      RereadableInputStream rereadableInputStream0 = new RereadableInputStream(dataInputStream0, 2774, false, true);
      int int0 = rereadableInputStream0.getSize();
      assertEquals(0, int0);
  }
}
