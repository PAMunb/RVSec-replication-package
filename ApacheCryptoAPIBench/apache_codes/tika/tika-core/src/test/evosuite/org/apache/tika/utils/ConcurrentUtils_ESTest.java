/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:59:00 GMT 2022
 */

package org.apache.tika.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.utils.ConcurrentUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcurrentUtils_ESTest extends ConcurrentUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(parseContext0).get(any(java.lang.Class.class));
      // Undeclared exception!
      try { 
        ConcurrentUtils.execute(parseContext0, (Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.Executors", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(parseContext0).get(any(java.lang.Class.class));
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Future future0 = ConcurrentUtils.execute(parseContext0, runnable0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = mock(ScheduledThreadPoolExecutor.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(scheduledThreadPoolExecutor0).submit(any(java.lang.Runnable.class));
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      doReturn(scheduledThreadPoolExecutor0).when(parseContext0).get(any(java.lang.Class.class));
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Future future0 = ConcurrentUtils.execute(parseContext0, runnable0);
      assertNull(future0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConcurrentUtils concurrentUtils0 = new ConcurrentUtils();
      ParseContext parseContext0 = mock(ParseContext.class, new ViolatedAssumptionAnswer());
      doReturn(concurrentUtils0).when(parseContext0).get(any(java.lang.Class.class));
      // Undeclared exception!
      try { 
        ConcurrentUtils.execute(parseContext0, (Runnable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.tika.utils.ConcurrentUtils cannot be cast to java.util.concurrent.ExecutorService
         //
         verifyException("org.apache.tika.utils.ConcurrentUtils", e);
      }
  }
}
