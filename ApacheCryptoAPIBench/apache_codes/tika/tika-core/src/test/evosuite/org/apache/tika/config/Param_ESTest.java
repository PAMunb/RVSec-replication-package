/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:32:29 GMT 2022
 */

package org.apache.tika.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharConversionException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.AbstractMap;
import javax.xml.transform.TransformerException;
import org.apache.tika.config.Param;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Param_ESTest extends Param_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte) (-52));
      Param<Byte> param0 = new Param<Byte>("?:#eC2*/-=!plZ;3l", class0, byte0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      param0.save(outputStream0);
      assertEquals("?:#eC2*/-=!plZ;3l", param0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)42);
      Param<Byte> param0 = new Param<Byte>("etD_)'#\"F^7 VV", class0, byte0);
      // Undeclared exception!
      try { 
        param0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("bo6VZl").when(node0).getTextContent();
      NamedNodeMap namedNodeMap0 = mock(NamedNodeMap.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(namedNodeMap0).getNamedItem(anyString());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node1).getTextContent();
      NamedNodeMap namedNodeMap1 = mock(NamedNodeMap.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(namedNodeMap1).getNamedItem(anyString());
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node2).getTextContent();
      Node node3 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(namedNodeMap0, namedNodeMap1).when(node3).getAttributes();
      doReturn(node2).when(node3).getFirstChild();
      Param<Class<Object>> param0 = Param.load(node3);
      assertEquals("bo6VZl", param0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-31));
      Param<Byte> param0 = new Param<Byte>("{&Z|", byte0);
      Class<Byte> class0 = param0.getType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Param<Object> param0 = new Param<Object>("3HwLe_<d!SeAs9('F0", class0, class0);
      String string0 = param0.getName();
      assertEquals("3HwLe_<d!SeAs9('F0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Param<String> param0 = new Param<String>("G7\tVnXnx+t}", "bool");
      param0.setName("");
      String string0 = param0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(node0).getTextContent();
      NamedNodeMap namedNodeMap0 = mock(NamedNodeMap.class, new ViolatedAssumptionAnswer());
      doReturn(node0).when(namedNodeMap0).getNamedItem(anyString());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn("bo6VZl").when(node1).getTextContent();
      NamedNodeMap namedNodeMap1 = mock(NamedNodeMap.class, new ViolatedAssumptionAnswer());
      doReturn(node1).when(namedNodeMap1).getNamedItem(anyString());
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node3 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn(namedNodeMap0, namedNodeMap1).when(node3).getAttributes();
      doReturn(node2).when(node3).getFirstChild();
      // Undeclared exception!
      try { 
        Param.load(node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'bo6VZl.class' should be in target project, but could not be found!
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read();
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      try { 
        Param.load(inputStream0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1243), (-1243), (-1243), (-1243), (-1243)).when(inputStream0).read();
      doReturn((-1243)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      try { 
        Param.load(inputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-837), (-837), (-837), (-837)).when(inputStream0).read();
      try { 
        Param.load(inputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Param<Class<Object>> param0 = new Param<Class<Object>>("@H1%D'_)`ofS9XthY;", class0);
      // Undeclared exception!
      try { 
        param0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // class java.lang.Class doesnt have a constructor that takes String arg
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Param<String> param0 = null;
      try {
        param0 = new Param<String>((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Param<String> param0 = null;
      try {
        param0 = new Param<String>((String) null, class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Param<String> param0 = new Param<String>();
      String string0 = param0.getTypeString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Param<Class<Object>> param0 = new Param<Class<Object>>();
      String string0 = param0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Param<Class<String>> param0 = new Param<Class<String>>();
      // Undeclared exception!
      try { 
        param0.setTypeString("4U8*KKNw)|FeBT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '4U8*KKNw)|FeBT.class' should be in target project, but could not be found!
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Param<Class<Object>> param0 = new Param<Class<Object>>();
      // Undeclared exception!
      try { 
        param0.save((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an Element : null
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Param<String> param0 = new Param<String>("9", "9");
      param0.getValue();
      String string0 = param0.getValue();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)125);
      Param<Byte> param0 = new Param<Byte>("bool", class0, byte0);
      param0.setTypeString("");
      assertEquals("bool", param0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)125);
      Param<Byte> param0 = new Param<Byte>("bool", class0, byte0);
      param0.setTypeString("bool");
      assertEquals("bool", param0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Param<Class<Object>> param0 = new Param<Class<Object>>();
      param0.setTypeString((String) null);
      assertNull(param0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Param<Object> param0 = new Param<Object>("bigint", class0, class0);
      String string0 = param0.getTypeString();
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Param<String> param0 = new Param<String>("9:=y", "9:=y");
      String string0 = param0.getTypeString();
      assertNotNull(string0);
      assertEquals("string", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Param<AbstractMap.SimpleImmutableEntry<Object, Object>> param0 = new Param<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      String string0 = param0.toString();
      assertEquals("Param{name='null', value='null', actualValue=null}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Param<String> param0 = new Param<String>();
      Class<String> class0 = param0.getType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Param.load((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Byte byte0 = new Byte((byte)80);
      Param<Byte> param0 = new Param<Byte>("http://xml.org/sax/features/external-general-entities", class0, byte0);
      param0.setType(class0);
      assertEquals("http://xml.org/sax/features/external-general-entities", param0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Param<Object> param0 = new Param<Object>();
      try { 
        param0.save((OutputStream) null);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Param.load((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Param<Class<Object>> param0 = new Param<Class<Object>>();
      // Undeclared exception!
      try { 
        param0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }
}
