/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:44:59 GMT 2022
 */

package org.apache.tika.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.net.URL;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.transform.TransformerException;
import org.apache.tika.config.Param;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Param_ESTest extends Param_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Param<PipedInputStream> param0 = new Param<PipedInputStream>("mA^M3>]", pipedInputStream0);
      // Undeclared exception!
      try { 
        param0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // class java.io.PipedInputStream doesnt have a constructor that takes String arg
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Param<Integer> param0 = new Param<Integer>();
      Class<Integer> class0 = param0.getType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Param<Byte> param0 = new Param<Byte>("N4", byte0);
      Class<Byte> class0 = Byte.TYPE;
      param0.setType(class0);
      Class<Byte> class1 = param0.getType();
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Byte byte0 = new Byte((byte)0);
      Param<Object> param0 = new Param<Object>("!ac:B{,$i%]9o}'X", class0, byte0);
      String string0 = param0.getName();
      assertEquals("!ac:B{,$i%]9o}'X", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = new Float(1.0F);
      Param<Float> param0 = new Param<Float>("", class0, float0);
      String string0 = param0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Param.load((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        Param.load((InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        Param.load((InputStream) byteArrayInputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Float float0 = new Float(2351.7327F);
      Param<Object> param0 = new Param<Object>("E~At", float0);
      // Undeclared exception!
      try { 
        param0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Param<URI> param0 = new Param<URI>();
      // Undeclared exception!
      try { 
        param0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Param<String> param0 = null;
      try {
        param0 = new Param<String>((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Param<Boolean> param0 = null;
      try {
        param0 = new Param<Boolean>("", class0, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Byte byte0 = new Byte((byte)113);
      Param<Byte> param0 = new Param<Byte>(" Cs=Ybd,-NpA+", byte0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        param0.save((Node) iIOMetadataNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Param<String> param0 = new Param<String>((String) null, "mV{E9&dhnywYH");
      String string0 = param0.getTypeString();
      assertEquals("string", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Param<IIOMetadataNode> param0 = new Param<IIOMetadataNode>();
      String string0 = param0.getTypeString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Param<PipedInputStream> param0 = new Param<PipedInputStream>();
      String string0 = param0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = new Boolean(false);
      Param<Boolean> param0 = new Param<Boolean>("I@J7", class0, boolean0);
      param0.setTypeString("string");
      assertEquals("I@J7", param0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short) (-1568));
      Param<Short> param0 = new Param<Short>((String) null, class0, short0);
      // Undeclared exception!
      try { 
        param0.save((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an Element : null
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Long long0 = new Long(1605L);
      Param<Long> param0 = new Param<Long>("\"}5b&qv/>8LL", class0, long0);
      param0.setTypeString("");
      assertEquals("\"}5b&qv/>8LL", param0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(0.0);
      Param<Float> param0 = new Param<Float>("+$[d`.(r76r.D,blp:b", float0);
      // Undeclared exception!
      try { 
        param0.setTypeString("+$[d`.(r76r.D,blp:b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: +$[d`/(r76r/D,blp:b
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Param<Object> param0 = new Param<Object>();
      param0.setTypeString((String) null);
      assertNull(param0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf(false);
      Param<Boolean> param0 = new Param<Boolean>("+$[d`.(r76r.D,blp:b", class0, boolean0);
      MockFile mockFile0 = new MockFile("+$[d`.(r76r.D,blp:b");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      param0.save((OutputStream) mockPrintStream0);
      assertEquals(120L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("yL%;\"a ]:EN7");
      Param<Object> param0 = new Param<Object>("yL%;\"a ]:EN7", iIOMetadataNode0);
      String string0 = param0.getTypeString();
      assertEquals("javax.imageio.metadata.IIOMetadataNode", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("yL%;\"a ]:EN7");
      Param<Object> param0 = new Param<Object>("yL%;\"a ]:EN7", iIOMetadataNode0);
      Object object0 = param0.getValue();
      Object object1 = param0.getValue();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("yL%;\"a ]:EN7");
      Param<Object> param0 = new Param<Object>("yL%;\"a ]:EN7", iIOMetadataNode0);
      String string0 = param0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Param<Byte> param0 = new Param<Byte>("N4", byte0);
      Class<Byte> class0 = param0.getType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        Param.load((Node) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.config.Param", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Param<URL> param0 = new Param<URL>();
      param0.setName("");
      assertEquals("", param0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        Param.load((InputStream) byteArrayInputStream0);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Param<Object> param0 = new Param<Object>();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      try { 
        param0.save((OutputStream) bufferedOutputStream0);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
      }
  }
}
