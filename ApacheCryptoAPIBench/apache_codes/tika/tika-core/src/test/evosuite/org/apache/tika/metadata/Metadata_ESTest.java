/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:31:51 GMT 2022
 */

package org.apache.tika.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import org.apache.tika.metadata.Message;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.Property;
import org.apache.tika.metadata.TIFF;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Metadata_ESTest extends Metadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Metadata metadata1 = new Metadata();
      metadata1.set("exif:FocalLength", "STRUCTURE");
      metadata0.equals(metadata1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, "fMro#%Lv^fYM`a8");
      metadata0.size();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.RESOLUTION_HORIZONTAL;
      metadata0.set(property0, 0.0);
      String[] stringArray0 = metadata0.names();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalReal("e##sAAXnIlkXU");
      metadata0.set(property0, 1.0);
      String[] stringArray0 = metadata0.getValues(property0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add("", "");
      metadata0.getValues("");
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.IMAGE_WIDTH;
      metadata0.set(property0, 617);
      Integer integer0 = metadata0.getInt(property0);
      assertNotNull(integer0);
      assertEquals(617, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.IMAGE_LENGTH;
      metadata0.set(property0, 1167);
      Integer integer0 = metadata0.getInt(property0);
      assertNotNull(integer0);
      assertEquals(1167, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      metadata0.set(metadata0.DATE, (Calendar) mockGregorianCalendar0);
      Date date0 = metadata0.getDate(metadata0.DATE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, " gLiZO[<>;t");
      String string0 = metadata0.get(metadata0.DATE);
      assertEquals(" gLiZO[<>;t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalOpenChoise("", (String[]) null);
      metadata0.add("", "");
      String string0 = metadata0.get(property0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add("5\"vSn", "jAAFSYX'PIvY");
      String string0 = metadata0.get("5\"vSn");
      assertNotNull(string0);
      assertEquals("jAAFSYX'PIvY", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.setAll((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Properties properties0 = new Properties();
      Integer integer0 = new Integer((-1121));
      Object object0 = new Object();
      properties0.put(integer0, object0);
      // Undeclared exception!
      try { 
        metadata0.setAll(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set((-1), (-1), 12, 11, (-5383), (-1));
      calendar0.setLenient(false);
      // Undeclared exception!
      try { 
        metadata0.set(metadata0.DATE, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, (-1082.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.isMultiValued((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.getValues((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.getInt((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalInteger("language");
      String[] stringArray0 = new String[0];
      metadata0.set(property0, stringArray0);
      // Undeclared exception!
      try { 
        metadata0.getInt(property0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, "");
      // Undeclared exception!
      try { 
        metadata0.getDate(metadata0.DATE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.getDate((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.get((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = new String[0];
      metadata0.set(metadata0.DATE, stringArray0);
      // Undeclared exception!
      try { 
        metadata0.get(metadata0.DATE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.add((Property) null, "M#dgTT7yt^;Mu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set((String) null, (String) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String string0 = metadata0.get("description");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set("", "");
      String string0 = metadata0.get("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String string0 = metadata0.get(metadata0.DATE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = metadata0.names();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add(metadata0.DATE, "title");
      metadata0.add("aMj`,+f-)~b#wx^eY", "");
      metadata0.toString();
      assertEquals(2, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.RESOLUTION_HORIZONTAL;
      metadata0.set(property0, (double) (-2334L));
      Metadata metadata1 = new Metadata();
      metadata1.set("type", "");
      boolean boolean0 = metadata0.equals(metadata1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.RESOLUTION_HORIZONTAL;
      metadata0.set(property0, (double) (-2334L));
      boolean boolean0 = metadata0.equals(metadata0);
      assertEquals(1, metadata0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add("rights", "rights");
      Metadata metadata1 = new Metadata();
      boolean boolean0 = metadata0.equals(metadata1);
      assertEquals(1, metadata0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      boolean boolean0 = metadata0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      boolean boolean0 = metadata0.equals("[}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalInteger("rights");
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a DATE value, but received a INTEGER
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalTextBag("source");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, (Calendar) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      MockDate mockDate0 = new MockDate(2541L);
      metadata0.set(metadata0.DATE, (Date) mockDate0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.FOCAL_LENGTH;
      MockDate mockDate0 = new MockDate((-991), (-991), (-991));
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a DATE value, but received a RATIONAL
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalTextBag("identifier");
      MockDate mockDate0 = new MockDate(1273, 0, 283);
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, (Date) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set(metadata0.DATE, (-379.86157161870045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a REAL value, but received a DATE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Message.MESSAGE_CC_NAME;
      // Undeclared exception!
      try { 
        metadata0.set(property0, (-414.9872670349323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalInteger("creator");
      metadata0.set(property0, 0);
      Integer integer0 = metadata0.getInt(property0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalTextBag("");
      // Undeclared exception!
      try { 
        metadata0.set(property0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set(metadata0.DATE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a INTEGER value, but received a DATE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.composite(metadata0.DATE, (Property[]) null);
      String[] stringArray0 = new String[1];
      metadata0.set(property0, stringArray0);
      assertFalse(property0.isMultiValuePermitted());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property[] propertyArray0 = new Property[3];
      propertyArray0[0] = metadata0.DATE;
      propertyArray0[1] = metadata0.DATE;
      propertyArray0[2] = metadata0.DATE;
      Property property0 = Property.composite(metadata0.DATE, propertyArray0);
      String[] stringArray0 = new String[1];
      metadata0.set(property0, stringArray0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // property must not be null
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property[] propertyArray0 = new Property[6];
      propertyArray0[0] = metadata0.DATE;
      propertyArray0[1] = metadata0.DATE;
      propertyArray0[2] = metadata0.DATE;
      propertyArray0[3] = metadata0.DATE;
      propertyArray0[4] = metadata0.DATE;
      propertyArray0[5] = metadata0.DATE;
      Property property0 = Property.composite(metadata0.DATE, propertyArray0);
      metadata0.set(property0, "coverage");
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // property must not be null
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Properties properties0 = new Properties();
      properties0.put("format", metadata0);
      metadata0.setAll(properties0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Message.MESSAGE_BCC_DISPLAY_NAME;
      String[] stringArray0 = new String[3];
      metadata0.set(property0, stringArray0);
      metadata0.add(property0, "description");
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.FOCAL_LENGTH;
      metadata0.set(property0, 1.0);
      // Undeclared exception!
      try { 
        metadata0.add(property0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // exif:FocalLength : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Date date0 = metadata0.getDate(metadata0.DATE);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalText("");
      Date date0 = metadata0.getDate(property0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalTextBag("source");
      Date date0 = metadata0.getDate(property0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalInteger(" is not supported");
      Property property1 = Property.composite(property0, (Property[]) null);
      metadata0.set(property1, "ag2^zqwD!K/KQY@x[;");
      Integer integer0 = metadata0.getInt(property1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Integer integer0 = metadata0.getInt(metadata0.DATE);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Message.MESSAGE_BCC_NAME;
      Integer integer0 = metadata0.getInt(property0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalRational("");
      metadata0.set(property0, "coverage");
      boolean boolean0 = metadata0.isMultiValued("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalTextBag("");
      String[] stringArray0 = new String[6];
      metadata0.set(property0, stringArray0);
      boolean boolean0 = metadata0.isMultiValued("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      boolean boolean0 = metadata0.isMultiValued("coverage");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalReal("e##sAAXnIlkXU");
      metadata0.set(property0, 1.0);
      boolean boolean0 = metadata0.isMultiValued(property0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = new String[3];
      metadata0.set(metadata0.DATE, stringArray0);
      boolean boolean0 = metadata0.isMultiValued(metadata0.DATE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      boolean boolean0 = metadata0.isMultiValued(metadata0.DATE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      int int0 = metadata0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set("", "");
      metadata0.add("", "");
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalInteger("language");
      Integer integer0 = metadata0.getInt(property0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = metadata0.getValues((String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String string0 = metadata0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.remove((String) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add(metadata0.DATE, "title");
      metadata0.hashCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = metadata0.getValues(metadata0.DATE);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}
