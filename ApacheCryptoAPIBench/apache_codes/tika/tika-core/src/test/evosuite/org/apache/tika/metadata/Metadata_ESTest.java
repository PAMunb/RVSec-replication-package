/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:36:12 GMT 2022
 */

package org.apache.tika.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.TimeZone;
import org.apache.tika.metadata.Geographic;
import org.apache.tika.metadata.Message;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.Property;
import org.apache.tika.metadata.TIFF;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Metadata_ESTest extends Metadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.add("title", "language");
      assertEquals(1, metadata0.size());
      
      Metadata metadata1 = new Metadata();
      assertNotNull(metadata1);
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata1.size());
      
      metadata1.set(metadata0.DATE, "format");
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
      
      boolean boolean0 = metadata1.equals(metadata0);
      assertFalse(boolean0);
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.add("title", "rights");
      assertEquals(1, metadata0.size());
      
      Metadata metadata1 = new Metadata();
      assertNotNull(metadata1);
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata1.size());
      
      boolean boolean0 = metadata0.equals(metadata1);
      assertFalse(boolean0);
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(0, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Property property0 = Property.internalInteger("format");
      assertNotNull(property0);
      assertTrue(property0.isInternal());
      assertEquals("format", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      
      metadata0.set(property0, "cR~_`vN}Vm%");
      assertEquals(1, metadata0.size());
      assertTrue(property0.isInternal());
      assertEquals("format", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      
      Integer integer0 = metadata0.getInt(property0);
      assertNull(integer0);
      assertEquals(1, metadata0.size());
      assertTrue(property0.isInternal());
      assertEquals("format", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isExternal());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      boolean boolean0 = metadata0.equals("rights");
      assertFalse(boolean0);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.set("type", "modified");
      assertEquals(1, metadata0.size());
      
      int int0 = metadata0.size();
      assertEquals(1, int0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.set(metadata0.DATE, "aS}N.;");
      assertEquals(1, metadata0.size());
      
      String[] stringArray0 = metadata0.names();
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 46);
      assertNotNull(mockGregorianCalendar0);
      
      metadata0.set(metadata0.DATE, (Calendar) mockGregorianCalendar0);
      assertEquals(1, metadata0.size());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62163504000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      String[] stringArray0 = metadata0.getValues(metadata0.DATE);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.set("\":;{*K/OmD", "\":;{*K/OmD");
      assertEquals(1, metadata0.size());
      
      String[] stringArray0 = metadata0.getValues("\":;{*K/OmD");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Property property0 = TIFF.IMAGE_WIDTH;
      assertNotNull(property0);
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("tiff:ImageWidth", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      
      metadata0.set(property0, "6");
      assertEquals(1, metadata0.size());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("tiff:ImageWidth", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
      
      Integer integer0 = metadata0.getInt(property0);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      assertEquals(1, metadata0.size());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("tiff:ImageWidth", property0.getName());
      assertFalse(property0.isMultiValuePermitted());
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.add(metadata0.DATE, "rights");
      assertEquals(1, metadata0.size());
      
      String string0 = metadata0.get(metadata0.DATE);
      assertNotNull(string0);
      assertEquals("rights", string0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.set("", "");
      assertEquals(1, metadata0.size());
      
      String string0 = metadata0.get("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.setAll((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, "identifier");
      assertNull(object1);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      // Undeclared exception!
      try { 
        metadata0.setAll(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, calendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, 1455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, (-499.71447899831));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.isMultiValued((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.getValues((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.getInt((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Property property0 = TIFF.IMAGE_WIDTH;
      assertNotNull(property0);
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("tiff:ImageWidth", property0.getName());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      
      String[] stringArray0 = metadata0.getValues("project_id");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, metadata0.size());
      
      metadata0.set(property0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, metadata0.size());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertEquals("tiff:ImageWidth", property0.getName());
      assertFalse(property0.isExternal());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      assertTrue(property0.isInternal());
      assertFalse(property0.isMultiValuePermitted());
      
      // Undeclared exception!
      try { 
        metadata0.getInt(property0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.getDate((Property) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String[] stringArray0 = new String[0];
      metadata0.set(metadata0.DATE, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.getDate(metadata0.DATE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String[] stringArray0 = metadata0.getValues("!8SB|T.f/?OP?m!C");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, metadata0.size());
      
      metadata0.set(metadata0.DATE, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.get(metadata0.DATE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String[] stringArray0 = new String[6];
      metadata0.set(metadata0.DATE, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(1, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.equals(metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      // Undeclared exception!
      try { 
        metadata0.add((Property) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.set((String) null, (String) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String string0 = metadata0.get("HCZ%pHl'^AYY");
      assertNull(string0);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.add((String) null, "3CYNh#}1J0`JFSiR^UP");
      assertEquals(1, metadata0.size());
      
      String string0 = metadata0.get((String) null);
      assertNotNull(string0);
      assertEquals("3CYNh#}1J0`JFSiR^UP", string0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String string0 = metadata0.get(metadata0.DATE);
      assertNull(string0);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      int int0 = metadata0.size();
      assertEquals(0, int0);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String[] stringArray0 = metadata0.names();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, metadata0.size());
      
      Property property0 = Property.externalOpenChoise("unS", stringArray0);
      assertNotNull(property0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, metadata0.size());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertEquals("unS", property0.getName());
      assertTrue(property0.isExternal());
      
      metadata0.add("unS", "");
      assertEquals(1, metadata0.size());
      
      String string0 = metadata0.get(property0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertEquals(1, metadata0.size());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isMultiValuePermitted());
      assertFalse(property0.isInternal());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertEquals("unS", property0.getName());
      assertTrue(property0.isExternal());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Metadata metadata1 = new Metadata();
      assertNotNull(metadata1);
      assertTrue(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata1.size());
      
      metadata1.set(metadata0.DATE, "type");
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
      
      metadata0.set(metadata1.DATE, "coverage");
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
      
      boolean boolean0 = metadata0.equals(metadata1);
      assertFalse(boolean0);
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Metadata metadata1 = new Metadata();
      assertNotNull(metadata1);
      assertTrue(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata1.size());
      
      String[] stringArray0 = new String[2];
      metadata1.set(metadata0.DATE, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
      
      metadata0.set(metadata1.DATE, "aS}N.;");
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
      
      boolean boolean0 = metadata0.equals(metadata1);
      assertFalse(boolean0);
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.add("title", "relation");
      assertEquals(1, metadata0.size());
      
      boolean boolean0 = metadata0.equals(metadata0);
      assertTrue(boolean0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Metadata metadata1 = new Metadata();
      assertNotNull(metadata1);
      assertTrue(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata1.size());
      
      metadata1.set("contributor", "modified");
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(1, metadata1.size());
      assertNotSame(metadata1, metadata0);
      
      boolean boolean0 = metadata0.equals(metadata1);
      assertFalse(boolean0);
      assertFalse(metadata0.equals((Object)metadata1));
      assertFalse(metadata1.equals((Object)metadata0));
      assertEquals(0, metadata0.size());
      assertEquals(1, metadata1.size());
      assertNotSame(metadata0, metadata1);
      assertNotSame(metadata1, metadata0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      boolean boolean0 = metadata0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      metadata0.set(metadata0.DATE, (Calendar) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Property property0 = TIFF.IMAGE_LENGTH;
      assertNotNull(property0);
      assertFalse(property0.isMultiValuePermitted());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isExternal());
      assertTrue(property0.isInternal());
      assertEquals("tiff:ImageLength", property0.getName());
      assertEquals(Property.ValueType.INTEGER, property0.getValueType());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a DATE value, but received a INTEGER
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      Property property0 = Message.MESSAGE_TO_NAME;
      assertNotNull(property0);
      assertTrue(property0.isInternal());
      assertEquals(Property.PropertyType.BAG, property0.getPropertyType());
      assertEquals("Message:To-Name", property0.getName());
      assertEquals(Property.ValueType.TEXT, property0.getValueType());
      assertFalse(property0.isExternal());
      assertTrue(property0.isMultiValuePermitted());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("coverage");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      metadata0.set(metadata0.DATE, calendar0);
      assertEquals(1, metadata0.size());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      Date date0 = metadata0.getDate(metadata0.DATE);
      assertNotNull(date0);
      assertEquals(1, metadata0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      MockDate mockDate0 = new MockDate((-4438), 18, 18);
      assertNotNull(mockDate0);
      
      metadata0.set(metadata0.DATE, (Date) mockDate0);
      assertEquals(1, metadata0.size());
      assertEquals("Sat Jul 18 00:00:00 GMT 2538", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      assertNotNull(metadata0);
      assertEquals(0, metadata0.size());
      
      String[] stringArray0 = new String[8];
      Property property0 = Property.externalOpenChoise("8;ajfZ@@Q<", stringArray0);
      assertNotNull(property0);
      assertEquals(8, stringArray0.length);
      assertFalse(property0.isMultiValuePermitted());
      assertEquals("8;ajfZ@@Q<", property0.getName());
      assertTrue(property0.isExternal());
      assertEquals(Property.ValueType.OPEN_CHOICE, property0.getValueType());
      assertEquals(Property.PropertyType.SIMPLE, property0.getPropertyType());
      assertFalse(property0.isInternal());
      
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a DATE value, but received a OPEN_CHOICE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.ISO_SPEED_RATINGS;
      // Undeclared exception!
      try { 
        metadata0.set(property0, (Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received SEQ
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.F_NUMBER;
      metadata0.set(property0, (-1330.0));
      assertEquals(Property.ValueType.RATIONAL, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Geographic.LATITUDE;
      metadata0.set(property0, (-100.07689486633804));
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.internalTextBag("format");
      // Undeclared exception!
      try { 
        metadata0.set(property0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set(metadata0.DATE, (-1330.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a REAL value, but received a DATE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set(metadata0.DATE, 2097);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property with a INTEGER value, but received a DATE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Property property0 = Message.MESSAGE_TO_DISPLAY_NAME;
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set(property0, (-428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected a property of type SIMPLE, but received BAG
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property[] propertyArray0 = new Property[3];
      propertyArray0[0] = metadata0.DATE;
      propertyArray0[1] = metadata0.DATE;
      propertyArray0[2] = metadata0.DATE;
      Property property0 = Property.composite(metadata0.DATE, propertyArray0);
      String[] stringArray0 = new String[4];
      metadata0.set(property0, stringArray0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.composite(metadata0.DATE, (Property[]) null);
      metadata0.set(property0, (String[]) null);
      assertEquals(Property.ValueType.PROPERTY, property0.getValueType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set((Property) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // property must not be null
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property[] propertyArray0 = new Property[7];
      propertyArray0[0] = metadata0.DATE;
      propertyArray0[1] = metadata0.DATE;
      propertyArray0[2] = metadata0.DATE;
      propertyArray0[3] = metadata0.DATE;
      propertyArray0[4] = metadata0.DATE;
      propertyArray0[5] = metadata0.DATE;
      propertyArray0[6] = metadata0.DATE;
      Property property0 = Property.composite(metadata0.DATE, propertyArray0);
      metadata0.set(property0, "property must not be null");
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.composite(metadata0.DATE, (Property[]) null);
      metadata0.set(property0, "relation");
      assertTrue(property0.isInternal());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Property[] propertyArray0 = new Property[5];
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        metadata0.set(propertyArray0[2], "modified");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // property must not be null
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, (Date) null);
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("description", object0);
      metadata0.setAll(properties0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add(metadata0.DATE, ":");
      // Undeclared exception!
      try { 
        metadata0.add(metadata0.DATE, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // date : SIMPLE
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = new String[6];
      metadata0.set(metadata0.DATE, stringArray0);
      String string0 = metadata0.toString();
      assertEquals("date=null date=null date=null date=null date=null date=null", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = TIFF.EQUIPMENT_MODEL;
      Date date0 = metadata0.getDate(property0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Message.MESSAGE_BCC_EMAIL;
      Date date0 = metadata0.getDate(property0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalInteger("ti'Ils*|5Y8x7}%");
      metadata0.set(property0, (-1));
      metadata0.getInt(property0);
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Property.externalInteger("ti'Ils*|5Y8x7}%");
      Integer integer0 = metadata0.getInt(property0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Property property0 = Message.MESSAGE_FROM_EMAIL;
      Integer integer0 = metadata0.getInt(property0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Integer integer0 = metadata0.getInt(metadata0.DATE);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set("[h", "Message-Bcc");
      metadata0.add("[h", "[h");
      boolean boolean0 = metadata0.isMultiValued("[h");
      assertEquals(1, metadata0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set("\":;{*K/OmD", "\":;{*K/OmD");
      boolean boolean0 = metadata0.isMultiValued("\":;{*K/OmD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      boolean boolean0 = metadata0.isMultiValued("title");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Property property0 = Message.MESSAGE_TO_DISPLAY_NAME;
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = new String[7];
      metadata0.set(property0, stringArray0);
      boolean boolean0 = metadata0.isMultiValued(property0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, "source");
      boolean boolean0 = metadata0.isMultiValued(metadata0.DATE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      boolean boolean0 = metadata0.isMultiValued(metadata0.DATE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, ":");
      // Undeclared exception!
      try { 
        metadata0.getDate(metadata0.DATE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.add("{|yOD-:", "{|yOD-:");
      Property property0 = Property.externalTextBag("{|yOD-:");
      metadata0.add(property0, "uU3jCTZvNY");
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      Date date0 = metadata0.getDate(metadata0.DATE);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String string0 = metadata0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.remove(",eQ/=Ko.Tt/;");
      assertEquals(0, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      metadata0.set("\":;{*K/OmD", "\":;{*K/OmD");
      metadata0.hashCode();
      assertEquals(1, metadata0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Metadata metadata0 = new Metadata();
      String[] stringArray0 = metadata0.getValues(metadata0.DATE);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }
}
