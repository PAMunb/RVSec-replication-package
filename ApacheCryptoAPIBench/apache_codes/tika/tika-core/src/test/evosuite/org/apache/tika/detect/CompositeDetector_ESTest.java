/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:41:33 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.List;
import org.apache.tika.config.LoadErrorHandler;
import org.apache.tika.config.ServiceLoader;
import org.apache.tika.detect.CompositeDetector;
import org.apache.tika.detect.DefaultDetector;
import org.apache.tika.detect.DefaultProbDetector;
import org.apache.tika.detect.Detector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MediaTypeRegistry;
import org.apache.tika.mime.MimeTypes;
import org.apache.tika.mime.ProbabilisticMimeDetectionSelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompositeDetector_ESTest extends CompositeDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Detector[] detectorArray0 = new Detector[4];
      CompositeDetector compositeDetector0 = new CompositeDetector(detectorArray0);
      detectorArray0[0] = (Detector) compositeDetector0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      Metadata metadata0 = new Metadata();
      compositeDetector0.detect(dataInputStream0, metadata0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(probabilisticMimeDetectionSelector0, serviceLoader0);
      defaultProbDetector0.getDetectors();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeDetector compositeDetector0 = new CompositeDetector((List<Detector>) null);
      // Undeclared exception!
      try { 
        compositeDetector0.getDetectors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompositeDetector compositeDetector0 = null;
      try {
        compositeDetector0 = new CompositeDetector((Detector[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ProbabilisticMimeDetectionSelector probabilisticMimeDetectionSelector0 = new ProbabilisticMimeDetectionSelector(mimeTypes0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader1);
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(probabilisticMimeDetectionSelector0, serviceLoader0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)63);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Metadata metadata0 = new Metadata();
      try { 
        defaultProbDetector0.detect(sequenceInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(mimeTypes0);
      List<Detector> list0 = defaultProbDetector0.getDetectors();
      CompositeDetector compositeDetector0 = new CompositeDetector((MediaTypeRegistry) null, list0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        compositeDetector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultDetector defaultDetector0 = new DefaultDetector(mimeTypes0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = defaultDetector0.detect(bufferedInputStream0, metadata0);
      assertEquals("octet-stream", mediaType0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Detector[] detectorArray0 = new Detector[0];
      CompositeDetector compositeDetector0 = new CompositeDetector(detectorArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Metadata metadata0 = new Metadata();
      compositeDetector0.detect(bufferedInputStream0, metadata0);
      MediaType mediaType0 = compositeDetector0.detect(bufferedInputStream0, metadata0);
      assertEquals("application/octet-stream", mediaType0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      DefaultDetector defaultDetector0 = new DefaultDetector(mimeTypes0, classLoader1);
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader1);
      serviceLoader0.getResourceAsStream("application/xml");
      // Undeclared exception!
      try { 
        defaultDetector0.detect((InputStream) null, (Metadata) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MimeTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Detector[] detectorArray0 = new Detector[1];
      MimeTypes mimeTypes0 = new MimeTypes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0);
      DefaultDetector defaultDetector0 = new DefaultDetector(mimeTypes0, serviceLoader0);
      detectorArray0[0] = (Detector) defaultDetector0;
      CompositeDetector compositeDetector0 = new CompositeDetector(detectorArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaTypeRegistry mediaTypeRegistry0 = new MediaTypeRegistry();
      ServiceLoader serviceLoader0 = new ServiceLoader();
      Class<Detector> class0 = Detector.class;
      List<Detector> list0 = serviceLoader0.loadStaticServiceProviders(class0);
      CompositeDetector compositeDetector0 = new CompositeDetector(mediaTypeRegistry0, list0);
      List<Detector> list1 = compositeDetector0.getDetectors();
      CompositeDetector compositeDetector1 = new CompositeDetector(list1);
      assertFalse(compositeDetector1.equals((Object)compositeDetector0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultDetector defaultDetector0 = new DefaultDetector(mimeTypes0);
      List<Detector> list0 = defaultDetector0.getDetectors();
      CompositeDetector compositeDetector0 = new CompositeDetector(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(mimeTypes0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader serviceLoader0 = new ServiceLoader(classLoader0, (LoadErrorHandler) null);
      InputStream inputStream0 = serviceLoader0.getResourceAsStream("");
      Metadata metadata0 = new Metadata();
      MediaType mediaType0 = defaultProbDetector0.detect(inputStream0, metadata0);
      assertEquals("text", mediaType0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Detector[] detectorArray0 = new Detector[1];
      CompositeDetector compositeDetector0 = new CompositeDetector(detectorArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MimeTypes mimeTypes0 = new MimeTypes();
      DefaultProbDetector defaultProbDetector0 = new DefaultProbDetector(mimeTypes0);
      Metadata metadata0 = new Metadata();
      defaultProbDetector0.detect((InputStream) null, metadata0);
      Metadata metadata1 = new Metadata();
      MediaType.parse("application/octet-stream");
      List<Detector> list0 = defaultProbDetector0.getDetectors();
      List<Detector> list1 = defaultProbDetector0.getDetectors();
      assertTrue(list1.equals((Object)list0));
  }
}
