/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:32:22 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.regex.PatternSyntaxException;
import org.apache.tika.detect.MagicDetector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MagicDetector_ESTest extends MagicDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = new MediaType("+d<9J}WnCBYkHu$,h", "+d<9J}WnCBYkHu$,h");
      byte[] byteArray0 = new byte[6];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, false, true, 1, 473);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("octet-stream", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[5];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, (byte)42);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)42, 0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = new MediaType("U6mBBls@&?*l", "U6mBBls@&?*l");
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "U6mBBls@&?*l", "tiff:ImageWidth", "s", "s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"tiff\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        MagicDetector.parse((MediaType) null, "", "subject", "<m)9gq;3h?,", "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"subject\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "8", "8", "8", "8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      int int0 = magicDetector0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = new MediaType("+d<9J}WnCBYkHu$,h", "+d<9J}WnCBYkHu$,h");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, 0, 473);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        magicDetector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *\u0000\u0000\u0000\u0000\u0000
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = new MediaType("comment", "XPATH");
      byte[] byteArray0 = new byte[3];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, 0, 120);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        magicDetector0.detect(dataInputStream0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[7];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-406), (byte)84);
      Metadata metadata0 = new Metadata();
      // Undeclared exception!
      try { 
        magicDetector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector((MediaType) null, byteArray0, byteArray0, false, (byte)51, (-2331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matching media type is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[2];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, (byte) (-45), (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [-45,0]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector((MediaType) null, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matching media type is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.video((String) null);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[8];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, true, false, (byte)4, (byte)4);
      assertEquals(9, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, (byte[]) null, true, false, 13, 13);
      assertEquals(1, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.application("l!FDL.a+;C");
      byte[] byteArray0 = new byte[3];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, false, (-951), (-951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [-951,-951]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[3];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, (byte[]) null, byteArray0, true, false, 8, (byte)61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector((MediaType) null, byteArray0, byteArray0, true, true, (-546), (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matching media type is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaType mediaType0 = new MediaType("+d<9J}WnCBYkHu$,h", "+d<9J}WnCBYkHu$,h");
      byte[] byteArray0 = new byte[6];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, false, true, 0, 473);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(dataInputStream0, metadata0);
      assertEquals("+d<9j}wncbykhu$,h", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-28);
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("octet-stream", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      byte[] byteArray0 = new byte[7];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, false, (byte)0, 0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Metadata metadata0 = new Metadata();
      try { 
        magicDetector0.detect(sequenceInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = new MediaType("+d<9J}WnCBYkHu$,h", "+d<9J}WnCBYkHu$,h");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, 0, 473);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("octet-stream", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[9];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, 97, 2563);
      MockFile mockFile0 = new MockFile("PHOm\"OK*7");
      File file0 = MockFile.createTempFile("PHOm\"OK*7", "PHOm\"OK*7", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Metadata metadata0 = new Metadata();
      try { 
        magicDetector0.detect(mockFileInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, (byte)43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertFalse(mediaType1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", (String) null, "$Id0FneZn&}>%Cv:o", "$Id0FneZn&}>%Cv:o");
      Metadata metadata0 = new Metadata();
      magicDetector0.detect((InputStream) null, metadata0);
      assertEquals(34, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[3];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, true, true, (byte)11, (byte)11);
      assertEquals(3, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[5];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, false, false, (byte)66, (-665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [66,-665]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[9];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, (byte) (-74));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [-74,-74]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "regex", (String) null, "realization", "SvOm\t");
      assertEquals(11, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "regex", (String) null, "realization", "0xMagic Detection for application/x-empty looking for 5 bytes = [B@bb43d89 mask = [B@7f6a0551");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ma\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      String string0 = "realization";
      String string1 = null;
      String string2 = "0xMagic Detection for application/x-empty looking for 5 bytes = [B@bb43d89 mask = [B@7f6a0551";
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, string0, string1, string2, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, (String) null, (String) null, (String) null, "D\";f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "Og39U", (String) null, "Magic Detection for application/x-empty looking for 5 bytes = [B@6d7dd41e mask = [B@243a66bb", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.image((String) null);
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "big32", (String) null, "X+7#$R7YtVcl9", "Magic Detection for image/null looking for 4 bytes = [B@472a441f mask = [B@4d362d24");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X+7#$R7YtVcl9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.image((String) null);
      byte[] byteArray0 = new byte[4];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, 8, 12);
      String string0 = magicDetector0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.image((String) null);
      byte[] byteArray0 = new byte[4];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, 8, 12);
      int int0 = magicDetector0.getLength();
      assertEquals(4, int0);
  }
}
