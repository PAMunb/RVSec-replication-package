/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:37:01 GMT 2022
 */

package org.apache.tika.detect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import org.apache.tika.detect.MagicDetector;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.mime.MediaType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MagicDetector_ESTest extends MagicDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1228), 16);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Metadata metadata0 = new Metadata();
      byte[] byteArray1 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray1);
      assertEquals(0, magicDetector0.getLength());
      
      MediaType mediaType1 = magicDetector0.detect(dataInputStream0, metadata0);
      assertEquals("application/zip", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 135);
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertFalse(mediaType1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "unicodeBE", "1", "4%k4^UKNxp,=YwC ?R~", "0xContent-Location");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, 58, 358);
      assertEquals(1, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "UA4FPUrNKqZ}s", "7:.O", "dvkXA'L", "little32");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "big16", (String) null, "1", "y=][AQ5?-b$^H6B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y=][AQ5?-b$^H6B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, 857);
      int int0 = magicDetector0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MediaType mediaType0 = MediaType.TEXT_HTML;
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      MagicDetector magicDetector0 = new MagicDetector(mediaType1, byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType2 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("text/html; charset=UTF-8", mediaType2.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      Metadata metadata0 = new Metadata();
      byte[] byteArray0 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        magicDetector0.detect(dataInputStream0, metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-83), 10);
      Metadata metadata0 = new Metadata();
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      // Undeclared exception!
      try { 
        magicDetector0.detect(byteArrayInputStream0, metadata0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      byte[] byteArray0 = new byte[8];
      Metadata metadata0 = new Metadata();
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        magicDetector0.detect(pipedInputStream0, metadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, (byte[]) null, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray1, true, 59, 92);
      assertEquals(8, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector((MediaType) null, (byte[]) null, (byte[]) null, true, 45, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matching media type is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", "1", "@t+4O3B@/W&e", "License-Location");
      assertEquals(32, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, (byte)2, 837);
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application/octet-stream", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, false, 5, 3863);
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("html", mediaType1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", "1", "1", "1");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals("application", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", "1", "unicodeBE", "unicodeBE");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Metadata metadata0 = new Metadata();
      MediaType mediaType1 = magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertNotSame(mediaType0, mediaType1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      byte[] byteArray0 = new byte[0];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0);
      magicDetector0.detect((InputStream) null, (Metadata) null);
      assertEquals(0, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", "1", "unicodeBE", "unicodeBE");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)60, (byte)60);
      Metadata metadata0 = new Metadata();
      magicDetector0.detect(byteArrayInputStream0, metadata0);
      assertEquals(18, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray1, byteArray0, true, 0, (byte)60);
      assertEquals(1, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      byte[] byteArray0 = new byte[4];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, (byte)16, (-1158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [16,-1158]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.image((String) null);
      byte[] byteArray0 = new byte[6];
      MagicDetector magicDetector0 = null;
      try {
        magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, (-70), 843);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid offset range: [-70,843]
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MagicDetector.parse((MediaType) null, "type", (String) null, "description", ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matching media type is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "stringignorecase", (String) null, "'VsK{:4Bne/", "stringignorecase");
      assertEquals(16, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "stringignorecase", "1", "0x1", "0x1");
      assertEquals(0, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "big32", "1", "1", "G\"j}dYt<X:MhH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G\"j}dYt<X:MhH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "little32", (String) null, "little32", (String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"little32\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        MagicDetector.parse((MediaType) null, "host32", "4", "4", "host32");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"host32\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "little16", "1", "1", "stringignorecase");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"stringignorecase\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "byte", "3", "0x1", "}>H");
      assertEquals(3, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "stringignorecase", (String) null, (String) null, "0xb2b~pb9Q(TH-QZjO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "unicodeLE", (String) null, (String) null, "unicodeLE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "regex", "3", "3", "regex");
      assertEquals(5, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "string", (String) null, "string", "'VsK{:4Bne/");
      assertEquals(11, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MediaType mediaType0 = new MediaType("qX6yB,/", "]alg9e#dQDk");
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, (String) null, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.video((String) null);
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, (String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      // Undeclared exception!
      try { 
        MagicDetector.parse(mediaType0, "host16", (String) null, "coverage", "qI0&fUK+SleAl@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"coverage\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MagicDetector magicDetector0 = MagicDetector.parse(mediaType0, "unicodeBE", "1", "unicodeBE", "unicodeBE");
      magicDetector0.toString();
      assertEquals(18, magicDetector0.getLength());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      byte[] byteArray0 = new byte[8];
      MagicDetector magicDetector0 = new MagicDetector(mediaType0, byteArray0, byteArray0, true, true, 95, 95);
      int int0 = magicDetector0.getLength();
      assertEquals(8, int0);
  }
}
