/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:59:54 GMT 2022
 */

package org.apache.tika.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.sql.Blob;
import javax.sql.rowset.serial.SerialBlob;
import org.apache.tika.io.CloseShieldInputStream;
import org.apache.tika.io.CountingInputStream;
import org.apache.tika.io.TaggedInputStream;
import org.apache.tika.io.TikaInputStream;
import org.apache.tika.metadata.Metadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProxyInputStream_ESTest extends ProxyInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      tikaInputStream0.mark(4);
      assertFalse(tikaInputStream0.hasFile());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      tikaInputStream0.beforeRead(0);
      assertFalse(tikaInputStream0.hasFile());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0, metadata0);
      tikaInputStream0.afterRead((byte) (-67));
      assertTrue(tikaInputStream0.hasLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 10, 0);
      CloseShieldInputStream closeShieldInputStream0 = new CloseShieldInputStream(byteArrayInputStream0);
      closeShieldInputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      long long0 = countingInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      long long0 = countingInputStream0.skip(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-91));
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(byteArrayInputStream0);
      long long0 = taggedInputStream0.skip((byte)0);
      assertEquals((-91L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      tikaInputStream0.skip((byte)24);
      int int0 = tikaInputStream0.read(byteArray0, 0, 0);
      assertEquals(7L, tikaInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = TaggedInputStream.get(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = taggedInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      int int0 = tikaInputStream0.read();
      assertEquals(1L, tikaInputStream0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      int int0 = tikaInputStream0.read();
      assertEquals(1L, tikaInputStream0.getPosition());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) countingInputStream0);
      boolean boolean0 = tikaInputStream0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(countingInputStream0);
      boolean boolean0 = taggedInputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      int int0 = countingInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      int int0 = tikaInputStream0.available();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte) (-91));
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(byteArrayInputStream0);
      int int0 = taggedInputStream0.available();
      assertEquals((-91), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.skip(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      try { 
        countingInputStream0.skip(450L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(pipedInputStream0);
      try { 
        taggedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      try { 
        countingInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      // Undeclared exception!
      try { 
        tikaInputStream0.read((byte[]) null, 3580, 3722);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      // Undeclared exception!
      try { 
        tikaInputStream0.read(byteArray0, (-10), (-10));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) countingInputStream0);
      try { 
        tikaInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      // Undeclared exception!
      try { 
        tikaInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      try { 
        countingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      try { 
        countingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.markSupported();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        tikaInputStream0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        countingInputStream0.handleIOException((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CountingInputStream countingInputStream0 = new CountingInputStream(pipedInputStream0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        countingInputStream0.handleIOException(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      tikaInputStream0.setOpenContainer(tikaInputStream0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      // Undeclared exception!
      countingInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      CountingInputStream countingInputStream0 = new CountingInputStream(mockFileInputStream0);
      try { 
        countingInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      TikaInputStream tikaInputStream0 = TikaInputStream.get(byteArray0);
      tikaInputStream0.read(byteArray0);
      int int0 = tikaInputStream0.read();
      assertEquals(7L, tikaInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(pipedInputStream0);
      TikaInputStream tikaInputStream0 = TikaInputStream.get((InputStream) taggedInputStream0);
      try { 
        tikaInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.mark(3779);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TaggedInputStream taggedInputStream0 = new TaggedInputStream(pipedInputStream0);
      CountingInputStream countingInputStream0 = new CountingInputStream(taggedInputStream0);
      try { 
        countingInputStream0.skip(2956L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.tika.io.TaggedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      CountingInputStream countingInputStream0 = new CountingInputStream(tikaInputStream0);
      countingInputStream0.close();
      assertEquals(0L, countingInputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      int int0 = tikaInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      SerialBlob serialBlob0 = new SerialBlob(byteArray0);
      Metadata metadata0 = new Metadata();
      TikaInputStream tikaInputStream0 = TikaInputStream.get((Blob) serialBlob0, metadata0);
      tikaInputStream0.skip((byte)24);
      int int0 = tikaInputStream0.read(byteArray0);
      assertEquals(7L, tikaInputStream0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CountingInputStream countingInputStream0 = new CountingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        countingInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.io.ProxyInputStream", e);
      }
  }
}
