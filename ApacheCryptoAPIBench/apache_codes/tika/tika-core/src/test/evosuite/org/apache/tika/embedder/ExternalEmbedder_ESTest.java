/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:34:37 GMT 2022
 */

package org.apache.tika.embedder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.tika.embedder.ExternalEmbedder;
import org.apache.tika.metadata.Message;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.Property;
import org.apache.tika.metadata.TIFF;
import org.apache.tika.mime.MediaType;
import org.apache.tika.parser.ParseContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExternalEmbedder_ESTest extends ExternalEmbedder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      Property property0 = Message.MESSAGE_BCC_NAME;
      String[] stringArray0 = new String[10];
      stringArray0[0] = "${METADATA_SERIALIZED}";
      hashMap0.put(property0, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      Metadata metadata0 = new Metadata();
      metadata0.set(property0, stringArray0);
      List<String> list0 = externalEmbedder0.getCommandMetadataSegments(metadata0);
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals(100, list0.size());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      externalEmbedder0.getMetadataCommandArguments();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String[] stringArray0 = new String[4];
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      hashMap0.put((Property) null, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      externalEmbedder0.getMetadataCommandArguments();
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      
      externalEmbedder0.setCommandAssignmentOperator((String) null);
      externalEmbedder0.getCommandAssignmentOperator();
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      
      externalEmbedder0.setCommandAssignmentOperator("");
      String string0 = externalEmbedder0.getCommandAssignmentOperator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      
      externalEmbedder0.setCommandAssignmentDelimeter("");
      String string0 = externalEmbedder0.getCommandAssignmentDelimeter();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      
      externalEmbedder0.setCommandAppendOperator((String) null);
      externalEmbedder0.getCommandAppendOperator();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      
      externalEmbedder0.setCommandAppendOperator("");
      String string0 = externalEmbedder0.getCommandAppendOperator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      externalEmbedder0.setCommand((String[]) null);
      externalEmbedder0.getCommand();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String[] stringArray0 = new String[0];
      externalEmbedder0.setCommand(stringArray0);
      externalEmbedder0.getCommand();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      // Undeclared exception!
      try { 
        externalEmbedder0.setSupportedEmbedTypes((Set<MediaType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      Property property0 = TIFF.IMAGE_LENGTH;
      String[] stringArray0 = new String[1];
      hashMap0.put(property0, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      Metadata metadata0 = new Metadata();
      String[] stringArray1 = new String[0];
      metadata0.set(property0, stringArray1);
      // Undeclared exception!
      try { 
        externalEmbedder0.getCommandMetadataSegments(metadata0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.tika.metadata.Metadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      Metadata metadata0 = new Metadata();
      MockPrintStream mockPrintStream0 = new MockPrintStream("title");
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        externalEmbedder0.embed(metadata0, (InputStream) null, mockPrintStream0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Stream must not be null
         //
         verifyException("org.apache.tika.io.TikaInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ExternalEmbedder.check((String) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        ExternalEmbedder.check("", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty command
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        ExternalEmbedder.check(stringArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int[] intArray0 = new int[0];
      boolean boolean0 = ExternalEmbedder.check(stringArray0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ExternalEmbedder.check(";tv^3`5", intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String[] stringArray0 = new String[0];
      externalEmbedder0.setCommand(stringArray0);
      Metadata metadata0 = new Metadata();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("License-Url");
      ParseContext parseContext0 = new ParseContext();
      try { 
        externalEmbedder0.embed(metadata0, sequenceInputStream0, mockFileOutputStream0, parseContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "${METADATA_SERIALIZED}";
      stringArray0[1] = "${METADATA}";
      externalEmbedder0.setCommand(stringArray0);
      Metadata metadata0 = new Metadata();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("License-Url");
      ParseContext parseContext0 = new ParseContext();
      // Undeclared exception!
      try { 
        externalEmbedder0.embed(metadata0, sequenceInputStream0, mockFileOutputStream0, parseContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.embedder.ExternalEmbedder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b-R*";
      externalEmbedder0.setCommand(stringArray0);
      Metadata metadata0 = new Metadata();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("identifier", false);
      ParseContext parseContext0 = new ParseContext();
      try { 
        externalEmbedder0.embed(metadata0, dataInputStream0, mockFileOutputStream0, parseContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
          HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
          Property property0 = TIFF.IMAGE_LENGTH;
          String[] stringArray0 = new String[1];
          hashMap0.put(property0, stringArray0);
          externalEmbedder0.setMetadataCommandArguments(hashMap0);
          Metadata metadata0 = new Metadata();
          Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
          doReturn(false).when(enumeration0).hasMoreElements();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rights");
          FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
          MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
          BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
          ParseContext parseContext0 = new ParseContext();
          // Undeclared exception!
          try { 
            externalEmbedder0.embed(metadata0, pushbackInputStream0, bufferedOutputStream0, parseContext0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = ExternalEmbedder.serializeMetadata(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ExternalEmbedder.serializeMetadata((List<String>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      Property property0 = TIFF.IMAGE_LENGTH;
      String[] stringArray0 = new String[10];
      hashMap0.put(property0, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      
      externalEmbedder0.setQuoteAssignmentValues(true);
      Metadata metadata0 = new Metadata();
      String[] stringArray1 = new String[1];
      metadata0.set(property0, stringArray1);
      externalEmbedder0.getCommandMetadataSegments(metadata0);
      assertTrue(externalEmbedder0.isQuoteAssignmentValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      Property property0 = TIFF.IMAGE_LENGTH;
      String[] stringArray0 = new String[10];
      hashMap0.put(property0, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      
      externalEmbedder0.setQuoteAssignmentValues(true);
      Metadata metadata0 = new Metadata();
      metadata0.set(property0, stringArray0);
      externalEmbedder0.getCommandMetadataSegments(metadata0);
      assertTrue(externalEmbedder0.isQuoteAssignmentValues());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      Property property0 = TIFF.IMAGE_LENGTH;
      String[] stringArray0 = new String[10];
      hashMap0.put(property0, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      Metadata metadata0 = new Metadata();
      String[] stringArray1 = new String[1];
      metadata0.set(property0, stringArray1);
      List<String> list0 = externalEmbedder0.getCommandMetadataSegments(metadata0);
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertEquals(10, list0.size());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
      Property property0 = TIFF.IMAGE_LENGTH;
      String[] stringArray0 = new String[1];
      hashMap0.put(property0, stringArray0);
      externalEmbedder0.setMetadataCommandArguments(hashMap0);
      Metadata metadata0 = new Metadata();
      metadata0.set(metadata0.DATE, stringArray0);
      List<String> list0 = externalEmbedder0.getCommandMetadataSegments(metadata0);
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertTrue(list0.isEmpty());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      Metadata metadata0 = new Metadata();
      metadata0.add("", "${METADATA_SERIALIZED}");
      // Undeclared exception!
      try { 
        externalEmbedder0.getCommandMetadataSegments(metadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.embedder.ExternalEmbedder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      externalEmbedder0.getCommandMetadataSegments((Metadata) null);
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      externalEmbedder0.getMetadataCommandArguments();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String string0 = externalEmbedder0.getCommandAssignmentDelimeter();
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals(", ", string0);
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      
      externalEmbedder0.setQuoteAssignmentValues(true);
      boolean boolean0 = externalEmbedder0.isQuoteAssignmentValues();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      ParseContext parseContext0 = new ParseContext();
      externalEmbedder0.getSupportedEmbedTypes(parseContext0);
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      Set<MediaType> set0 = externalEmbedder0.getSupportedEmbedTypes();
      externalEmbedder0.setSupportedEmbedTypes(set0);
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String string0 = externalEmbedder0.getCommandAppendOperator();
      assertEquals("=", string0);
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String string0 = externalEmbedder0.getCommandAssignmentOperator();
      assertEquals("=", string0);
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      boolean boolean0 = externalEmbedder0.isQuoteAssignmentValues();
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertFalse(boolean0);
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
      String[] stringArray0 = externalEmbedder0.getCommand();
      assertEquals(4, stringArray0.length);
      assertEquals(", ", externalEmbedder0.getCommandAssignmentDelimeter());
      assertFalse(externalEmbedder0.isQuoteAssignmentValues());
      assertEquals("=", externalEmbedder0.getCommandAssignmentOperator());
      assertEquals("=", externalEmbedder0.getCommandAppendOperator());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ExternalEmbedder externalEmbedder0 = new ExternalEmbedder();
          HashMap<Property, String[]> hashMap0 = new HashMap<Property, String[]>();
          externalEmbedder0.setMetadataCommandArguments(hashMap0);
          Metadata metadata0 = new Metadata();
          Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
          doReturn(false).when(enumeration0).hasMoreElements();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rights");
          FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
          MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
          BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 2);
          ParseContext parseContext0 = new ParseContext();
          // Undeclared exception!
          try { 
            externalEmbedder0.embed(metadata0, pushbackInputStream0, bufferedOutputStream0, parseContext0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file or directory
             //
             verifyException("java.nio.file.TempFileHelper", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
