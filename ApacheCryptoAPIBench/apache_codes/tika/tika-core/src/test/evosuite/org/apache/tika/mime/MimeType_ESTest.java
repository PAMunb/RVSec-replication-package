/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 15:35:48 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.apache.tika.mime.AndClause;
import org.apache.tika.mime.Clause;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.OrClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MimeType_ESTest extends MimeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      boolean boolean0 = mimeType1.equals(mimeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("8g=uV", "8g=uV");
      boolean boolean0 = mimeType0.matchesXML("KS{\";vCbE n", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("!m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("application/octet-stream");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setUniformTypeIdentifier("kC^_`7|gL<T");
      String string0 = mimeType0.getUniformTypeIdentifier();
      assertEquals("kC^_`7|gL<T", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MediaType mediaType1 = new MediaType(mediaType0, " ", "'2^yQW!qo%#J");
      MimeType mimeType0 = new MimeType(mediaType1);
      MediaType mediaType2 = mimeType0.getType();
      assertFalse(mediaType2.equals((Object)mediaType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension("Shb");
      String string0 = mimeType0.getExtension();
      assertEquals("Shb", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setDescription("a '");
      String string0 = mimeType0.getDescription();
      assertEquals("a '", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setAcronym("/");
      String string0 = mimeType0.getAcronym();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      MediaType mediaType1 = MediaType.audio("I~q");
      MimeType mimeType1 = new MimeType(mediaType1);
      int int0 = mimeType0.compareTo(mimeType1);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType1 = new MediaType("big32", "big32", hashMap0);
      MimeType mimeType1 = new MimeType(mediaType1);
      int int0 = mimeType0.compareTo(mimeType1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 1, orClause0);
      linkedList0.add((Clause) magic0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      mimeType0.matchesMagic((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "<D", "<D", "<D", "<D");
      Magic magic0 = new Magic(mimeType0, (-1430), magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, (-1431655763), (Clause) null);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "0", "0", "0", "0");
      Magic magic0 = new Magic(mimeType0, 62, magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, 1479, orClause0);
      linkedList0.push(orClause0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      mimeType0.matches((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "0n~Q4i*.9RX", "0n~Q4i*.9RX", "0n~Q4i*.9RX", "0n~Q4i*.9RX");
      Magic magic0 = new Magic(mimeType0, (-293), magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0n~Q4i*.9RX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, 1654, (Clause) null);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "0", "0", "0", "Name is missing");
      Magic magic0 = new Magic(mimeType0, (-517), magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.parse("A%Ei9+n/~");
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.compareTo((MimeType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 36, andClause0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = mimeType0.matchesMagic(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = mimeType0.matchesMagic(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.toString();
      assertEquals("text/html", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = new MediaType("l<rsPiRIO9", "l<rsPiRIO9");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension("l<rsPiRIO9");
      mimeType0.addExtension("");
      mimeType0.addExtension("l<rsPiRIO9");
      assertFalse(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension("Shb");
      List<String> list0 = mimeType0.getExtensions();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<String> list0 = mimeType0.getExtensions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getExtension();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension((String) null);
      String string0 = mimeType0.getExtension();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.equals(mediaType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "0", "");
      boolean boolean0 = mimeType_RootXML0.matches("0", "0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "XUz(hYWc? ", "");
      boolean boolean0 = mimeType_RootXML0.matches("XUz(hYWc? ", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "", "big32");
      boolean boolean0 = mimeType_RootXML0.matches("big32", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = new MediaType("g.pache.tika.mime.MimeType$RooXML", "g.pache.tika.mime.MimeType$RooXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "", "g.pache.tika.mime.MimeType$RooXML");
      boolean boolean0 = mimeType_RootXML0.matches("", "g.pache.tika.mime.MimeType$RooXML");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.addRootXML((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both namespaceURI and localName cannot be empty
         //
         verifyException("org.apache.tika.mime.MimeType$RootXML", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, (-1663), andClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.matches((byte[]) null);
      assertTrue(mimeType0.hasMagic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = new MediaType("regex", "A%Ei9+n/~");
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 16, orClause0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = mimeType0.matchesMagic(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, 1630, (Clause) null);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.hasMagic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.hasMagic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = new MediaType("regex", "A%Ei9+n/~");
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 16, orClause0);
      mimeType0.addMagic(magic0);
      mimeType0.addMagic(magic0);
      assertTrue(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addMagic((Magic) null);
      assertFalse(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "", "", "", "");
      Magic magic0 = new Magic(mimeType0, 1310, magicMatch0);
      mimeType0.addMagic(magic0);
      mimeType0.getMagics();
      assertTrue(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      List<Magic> list0 = mimeType0.getMagics();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("([^c()<>@,;:\\\"/[]?=s]+)", "y;|e_>p .M.h");
      boolean boolean0 = mimeType0.hasRootXML();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.hasRootXML();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("I~q", "I~q");
      boolean boolean0 = mimeType0.matchesXML("I~q", "I~q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("I~q", "image/");
      boolean boolean0 = mimeType0.matchesXML("I~q", "I~q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.matchesXML("^ck", "^ck");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("I~q", "image/");
      mimeType0.addRootXML("I~q", "I~q");
      assertEquals("", mimeType0.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.addLink((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Link
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      URI uRI0 = MockURI.aFTPURI;
      mimeType0.addLink(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setUniformTypeIdentifier((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Uniform Type Identifier is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setAcronym((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Acronym is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setDescription((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Description is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MimeType mimeType0 = null;
      try {
        mimeType0 = new MimeType((MediaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Media type name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("/;)mHLC+wgB{&E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("Vex/gP/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("e_4$H?QQNWWbF\":xq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("DO8S]A4+7Q`et`aOn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("[()<>@,;:\\\"/[]?=s]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("4A\"YPv<:`&Wl[hv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = MimeType.isValid(":JpD= -i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("aex;/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("NZW,(yq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("D9V@qtK,vK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("Mis>sing Link");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("kC^_`7|gL<T");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("U|)uP6m~aJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("S5yM8(E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("A%Ei9+n/~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("Missing Link");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeType.isValid((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("aexD/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      int int0 = mimeType0.compareTo(mimeType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.matches((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<URI> list0 = mimeType0.getLinks();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      int int0 = mimeType0.getMinLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getName();
      assertEquals("video/i~q", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getAcronym();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getUniformTypeIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      MediaType mediaType1 = mimeType0.getType();
      assertFalse(mediaType1.hasParameters());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, (String) null, "p}NZ adJ?r}");
      String string0 = mimeType_RootXML0.getNameSpaceURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "FD?0TzX=0", "FD?0TzX=0");
      String string0 = mimeType_RootXML0.getLocalName();
      assertEquals("FD?0TzX=0", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "kC^_`7|gL<T", "'");
      MimeType mimeType1 = mimeType_RootXML0.getType();
      assertSame(mimeType0, mimeType1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("I~q");
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "I~q", "I~q");
      String string0 = mimeType_RootXML0.toString();
      assertEquals("video/i~q, I~q, I~q", string0);
  }
}
