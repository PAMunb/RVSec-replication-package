/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:16:57 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.apache.tika.mime.AndClause;
import org.apache.tika.mime.Clause;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.OrClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MimeType_ESTest extends MimeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      boolean boolean0 = mimeType1.equals(mimeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("vZD7Nw/8_CEMMoiHf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MediaType mediaType1 = new MediaType(mediaType0, "5*9S= fwp", "5*9S= fwp");
      MimeType mimeType0 = new MimeType(mediaType1);
      MediaType mediaType2 = mimeType0.getType();
      assertNotSame(mediaType0, mediaType2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension((String) null);
      String string0 = mimeType0.getExtension();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setDescription("r7[@`vC~1sfhc9G");
      String string0 = mimeType0.getDescription();
      assertEquals("r7[@`vC~1sfhc9G", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MediaType mediaType1 = new MediaType("\\$0", "?cj3qzX$(6(~N'VZ++");
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType mimeType1 = new MimeType(mediaType1);
      int int0 = mimeType0.compareTo(mimeType1);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1110);
      MediaType mediaType0 = new MediaType("K|", "y8G~]u", hashMap0);
      MimeType mimeType0 = new MimeType(mediaType0);
      Charset charset0 = Charset.defaultCharset();
      MediaType mediaType1 = new MediaType(mediaType0, charset0);
      MimeType mimeType1 = new MimeType(mediaType1);
      int int0 = mimeType0.compareTo(mimeType1);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      Clause[] clauseArray0 = new Clause[6];
      OrClause orClause0 = new OrClause(linkedList0);
      clauseArray0[0] = (Clause) orClause0;
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, (-2691), andClause0);
      linkedList0.add((Clause) magic0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "org.apache.tika.detect.MagicDetector", "Missing Link", "Missing Link", "org.apache.tika.detect.MagicDetector");
      Magic magic0 = new Magic(mimeType0, (-2018), magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Missing Link\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, 41, (Clause) null);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Magic", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "Magic match pattern is null", (String) null, "Magic match pattern is null", "Magic match pattern is null");
      Magic magic0 = new Magic(mimeType0, 0, magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, 47, orClause0);
      linkedList0.offerFirst(orClause0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "Invalid offset range: [", "Invalid offset range: [", "Invalid offset range: [", "Invalid offset range: [");
      Magic magic0 = new Magic(mimeType0, 58, magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Invalid offset range\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "'", (String) null, "]M(lto\"9Mjk#a", "Missing Link");
      Magic magic0 = new Magic(mimeType0, 2321, magicMatch0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.addRootXML((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both namespaceURI and localName cannot be empty
         //
         verifyException("org.apache.tika.mime.MimeType$RootXML", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, (-464), andClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.matchesMagic((byte[]) null);
      assertTrue(mimeType0.hasMagic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.matchesMagic((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("\\$0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1110);
      MediaType mediaType0 = new MediaType("K|", "y8G~]u", hashMap0);
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.toString();
      assertEquals("k|/y8g~]u", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension(" a8J\"jVsjyOyk");
      mimeType0.addExtension("");
      mimeType0.addExtension("`)%xqOA8BuN#c");
      assertEquals("", mimeType0.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension(" a8J\"jVsjyOyk");
      List<String> list0 = mimeType0.getExtensions();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<String> list0 = mimeType0.getExtensions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getExtension();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension(" a8J\"jVsjyOyk");
      mimeType0.getExtension();
      assertEquals(" a8J\"jVsjyOyk", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.equals("^/x8i;/S@@R*W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MediaType mediaType0 = MediaType.application((String) null);
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "Uniform Type Identifier is missing", (String) null);
      boolean boolean0 = mimeType_RootXML0.matches("Uniform Type Identifier is missing", "Uniform Type Identifier is missing");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("Y'\"YC", "Y'\"YC");
      boolean boolean0 = mimeType0.matchesXML("Y'\"YC", "_tUW~9-lFl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio("byte");
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, (String) null, "byte");
      boolean boolean0 = mimeType_RootXML0.matches("byte", "byte");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio((String) null);
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, (String) null, "/7");
      boolean boolean0 = mimeType_RootXML0.matches((String) null, "/7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = null;
      try {
        mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both namespaceURI and localName cannot be empty
         //
         verifyException("org.apache.tika.mime.MimeType$RootXML", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 47, andClause0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = mimeType0.matches(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, (-2018), orClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.matchesMagic((byte[]) null);
      assertTrue(mimeType0.hasMagic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, 379, (Clause) null);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.Magic", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 2515, orClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.hasMagic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.hasMagic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      Magic magic0 = new Magic(mimeType0, (-1999), orClause0);
      mimeType0.addMagic(magic0);
      mimeType0.addMagic(magic0);
      assertTrue(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addMagic((Magic) null);
      assertFalse(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "_tUW~9-lFl", "Y'\"YC", "{bFI]@l", "?cj3qzX$(6(~N'VZ++");
      Magic magic0 = new Magic(mimeType0, 324, magicMatch0);
      mimeType0.addMagic(magic0);
      mimeType0.getMagics();
      assertTrue(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<Magic> list0 = mimeType0.getMagics();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML((String) null, "image/");
      boolean boolean0 = mimeType0.hasRootXML();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.hasRootXML();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("\\$0", (String) null);
      boolean boolean0 = mimeType0.matchesXML("\\$0", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("Y'\"YC", "Y'\"YC");
      boolean boolean0 = mimeType0.matchesXML("_tUW~9-lFl", "_tUW~9-lFl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.matchesXML("Media type name is missing", " a8J\"jVsjyOyk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("dD", "org.apache.tika.detect.MagicDetector");
      mimeType0.addRootXML((String) null, "dD");
      assertEquals("", mimeType0.getUniformTypeIdentifier());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MediaType mediaType0 = new MediaType("gSuN", "gSuN");
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.addLink((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Link
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MediaType mediaType0 = new MediaType("org.apache.tika.mime.MimeType", "application/");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addLink(uRI0);
      assertTrue(uRI0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MediaType mediaType0 = MediaType.text((String) null);
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setUniformTypeIdentifier((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Uniform Type Identifier is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setUniformTypeIdentifier("Y'\"YC");
      String string0 = mimeType0.getUniformTypeIdentifier();
      assertEquals("Y'\"YC", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setAcronym((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Acronym is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setAcronym("Missing Link");
      String string0 = mimeType0.getAcronym();
      assertEquals("Missing Link", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setDescription((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Description is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MimeType mimeType0 = null;
      try {
        mimeType0 = new MimeType((MediaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Media type name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("image/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("/4`Bd(xJfim|7=>7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("?0H}pPE8!0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("]\"k_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("[F^W*v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("\u0000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("7'E:}9GE67by7#/w&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("D;HLsqd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = MimeType.isValid(",hR 6?=Lk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("%pNxY/ye@TY%G4{0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("IJ`>{x09\u0005k(s}*o\"nR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("qw1KD&#<Y#4]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("t-d9_uU)[wD(P# ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = MimeType.isValid(".( fj'NihQ%K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("5*9S= fwp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("Diom ).={");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("hFH}pPE8!0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeType.isValid((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("W&/FqZj/),{|h3&~Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1110);
      MediaType mediaType0 = new MediaType("K|", "y8G~]u", hashMap0);
      MimeType mimeType0 = new MimeType(mediaType0);
      int int0 = mimeType0.compareTo(mimeType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = mimeType0.matches(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<URI> list0 = mimeType0.getLinks();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      int int0 = mimeType0.getMinLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1110);
      MediaType mediaType0 = new MediaType("K|", "y8G~]u", hashMap0);
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getName();
      assertEquals("k|/y8g~]u", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getAcronym();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getUniformTypeIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      MediaType mediaType1 = mimeType0.getType();
      assertEquals("application", mediaType1.getType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML((MimeType) null, "Uniform Type Identifier is missing", "Uniform Type Identifier is missing");
      String string0 = mimeType_RootXML0.getNameSpaceURI();
      assertEquals("Uniform Type Identifier is missing", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "Description is missing", "ittle32");
      String string0 = mimeType_RootXML0.getLocalName();
      assertEquals("ittle32", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "", "4Mob-SXs6g");
      MimeType mimeType1 = mimeType_RootXML0.getType();
      assertEquals("", mimeType1.getDescription());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "K", "K");
      String string0 = mimeType_RootXML0.toString();
      assertEquals("text/html, K, K", string0);
  }
}
