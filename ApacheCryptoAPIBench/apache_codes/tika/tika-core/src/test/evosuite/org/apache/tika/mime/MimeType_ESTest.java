/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 13:31:27 GMT 2022
 */

package org.apache.tika.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.apache.tika.mime.AndClause;
import org.apache.tika.mime.Clause;
import org.apache.tika.mime.Magic;
import org.apache.tika.mime.MagicMatch;
import org.apache.tika.mime.MediaType;
import org.apache.tika.mime.MimeType;
import org.apache.tika.mime.OrClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MimeType_ESTest extends MimeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MediaType mediaType0 = MediaType.audio((String) null);
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType mimeType1 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.equals(mimeType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("video/!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setUniformTypeIdentifier("%)%|5Av341,,H^|E");
      String string0 = mimeType0.getUniformTypeIdentifier();
      assertEquals("%)%|5Av341,,H^|E", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MediaType mediaType1 = new MediaType(mediaType0, "", "qgo[u4kg[Cm ztWT9bs");
      MimeType mimeType0 = new MimeType(mediaType1);
      MediaType mediaType2 = mimeType0.getType();
      assertTrue(mediaType2.hasParameters());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension("#h$GW>1XTY.Y#7j");
      String string0 = mimeType0.getExtension();
      assertEquals("#h$GW>1XTY.Y#7j", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setDescription("F42KrN_Af");
      String string0 = mimeType0.getDescription();
      assertEquals("F42KrN_Af", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.setAcronym("qgo[u4kg[Cm ztWT9bs");
      String string0 = mimeType0.getAcronym();
      assertEquals("qgo[u4kg[Cm ztWT9bs", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MediaType mediaType1 = new MediaType("", "nnAj)Y10rCzL'", hashMap0);
      MimeType mimeType1 = new MimeType(mediaType1);
      int int0 = mimeType0.compareTo(mimeType1);
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MediaType mediaType0 = MediaType.OCTET_STREAM;
      MimeType mimeType0 = new MimeType(mediaType0);
      MediaType mediaType1 = MediaType.application("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType1 = new MimeType(mediaType1);
      int int0 = mimeType0.compareTo(mimeType1);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "org.apache.tika.mime.MimeType$RootXML", "org.apache.tika.mime.MimeType$RootXML", "org.apache.tika.mime.MimeType$RootXML", (String) null);
      Magic magic0 = new Magic(mimeType0, (-298), magicMatch0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.tika.mime.MimeType$RootXML\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[5];
      AndClause andClause0 = new AndClause((Clause[]) null);
      Magic magic0 = new Magic(mimeType0, (byte) (-48), andClause0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.AndClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MediaType mediaType0 = new MediaType("; ", "; ");
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, "LYdA{j,4S{FSfNjhb", (String) null, "2!]Sl?z,ME[Pal", "2!]Sl?z,ME[Pal");
      Magic magic0 = new Magic(mimeType0, (-548), magicMatch0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        mimeType0.matchesMagic(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magic match pattern is null
         //
         verifyException("org.apache.tika.detect.MagicDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("DZ$4Jb$*R.");
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[2];
      Clause[] clauseArray0 = new Clause[10];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 121, andClause0);
      mimeType0.addMagic(magic0);
      // Undeclared exception!
      try { 
        mimeType0.matches(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.AndClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.compareTo((MimeType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("DZ$4Jb$*R.");
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[2];
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 121, andClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.matchesMagic(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = mimeType0.matchesMagic(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[2];
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, (-474), orClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.matchesMagic(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MimeType.isValid(".M-$Nhsy_6$UwlsP8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("_!wLOf5JN");
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.toString();
      assertEquals("video/_!wlof5jn", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension("}");
      mimeType0.addExtension("org.apache.tika.mime.MimeType$RootXML");
      mimeType0.addExtension("org.apache.tika.mime.MagicMatch");
      assertEquals("", mimeType0.getDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension("}");
      List<String> list0 = mimeType0.getExtensions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      List<String> list0 = mimeType0.getExtensions();
      assertFalse(list0.contains("org.apache.tika.mime.MimeType$RootXML"));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getExtension();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addExtension((String) null);
      String string0 = mimeType0.getExtension();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML((MimeType) null, "(g`EcJAKFcK5", (String) null);
      boolean boolean0 = mimeType_RootXML0.matches("(g`EcJAKFcK5", "null, (g`EcJAKFcK5, null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, (String) null, "6<v\"/>9=`)z&*~-Sw");
      boolean boolean0 = mimeType_RootXML0.matches("", "H!FKf;gNag2b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("", "text/html");
      boolean boolean0 = mimeType0.matchesXML((String) null, "text/html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "text/html", "text/html");
      boolean boolean0 = mimeType_RootXML0.matches("", "=Eh'0bwJ\"'UuDL<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.addRootXML("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both namespaceURI and localName cannot be empty
         //
         verifyException("org.apache.tika.mime.MimeType$RootXML", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("DZ$4Jb$*R.");
      MimeType mimeType0 = new MimeType(mediaType0);
      byte[] byteArray0 = new byte[2];
      Clause[] clauseArray0 = new Clause[0];
      AndClause andClause0 = new AndClause(clauseArray0);
      Magic magic0 = new Magic(mimeType0, 121, andClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.matches(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, (-2333), orClause0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = mimeType0.matches(byteArray0);
      assertTrue(mimeType0.hasMagic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MagicMatch magicMatch0 = new MagicMatch(mediaType0, (String) null, "", (String) null, (String) null);
      Magic magic0 = new Magic(mimeType0, 26, magicMatch0);
      mimeType0.addMagic(magic0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        mimeType0.matches(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      AndClause andClause0 = new AndClause((Clause[]) null);
      Magic magic0 = new Magic(mimeType0, 58, andClause0);
      mimeType0.addMagic(magic0);
      boolean boolean0 = mimeType0.hasMagic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.hasMagic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      AndClause andClause0 = new AndClause((Clause[]) null);
      Magic magic0 = new Magic(mimeType0, 58, andClause0);
      mimeType0.addMagic(magic0);
      mimeType0.addMagic(magic0);
      assertTrue(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("_!wLOf5JN");
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addMagic((Magic) null);
      assertFalse(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("ihZ0{!;Tpc!}9hb");
      MimeType mimeType0 = new MimeType(mediaType0);
      LinkedList<Clause> linkedList0 = new LinkedList<Clause>();
      OrClause orClause0 = new OrClause(linkedList0);
      Magic magic0 = new Magic(mimeType0, 278, orClause0);
      mimeType0.addMagic(magic0);
      mimeType0.getMagics();
      assertTrue(mimeType0.hasMagic());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<Magic> list0 = mimeType0.getMagics();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("; ", "stringignorecase");
      boolean boolean0 = mimeType0.hasRootXML();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.hasRootXML();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("=Eh'0bwJ\"'UuDL<", "");
      boolean boolean0 = mimeType0.matchesXML("=Eh'0bwJ\"'UuDL<", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("", "text/html");
      boolean boolean0 = mimeType0.matchesXML("=Eh'0bwJ\"'UuDL<", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      boolean boolean0 = mimeType0.matchesXML("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.addRootXML("", "text/html");
      mimeType0.addRootXML("=Eh'0bwJ\"'UuDL<", "");
      assertEquals("", mimeType0.getExtension());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MediaType mediaType0 = MediaType.video("Ya5CwI;F:Cyry'!DFR");
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.addLink((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Link
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      URI uRI0 = MockURI.aHttpURI;
      mimeType0.addLink(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setUniformTypeIdentifier((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Uniform Type Identifier is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_XML;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setAcronym((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Acronym is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MediaType mediaType0 = MediaType.EMPTY;
      MimeType mimeType0 = new MimeType(mediaType0);
      // Undeclared exception!
      try { 
        mimeType0.setDescription((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Description is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MimeType mimeType0 = null;
      try {
        mimeType0 = new MimeType((MediaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Media type name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("image/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("=Eh'0bwJ\"'UuDL<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("`6Skwb/r?DTxn)Z\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("`]=]5\u0001b*UGax!vQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("[()<>@,;:\\\"/[]?=]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("i\"vL<hIY8qEOXus~WS+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("@iqlBLH{qGc\"CMm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("&w:55)C`NBN+*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("; ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("vRxn39>p>voytV,F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("+/5C<9qY I$a@GSE~&|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("_t)i H7Oc:6<N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("(?is)s*(charsets*=s*[^c;s]+)s*;s*([^c()<>@,;:\\\"/[]?=s]+)s*/s*([^c()<>@,;:\\\"/[]?=s]+)s*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("Hp[}8&qzxb0 }b%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("Pk !=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        MimeType.isValid((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name is missing
         //
         verifyException("org.apache.tika.mime.MimeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = MimeType.isValid("text/html, text/html, text/html");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      int int0 = mimeType0.compareTo(mimeType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      mimeType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      List<URI> list0 = mimeType0.getLinks();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      int int0 = mimeType0.getMinLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getName();
      assertEquals("text/plain", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getAcronym();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_PLAIN;
      MimeType mimeType0 = new MimeType(mediaType0);
      String string0 = mimeType0.getUniformTypeIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MediaType mediaType0 = MediaType.image("org.apache.tika.mime.MimeType$RootXML");
      MimeType mimeType0 = new MimeType(mediaType0);
      MediaType mediaType1 = mimeType0.getType();
      assertEquals("image/org.apache.tika.mime.mimetype$rootxml", mediaType1.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "text/html", "text/html");
      String string0 = mimeType_RootXML0.getNameSpaceURI();
      assertEquals("text/html", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "Pk !=", "Pk !=");
      String string0 = mimeType_RootXML0.getLocalName();
      assertEquals("Pk !=", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MediaType mediaType0 = MediaType.TEXT_HTML;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, "Pk !=", "Pk !=");
      MimeType mimeType1 = mimeType_RootXML0.getType();
      assertEquals("", mimeType1.getExtension());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MediaType mediaType0 = MediaType.APPLICATION_ZIP;
      MimeType mimeType0 = new MimeType(mediaType0);
      MimeType.RootXML mimeType_RootXML0 = new MimeType.RootXML(mimeType0, (String) null, "Cx`;LFXkl/%{");
      String string0 = mimeType_RootXML0.toString();
      assertEquals("application/zip, null, Cx`;LFXkl/%{", string0);
  }
}
