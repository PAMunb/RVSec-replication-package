/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:49:49 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.PreparedStatement;
import java.util.List;
import java.util.NoSuchElementException;
import org.apache.manifoldcf.core.database.Database;
import org.apache.manifoldcf.core.threadcontext.ThreadContext;
import org.apache.xerces.impl.dv.xs.XSSimpleTypeDecl;
import org.apache.xerces.impl.xs.util.ShortListImpl;
import org.apache.xerces.xs.XSObjectList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hsqldb.jdbc.JDBCPool;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.result.ResultLob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Database_ESTest extends Database_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      database_Modifications0.deleteCount = (-844);
      database_Modifications0.update(0, (-844), 0);
      String string0 = "!=";
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      ResultLob.newLobSetResponse((-1784L), (-1784L));
      database_Modifications0.update(1906, 0, 12);
      int int0 = 326;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      int int0 = database_Modifications0.getModifyCount();
      assertEquals(0, int0);
      assertEquals(0, database_Modifications0.getDeleteCount());
      assertEquals(0, database_Modifications0.getInsertCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ShortListImpl shortListImpl0 = new ShortListImpl(shortArray0, (short)558);
      // Undeclared exception!
      try { 
        Database.cleanupParameters(shortListImpl0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XSSimpleTypeDecl xSSimpleTypeDecl0 = new XSSimpleTypeDecl();
      XSObjectList xSObjectList0 = xSSimpleTypeDecl0.getAnnotations();
      ThreadContext threadContext0 = new ThreadContext();
      Database.cleanupParameters(xSObjectList0);
      JDBCPool jDBCPool0 = new JDBCPool((short)47);
      assertNull(jDBCPool0.getNetworkProtocol());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      Database.cleanupParameters((List) null);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XSSimpleTypeDecl xSSimpleTypeDecl0 = new XSSimpleTypeDecl();
      XSObjectList xSObjectList0 = xSSimpleTypeDecl0.getAnnotations();
      Database.loadPS((PreparedStatement) null, xSObjectList0);
      assertEquals(0, xSObjectList0.getLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      Database.loadPS((PreparedStatement) null, (List) null);
      JDBCPool jDBCPool0 = new JDBCPool((short)47);
      assertNull(jDBCPool0.getUser());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      database_Modifications0.getDeleteCount();
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      assertFalse(fileUtil0.fsIsIgnoreCase);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      int int0 = database_Modifications0.getInsertCount();
      assertEquals(0, database_Modifications0.getDeleteCount());
      assertEquals(0, database_Modifications0.getModifyCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Database.QueryCacheExecutor database_QueryCacheExecutor0 = new Database.QueryCacheExecutor((Database) null, true);
  }
}
