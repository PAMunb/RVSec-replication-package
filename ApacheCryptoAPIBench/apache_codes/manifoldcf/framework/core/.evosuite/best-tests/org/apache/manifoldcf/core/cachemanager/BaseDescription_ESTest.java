/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:02:48 GMT 2022
 */

package org.apache.manifoldcf.core.cachemanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.List;
import org.apache.manifoldcf.core.cachemanager.BaseDescription;
import org.apache.manifoldcf.core.database.QueryDescription;
import org.apache.manifoldcf.core.interfaces.ICacheClass;
import org.apache.manifoldcf.core.interfaces.ILimitChecker;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.apache.manifoldcf.core.interfaces.StringSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseDescription_ESTest extends BaseDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("5RNYHCYU-X", "5RNYHCYU-X", (List) null, "5RNYHCYU-X", stringSet0, (-1247), resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("5RNYHCYU-X");
      assertEquals("5RNYHCYU-X", baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("5RNYHCYU-X", "5RNYHCYU-X", (List) null, "5RNYHCYU-X", stringSet0, (-1247), resultSpecification0, iLimitChecker0);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      iCacheClass0.getMaxLRUCount();
      int int0 = iCacheClass0.getMaxLRUCount();
      assertEquals("5RNYHCYU-X", iCacheClass0.getClassName());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", (List) null, "", (StringSet) null, Integer.MAX_VALUE, resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("", 3976);
      assertEquals("", baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("org.apache.manifoldcf.core.cachemanager.BaseDescription$LocalCacheClass", "", (List) null, (String) null, (StringSet) null, 0, resultSpecification0, iLimitChecker0);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      assertNull(iCacheClass0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("5RNYHCYU-X", "5RNYHCYU-X", (List) null, "5RNYHCYU-X", stringSet0, (-1247), resultSpecification0, iLimitChecker0);
      long long0 = queryDescription0.getObjectExpirationTime(2198L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("5RNYHCYU-X", "5RNYHCYU-X", (List) null, "5RNYHCYU-X", stringSet0, (-1247), resultSpecification0, iLimitChecker0);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      assertNotNull(iCacheClass0);
      
      String string0 = iCacheClass0.getClassName();
      assertNotNull(string0);
      assertEquals("5RNYHCYU-X", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("$tKFm`cub[I<", "$tKFm`cub[I<", (List) null, "$tKFm`cub[I<", stringSet0, (-5013), resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("$tKFm`cub[I<", (-5013));
      assertEquals("$tKFm`cub[I<", baseDescription_LocalCacheClass0.getClassName());
  }
}
