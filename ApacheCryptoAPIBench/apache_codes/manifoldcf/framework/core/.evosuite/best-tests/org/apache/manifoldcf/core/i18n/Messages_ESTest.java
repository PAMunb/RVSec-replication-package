/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:55:15 GMT 2022
 */

package org.apache.manifoldcf.core.i18n;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTransientConnectionException;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import org.apache.manifoldcf.core.i18n.Messages;
import org.apache.velocity.app.VelocityEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Messages_ESTest extends Messages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Messages.complainMissingBundle("SYSTEM_OUT", sQLTransientConnectionException0, "X6?M\"h[-,B WOZpUV r", locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      StringReader stringReader0 = new StringReader("ldQ4uUf\"mt:!=}");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "ldQ4uUf\"mt:!=}", locale0, "ldQ4uUf\"mt:!=}");
      assertNotNull(string0);
      assertEquals("ldQ4uUf\"mt:!=}", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Object[] objectArray0 = new Object[4];
      String string0 = Messages.getString(class0, "ldQ4uUf\"mt:!=}", locale0, "ldQ4uUf\"mt:!=}", objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      assertEquals("ldQ4uUf\"mt:!=}", string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[2];
      String string0 = Messages.getString(class0, "", locale0, "", objectArray0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("", string0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      ResourceBundle resourceBundle0 = Messages.getResourceBundle(class0, "} 4'*", locale0);
      assertNull(resourceBundle0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nBfpV");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "1VJj", locale0, "nBfpV");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "\u4E2D\u56FD", locale0, "Bqb&+/HI])^^WUt<SA[", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "filter.", locale0, "filter.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Messages.getString(class0, ".", locale0, ".", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, "~U1pl4rJvJm,:PTg8n", locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, (String) null, locale0, "?@Eg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, "ldQ4uUf\"mt:!=}", locale0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      
      // Undeclared exception!
      try { 
        Messages.getMessage(class0, "3ATmNBlaF^\"zv_T{", locale0, "3ATmNBlaF^\"zv_T{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        Messages.complainMissingResource("t;Wy%'mc", mockThrowable0, "I*J=JD'v5o+", (Locale) null, "it-IT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingResource("'", sQLIntegrityConstraintViolationException0, (String) null, locale0, "ldQ4uUf\"mt:!=}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage("uw`63M/7'{/", (Throwable) null, "", (Locale) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage((String) null, sQLNonTransientException0, (String) null, locale0, "f;]^D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "4J{lnD\"z@@8<&E{zr|");
      assertNotNull(sQLNonTransientException0);
      assertEquals("4J{lnD\"z@@8<&E{zr|", sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingBundle(")N", sQLNonTransientException0, (String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("s'R22n-,N4qn&E39'", (String) null, (-1222));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("s'R22n-,N4qn&E39'", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals((-1222), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: s'R22n-,N4qn&E39'", sQLTransientConnectionException0.toString());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingBundle((String) null, sQLTransientConnectionException0, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1VJj");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 1VJj", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("1VJj", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Messages.complainMissingMessage("\"host\":\"", sQLIntegrityConstraintViolationException0, "1VJj", locale0, "9K=[G4D<f)dy{~");
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 1VJj", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("1VJj", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Object[] objectArray0 = new Object[4];
      StringReader stringReader0 = new StringReader("ldQ4uUf\"mt:!=}");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "ldQ4uUf\"mt:!=}", locale0, "en", objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      assertEquals("en", string0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = new Locale("org.apache.logging.log4j.level", "org.apache.logging.log4j.level", "org.apache.logging.log4j.level");
      assertNotNull(locale0);
      assertEquals("ORG.APACHE.LOGGING.LOG4J.LEVEL", locale0.getCountry());
      assertEquals("org.apache.logging.log4j.level_ORG.APACHE.LOGGING.LOG4J.LEVEL_org.apache.logging.log4j.level", locale0.toString());
      assertEquals("org.apache.logging.log4j.level", locale0.getLanguage());
      assertEquals("org.apache.logging.log4j.level", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "org.apache.logging.log4j.level", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      
      StringReader stringReader0 = new StringReader("ldQ4uUf\"mt:!=}");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "ldQ4uUf\"mt:!=}", locale0, "7 tryizg ");
      assertNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("r|mE?q}EO>e}[u?", "r|mE?q}EO>e}[u?");
      assertNotNull(messages_BundleKey0);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("z#~~u%i]F]Q)C_;,", "jj,u@Gvig38LhS", "z#~~u%i]F]Q)C_;,");
      assertNotNull(messages_ResourceKey0);
      
      boolean boolean0 = messages_ResourceKey0.equals(messages_BundleKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("y3)]gmwocW`:,xQ", "y3)]gmwocW`:,xQ", "y3)]gmwocW`:,xQ");
      assertNotNull(messages_MessageKey0);
      
      boolean boolean0 = messages_MessageKey0.equals("y3)]gmwocW`:,xQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      StringReader stringReader0 = new StringReader("lQ4uUf\"mt!0}");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      Object[] objectArray0 = new Object[1];
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "lQ4uUf\"mt!0}", locale0, "lQ4uUf\"mt!0}", objectArray0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      assertEquals("", string0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[4];
      String string0 = Messages.getString(class0, "x!", locale0, (String) null, objectArray0);
      assertNull(string0);
      assertEquals(4, objectArray0.length);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      InputStream inputStream0 = Messages.getResourceAsStream(class0, ".", locale0, ".");
      assertNotNull(inputStream0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(125, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      
      StringReader stringReader0 = new StringReader("lQ4uUf\"mt!0}");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "qGOtk", locale0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Messages.logError("", (Throwable) null);
      Object object0 = new Object();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.TAIWAN;
      MockThrowable mockThrowable0 = new MockThrowable();
      Messages.complainMissingResource("", mockThrowable0, "<td title=\"", locale1, "[*q*J;sRVz");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3269, (byte) (-111));
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) byteArrayInputStream0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "[*q*J;sRVz";
      objectArray0[6] = (Object) (byte) (-125);
      objectArray0[7] = (Object) "<td title=\"";
      objectArray0[8] = (Object) (byte)88;
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "a2CCkYGqC1", locale0, ")[05", objectArray0);
      assertEquals(")[05", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<BoundType> class0 = BoundType.class;
      String string0 = "x!";
      Locale locale0 = Locale.ITALY;
      locale0.toLanguageTag();
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayCountry(locale1);
      Messages.getMessage(class0, "x!", locale0, "N>'F1dw*[_>Gr|$3]_$");
      String string1 = "Starting Apache Velocity v1.7 (compiled: 2010-11-19 12:14:37)";
      try { 
        Messages.getResourceAsStream(class0, "it-IT", locale1, "Starting Apache Velocity v1.7 (compiled: 2010-11-19 12:14:37)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'it-IT' named 'Starting Apache Velocity v1.7 (compiled: 2010-11-19 12:14:37)' found for locale 'it_IT'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("r|mE?q}EO>e}[u?", "r|mE?q}EO>e}[u?");
      boolean boolean0 = messages_BundleKey0.equals("r|mE?q}EO>e}[u?");
      assertFalse(boolean0);
  }
}
