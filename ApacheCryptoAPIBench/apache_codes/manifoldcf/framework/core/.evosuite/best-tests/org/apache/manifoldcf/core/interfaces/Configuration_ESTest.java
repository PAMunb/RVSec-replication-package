/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:51:19 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;
import org.apache.manifoldcf.core.common.XMLDoc;
import org.apache.manifoldcf.core.interfaces.Configuration;
import org.apache.manifoldcf.core.interfaces.ConfigurationNode;
import org.apache.manifoldcf.core.interfaces.IHierarchyParent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Configuration_ESTest extends Configuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      assertEquals(0, configuration0.getChildCount());
      
      ConfigurationNode configurationNode0 = new ConfigurationNode("KJ$@C;CE|&");
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      arrayList0.add(configurationNode0);
      arrayList0.add(configurationNode0);
      Configuration configuration1 = new Configuration();
      configuration1.equals(configurationNode0);
      configuration1.addChild(0, configurationNode0);
      // Undeclared exception!
      try { 
        configuration1.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      assertEquals("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getType());
      
      configuration0.addChild(0, configurationNode0);
      configuration0.toString();
      Configuration configuration1 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      configuration0.hashCode();
      configuration0.findChild(0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createDuplicate(false);
      assertNotSame(configuration1, configuration0);
      
      configuration0.toXML();
      Configuration configuration2 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration2.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("KJ$@C;CE|&");
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      arrayList0.add(configurationNode0);
      arrayList0.add(configurationNode0);
      configurationNode0.setValue("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.type = "KJ$@C;CE|&";
      Object object0 = new Object();
      configuration0.equals(object0);
      configurationNode0.readOnly = false;
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      boolean boolean0 = false;
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, boolean0, boolean0);
      int int0 = (-516);
      configuration0.removeChild(int0);
      ConfigurationNode configurationNode1 = configuration0.findChild(int0);
      Configuration configuration1 = configuration0.createNew();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader(configuration0._rcsid);
      configuration_JSONReader0.getKeys();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      configuration_JSONReader0.startArray();
      configuration_JSONReader0.valueForKey(configurationNode1._rcsid);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-42);
      byteArray0[1] = byte1;
      byte byte2 = (byte)41;
      byteArray0[2] = byte2;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      int int1 = configuration0.getChildCount();
      configuration0.addChild(int1, configurationNode1);
      int int2 = (-1632988592);
      configuration1.addChild(int2, configurationNode1);
      configuration_JSONReader0.nextElement();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = "KJ$@C;CE|&";
      ConfigurationNode configurationNode0 = configuration0.createNewNode("KJ$@C;CE|&");
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      arrayList0.add(configurationNode0);
      arrayList0.add(configurationNode0);
      configurationNode0.setValue("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Object object0 = new Object();
      configuration0.equals(object0);
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      boolean boolean0 = false;
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, boolean0, boolean0);
      Configuration.JSONReader configuration_JSONReader0 = null;
      configuration0.processObject(configurationNode0, configurationNode0._rcsid, configuration_JSONReader0);
      configuration0.fromXML(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = Configuration.JSON_VALUE;
      configuration0.toXML();
      configuration0.rootNodeLabel = "_value_";
      try { 
        configuration0.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad xml - outer node is not '_value_'
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      boolean boolean0 = configuration_JSONReader0.isValue();
      assertFalse(boolean0);
      
      configuration0.processObject("org.apache.xerces.dom.NamedNodeMapImpl", configuration_JSONReader0);
      configuration0.toXML();
      configuration0.rootNodeLabel = "org.apache.xerces.dom.NamedNodeMapImpl";
      try { 
        configuration0.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data><org.apache.xerces.dom.NamedNodeMapImpl>org.json.simple.JSONArray@0000000005</org.apache.xerces.dom.NamedNodeMapImpl></data>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad xml - outer node is not 'org.apache.xerces.dom.NamedNodeMapImpl'
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Configuration configuration0 = new Configuration((String) null);
      // Undeclared exception!
      try { 
        configuration0.readNode((XMLDoc) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toXML();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>", string0);
      
      configuration0.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>");
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isValue();
      configuration0.processObject("org.apache.xerces.dom.NamedNodeMapImpl", configuration_JSONReader0);
      configuration0.toXML();
      configuration0.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data><org.apache.xerces.dom.NamedNodeMapImpl>org.json.simple.JSONArray@0000000005</org.apache.xerces.dom.NamedNodeMapImpl></data>");
      assertEquals(1, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject("org.apache.xerces.dom.NamedNodeMapImpl", configuration_JSONReader0);
      configuration0.toXML();
      assertEquals(1, configuration0.getChildCount());
      
      configuration0.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data><org.apache.xerces.dom.NamedNodeMapImpl>org.json.simple.JSONArray@0000000005</org.apache.xerces.dom.NamedNodeMapImpl></data>");
      assertEquals(1, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = new Configuration();
      configuration1.addChild(0, (ConfigurationNode) null);
      // Undeclared exception!
      try { 
        configuration1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      EvoSuiteFile evoSuiteFile0 = null;
      XMLDoc xMLDoc0 = new XMLDoc();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: XMLDoc.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        Configuration.writeNode(xMLDoc0, (Object) null, configurationNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      configuration0.createNewNode("[]");
      configuration0.hashCode();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isValue();
      configuration0.processObject("_value_", configuration_JSONReader0);
      configuration0.processObject("_children_", configuration_JSONReader0);
      assertEquals(1, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      configuration0.createDuplicate(false);
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isValue();
      configuration0.processObject("_attribute_", configuration_JSONReader0);
      configuration0.toXML();
      configuration0.toString();
      // Undeclared exception!
      try { 
        configuration_JSONReader0.valueForKey("_attribute_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n8fS)*s!wX,GpY");
      ConfigurationNode configurationNode0 = new ConfigurationNode("[]");
      configuration0.addChild(0, configurationNode0);
      configuration0.toString();
      configuration0.createDuplicate(false);
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.children = null;
      configuration0.toString();
      Configuration configuration1 = new Configuration();
      configuration1.createNew();
      // Undeclared exception!
      try { 
        configuration0.toJSON();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "lhlx|oya>@T!'";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lhlx|oya>@T!'");
      Configuration configuration0 = new Configuration();
      configuration0.children = null;
      Configuration configuration1 = configuration0.createDuplicate(true);
      configuration1.makeReadOnly();
      configuration1.toString();
      // Undeclared exception!
      try { 
        configuration0.toJSON();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Configuration configuration0 = new Configuration("");
      ConfigurationNode configurationNode0 = configuration0.createNewNode("h4");
      List<ConfigurationNode> list0 = configurationNode0.children;
      configuration0.children = null;
      Configuration configuration1 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration1.findChild((-2096519827));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject("+Pf", configuration_JSONReader0);
      configuration0.hashCode();
      assertEquals(2, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.hashCode();
      configuration0.children = null;
      // Undeclared exception!
      try { 
        configuration0.findChild(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n8fS)*s!wX,GpY");
      ConfigurationNode configurationNode0 = new ConfigurationNode("[]");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject(configurationNode0, "_chirdren_", configuration_JSONReader0);
      configuration0.toJSON();
      int int0 = configuration0.getChildCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      configuration0.addChild(0, configurationNode0);
      String string0 = configuration0.toString();
      assertEquals("[([] [])]", string0);
      
      String string1 = configuration0.toJSON();
      assertEquals("{\"[]\":{}}", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      Configuration configuration1 = configuration0.createDuplicate(false);
      configuration1.createNew();
      Configuration configuration2 = new Configuration("[]");
      configuration1.createNewNode("U<Rk\\_L}f--Qm");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-65);
      configuration_JSONReader0.nextElement();
      configuration1.processObject("org.apache.xerces.impl.dtd.XMLNSDTDValidator", configuration_JSONReader0);
      assertEquals(1, configuration1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4713), (byte) (-117));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ConfigurationNode configurationNode0 = configuration0.createNewNode("_attribute_Z&hX5,r[");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configurationNode1.equals((Object) null);
      Configuration configuration1 = configuration0.createDuplicate(true);
      Configuration configuration2 = configuration1.createNew();
      configuration2.processObject(configurationNode1, "_attuibute_@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configuration_JSONReader0);
      configuration2.createNew();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      configuration0.toString();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode1, true, true);
      assertEquals(1, configurationNode1.getChildCount());
      assertFalse(configurationNode0.equals((Object)configurationNode1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject(configurationNode0, "_children_", configuration_JSONReader0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("[]", configurationNode0.getType());
      assertFalse(configuration_JSONReader0.isNull());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      Configuration configuration1 = configuration0.createDuplicate(false);
      Configuration configuration2 = configuration1.createNew();
      Configuration configuration3 = new Configuration("[]");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConfigurationNode configurationNode0 = configuration1.createNewNode("U<Rk\\_L}f--Qm");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)78;
      configuration3.createDuplicate(true);
      configuration0.createNew();
      configuration1.processObject(configurationNode0, "_children_", configuration_JSONReader0);
      configuration2.createNew();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      configuration1.toString();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, (ConfigurationNode) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      assertTrue(configuration_JSONReader0.isArray());
      
      configuration0.processObject("_children_", configuration_JSONReader0);
      assertEquals(0, configuration0.getChildCount());
      assertFalse(configuration_JSONReader0.isNull());
      
      XMLDoc xMLDoc0 = new XMLDoc();
      ConfigurationNode configurationNode0 = new ConfigurationNode("_children_");
      // Undeclared exception!
      try { 
        Configuration.writeNode(xMLDoc0, "_children_", configurationNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      configuration_JSONReader0.pushState();
      configuration_JSONReader0.startArray();
      configuration_JSONReader0.endObject();
      int int0 = configuration0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4713), (byte) (-117));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ConfigurationNode configurationNode0 = configuration0.createNewNode("_attribute_Z&hX5,r[");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configurationNode1.equals((Object) null);
      Configuration configuration1 = configuration0.createDuplicate(true);
      Configuration configuration2 = configuration1.createNew();
      configuration2.processObject(configurationNode1, "_attuibute_@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configuration_JSONReader0);
      configuration2.createNew();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      configuration0.toString();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode1, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject(configurationNode0, "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configuration_JSONReader0);
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      int int0 = configuration0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      Configuration configuration1 = configuration0.createDuplicate(false);
      configuration1.createNew();
      Configuration configuration2 = new Configuration();
      configuration1.createNewNode("U<Rk\\_L}f--Qm");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-48), (-4713));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      configuration_JSONReader0.endArray();
      // Undeclared exception!
      try { 
        configuration2.readNode(",count=", configuration_JSONReader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.children = null;
      configuration0.toString();
      Configuration configuration1 = new Configuration();
      configuration1.createNew();
      String string0 = ":O";
      XMLDoc xMLDoc0 = null;
      try {
        xMLDoc0 = new XMLDoc(":O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.children = null;
      configuration0.toString();
      configuration0.createNewNode("[]");
      String string0 = "_childrenx";
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      Configuration configuration1 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration1.processObject("O[", configuration_JSONReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      configurationNode0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.processObject(configurationNode0, "*aDaIL<JZem\"", configuration_JSONReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      ConfigurationNode configurationNode0 = configuration0.createNewNode("YDz&@O");
      configuration0.processObject(configurationNode0, "_attribute_Bad json: ", configuration_JSONReader0);
      assertEquals(1, configurationNode0.getAttributeCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isNull();
      Configuration configuration1 = new Configuration("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration configuration2 = new Configuration();
      ConfigurationNode configurationNode0 = configuration1.createNewNode("_attribute_nm,V}<;],iPVgm;S");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      Configuration configuration3 = configuration2.createNew();
      configurationNode0.equals(configuration1);
      configuration0.processObject(configurationNode1, "_attribute_nm,V}<;],iPVgm;S", configuration_JSONReader0);
      Configuration configuration4 = configuration0.createNew();
      assertNotSame(configuration4, configuration3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      boolean boolean0 = configuration_JSONReader0.isArray();
      assertTrue(boolean0);
      
      Configuration configuration1 = new Configuration("[]");
      Configuration configuration2 = new Configuration();
      String string1 = "@(#)$Id$";
      Configuration.JSONReader configuration_JSONReader1 = null;
      try {
        configuration_JSONReader1 = new Configuration.JSONReader("@(#)$Id$");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      Configuration configuration1 = configuration0.createNew();
      // Undeclared exception!
      try { 
        configuration1.processObject(configurationNode0, (String) null, configuration_JSONReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isNull();
      Configuration configuration1 = new Configuration("Bad xml - outer node is not '");
      Configuration configuration2 = new Configuration();
      ConfigurationNode configurationNode0 = configuration2.createNewNode("Bad xml - outer node is not '");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      Configuration configuration3 = configuration1.createNew();
      configurationNode0.equals(configuration0);
      configuration3.processObject(configurationNode1, ",count=", configuration_JSONReader0);
      Configuration configuration4 = configuration1.createNew();
      assertEquals(0, configuration4.getChildCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject(configurationNode0, "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configuration_JSONReader0);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("[]", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isNull();
      Configuration configuration1 = new Configuration("[]");
      configuration1.makeReadOnly();
      Configuration configuration2 = new Configuration();
      ConfigurationNode configurationNode0 = configuration2.createNewNode("");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configuration1.processObject(configurationNode1, "@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $", configuration_JSONReader0);
      Configuration configuration3 = configuration2.createNew();
      assertEquals(0, configuration3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.processObject("$'*P^a]]ulSEx;y7oi", (Configuration.JSONReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toJSON();
      assertEquals("{}", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("{}");
      boolean boolean0 = configuration_JSONReader0.isValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      boolean boolean0 = configuration_JSONReader0.isValue();
      assertFalse(boolean0);
      
      String string1 = configuration0.toXML();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.isObject();
      String string0 = IHierarchyParent._rcsid;
      configuration0.processObject("@(#)$Id$", configuration_JSONReader0);
      assertEquals(1, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      configuration_JSONReader0.endObject();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      assertEquals("[]", configurationNode0.getType());
      
      configuration0.makeReadOnly();
      String string1 = configuration0.toJSON();
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      Configuration configuration1 = new Configuration();
      configuration1.makeReadOnly();
      assertTrue(configuration1.equals((Object)configuration0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      configuration_JSONReader0.endObject();
      configuration0.createNewNode("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.valueForKey("_type_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      assertEquals(0, configuration0.getChildCount());
      
      configuration0.makeReadOnly();
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      XMLDoc xMLDoc0 = new XMLDoc();
      Configuration configuration0 = new Configuration();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      Configuration configuration1 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration1.initializeFromDoc(xMLDoc0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createDuplicate(true);
      assertNotSame(configuration1, configuration0);
      
      // Undeclared exception!
      try { 
        configuration1.initializeFromDoc((XMLDoc) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      String string1 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.readValue();
      String string2 = configuration0.toJSON();
      assertEquals("{}", string2);
      
      configuration_JSONReader0.isObject();
      String string3 = configuration0.toXML();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>", string3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      configuration0.addChild(0, configurationNode0);
      // Undeclared exception!
      try { 
        configuration0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/xerces.properties");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      configuration0.toString();
      // Undeclared exception!
      try { 
        configuration0.fromJSON("[]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
      
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.startArray();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("[]");
      assertEquals("[]", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      String string1 = Configuration._rcsid;
      configuration_JSONReader0.startArray();
      // Undeclared exception!
      try { 
        configuration0.readNode((String) null, configuration_JSONReader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.getKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.getKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      String string1 = Configuration._rcsid;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        configuration_JSONReader0.nextElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endObject();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration configuration0 = new Configuration("_children_");
      String string1 = configuration0.toJSON();
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/xerces.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.toString();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      XMLDoc xMLDoc0 = new XMLDoc();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        configuration0.readNode(xMLDoc0, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      Configuration.JSONWriter configuration_JSONWriter1 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      configuration0.toXML();
      String string0 = configuration_JSONWriter0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/xerces.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.toString();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.readValue();
      // Undeclared exception!
      try { 
        configuration_JSONReader0.valueForKey("org.json.simple.JSONArray@0000000005");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/xerces.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.startObject();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      configurationNode0.value = "";
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/xerces.properties");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      configuration0.toString();
      String string0 = Configuration.JSON_CHILDREN;
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      Object object0 = new Object();
      configuration0.toXML();
      // Undeclared exception!
      try { 
        configuration_JSONReader0.endArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.endArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = IHierarchyParent._rcsid;
      ConfigurationNode configurationNode0 = configuration0.createNewNode("N>szlaYpi>");
      // Undeclared exception!
      try { 
        Configuration.writeNode((XMLDoc) null, (Object) null, configurationNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.hashCode();
      // Undeclared exception!
      try { 
        configuration0.readNode("/G|ir", (Configuration.JSONReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.addChild(0, configurationNode0);
      configuration0.makeReadOnly();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Configuration configuration1 = configuration0.createDuplicate(false);
      // Undeclared exception!
      try { 
        configuration1.fromXML("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("[]");
      configuration0.addChild(0, configurationNode0);
      configuration0.makeReadOnly();
      assertEquals(1, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endObject();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      configuration_JSONWriter0.startObject();
      String string0 = IHierarchyParent._rcsid;
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.toString();
      Configuration configuration0 = new Configuration();
      configuration0.clearChildren();
      Configuration configuration1 = new Configuration();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      configuration_JSONWriter0.startArray();
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertNull(configurationNode0.getValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.setAttribute("T:98g$Rk", "ep*y0.ST<3&");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configurationNode0.setAttribute("", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      configurationNode0.value = "";
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      String string0 = configuration_JSONWriter0.toString();
      assertEquals("{\"_value_\":\"\",\"_attribute_\":\"\"}", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.setAttribute("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $", "ep*y0.ST<3&");
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration configuration1 = configuration0.createNew();
      XMLDoc xMLDoc0 = new XMLDoc();
      ConfigurationNode configurationNode1 = configuration1.createNewNode("i");
      assertEquals("i", configurationNode1.getType());
      
      configurationNode0.makeReadOnly();
      Object object0 = new Object();
      String string0 = configuration0.toXML();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.addChild(0, configurationNode0);
      // Undeclared exception!
      try { 
        configuration0.toXML();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.setAttribute("T:98g$Rk", "ep*y0.ST<3&");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration1 = configuration0.createDuplicate(true);
      configuration_JSONWriter0.startObject();
      ConfigurationNode configurationNode0 = configuration1.createNewNode("' node - there are ");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      String string0 = "Attempt to change read-only object";
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("org.apache.xerces.impl.XMLScanner");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configuration_JSONWriter0.startObject();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertEquals(0, configurationNode0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createDuplicate(true);
      Configuration configuration2 = configuration1.createDuplicate(true);
      assertNotSame(configuration2, configuration0);
      assertSame(configuration2, configuration1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration0.readNode("[]", configuration_JSONReader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      // Undeclared exception!
      try { 
        configuration0.fromJSON("[]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/xerces.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      configuration0.toString();
      configuration0.toJSON();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration_JSONReader0.readValue();
      // Undeclared exception!
      try { 
        configuration0.readNode("", configuration_JSONReader0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      XMLDoc xMLDoc0 = new XMLDoc();
      Object object0 = new Object();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: XMLDoc.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        Configuration.writeNode(xMLDoc0, object0, configurationNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, true);
      assertEquals(0, configurationNode0.getAttributeCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration1 = configuration0.createDuplicate(true);
      ConfigurationNode configurationNode0 = configuration1.createNewNode("' node - thehe are ");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, true);
      assertEquals("' node - thehe are ", configurationNode0.getType());
      assertNotSame(configuration1, configuration0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      String string0 = "'";
      Configuration configuration0 = new Configuration("'");
      Configuration configuration1 = configuration0.createNew();
      boolean boolean0 = false;
      XMLDoc xMLDoc0 = new XMLDoc();
      ConfigurationNode configurationNode0 = configuration1.createNewNode("z");
      configurationNode0.makeReadOnly();
      // Undeclared exception!
      try { 
        Configuration.writeNode(xMLDoc0, xMLDoc0, configurationNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.manifoldcf.core.common.XMLDoc cannot be cast to org.w3c.dom.Element
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.clearOuterNodes();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration1 = configuration0.createNew();
      // Undeclared exception!
      try { 
        configuration1.fromXML("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, (ConfigurationNode) null, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("Unexpected exception at position ");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, true);
      assertEquals("Unexpected exception at position ", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createDuplicate(true);
      ConfigurationNode configurationNode0 = configuration0.createNewNode("");
      boolean boolean0 = configuration0.equals("");
      assertFalse(boolean0);
      
      configuration0.addOuterNode(configurationNode0);
      assertEquals("", configurationNode0.getType());
      assertNotSame(configuration0, configuration1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toJSON();
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.removeChild(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      assertEquals(0, configuration1.getChildCount());
      
      boolean boolean0 = configuration1.equals(configuration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Configuration configuration0 = new Configuration("rE9B_u*xZ4U^}Sm3");
      Configuration configuration1 = configuration0.createDuplicate(true);
      ConfigurationNode configurationNode0 = configuration0.createNewNode("/5zeh78{");
      assertEquals("/5zeh78{", configurationNode0.getType());
      
      boolean boolean0 = configuration1.equals(configuration0);
      assertNotSame(configuration1, configuration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      boolean boolean0 = configuration0.equals(configurationNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.addChild(0, configurationNode0);
      String string0 = configuration0.toString();
      assertEquals("[(@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $ [])]", string0);
      
      Configuration configuration1 = new Configuration();
      boolean boolean0 = configuration1.equals(configuration0);
      assertFalse(boolean0);
      
      configuration1.makeReadOnly();
      assertFalse(configuration1.equals((Object)configuration0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Configuration configuration0 = new Configuration("h`<RL-^+Y7KpJS_n\"");
      configuration0.makeReadOnly();
      Object object0 = new Object();
      configuration0.equals(object0);
      configuration0.createNewNode("h`<RL-^+Y7KpJS_n\"");
      String string0 = "se?zx)\\aW'Q";
      // Undeclared exception!
      try { 
        configuration0.fromJSON("org.apache.manifoldcf.core.interfaces.Configuration");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      try { 
        configuration0.fromJSON("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration1 = configuration0.createDuplicate(true);
      ConfigurationNode configurationNode0 = configuration1.createNewNode("' node - there are ");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertEquals("' node - there are ", configurationNode0.getType());
      assertNotSame(configuration1, configuration0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        configuration0.addChild(1, configurationNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Configuration configuration0 = new Configuration("*n!tFi");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConfigurationNode configurationNode0 = configuration0.createNewNode("UzV&(((");
      // Undeclared exception!
      try { 
        configuration0.addChild(556, configurationNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 556, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toString();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      configuration0.processObject("[]", configuration_JSONReader0);
      assertEquals(1, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.readNode((XMLDoc) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.createDuplicate(false);
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.key("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.key("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Configuration configuration0 = new Configuration((String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      configuration0.toString();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        configuration0.fromXML((InputStream) byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.fromXML((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      // Undeclared exception!
      try { 
        configuration1.removeChild(1751);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1751, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "rE9B_u*xZ4U^}Sm3";
      Configuration configuration0 = new Configuration("rE9B_u*xZ4U^}Sm3");
      String string1 = "org.apache.manifoldcf.core.interfaces.Configuration";
      Configuration configuration1 = new Configuration();
      try { 
        configuration1.fromJSON("Bad xml - missing outer '");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Configuration configuration0 = new Configuration("rE9B_u*xZ4U^}Sm3");
      configuration0.createNewNode("/5zeh78{");
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.fromJSON("rE9B_u*xZ4U^}Sm3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Configuration configuration0 = new Configuration("h`<RL-^+Y7KpJS_n\"");
      configuration0.makeReadOnly();
      configuration0.createNewNode("h`<RL-^+Y7KpJS_n\"");
      String string0 = "se?zx)\\aW'Q";
      // Undeclared exception!
      try { 
        configuration0.fromJSON("org.apache.manifoldcf.core.interfaces.Configuration");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.pushState();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader(";RAt15");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Configuration configuration0 = new Configuration("*>n!ttFi");
      Configuration configuration1 = configuration0.createDuplicate(true);
      Configuration configuration2 = configuration1.createNew();
      configuration2.getChildCount();
      String string0 = configuration1.toString();
      assertNotSame(configuration1, configuration0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration("'");
      Configuration configuration1 = configuration0.createNew();
      Configuration configuration2 = configuration1.createDuplicate(false);
      XMLDoc xMLDoc0 = new XMLDoc();
      try { 
        configuration2.initializeFromDoc(xMLDoc0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad xml - missing outer 'data' node - there are 0 nodes
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.findChild((-1673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Configuration configuration0 = new Configuration("rE9B_u*xZ4U^}Sm3");
      Configuration configuration1 = configuration0.createDuplicate(true);
      ConfigurationNode configurationNode0 = configuration0.createNewNode("/5zeh78{");
      configuration1.hashCode();
      ConfigurationNode configurationNode1 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotSame(configuration0, configuration1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Configuration configuration0 = new Configuration("rE9B_u*xZ4U^}Sm3");
      configuration0.createDuplicate(true);
      Configuration configuration1 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration1.removeChild(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.removeChild((-652));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = null;
      Configuration configuration0 = new Configuration((String) null);
      // Undeclared exception!
      try { 
        configuration0.removeChild((-420));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertEquals("", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("lk>w%F2(y2J \"J");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, false);
      assertEquals("lk>w%F2(y2J \"J", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Configuration configuration0 = new Configuration((String) null);
      // Undeclared exception!
      try { 
        configuration0.toXML();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.initializeFromDoc((XMLDoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      XMLDoc xMLDoc0 = new XMLDoc();
      try { 
        configuration0.initializeFromDoc(xMLDoc0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad xml - missing outer 'data' node - there are 0 nodes
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      // Undeclared exception!
      try { 
        configuration1.initializeFromDoc((XMLDoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("");
      // Undeclared exception!
      try { 
        configuration0.addChild(881, configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.value((String) null);
      Configuration configuration0 = new Configuration();
      int int0 = 737;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      configurationNode0.value = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      configuration_JSONWriter0.startArray();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertEquals(0, configurationNode0.getAttributeCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.setAttribute("T:98g$Rk", "ep*y0.ST<3&");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
      configuration0.removeChild(0);
      Configuration configuration1 = configuration0.createDuplicate(true);
      configuration1.hashCode();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.removeOuterNode(configurationNode0);
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      Configuration configuration0 = new Configuration();
      configuration0.hashCode();
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.clearChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.clearChildren();
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      boolean boolean0 = false;
      Configuration configuration1 = configuration0.createDuplicate(false);
      configuration1.clearChildren();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      XMLDoc xMLDoc0 = null;
      try {
        xMLDoc0 = new XMLDoc(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toJSON();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.key("W");
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endObject();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Configuration configuration0 = new Configuration("*>n!ttFi");
      Configuration configuration1 = configuration0.createDuplicate(true);
      Configuration configuration2 = configuration1.createNew();
      configuration2.getChildCount();
      assertNotSame(configuration1, configuration0);
      assertNotSame(configuration0, configuration1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.createDuplicate(true);
      configuration0.toJSON();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      XMLDoc xMLDoc0 = null;
      try {
        xMLDoc0 = new XMLDoc("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Configuration configuration0 = new Configuration("rE9B_u*xZ4U^}Sm3");
      Configuration configuration1 = configuration0.createDuplicate(true);
      Configuration configuration2 = configuration1.createNew();
      // Undeclared exception!
      try { 
        configuration2.fromXML("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.fromXML("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.readOnly = true;
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        configuration0.addChild(0, configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.addChild(0, configurationNode0);
      // Undeclared exception!
      try { 
        configuration0.createDuplicate(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Configuration configuration0 = new Configuration("h`<RL-^+Y7KpJS_n\"");
      configuration0.makeReadOnly();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("h`<RL-^+Y7KpJS_n\"");
      // Undeclared exception!
      try { 
        configuration0.addChild(0, configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      configuration0.makeReadOnly();
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Configuration configuration0 = new Configuration("com.google.common.hash.AbstractCompositeHashFunction");
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.findChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = new Configuration("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      assertTrue(configuration1.equals((Object)configuration0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configuration0.addChild(0, configurationNode0);
      // Undeclared exception!
      try { 
        configuration0.createDuplicate(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.toXML();
      Configuration configuration1 = configuration0.createNew();
      configuration1.createDuplicate(false);
      XMLDoc xMLDoc0 = null;
      try {
        xMLDoc0 = new XMLDoc((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.setAttribute("T:98g$Rk", "ep*y0.ST<3&");
      configuration0.addChild(0, configurationNode0);
      configuration0.hashCode();
      // Undeclared exception!
      try { 
        configuration0.toXML();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Configuration configuration0 = new Configuration("com.google.c!mzon.base.Predicates$OrPredicate");
      configuration0.makeReadOnly();
      Configuration configuration1 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration1.fromXML("com.google.c!mzon.base.Predicates$OrPredicate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      boolean boolean0 = true;
      configuration0.toXML();
      configuration0.createDuplicate(true);
      String string0 = "Bad json: ";
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("97*b*()1XtvQ@^D");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value("e%CM\"wr*XYYN`!$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      Configuration configuration0 = new Configuration("");
      // Undeclared exception!
      try { 
        configuration0.toXML();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.toString();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value("eURl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.findChild(3162);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3162, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.findChild(91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.endArray();
      configuration_JSONWriter0.key("yR#*~");
      String string0 = "'4Xl";
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("'4Xl");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.popState();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = null;
      try {
        configuration_JSONReader0 = new Configuration.JSONReader("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }
}
