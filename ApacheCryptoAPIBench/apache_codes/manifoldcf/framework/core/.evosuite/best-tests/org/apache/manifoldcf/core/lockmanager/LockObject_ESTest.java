/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:52:14 GMT 2022
 */

package org.apache.manifoldcf.core.lockmanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.lockmanager.LockGate;
import org.apache.manifoldcf.core.lockmanager.LockObject;
import org.apache.manifoldcf.core.lockmanager.LockObjectFactory;
import org.apache.manifoldcf.core.lockmanager.LockPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LockObject_ESTest extends LockObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, (Object) null);
      lockObject0.enterWriteLock();
      try { 
        lockObject0.enterWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      Object object1 = new Object();
      Object object2 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, object2);
      Object object3 = new Object();
      LockGate lockGate0 = new LockGate(object3, lockObject0, lockPool0);
      lockPool0.releaseObject(object1, lockGate0);
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterReadLockNoWait();
      lockObject0.enterReadLock();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      lockPool0.releaseObject((Object) null, lockGate0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.obtainGlobalWriteLock();
      lockObject0.enterReadLockNoWait();
      lockObject0.enterReadLock();
      lockObject0.clearGlobalReadLock();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, (Object) null);
      lockObject0.clearGlobalWriteLock();
      lockPool0.getObject(lockObjectFactory0);
      lockObject0.clearGlobalWriteLock();
      lockObject0.enterWriteLock();
      Object object0 = new Object();
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      Long long0 = new Long(0L);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      Object object1 = new Object();
      LockObject lockObject1 = new LockObject(lockPool1, object1);
      lockPool1.getObject(lockGate0);
      lockObject1.enterReadLockNoWait();
      lockObject1.enterReadLockNoWait();
      // Undeclared exception!
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      lockObject0.makeInvalid();
      lockObject0.obtainGlobalWriteLock();
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      LockObject lockObject1 = new LockObject(lockPool0, lockObject0);
      lockObject1.clearGlobalNonExWriteLock();
      Object object0 = new Object();
      LockObject lockObject2 = new LockObject(lockPool0, object0);
      lockObject2.enterNonExWriteLockNoWait();
      LockObject lockObject3 = new LockObject(lockPool0, lockObject0);
      lockObject3.clearGlobalNonExWriteLockNoWait();
      lockObject3.enterWriteLockNoWait();
      lockObject2.leaveNonExWriteLock();
      LockObject lockObject4 = new LockObject(lockPool0, lockObject1);
      // Undeclared exception!
      try { 
        lockObject4.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000007
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool1, lockPool0);
      lockObject0.enterNonExWriteLock();
      lockObject0.leaveNonExWriteLock();
      lockObject0.enterNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockPool0.getObject(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      LockObject lockObject1 = new LockObject(lockPool0, object0);
      lockObject0.obtainGlobalReadLock();
      lockObject1.clearGlobalReadLock();
      lockObject0.enterNonExWriteLock();
      lockObject1.clearGlobalReadLock();
      lockObject1.makeInvalid();
      lockObject0.clearGlobalNonExWriteLock();
      try { 
        lockObject1.enterWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterReadLockNoWait();
      lockObject0.makeInvalid();
      try { 
        lockObject0.enterWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = null;
      LockObject lockObject0 = new LockObject(lockPool0, (Object) null);
      lockObject0.clearGlobalWriteLock();
      lockPool0.getObject(lockObjectFactory0);
      lockObject0.clearGlobalWriteLock();
      lockObject0.enterWriteLock();
      Object object1 = new Object();
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      long long0 = 3199L;
      Long long1 = new Long(0L);
      lockGate0.enterNonExWriteLockNoWait(long1);
      Long long2 = new Long(255L);
      try { 
        lockGate0.enterReadLockNoWait(long2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockObjectFactory0);
      lockObject0.enterNonExWriteLockNoWait();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterWriteLock();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterWriteLockNoWait();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      LockGate lockGate0 = new LockGate(lockPool0, lockObject0, lockPool0);
      Long long0 = new Long(831L);
      lockGate0.enterReadLockNoWait(long0);
      lockPool0.releaseObject(lockObjectFactory0, lockGate0);
      Object object1 = new Object();
      LockGate lockGate1 = lockPool0.getObject(object1);
      Object object2 = new Object();
      lockPool0.releaseObject(object2, lockGate1);
      Object object3 = new Object();
      lockPool0.getObject(object3);
      lockObject0.obtainGlobalWriteLock();
      lockPool0.releaseObject(lockObjectFactory0, lockGate1);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.clearGlobalReadLockNoWait();
      lockObject1.enterReadLock();
      lockObject1.clearGlobalWriteLockNoWait();
      lockObject0.clearGlobalReadLock();
      lockObject1.leaveReadLock();
      lockObject1.clearGlobalNonExWriteLock();
      lockObject1.enterNonExWriteLockNoWait();
      lockObject1.clearGlobalNonExWriteLockNoWait();
      try { 
        lockObject0.enterWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterReadLock();
      lockObject0.obtainGlobalWriteLock();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.clearGlobalReadLock();
      lockObject1.obtainGlobalWriteLock();
      // Undeclared exception!
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterReadLock();
      try { 
        lockObject0.enterWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      lockPool0.getObject(lockObjectFactory0);
      lockPool0.getObject(object0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      Object object1 = new Object();
      lockObject0.enterNonExWriteLock();
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, object1);
      lockObject0.obtainGlobalReadLock();
      lockObject1.obtainGlobalNonExWriteLock();
      LockObject lockObject2 = new LockObject(lockPool0, lockObjectFactory0);
      lockObject2.enterWriteLockNoWait();
      lockObject2.clearGlobalWriteLockNoWait();
      lockObject2.leaveWriteLock();
      lockObject1.clearGlobalWriteLockNoWait();
      try { 
        lockObject0.enterWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      lockObject0.enterWriteLock();
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      Object object1 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, lockObject0);
      Object object2 = new Object();
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool1, object2);
      lockObject1.enterNonExWriteLock();
      lockObject0.leaveWriteLock();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.clearGlobalWriteLock();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      Object object0 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, object0);
      Object object1 = new Object();
      Object object2 = new Object();
      lockPool0.getObject(object2);
      LockObject lockObject1 = new LockObject(lockPool0, object1);
      lockObject1.clearGlobalWriteLock();
      lockObject1.clearGlobalWriteLockNoWait();
      lockObject0.clearGlobalWriteLockNoWait();
      lockObject0.clearGlobalReadLockNoWait();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      LockGate lockGate0 = new LockGate(object0, lockObject0, lockPool0);
      lockPool0.releaseObject(lockObjectFactory0, lockGate0);
      lockObject0.obtainGlobalNonExWriteLock();
      try { 
        lockObject0.enterNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      LockObject lockObject0 = new LockObject((LockPool) null, object1);
      try { 
        lockObject0.enterNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      Object object1 = new Object();
      LockObject lockObject1 = new LockObject(lockPool0, object1);
      Object object2 = new Object();
      LockGate lockGate0 = new LockGate(lockObject0, lockObject0, lockPool0);
      lockPool0.releaseObject(object2, lockGate0);
      lockObject1.clearGlobalReadLockNoWait();
      try { 
        lockObject0.enterReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject((LockPool) null, object0);
      Object object1 = new Object();
      try { 
        lockObject0.enterReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObjectFactory lockObjectFactory1 = new LockObjectFactory();
      LockPool lockPool1 = new LockPool(lockObjectFactory1);
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject(lockPool0, lockObjectFactory0);
      lockObject0.enterNonExWriteLock();
      lockObject0.enterNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockGate lockGate0 = lockPool0.getObject(object0);
      Long long0 = new Long((-353L));
      lockGate0.freePermission(long0);
      lockPool0.releaseObject((Object) null, lockGate0);
      Object object1 = new Object();
      LockGate lockGate1 = lockPool0.getObject(object1);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.enterNonExWriteLock();
      lockObject0.clearGlobalWriteLockNoWait();
      Object object2 = new Object();
      lockPool0.releaseObject(object2, lockGate0);
      lockObject0.clearGlobalNonExWriteLock();
      lockObject0.obtainGlobalReadLock();
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      Object object3 = new Object();
      lockPool1.getObject(object3);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool1, lockGate1);
      lockObject1.enterReadLockNoWait();
      lockObject0.obtainGlobalWriteLockNoWait();
      lockObject0.enterNonExWriteLockNoWait();
      lockObject1.clearGlobalReadLock();
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000007
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      // Undeclared exception!
      try { 
        lockObject0.leaveNonExWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      // Undeclared exception!
      try { 
        lockObject0.leaveNonExWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      lockObject0.clearGlobalWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockPool0.getObject(lockObjectFactory0);
      lockObject0.enterReadLockNoWait();
      lockObject0.makeInvalid();
      lockObject0.clearGlobalReadLock();
      lockObject0.obtainGlobalNonExWriteLockNoWait();
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.clearGlobalNonExWriteLock();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      lockObject0.clearGlobalNonExWriteLock();
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      lockPool1.getObject(lockObject0);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool1, lockPool1);
      // Undeclared exception!
      try { 
        lockObject1.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000007
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      lockObjectFactory0.newLockObject((LockPool) null, object0);
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.makeInvalid();
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      Object object0 = new Object();
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockObject lockObject1 = lockObjectFactory0.newLockObject((LockPool) null, lockObject0);
      try { 
        lockObject1.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.enterReadLock();
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, (Object) null);
      lockObject0.enterWriteLock();
      lockObject0.makeInvalid();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockGate lockGate0 = lockPool1.getObject(lockObjectFactory0);
      lockGate0.makeInvalid();
      Long long0 = new Long(1939L);
      try { 
        lockGate0.enterWriteLockNoWait(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      lockObjectFactory0.newLockObject(lockPool0, (Object) null);
      lockObject0.enterReadLockNoWait();
      lockObject0.obtainGlobalNonExWriteLockNoWait();
      lockObject0.obtainGlobalNonExWriteLock();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject((LockPool) null, object0);
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockObjectFactory0);
      lockObject0.obtainGlobalNonExWriteLock();
      Object object0 = new Object();
      lockPool0.getObject(object0);
      lockObject0.enterWriteLock();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      lockObject0.clearGlobalReadLock();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockObjectFactory0);
      lockObject0.enterReadLockNoWait();
      lockObject0.leaveReadLock();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.obtainGlobalReadLock();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool1, lockPool1);
      lockObject0.obtainGlobalNonExWriteLockNoWait();
      // Undeclared exception!
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000005
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.obtainGlobalReadLock();
      Object object0 = new Object();
      LockObject lockObject2 = lockObjectFactory0.newLockObject(lockPool0, object0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject3 = new LockObject(lockPool1, lockPool1);
      lockObjectFactory0.newLockObject(lockPool1, lockPool0);
      lockObject3.enterReadLockNoWait();
      lockObject3.leaveReadLock();
      lockObject2.clearGlobalReadLockNoWait();
      lockObject2.enterReadLockNoWait();
      lockObject0.obtainGlobalReadLockNoWait();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      lockObject0.enterNonExWriteLockNoWait();
      lockObject0.enterNonExWriteLock();
      lockObject0.obtainGlobalReadLockNoWait();
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      // Undeclared exception!
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      Object object0 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, object0);
      lockObject0.enterNonExWriteLock();
      // Undeclared exception!
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterNonExWriteLock();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.enterNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      lockObject0.enterNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.obtainGlobalNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      Object object0 = new Object();
      lockPool0.getObject(object0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      LockObject lockObject1 = new LockObject(lockPool0, object0);
      lockObject1.clearGlobalWriteLock();
      lockObject1.enterNonExWriteLock();
      lockObject1.obtainGlobalNonExWriteLock();
      lockObject1.enterNonExWriteLock();
      lockObject1.leaveNonExWriteLock();
      lockObject0.clearGlobalNonExWriteLock();
      assertNotSame(lockObject0, lockObject1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.leaveNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = null;
      Object object0 = new Object();
      Object object1 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, object1);
      try { 
        lockObject0.leaveNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      Object object1 = new Object();
      Object object2 = new Object();
      LockGate lockGate0 = new LockGate(object2, lockObject0, lockPool0);
      lockPool0.releaseObject(object1, lockGate0);
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, (Object) null);
      Object object1 = new Object();
      LockObject lockObject0 = new LockObject(lockPool0, object1);
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000004
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      Object object0 = new Object();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterReadLockNoWait();
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }
}
