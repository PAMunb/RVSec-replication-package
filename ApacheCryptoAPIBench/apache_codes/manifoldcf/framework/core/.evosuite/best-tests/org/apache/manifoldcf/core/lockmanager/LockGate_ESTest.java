/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:57:35 GMT 2022
 */

package org.apache.manifoldcf.core.lockmanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.lockmanager.LockGate;
import org.apache.manifoldcf.core.lockmanager.LockObject;
import org.apache.manifoldcf.core.lockmanager.LockObjectFactory;
import org.apache.manifoldcf.core.lockmanager.LockPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LockGate_ESTest extends LockGate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LockPool lockPool0 = new LockPool((LockObjectFactory) null);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(long0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      lockGate0.waitForPermission(long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      lockGate0.freePermission((Long) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(object0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      lockGate0.enterNonExWriteLockNoWait(long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(4612L);
      assertNotNull(long0);
      assertEquals(4612L, (long)long0);
      
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockObject lockObject0 = new LockObject(lockPool0, long0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(long0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      lockGate0.enterNonExWriteLock(long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(object0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.waitForPermission((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.makeInvalid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((-287L));
      assertNotNull(long0);
      assertEquals((-287L), (long)long0);
      
      LockObject lockObject0 = new LockObject((LockPool) null, long0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(long0, lockObject0, (LockPool) null);
      assertNotNull(lockGate0);
      
      try { 
        lockGate0.leaveReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockObjectFactory lockObjectFactory1 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory1).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool1 = new LockPool(lockObjectFactory1);
      assertNotNull(lockPool1);
      assertFalse(lockPool1.equals((Object)lockPool0));
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      LockGate lockGate0 = lockPool1.getObject(long0);
      assertNotNull(lockGate0);
      assertNotSame(lockPool0, lockPool1);
      assertNotSame(lockPool1, lockPool0);
      assertFalse(lockPool0.equals((Object)lockPool1));
      assertFalse(lockPool1.equals((Object)lockPool0));
      
      // Undeclared exception!
      try { 
        lockGate0.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000002
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      LockGate lockGate0 = lockPool0.getObject(long0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.leaveReadLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.leaveNonExWriteLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LockPool lockPool0 = new LockPool((LockObjectFactory) null);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(long0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      lockGate0.enterWriteLockNoWait(long0);
      try { 
        lockGate0.enterWriteLockNoWait(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      assertNotNull(lockObject0);
      
      LockObjectFactory lockObjectFactory1 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory1).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool1 = new LockPool(lockObjectFactory1);
      assertNotNull(lockPool1);
      assertFalse(lockPool1.equals((Object)lockPool0));
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LockGate lockGate0 = lockPool1.getObject(long0);
      assertNotNull(lockGate0);
      assertNotSame(lockPool0, lockPool1);
      assertNotSame(lockPool1, lockPool0);
      assertFalse(lockPool0.equals((Object)lockPool1));
      assertFalse(lockPool1.equals((Object)lockPool0));
      
      lockGate0.makeInvalid();
      assertNotSame(lockPool0, lockPool1);
      assertNotSame(lockPool1, lockPool0);
      assertFalse(lockPool0.equals((Object)lockPool1));
      assertFalse(lockPool1.equals((Object)lockPool0));
      
      try { 
        lockGate0.enterWriteLock(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LockGate lockGate0 = lockPool0.getObject(long0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.enterWriteLock(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LockObject lockObject0 = mock(LockObject.class, new ViolatedAssumptionAnswer());
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LockGate lockGate0 = lockPool0.getObject(long0);
      assertNotNull(lockGate0);
      
      lockGate0.makeInvalid();
      try { 
        lockGate0.enterReadLockNoWait(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockGate lockGate0 = new LockGate((Object) null, (LockObject) null, lockPool0);
      assertNotNull(lockGate0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      // Undeclared exception!
      try { 
        lockGate0.enterReadLockNoWait(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(object0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      lockObject0.makeInvalid();
      Long long0 = new Long(4960L);
      assertNotNull(long0);
      assertEquals(4960L, (long)long0);
      
      try { 
        lockGate0.enterReadLock(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockGate lockGate0 = lockPool0.getObject((Object) null);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.enterReadLock((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.enterNonExWriteLock((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LockObject lockObject0 = mock(LockObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lockObject0).leaveReadLock();
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      LockGate lockGate0 = lockPool0.getObject(long0);
      assertNotNull(lockGate0);
      
      lockGate0.leaveReadLock();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LockObject lockObject0 = mock(LockObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lockObject0).leaveNonExWriteLock();
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      lockGate0.leaveNonExWriteLock();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LockObject lockObject0 = mock(LockObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lockObject0).leaveWriteLock();
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      LockGate lockGate0 = lockPool0.getObject(long0);
      assertNotNull(lockGate0);
      
      lockGate0.leaveWriteLock();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObject lockObject0 = new LockObject((LockPool) null, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(object0, lockObject0, (LockPool) null);
      assertNotNull(lockGate0);
      
      Long long0 = new Long(280L);
      assertNotNull(long0);
      assertEquals(280L, (long)long0);
      
      try { 
        lockGate0.enterNonExWriteLock(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(object0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      Long long0 = new Long(839L);
      assertNotNull(long0);
      assertEquals(839L, (long)long0);
      
      lockGate0.enterReadLock(long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long(758L);
      assertNotNull(long0);
      assertEquals(758L, (long)long0);
      
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      assertNotNull(lockObject0);
      
      LockGate lockGate0 = new LockGate(long0, lockObject0, lockPool0);
      assertNotNull(lockGate0);
      
      lockGate0.enterReadLockNoWait(long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      Long long0 = new Long((-2002L));
      assertNotNull(long0);
      assertEquals((-2002L), (long)long0);
      
      // Undeclared exception!
      try { 
        lockGate0.enterWriteLockNoWait(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn((LockObject) null).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      assertNotNull(lockPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LockGate lockGate0 = lockPool0.getObject(object0);
      assertNotNull(lockGate0);
      
      // Undeclared exception!
      try { 
        lockGate0.enterNonExWriteLockNoWait((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockGate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LockObject lockObject0 = mock(LockObject.class, new ViolatedAssumptionAnswer());
      LockObjectFactory lockObjectFactory0 = mock(LockObjectFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lockObject0).when(lockObjectFactory0).newLockObject(any(org.apache.manifoldcf.core.lockmanager.LockPool.class) , any());
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Long long0 = new Long((-1L));
      LockGate lockGate0 = lockPool0.getObject(long0);
      lockGate0.enterWriteLock(long0);
  }
}
