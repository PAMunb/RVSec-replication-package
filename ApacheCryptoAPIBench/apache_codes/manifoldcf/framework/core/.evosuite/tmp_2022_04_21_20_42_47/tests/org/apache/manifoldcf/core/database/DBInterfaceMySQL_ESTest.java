/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:47:59 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.database.DBInterfaceMySQL;
import org.apache.manifoldcf.core.interfaces.ColumnDescription;
import org.apache.manifoldcf.core.threadcontext.ThreadContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DBInterfaceMySQL_ESTest extends DBInterfaceMySQL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = DBInterfaceMySQL.mapType("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBInterfaceMySQL.mapType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBInterfaceMySQL.appendDescription((StringBuilder) null, "40001", (ColumnDescription) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.DBInterfaceMySQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = DBInterfaceMySQL.mapType("blob");
      assertEquals("LONGBLOB", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = DBInterfaceMySQL.mapType("FLOAT");
      assertEquals("DOUBLE", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ColumnDescription columnDescription0 = new ColumnDescription("f)HyNziW '0", false, true, "f)HyNziW '0", "f)HyNziW '0", true);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "f)HyNziW '0", columnDescription0, false, true);
      assertEquals("f)HyNziW '0 f)HyNziW '0 NULL REFERENCES f)HyNziW '0(f)HyNziW '0) ON DELETE CASCADE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ColumnDescription columnDescription0 = new ColumnDescription("f)HyNziW '0", false, false, "f)HyNziW '0", "f)HyNziW '0", false);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "f)HyNziW '0", columnDescription0, false, false);
      assertEquals("f)HyNziW '0 f)HyNziW '0 NOT NULL", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("\"", true, true, (String) null, ";n7,$&l&\"<zbz@o[&]s", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBInterfaceMySQL.appendDescription(stringBuilder0, "DBk&rObhs?+&", columnDescription0, false, true);
      assertEquals("DBk&rObhs?+& \" NULL PRIMARY KEY", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", true, true, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", false);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", columnDescription0, true, true);
      assertEquals("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $ @(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $ NULL PRIMARY KEY REFERENCES @(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $(@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $) ON DELETE RESTRICT", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBInterfaceMySQL.TableStatistics dBInterfaceMySQL_TableStatistics0 = new DBInterfaceMySQL.TableStatistics();
      int int0 = dBInterfaceMySQL_TableStatistics0.getEventCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBInterfaceMySQL.TableStatistics dBInterfaceMySQL_TableStatistics0 = new DBInterfaceMySQL.TableStatistics();
      dBInterfaceMySQL_TableStatistics0.reset();
      assertEquals(0, dBInterfaceMySQL_TableStatistics0.getEventCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBInterfaceMySQL.TableStatistics dBInterfaceMySQL_TableStatistics0 = new DBInterfaceMySQL.TableStatistics();
      dBInterfaceMySQL_TableStatistics0.add((-805));
      assertEquals((-805), dBInterfaceMySQL_TableStatistics0.getEventCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      DBInterfaceMySQL dBInterfaceMySQL0 = null;
      try {
        dBInterfaceMySQL0 = new DBInterfaceMySQL(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      DBInterfaceMySQL dBInterfaceMySQL0 = null;
      try {
        dBInterfaceMySQL0 = new DBInterfaceMySQL(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }
}
