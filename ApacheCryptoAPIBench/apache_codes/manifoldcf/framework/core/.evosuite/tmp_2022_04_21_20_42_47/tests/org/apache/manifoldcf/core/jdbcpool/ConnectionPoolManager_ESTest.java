/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:00:14 GMT 2022
 */

package org.apache.manifoldcf.core.jdbcpool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.manifoldcf.core.jdbcpool.ConnectionPool;
import org.apache.manifoldcf.core.jdbcpool.ConnectionPoolManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConnectionPoolManager_ESTest extends ConnectionPoolManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(1, true);
      assertNotNull(connectionPoolManager0);
      
      connectionPoolManager0.cleanupExpiredConnections((-1780L));
      try { 
        connectionPoolManager0.addAlias("org.apache.manifoldcf.core.jdbcpool.ConnectionPool", "org.apache.manifoldcf.core.jdbcpool.ConnectionPool", "org.apache.manifoldcf.core.jdbcpool.ConnectionPool", "org.apache.manifoldcf.core.jdbcpool.ConnectionPool", "", 1, 1);
        fail("Expecting exception: InstantiationException");
      
      } catch(InstantiationException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(0, true);
      assertNotNull(connectionPoolManager0);
      
      connectionPoolManager0.flush();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1123;
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(1123, true);
      assertNotNull(connectionPoolManager0);
      
      connectionPoolManager0.flush();
      ConnectionPoolManager connectionPoolManager1 = null;
      try {
        connectionPoolManager1 = new ConnectionPoolManager((-1686), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1686
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(1687, false);
      assertNotNull(connectionPoolManager0);
      
      ConnectionPoolManager.ConnectionCloserThread connectionPoolManager_ConnectionCloserThread0 = connectionPoolManager0.new ConnectionCloserThread();
      assertNotNull(connectionPoolManager_ConnectionCloserThread0);
      
      try { 
        connectionPoolManager0.addAlias("TT=L", "Pool already closed", "T(", "Out of db connections, list of outstanding ones follows.", "{(]hjiY", 1687, 0L);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(0, true);
      assertNotNull(connectionPoolManager0);
      
      ConnectionPool connectionPool0 = connectionPoolManager0.getPool("&~");
      assertNull(connectionPool0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(1417, false);
      assertNotNull(connectionPoolManager0);
      
      ConnectionPoolManager.ConnectionCloserThread connectionPoolManager_ConnectionCloserThread0 = connectionPoolManager0.new ConnectionCloserThread();
      assertNotNull(connectionPoolManager_ConnectionCloserThread0);
      
      ConnectionPool connectionPool0 = connectionPoolManager0.getPool("PCL4_");
      assertNull(connectionPool0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(0, false);
      assertNotNull(connectionPoolManager0);
      
      // Undeclared exception!
      try { 
        connectionPoolManager0.addAlias((String) null, (String) null, (String) null, (String) null, "org.apache.manifoldcf.core.jdbcpool.ConnectionPoolManager$ConnectionCloserThread", 6, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = null;
      try {
        connectionPoolManager0 = new ConnectionPoolManager((-2414), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2414
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(0, true);
      assertNotNull(connectionPoolManager0);
      
      connectionPoolManager0.cleanupExpiredConnections(0);
      connectionPoolManager0.cleanupExpiredConnections(975L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(0, true);
      assertNotNull(connectionPoolManager0);
      
      connectionPoolManager0.cleanupExpiredConnections(0);
      connectionPoolManager0.flush();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(180, false);
      assertNotNull(connectionPoolManager0);
      
      try { 
        connectionPoolManager0.addAlias("", "", "Z4", "Z4", "Z4", 180, 0L);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(0, false);
      assertNotNull(connectionPoolManager0);
      
      ConnectionPool connectionPool0 = connectionPoolManager0.getPool("@(#)$Id$");
      assertNull(connectionPool0);
      
      connectionPoolManager0.shutdown();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(1, false);
      assertNotNull(connectionPoolManager0);
      
      // Undeclared exception!
      try { 
        connectionPoolManager0.addAlias((String) null, (String) null, (String) null, (String) null, (String) null, 1, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(2601, false);
      assertNotNull(connectionPoolManager0);
      
      AtomicBoolean atomicBoolean0 = connectionPoolManager0.shuttingDown;
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      
      connectionPoolManager0.shuttingDown = atomicBoolean0;
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      assertEquals("false", connectionPoolManager0.shuttingDown.toString());
      assertFalse(connectionPoolManager0.shuttingDown.get());
      
      connectionPoolManager0.flush();
      connectionPoolManager0.flush();
      connectionPoolManager0.flush();
      ConnectionPool connectionPool0 = connectionPoolManager0.getPool("");
      assertNull(connectionPool0);
      
      connectionPoolManager0.shutdown();
      ConnectionPoolManager.ConnectionCloserThread connectionPoolManager_ConnectionCloserThread0 = connectionPoolManager0.new ConnectionCloserThread();
      assertNotNull(connectionPoolManager_ConnectionCloserThread0);
      
      connectionPoolManager_ConnectionCloserThread0.run();
      assertFalse(connectionPoolManager_ConnectionCloserThread0.isInterrupted());
      assertEquals(0, connectionPoolManager_ConnectionCloserThread0.countStackFrames());
      assertTrue(connectionPoolManager_ConnectionCloserThread0.isDaemon());
      
      connectionPoolManager0.shutdown();
      connectionPoolManager0.shutdown();
      ConnectionPool connectionPool1 = connectionPoolManager0.getPool("CB&\"k_9DN");
      assertNull(connectionPool1);
      
      connectionPoolManager0.cleanupExpiredConnections(2601);
      ConnectionPool connectionPool2 = connectionPoolManager0.getPool("@(#)$Id$");
      assertNull(connectionPool2);
      
      connectionPoolManager0.shutdown();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 556;
      ConnectionPoolManager connectionPoolManager0 = new ConnectionPoolManager(556, true);
      connectionPoolManager0.shutdown();
      connectionPoolManager0.shutdown();
      connectionPoolManager0.shutdown();
      ConnectionPoolManager.ConnectionCloserThread connectionPoolManager_ConnectionCloserThread0 = connectionPoolManager0.connectionCloserThread;
      connectionPoolManager_ConnectionCloserThread0.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      connectionPoolManager_ConnectionCloserThread0.run();
      AtomicBoolean atomicBoolean0 = connectionPoolManager0.shuttingDown;
      connectionPoolManager0.shuttingDown = atomicBoolean0;
      int int1 = 3209;
      try { 
        connectionPoolManager0.addAlias("", "", "h40#\"+WsgZ3 k", "", "", 3209, 3209);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }
}
