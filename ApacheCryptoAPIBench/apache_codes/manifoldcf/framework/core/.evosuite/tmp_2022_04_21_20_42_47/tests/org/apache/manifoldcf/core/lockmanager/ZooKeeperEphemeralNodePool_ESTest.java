/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:01:46 GMT 2022
 */

package org.apache.manifoldcf.core.lockmanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.lockmanager.ZooKeeperConnection;
import org.apache.manifoldcf.core.lockmanager.ZooKeeperConnectionPool;
import org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject;
import org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodePool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZooKeeperEphemeralNodePool_ESTest extends ZooKeeperEphemeralNodePool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZooKeeperConnection zooKeeperConnection0 = mock(ZooKeeperConnection.class, new ViolatedAssumptionAnswer());
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = mock(ZooKeeperConnectionPool.class, new ViolatedAssumptionAnswer());
      doReturn(zooKeeperConnection0).when(zooKeeperConnectionPool0).grab();
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool(zooKeeperConnectionPool0);
      byte[] byteArray0 = new byte[3];
      zooKeeperEphemeralNodePool0.createNode("@(#)$Id$", byteArray0);
      zooKeeperEphemeralNodePool0.setNodeData("@(#)$Id$", byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZooKeeperConnection zooKeeperConnection0 = mock(ZooKeeperConnection.class, new ViolatedAssumptionAnswer());
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = mock(ZooKeeperConnectionPool.class, new ViolatedAssumptionAnswer());
      doReturn(zooKeeperConnection0).when(zooKeeperConnectionPool0).grab();
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool(zooKeeperConnectionPool0);
      byte[] byteArray0 = new byte[0];
      zooKeeperEphemeralNodePool0.createNode("@(#)$Id$", byteArray0);
      zooKeeperEphemeralNodePool0.deleteAll();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool((ZooKeeperConnectionPool) null);
      // Undeclared exception!
      try { 
        zooKeeperEphemeralNodePool0.createNode("", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = mock(ZooKeeperConnectionPool.class, new ViolatedAssumptionAnswer());
      doReturn((ZooKeeperConnection) null).when(zooKeeperConnectionPool0).grab();
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool(zooKeeperConnectionPool0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zooKeeperEphemeralNodePool0.createNode("@(#)$Id$", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ZooKeeperConnection zooKeeperConnection0 = mock(ZooKeeperConnection.class, new ViolatedAssumptionAnswer());
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = mock(ZooKeeperConnectionPool.class, new ViolatedAssumptionAnswer());
      doReturn((ZooKeeperConnection) null).when(zooKeeperConnectionPool0).grab();
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool(zooKeeperConnectionPool0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        zooKeeperEphemeralNodePool0.createNode("@(#)$Id$", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool((ZooKeeperConnectionPool) null);
      ZooKeeperEphemeralNodeObject zooKeeperEphemeralNodeObject0 = zooKeeperEphemeralNodePool0.getObject((String) null);
      ZooKeeperEphemeralNodeObject zooKeeperEphemeralNodeObject1 = zooKeeperEphemeralNodePool0.getObject((String) null);
      assertSame(zooKeeperEphemeralNodeObject1, zooKeeperEphemeralNodeObject0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool((ZooKeeperConnectionPool) null);
      zooKeeperEphemeralNodePool0.getObject((String) null);
      // Undeclared exception!
      try { 
        zooKeeperEphemeralNodePool0.deleteAll();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't delete node 'null' that we don't own
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool((ZooKeeperConnectionPool) null);
      zooKeeperEphemeralNodePool0.getObject("-3Klxf+1F");
      // Undeclared exception!
      try { 
        zooKeeperEphemeralNodePool0.deleteNode("-3Klxf+1F");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't delete node '-3Klxf+1F' that we don't own
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool((ZooKeeperConnectionPool) null);
      zooKeeperEphemeralNodePool0.deleteNode("-HA'@#");
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ZooKeeperEphemeralNodePool zooKeeperEphemeralNodePool0 = new ZooKeeperEphemeralNodePool((ZooKeeperConnectionPool) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zooKeeperEphemeralNodePool0.setNodeData("Can't release lock we don't hold", byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node not yet created for node path 'Can't release lock we don't hold'
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperEphemeralNodeObject", e);
      }
  }
}
