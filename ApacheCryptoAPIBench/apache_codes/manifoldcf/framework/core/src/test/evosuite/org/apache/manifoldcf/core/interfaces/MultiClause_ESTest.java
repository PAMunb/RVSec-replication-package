/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:49:22 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.manifoldcf.core.interfaces.MultiClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiClause_ESTest extends MultiClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiClause multiClause0 = new MultiClause("}", (List) null);
      multiClause0.getValues();
      assertEquals("}", multiClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiClause multiClause0 = new MultiClause("^", objectArray0);
      multiClause0.getValues();
      assertEquals("^", multiClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MultiClause multiClause0 = new MultiClause((String) null, objectArray0);
      String string0 = multiClause0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiClause multiClause0 = new MultiClause("^", objectArray0);
      multiClause0.columnName = "mBn;Am+";
      multiClause0.columnName = "";
      multiClause0.getColumnName();
      assertEquals("", multiClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiClause multiClause0 = null;
      try {
        multiClause0 = new MultiClause(">AQ:x{*?=8:.y", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.MultiClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiClause multiClause0 = new MultiClause("^", objectArray0);
      String string0 = multiClause0.getOperation();
      assertEquals("^", multiClause0.getColumnName());
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiClause multiClause0 = new MultiClause("N0{&sy/e>d<jHB>", objectArray0);
      List list0 = multiClause0.getValues();
      assertEquals("N0{&sy/e>d<jHB>", multiClause0.getColumnName());
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiClause multiClause0 = new MultiClause("N0{&sy/e>d<jHB>", objectArray0);
      String string0 = multiClause0.getColumnName();
      assertNotNull(string0);
      assertEquals("N0{&sy/e>d<jHB>", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiClause multiClause0 = new MultiClause("N0{&sy/e>d<jHB>", objectArray0);
      multiClause0.getJoinColumnName();
      assertEquals("N0{&sy/e>d<jHB>", multiClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MultiClause multiClause0 = new MultiClause("N0{&sy/e>d<jHB>", objectArray0);
      MultiClause multiClause1 = new MultiClause("org.apache.manifoldcf.core.interfaces.MultiClause", multiClause0.values);
      assertEquals("N0{&sy/e>d<jHB>", multiClause0.getColumnName());
      assertEquals("org.apache.manifoldcf.core.interfaces.MultiClause", multiClause1.getColumnName());
  }
}
