/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:43:59 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.time.ZoneId;
import java.util.Map;
import org.apache.manifoldcf.core.interfaces.ConfigNode;
import org.apache.manifoldcf.core.interfaces.ConfigParams;
import org.apache.manifoldcf.core.interfaces.Configuration;
import org.apache.manifoldcf.core.interfaces.ConfigurationNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigParams_ESTest extends ConfigParams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConfigParams configParams0 = new ConfigParams(map0);
      configParams0.clearOuterNodes();
      assertEquals(28, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setObfuscatedParameter("_~ARAMETER_", "_~ARAMETER_");
      configParams0.getParameter("_~ARAMETER_");
      assertEquals(1, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConfigParams configParams0 = new ConfigParams(map0);
      ConfigParams configParams1 = configParams0.duplicate();
      assertNotSame(configParams0, configParams1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      Configuration configuration0 = configParams0.createNew();
      assertTrue(configuration0.equals((Object)configParams0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setObfuscatedParameter((String) null, "ofg.apache.xerces.dom.DocumentImpl");
      configParams0.setObfuscatedParameter("h,_,>=", "ofg.apache.xerces.dom.DocumentImpl");
      // Undeclared exception!
      try { 
        configParams0.setObfuscatedParameter("h,_,>=", "@(#)$Id: ConfigParams.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.readOnly = true;
      // Undeclared exception!
      try { 
        configParams0.setObfuscatedParameter("@(#)$Id: ConfigParams.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ConfigParams.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      // Undeclared exception!
      try { 
        configParams0.removeOuterNode((ConfigurationNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      // Undeclared exception!
      try { 
        configParams0.getChild(275);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 275, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      // Undeclared exception!
      try { 
        configParams0.getChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      // Undeclared exception!
      try { 
        configParams0.addOuterNode((ConfigurationNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigParams configParams0 = null;
      try {
        configParams0 = new ConfigParams((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigParams", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfigParams configParams0 = null;
      try {
        configParams0 = new ConfigParams((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setObfuscatedParameter("8.Y-v", "8.Y-v");
      configParams0.setParameter("8.Y-v", "8.Y-v");
      assertEquals(1, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      String string0 = configParams0.getParameter("_~ARAMETER_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setObfuscatedParameter("8.Y-v", (String) null);
      assertEquals(0, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setParameter("name", (String) null);
      assertEquals(0, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setParameter("ofg.apache.xerces.dom.DocumentImpl", "ofg.apache.xerces.dom.DocumentImpl");
      configParams0.setObfuscatedParameter("h,_,>=", "ofg.apache.xerces.dom.DocumentImpl");
      configParams0.setObfuscatedParameter("h,_,>=", "@(#)$Id: ConfigParams.java 988245 2010-08-23 18:39:35Z kwright $");
      assertEquals(2, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      configParams0.setParameter("", "uS0Ab");
      configParams0.getObfuscatedParameter("");
      assertEquals(1, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      ConfigNode configNode0 = new ConfigNode("_PARAMETER_");
      configParams0.removeOuterNode(configNode0);
      assertNull(configNode0.getValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      ConfigurationNode configurationNode0 = configParams0.createNewNode("PV'FZPXwC<bL..Lpb");
      configParams0.removeOuterNode(configurationNode0);
      assertEquals("PV'FZPXwC<bL..Lpb", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      ConfigNode configNode0 = new ConfigNode("_PARAMETER_");
      configParams0.addOuterNode(configNode0);
      assertEquals("_PARAMETER_", configNode0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      ConfigNode configNode0 = new ConfigNode("^$Q/O3VT+vd#");
      configParams0.addOuterNode(configNode0);
      assertEquals("^$Q/O3VT+vd#", configNode0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConfigParams configParams0 = null;
      try {
        configParams0 = new ConfigParams((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams("<?xml version=\"1.0\" encoding=\"UTF-8\"?><configuration/>");
      assertEquals(0, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConfigParams configParams0 = new ConfigParams(map0);
      assertEquals(28, configParams0.getChildCount());
      
      ConfigNode configNode0 = configParams0.getChild(0);
      assertEquals("Asia/Shanghai", configNode0.getValue());
      assertEquals("_PARAMETER_", configNode0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConfigParams configParams0 = new ConfigParams(map0);
      configParams0.listParameters();
      assertEquals(28, configParams0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      ConfigParams configParams1 = configParams0.duplicate();
      assertNotSame(configParams1, configParams0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      String string0 = configParams0.getObfuscatedParameter("");
      assertNull(string0);
  }
}
