/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:25:33 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import org.apache.manifoldcf.core.interfaces.BinaryInput;
import org.apache.manifoldcf.core.interfaces.TempFileInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TempFileInput_ESTest extends TempFileInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      assertNotNull(tempFileInput0);
      
      File file0 = MockFile.createTempFile("com.google.common.base.Functions$SupplierFunction", "@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $");
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("com.google.common.base.Functions$SupplierFunction0@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/com.google.common.base.Functions$SupplierFunction0@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      tempFileInput0.file = file0;
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("com.google.common.base.Functions$SupplierFunction0@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/com.google.common.base.Functions$SupplierFunction0@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("com.google.common.base.Functions$SupplierFunction0@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileInput0.file.getName());
      assertFalse(tempFileInput0.file.isHidden());
      assertEquals("/tmp", tempFileInput0.file.getParent());
      assertTrue(tempFileInput0.file.canWrite());
      assertEquals(0L, tempFileInput0.file.getTotalSpace());
      assertEquals(0L, tempFileInput0.file.getFreeSpace());
      assertEquals(0L, tempFileInput0.file.length());
      assertTrue(tempFileInput0.file.isAbsolute());
      assertTrue(tempFileInput0.file.canExecute());
      assertTrue(tempFileInput0.file.canRead());
      assertTrue(tempFileInput0.file.isFile());
      assertFalse(tempFileInput0.file.isDirectory());
      assertEquals("/tmp/com.google.common.base.Functions$SupplierFunction0@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileInput0.file.toString());
      assertEquals(0L, tempFileInput0.file.getUsableSpace());
      assertEquals(1392409281320L, tempFileInput0.file.lastModified());
      assertTrue(tempFileInput0.file.exists());
      
      tempFileInput0.openStream();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(byteArrayInputStream0, (byte) (-1), (byte) (-6));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // IO exception while creating backing file: Simulated IOException
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(pipedInputStream0, (-3785L), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-519), (byte)125);
      assertEquals(125, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(byteArrayInputStream0, (byte)12, (-2147451381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1084);
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1084);
      assertNotNull(pushbackInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(pushbackInputStream0, 1084, 1084);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      TempFileInput tempFileInput0 = new TempFileInput(mockFileInputStream0, (-1020L));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(pipedInputStream0, (-154L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(pipedInputStream0, 476L);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(319);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      TempFileInput tempFileInput0 = new TempFileInput(byteArrayInputStream0, (byte)48, 1500450271);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(tempFileInput0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(byteArrayInputStream0, (byte) (-1), (byte) (-6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      assertNotNull(tempFileInput0);
      
      tempFileInput0.calculateLength();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      assertNotNull(tempFileInput0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      tempFileInput0.file = (File) mockFile0;
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(tempFileInput0.file.isAbsolute());
      assertEquals("", tempFileInput0.file.toString());
      assertTrue(tempFileInput0.file.canRead());
      assertNull(tempFileInput0.file.getParent());
      assertEquals(1392409281320L, tempFileInput0.file.lastModified());
      assertEquals("", tempFileInput0.file.getName());
      assertEquals(0L, tempFileInput0.file.getUsableSpace());
      assertEquals(0L, tempFileInput0.file.getFreeSpace());
      assertTrue(tempFileInput0.file.isDirectory());
      assertTrue(tempFileInput0.file.exists());
      assertEquals(0L, tempFileInput0.file.length());
      assertFalse(tempFileInput0.file.isHidden());
      assertTrue(tempFileInput0.file.canExecute());
      assertTrue(tempFileInput0.file.canWrite());
      assertFalse(tempFileInput0.file.isFile());
      assertEquals(0L, tempFileInput0.file.getTotalSpace());
      
      tempFileInput0.calculateLength();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      TempFileInput tempFileInput0 = new TempFileInput(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(tempFileInput0);
      
      tempFileInput0.calculateLength();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      assertNotNull(tempFileInput0);
      
      tempFileInput0.openStream();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      assertNotNull(tempFileInput0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      tempFileInput0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(tempFileInput0.file.exists());
      assertTrue(tempFileInput0.file.isDirectory());
      assertEquals(0L, tempFileInput0.file.length());
      assertFalse(tempFileInput0.file.isAbsolute());
      assertEquals("", tempFileInput0.file.toString());
      assertNull(tempFileInput0.file.getParent());
      assertEquals(0L, tempFileInput0.file.getUsableSpace());
      assertEquals("", tempFileInput0.file.getName());
      assertEquals(0L, tempFileInput0.file.getFreeSpace());
      assertEquals(1392409281320L, tempFileInput0.file.lastModified());
      assertTrue(tempFileInput0.file.canWrite());
      assertEquals(0L, tempFileInput0.file.getTotalSpace());
      assertFalse(tempFileInput0.file.isFile());
      assertFalse(tempFileInput0.file.isHidden());
      assertTrue(tempFileInput0.file.canRead());
      assertTrue(tempFileInput0.file.canExecute());
      
      try { 
        tempFileInput0.openStream();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't create stream: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      assertNotNull(tempFileInput0);
      
      MockFile mockFile0 = new MockFile("@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockFile0);
      
      tempFileInput0.file = (File) mockFile0;
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $/@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.toString());
      assertEquals("@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(tempFileInput0.file.canWrite());
      assertFalse(tempFileInput0.file.isHidden());
      assertFalse(tempFileInput0.file.canExecute());
      assertEquals(0L, tempFileInput0.file.length());
      assertEquals(0L, tempFileInput0.file.lastModified());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileInput0.file.getParent());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $/@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileInput0.file.toString());
      assertTrue(tempFileInput0.file.isAbsolute());
      assertFalse(tempFileInput0.file.canRead());
      assertEquals(0L, tempFileInput0.file.getTotalSpace());
      assertEquals("@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileInput0.file.getName());
      assertFalse(tempFileInput0.file.isDirectory());
      assertFalse(tempFileInput0.file.exists());
      assertEquals(0L, tempFileInput0.file.getFreeSpace());
      assertTrue(tempFileInput0.file.isFile());
      assertEquals(0L, tempFileInput0.file.getUsableSpace());
      
      // Undeclared exception!
      try { 
        tempFileInput0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(pipedInputStream0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput((InputStream) null, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      TempFileInput tempFileInput0 = new TempFileInput(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(tempFileInput0);
      
      tempFileInput0.openStream();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      TempFileInput tempFileInput0 = null;
      try {
        tempFileInput0 = new TempFileInput(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      TempFileInput tempFileInput0 = new TempFileInput(byteArrayInputStream0, (byte)0);
      tempFileInput0.discard();
      assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      BinaryInput binaryInput0 = tempFileInput0.transfer();
      assertNotSame(binaryInput0, tempFileInput0);
  }
}
