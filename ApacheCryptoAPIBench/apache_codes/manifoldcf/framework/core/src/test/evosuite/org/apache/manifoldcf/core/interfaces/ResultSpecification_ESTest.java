/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:26:27 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.io.IOCase;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultSpecification_ESTest extends ResultSpecification_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      assertEquals(0, resultSpecification_ColumnSpecification0.getForm());
      
      resultSpecification_ColumnSpecification0.formValue = (-459);
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification1 = new ResultSpecification.ColumnSpecification();
      boolean boolean0 = resultSpecification_ColumnSpecification1.equals(resultSpecification_ColumnSpecification0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("Kk+$#e(a5p&`&6", 46);
      resultSpecification0.setForm("Kk+$#e(a5p&`&6", (-1));
      assertEquals(2, ResultSpecification.FORM_STREAM);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("TSX", 4535);
      resultSpecification0.setForm("c(An[a;94Ol87JLm!", 2099);
      String string0 = resultSpecification0.toString();
      assertEquals("2-TSX-4535-c(An[a;94Ol87JLm!-2099", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, (String) null);
      resultSpecification0.columnSpecifications = hashMap0;
      resultSpecification0.setForm("PvdeR6Myfj=%YA=K", 2441);
      // Undeclared exception!
      try { 
        resultSpecification0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ResultSpecification resultSpecification1 = new ResultSpecification();
      assertTrue(resultSpecification1.equals((Object)resultSpecification0));
      
      resultSpecification0.setForm((String) null, 2);
      boolean boolean0 = resultSpecification0.equals(resultSpecification1);
      assertFalse(resultSpecification1.equals((Object)resultSpecification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("ToY|rpyJ\"!zGa", (-1520));
      resultSpecification0.setForm("878", 1802);
      resultSpecification0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      HashMap<ResultSpecification.ColumnSpecification, IOCase> hashMap0 = new HashMap<ResultSpecification.ColumnSpecification, IOCase>();
      resultSpecification0.columnSpecifications = hashMap0;
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      resultSpecification_ColumnSpecification0.formValue = 1;
      IOCase iOCase0 = IOCase.SYSTEM;
      hashMap0.put(resultSpecification_ColumnSpecification0, iOCase0);
      resultSpecification0.setForm((String) null, (-366));
      // Undeclared exception!
      try { 
        resultSpecification0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.manifoldcf.core.interfaces.ResultSpecification$ColumnSpecification cannot be cast to java.lang.String
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("2", (-1055));
      int int0 = resultSpecification0.getForm("2");
      assertEquals((-1055), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      resultSpecification0.columnSpecifications = hashMap0;
      hashMap0.putIfAbsent(resultSpecification0.columnSpecifications, (Object) null);
      // Undeclared exception!
      try { 
        resultSpecification0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashMap cannot be cast to java.lang.String
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.columnSpecifications = null;
      // Undeclared exception!
      try { 
        resultSpecification0.setForm("&+d@{ycL7", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      resultSpecification0.columnSpecifications = hashMap0;
      hashMap0.put("0m}=oQK*!i}:^@Y", "0m}=oQK*!i}:^@Y");
      // Undeclared exception!
      try { 
        resultSpecification0.setForm("0m}=oQK*!i}:^@Y", 922);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.manifoldcf.core.interfaces.ResultSpecification$ColumnSpecification
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm((String) null, 2);
      // Undeclared exception!
      try { 
        resultSpecification0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.columnSpecifications = null;
      // Undeclared exception!
      try { 
        resultSpecification0.getForm((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      HashMap<String, Vector<ResultSpecification>> hashMap0 = new HashMap<String, Vector<ResultSpecification>>();
      resultSpecification0.columnSpecifications = hashMap0;
      Stack<ResultSpecification> stack0 = new Stack<ResultSpecification>();
      hashMap0.put("1-n<C('ZgXPeLx--728", stack0);
      // Undeclared exception!
      try { 
        resultSpecification0.getForm("1-n<C('ZgXPeLx--728");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Stack cannot be cast to org.apache.manifoldcf.core.interfaces.ResultSpecification$ColumnSpecification
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.columnSpecifications = null;
      // Undeclared exception!
      try { 
        resultSpecification0.equals(resultSpecification0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      resultSpecification0.columnSpecifications = hashMap0;
      hashMap0.put("nJf]Eh `J,", (Integer) 2);
      // Undeclared exception!
      try { 
        resultSpecification0.equals(resultSpecification0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.apache.manifoldcf.core.interfaces.ResultSpecification$ColumnSpecification
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ResultSpecification", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      assertEquals(0, resultSpecification_ColumnSpecification0.getForm());
      
      resultSpecification_ColumnSpecification0.formValue = (-251);
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification1 = new ResultSpecification.ColumnSpecification();
      boolean boolean0 = resultSpecification_ColumnSpecification0.equals(resultSpecification_ColumnSpecification1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      boolean boolean0 = resultSpecification_ColumnSpecification0.equals(resultSpecification_ColumnSpecification0);
      assertTrue(boolean0);
      assertEquals("0", resultSpecification_ColumnSpecification0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      resultSpecification_ColumnSpecification0.setForm(972);
      assertEquals("972", resultSpecification_ColumnSpecification0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      Object object0 = new Object();
      boolean boolean0 = resultSpecification_ColumnSpecification0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, resultSpecification_ColumnSpecification0.getForm());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      int int0 = resultSpecification0.getForm("|v&D[a\"XT~5");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("", 2);
      int int0 = resultSpecification0.getForm("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("f*Sk7d8==T=", 1);
      resultSpecification0.setForm("f*Sk7d8==T=", 0);
      assertEquals(1, ResultSpecification.FORM_STRING);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm((String) null, 0);
      assertEquals(0, ResultSpecification.FORM_DEFAULT);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("", (-19));
      resultSpecification0.setForm("", 63);
      assertEquals(0, ResultSpecification.FORM_DEFAULT);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("", (-19));
      ResultSpecification resultSpecification1 = new ResultSpecification();
      resultSpecification1.setForm("", 447);
      boolean boolean0 = resultSpecification0.equals(resultSpecification1);
      assertFalse(resultSpecification1.equals((Object)resultSpecification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("", 972);
      ResultSpecification resultSpecification1 = new ResultSpecification();
      resultSpecification1.setForm("M89~LWO,>N8zTQfn-", 972);
      boolean boolean0 = resultSpecification0.equals(resultSpecification1);
      assertFalse(resultSpecification1.equals((Object)resultSpecification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("", (-19));
      boolean boolean0 = resultSpecification0.equals(resultSpecification0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ResultSpecification resultSpecification1 = new ResultSpecification();
      assertTrue(resultSpecification1.equals((Object)resultSpecification0));
      
      resultSpecification1.setForm("UVMDia6 R+", 1);
      boolean boolean0 = resultSpecification0.equals(resultSpecification1);
      assertFalse(resultSpecification1.equals((Object)resultSpecification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      Object object0 = new Object();
      boolean boolean0 = resultSpecification0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      String string0 = resultSpecification_ColumnSpecification0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultSpecification.ColumnSpecification resultSpecification_ColumnSpecification0 = new ResultSpecification.ColumnSpecification();
      int int0 = resultSpecification_ColumnSpecification0.getForm();
      assertEquals(0, int0);
  }
}
