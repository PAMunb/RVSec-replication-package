/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:30:29 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.manifoldcf.core.database.RRow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RRow_ESTest extends RRow_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RRow rRow0 = new RRow();
      rRow0.put("@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $");
      Object object0 = rRow0.getValue("@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $");
      assertEquals("@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $", object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RRow rRow0 = new RRow();
      rRow0.put("@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $");
      int int0 = rRow0.getColumnCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RRow rRow0 = new RRow();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(Integer.MAX_VALUE);
      rRow0.rowData = (Map<String, Object>) hashMap0;
      // Undeclared exception!
      rRow0.put("@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: RRow.java 988245 2010-08-23 18:39:35Z kwright $");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RRow rRow0 = new RRow();
      rRow0.rowData = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        rRow0.put("org.apache.manifoldcf.core.database.RRow", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.RRow", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RRow rRow0 = new RRow();
      Map<String, Object> map0 = rRow0.rowData;
      rRow0.rowData = map0;
      rRow0.rowData = map0;
      rRow0.rowData = map0;
      rRow0.rowData = null;
      // Undeclared exception!
      try { 
        rRow0.getValue("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.RRow", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RRow rRow0 = new RRow();
      rRow0.rowData = null;
      // Undeclared exception!
      try { 
        rRow0.getColumns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.RRow", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RRow rRow0 = new RRow();
      rRow0.rowData = null;
      // Undeclared exception!
      try { 
        rRow0.getColumnCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.RRow", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RRow rRow0 = new RRow();
      Iterator<String> iterator0 = rRow0.getColumns();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RRow rRow0 = new RRow();
      int int0 = rRow0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RRow rRow0 = new RRow();
      Object object0 = rRow0.getValue("");
      assertNull(object0);
  }
}
