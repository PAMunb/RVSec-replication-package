/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:21:18 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.manifoldcf.core.database.Database;
import org.apache.manifoldcf.core.database.QueryDescription;
import org.apache.manifoldcf.core.interfaces.ICacheDescription;
import org.apache.manifoldcf.core.interfaces.ILimitChecker;
import org.apache.manifoldcf.core.interfaces.IResultSet;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.apache.manifoldcf.core.interfaces.StringSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Database_ESTest extends Database_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Database.QueryCacheExecutor database_QueryCacheExecutor0 = new Database.QueryCacheExecutor((Database) null, false);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("", "LV", arrayList0, "/>", stringSet0, 0, resultSpecification0, (ILimitChecker) null);
      database_QueryCacheExecutor0.exists(queryDescription0, (Object) null);
      assertEquals("LV", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Database.QueryCacheExecutor database_QueryCacheExecutor0 = new Database.QueryCacheExecutor((Database) null, false);
      ICacheDescription[] iCacheDescriptionArray0 = new ICacheDescription[1];
      // Undeclared exception!
      try { 
        database_QueryCacheExecutor0.create(iCacheDescriptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.Database$QueryCacheExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Database.QueryCacheExecutor database_QueryCacheExecutor0 = new Database.QueryCacheExecutor((Database) null, false);
      ICacheDescription[] iCacheDescriptionArray0 = new ICacheDescription[0];
      Object[] objectArray0 = database_QueryCacheExecutor0.create(iCacheDescriptionArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Double> vector0 = new Vector<Double>();
      Double double0 = new Double(0);
      vector0.add(double0);
      Database.cleanupParameters(vector0);
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Database.cleanupParameters((List) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<RuntimeException> vector0 = new Vector<RuntimeException>();
      vector0.setSize(2005);
      Database.loadPS((PreparedStatement) null, vector0);
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Database.loadPS((PreparedStatement) null, (List) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Database.QueryCacheExecutor database_QueryCacheExecutor0 = new Database.QueryCacheExecutor((Database) null, true);
      IResultSet iResultSet0 = database_QueryCacheExecutor0.getResult();
      assertNull(iResultSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Database.QueryCacheExecutor database_QueryCacheExecutor0 = new Database.QueryCacheExecutor((Database) null, false);
      database_QueryCacheExecutor0.execute();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      int int0 = database_Modifications0.getModifyCount();
      assertEquals(0, database_Modifications0.getDeleteCount());
      assertEquals(0, int0);
      assertEquals(0, database_Modifications0.getInsertCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      database_Modifications0.update(254, 254, 127);
      assertEquals(254, database_Modifications0.getModifyCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      int int0 = database_Modifications0.getDeleteCount();
      assertEquals(0, database_Modifications0.getInsertCount());
      assertEquals(0, int0);
      assertEquals(0, database_Modifications0.getModifyCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Database.Modifications database_Modifications0 = new Database.Modifications();
      int int0 = database_Modifications0.getInsertCount();
      assertEquals(0, int0);
      assertEquals(0, database_Modifications0.getDeleteCount());
      assertEquals(0, database_Modifications0.getModifyCount());
  }
}
