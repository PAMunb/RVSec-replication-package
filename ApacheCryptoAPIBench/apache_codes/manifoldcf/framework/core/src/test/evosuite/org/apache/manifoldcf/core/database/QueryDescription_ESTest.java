/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:22:34 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.apache.manifoldcf.core.database.QueryDescription;
import org.apache.manifoldcf.core.interfaces.ILimitChecker;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.apache.manifoldcf.core.interfaces.StringSet;
import org.apache.manifoldcf.core.interfaces.StringSetBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryDescription_ESTest extends QueryDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      resultSpecification0.setForm("[ `Uwe-]&DxBhsd", (-1938));
      QueryDescription queryDescription0 = new QueryDescription("^5", "O", linkedList0, "O", stringSet0, 0, resultSpecification0, (ILimitChecker) null);
      queryDescription0.hashCode();
      assertEquals(0, queryDescription0.getMaxReturn());
      assertEquals("O", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1744803339));
      arrayList0.add(byteArrayInputStream0);
      List list0 = QueryDescription.listClone(arrayList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker0);
      ILimitChecker iLimitChecker1 = queryDescription0.getReturnLimit();
      assertEquals(2147483645, queryDescription0.getMaxReturn());
      assertEquals("pk", queryDescription0.getQuery());
      assertNull(iLimitChecker1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "Rq#)K+NPF1u", linkedList0, "", stringSet0, 2, (ResultSpecification) null, iLimitChecker0);
      queryDescription0.getResultSpecification();
      assertEquals(2, queryDescription0.getMaxReturn());
      assertEquals("Rq#)K+NPF1u", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      String string0 = queryDescription0.getQuery();
      assertEquals("~", string0);
      assertNotNull(string0);
      assertEquals(1070, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      String[] stringArray0 = new String[5];
      StringSet stringSet0 = new StringSet(stringArray0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("", "", stack0, "", stringSet0, 0, resultSpecification0, (ILimitChecker) null);
      String string0 = queryDescription0.getQuery();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1744803339));
      arrayList0.add(byteArrayInputStream0);
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker0);
      List list0 = queryDescription0.getParameters();
      assertEquals("pk", queryDescription0.getQuery());
      assertFalse(list0.isEmpty());
      assertEquals(2147483645, queryDescription0.getMaxReturn());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker0);
      StringSet stringSet1 = queryDescription0.getObjectKeys();
      assertEquals(2147483645, queryDescription0.getMaxReturn());
      assertEquals("pk", queryDescription0.getQuery());
      assertNull(stringSet1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet("com.google.common.base.Equivalence$EquivalentToPredicate");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("com.google.common.base.Equivalence$EquivalentToPredicate", "com.google.common.base.Equivalence$EquivalentToPredicate", linkedList0, "com.google.common.base.Equivalence$EquivalentToPredicate", stringSet0, (-771), resultSpecification0, (ILimitChecker) null);
      StringSet stringSet1 = queryDescription0.getObjectKeys();
      assertNotNull(stringSet1);
      assertEquals((-771), queryDescription0.getMaxReturn());
      assertEquals("com.google.common.base.Equivalence$EquivalentToPredicate", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringSetBuffer stringSetBuffer0 = new StringSetBuffer();
      StringSet stringSet0 = new StringSet(stringSetBuffer0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("s&2%&oR", "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", linkedList0, "s&2%&oR", stringSet0, 0, resultSpecification0, iLimitChecker0);
      int int0 = queryDescription0.getMaxReturn();
      assertEquals(0, int0);
      assertEquals("com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringSetBuffer stringSetBuffer0 = new StringSetBuffer();
      StringSet stringSet0 = new StringSet(stringSetBuffer0);
      QueryDescription queryDescription0 = new QueryDescription("(?zlghZ", "&q^'`M ;0Q,\"(n;`l", arrayList0, "&q^'`M ;0Q,\"(n;`l", stringSet0, (-1), (ResultSpecification) null, (ILimitChecker) null);
      int int0 = queryDescription0.getMaxReturn();
      assertEquals((-1), int0);
      assertEquals("&q^'`M ;0Q,\"(n;`l", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryDescription.listClone((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.QueryDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<QueryDescription> arrayList0 = new ArrayList<QueryDescription>();
      StringSetBuffer stringSetBuffer0 = new StringSetBuffer();
      StringSet stringSet0 = new StringSet(stringSetBuffer0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription((String) null, "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", arrayList0, "eN/|", stringSet0, (-1122), resultSpecification0, iLimitChecker0);
      // Undeclared exception!
      try { 
        queryDescription0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.QueryDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<QueryDescription> vector0 = new Vector<QueryDescription>();
      List list0 = QueryDescription.listClone(vector0);
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", (String) null, list0, (String) null, stringSet0, 1912, resultSpecification0, iLimitChecker0);
      vector0.add(queryDescription0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker1).doesCompareWork();
      QueryDescription queryDescription1 = new QueryDescription((String) null, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, (String) null, stringSet0, 1544, (ResultSpecification) null, iLimitChecker1);
      // Undeclared exception!
      try { 
        queryDescription1.getCriticalSectionName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.QueryDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker1);
      String string0 = queryDescription0.getCriticalSectionName();
      assertNotNull(string0);
      assertEquals("c=-=&'E0_-org.apache.manifoldcf.core.database.QueryDescription-null-69-:0", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1744803339));
      arrayList0.add(byteArrayInputStream0);
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker1);
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals(2147483645, queryDescription0.getMaxReturn());
      assertNotNull(string0);
      assertEquals("pk", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      queryDescription0.cacheClassName = "~";
      String string0 = queryDescription0.getCriticalSectionName();
      assertNotNull(string0);
      assertEquals("~-org.apache.manifoldcf.core.database.QueryDescription-~-~-1070-:0:limited", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[7];
      StringSet stringSet0 = new StringSet(stringArray0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription((String) null, (String) null, linkedList0, (String) null, stringSet0, 8192, resultSpecification0, (ILimitChecker) null);
      String string0 = queryDescription0.getCriticalSectionName();
      assertNotNull(string0);
      assertEquals("-org.apache.manifoldcf.core.database.QueryDescription-null-8192-:0", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      queryDescription0.criticalSectionName = "";
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals("", string0);
      assertEquals(1070, queryDescription0.getMaxReturn());
      assertEquals("~", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("9c_[;K1", "UUa'i_M\"`CLzMjO*E", vector0, "", stringSet0, 3660, resultSpecification0, iLimitChecker0);
      List list0 = queryDescription0.getParameters();
      assertNotNull(list0);
      
      queryDescription0.databaseName = "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $";
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "", list0, "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 937, resultSpecification0, (ILimitChecker) null);
      queryDescription0.equals(queryDescription1);
      assertEquals("", queryDescription1.getQuery());
      assertEquals(937, queryDescription1.getMaxReturn());
      assertEquals(3660, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("9c_[;K1", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "UUa'i_M\"`CLzMjO*E", stringSet0, (-2768), resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription("9c_[;K1", "UUa'i_M\"`CLzMjO*E", vector0, "", stringSet0, 3660, resultSpecification0, iLimitChecker0);
      queryDescription1.databaseName = "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $";
      queryDescription1.equals(queryDescription0);
      assertEquals(3660, queryDescription1.getMaxReturn());
      assertEquals("UUa'i_M\"`CLzMjO*E", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[7];
      StringSet stringSet0 = new StringSet(stringArray0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription((String) null, (String) null, linkedList0, "", stringSet0, 8192, resultSpecification0, (ILimitChecker) null);
      Stack<InputStream> stack0 = new Stack<InputStream>();
      QueryDescription queryDescription1 = new QueryDescription("IrF7,c", stringArray0[6], stack0, (String) null, stringSet0, (-2126), resultSpecification0, (ILimitChecker) null);
      queryDescription0.equals(queryDescription1);
      assertEquals((-2126), queryDescription1.getMaxReturn());
      assertEquals(8192, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      StringSet stringSet0 = new StringSet("we,r#%*SUFPoR8CvO'B");
      QueryDescription queryDescription0 = new QueryDescription("J{um8&}xiy{SKcQX", (String) null, arrayList0, (String) null, stringSet0, (-3387), (ResultSpecification) null, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription((String) null, "J{um8&}xiy{SKcQX-org.apache.manifoldcf.core.database.QueryDescription-null--3387-", arrayList0, "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 228, (ResultSpecification) null, (ILimitChecker) null);
      queryDescription0.equals(queryDescription1);
      assertEquals(228, queryDescription1.getMaxReturn());
      assertEquals("J{um8&}xiy{SKcQX-org.apache.manifoldcf.core.database.QueryDescription-null--3387-", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[7];
      StringSet stringSet0 = new StringSet(stringArray0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription((String) null, (String) null, linkedList0, "", stringSet0, 8192, resultSpecification0, (ILimitChecker) null);
      // Undeclared exception!
      try { 
        queryDescription0.equals(queryDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iLimitChecker1).toString();
      doReturn(true, true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      ILimitChecker iLimitChecker2 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker2).doesCompareWork();
      doReturn(iLimitChecker1).when(iLimitChecker2).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker2);
      ILimitChecker iLimitChecker3 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker3);
      
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "**(~=+9*Cp<", (List) null, "|@=k(Pi<nOI", stringSet0, (-1183056681), resultSpecification0, iLimitChecker3);
      queryDescription0.equals(queryDescription1);
      assertEquals((-1183056681), queryDescription1.getMaxReturn());
      assertSame(iLimitChecker3, iLimitChecker1);
      assertEquals("**(~=+9*Cp<", queryDescription1.getQuery());
      assertEquals(69, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      queryDescription0.hashCode();
      boolean boolean0 = queryDescription0.equals(queryDescription0);
      assertEquals("~", queryDescription0.getQuery());
      assertEquals(1070, queryDescription0.getMaxReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker1).doesCompareWork();
      QueryDescription queryDescription1 = new QueryDescription("", "", (List) null, "~", stringSet0, 2, resultSpecification0, iLimitChecker1);
      queryDescription0.equals(queryDescription1);
      assertEquals(2, queryDescription1.getMaxReturn());
      assertEquals("", queryDescription1.getQuery());
      assertEquals("~", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stack<QueryDescription> stack0 = new Stack<QueryDescription>();
      String[] stringArray0 = new String[4];
      StringSet stringSet0 = new StringSet(stringArray0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $").when(iLimitChecker0).toString();
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("x^mO+uGxh_^i", "ON>IT9", stack0, "f]U7 }KO4r&:Y3G", stringSet0, 54, (ResultSpecification) null, iLimitChecker1);
      ILimitChecker iLimitChecker2 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker2);
      
      QueryDescription queryDescription1 = new QueryDescription(":jl/^F@?L/1C%_dj/)(", "AGs:9`w3(@,", stack0, "ON>IT9", stringSet0, (-746), (ResultSpecification) null, iLimitChecker2);
      queryDescription0.equals(queryDescription1);
      assertEquals((-746), queryDescription1.getMaxReturn());
      assertEquals("AGs:9`w3(@,", queryDescription1.getQuery());
      assertSame(iLimitChecker2, iLimitChecker0);
      assertEquals(54, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $").when(iLimitChecker0).toString();
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker1);
      List list0 = queryDescription0.getParameters();
      assertNotNull(list0);
      
      ILimitChecker iLimitChecker2 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker2);
      
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "", list0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-3162), resultSpecification0, iLimitChecker2);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals((-3162), queryDescription1.getMaxReturn());
      assertFalse(boolean0);
      assertEquals("", queryDescription1.getQuery());
      assertNotSame(iLimitChecker2, iLimitChecker1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $").when(iLimitChecker0).toString();
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker1);
      List list0 = queryDescription0.getParameters();
      assertNotNull(list0);
      
      ILimitChecker iLimitChecker2 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker2);
      
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "", list0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-3162), resultSpecification0, iLimitChecker2);
      boolean boolean0 = queryDescription1.equals(queryDescription0);
      assertEquals((-3162), queryDescription1.getMaxReturn());
      assertFalse(boolean0);
      assertEquals("", queryDescription1.getQuery());
      assertSame(iLimitChecker2, iLimitChecker0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker0);
      boolean boolean0 = queryDescription0.equals(queryDescription0);
      assertFalse(boolean0);
      assertEquals("pk", queryDescription0.getQuery());
      assertEquals(2147483645, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iLimitChecker0).toString();
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker1);
      List list0 = queryDescription0.getParameters();
      assertNotNull(list0);
      
      ILimitChecker iLimitChecker2 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker2);
      
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "", list0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-3162), resultSpecification0, iLimitChecker2);
      queryDescription1.cacheClassName = "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $";
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals((-3162), queryDescription1.getMaxReturn());
      assertFalse(iLimitChecker2.doesCompareWork());
      assertFalse(boolean0);
      assertEquals("", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iLimitChecker0).toString();
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker1);
      List list0 = queryDescription0.getParameters();
      assertNotNull(list0);
      
      ILimitChecker iLimitChecker2 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker2);
      
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "", list0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-3162), resultSpecification0, iLimitChecker2);
      queryDescription1.cacheClassName = "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $";
      boolean boolean0 = queryDescription1.equals(queryDescription0);
      assertEquals("", queryDescription1.getQuery());
      assertFalse(iLimitChecker2.doesCompareWork());
      assertEquals((-3162), queryDescription1.getMaxReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      queryDescription0.cacheClassName = "~";
      boolean boolean0 = queryDescription0.equals(queryDescription0);
      assertTrue(boolean0);
      assertEquals("~", queryDescription0.getQuery());
      assertEquals(1070, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      StringSet stringSet0 = new StringSet();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-2106644547), (ResultSpecification) null, iLimitChecker0);
      vector0.add("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $");
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "7ZW\"8d~j6-:.t^", (StringSet) null, (byte)35, queryDescription0.spec, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription1.getQuery());
      assertEquals(35, queryDescription1.getMaxReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Vector<Object> vector0 = new Vector<Object>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("0", "0", arrayList0, "|%15_\"k1aqv6b~uzSc", stringSet0, (-265), resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription1 = new QueryDescription("tB>.:Uk", "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", (List) null, "0", stringSet0, 0, resultSpecification0, iLimitChecker1);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals((-265), queryDescription0.getMaxReturn());
      assertEquals("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription1.getQuery());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("9c_[;K1", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "UUa'i_M\"`CLzMjO*E", stringSet0, (-2768), resultSpecification0, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(resultSpecification0);
      assertFalse(boolean0);
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription0.getQuery());
      assertEquals((-2768), queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      StringSet stringSet0 = new StringSet();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-2106644547), (ResultSpecification) null, iLimitChecker0);
      queryDescription0.hashCode();
      assertEquals((-2106644547), queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringSet stringSet0 = new StringSet(map0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("~", "~", (List) null, "~", stringSet0, 1070, resultSpecification0, iLimitChecker0);
      queryDescription0.cacheClassName = "~";
      queryDescription0.hashCode();
      assertEquals("~", queryDescription0.getQuery());
      assertEquals(1070, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker1);
      queryDescription0.getParameters();
      assertEquals(69, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iLimitChecker0).toString();
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ILimitChecker iLimitChecker2 = queryDescription0.getReturnLimit();
      assertNotNull(iLimitChecker2);
      
      QueryDescription queryDescription1 = new QueryDescription("org.openqa.selenium.json.StaticInitializerCoercer", "**(~=+9*Cp<", arrayList0, "|@=k(Pi<nOI", stringSet0, (-1183056681), resultSpecification0, iLimitChecker2);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals((-1183056681), queryDescription1.getMaxReturn());
      assertFalse(iLimitChecker2.doesCompareWork());
      assertEquals("**(~=+9*Cp<", queryDescription1.getQuery());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker1);
      int int0 = queryDescription0.getMaxReturn();
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker1);
      String string0 = queryDescription0.getQuery();
      assertNull(string0);
      assertEquals(69, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("c=-=&'E0_", (String) null, (List) null, (String) null, stringSet0, 69, resultSpecification0, iLimitChecker1);
      ResultSpecification resultSpecification1 = queryDescription0.getResultSpecification();
      assertNotNull(resultSpecification1);
      assertEquals(69, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<ByteArrayInputStream> arrayList0 = new ArrayList<ByteArrayInputStream>();
      HashMap<ByteArrayInputStream, String> hashMap0 = new HashMap<ByteArrayInputStream, String>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("! -gO'|Q", "pk", arrayList0, "pk", stringSet0, 2147483645, (ResultSpecification) null, iLimitChecker1);
      StringSet stringSet1 = queryDescription0.getObjectKeys();
      assertNotNull(stringSet1);
      assertEquals("pk", queryDescription0.getQuery());
      assertEquals(2147483645, queryDescription0.getMaxReturn());
  }
}
