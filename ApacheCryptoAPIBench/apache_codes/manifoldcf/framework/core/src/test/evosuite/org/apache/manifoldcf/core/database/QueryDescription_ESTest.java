/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:39:13 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.apache.manifoldcf.core.database.QueryDescription;
import org.apache.manifoldcf.core.interfaces.ILimitChecker;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.apache.manifoldcf.core.interfaces.StringSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueryDescription_ESTest extends QueryDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      resultSpecification0.setForm(" j(&", (-1702));
      QueryDescription queryDescription0 = new QueryDescription("(>l[OOD}HY", "(>l[OOD}HY", arrayList0, " j(&", (StringSet) null, 0, resultSpecification0, (ILimitChecker) null);
      queryDescription0.hashCode();
      assertEquals(0, queryDescription0.getMaxReturn());
      assertEquals("(>l[OOD}HY", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<QueryDescription> vector0 = new Vector<QueryDescription>();
      List list0 = QueryDescription.listClone(vector0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<QueryDescription> vector0 = new Vector<QueryDescription>();
      vector0.add((QueryDescription) null);
      List list0 = QueryDescription.listClone(vector0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      QueryDescription queryDescription0 = new QueryDescription("SS", "SS", stack0, "SS", (StringSet) null, 10, (ResultSpecification) null, (ILimitChecker) null);
      queryDescription0.getResultSpecification();
      assertEquals(10, queryDescription0.getMaxReturn());
      assertEquals("SS", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<QueryDescription> stack0 = new Stack<QueryDescription>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription((String) null, (String) null, stack0, (String) null, stringSet0, 0, resultSpecification0, iLimitChecker0);
      String string0 = queryDescription0.getQuery();
      assertEquals(0, queryDescription0.getMaxReturn());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      String[] stringArray0 = new String[2];
      StringSet stringSet0 = new StringSet(stringArray0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("|wz ?^", "|wz ?^", vector0, (String) null, stringSet0, (-1), resultSpecification0, iLimitChecker0);
      String string0 = queryDescription0.getQuery();
      assertEquals((-1), queryDescription0.getMaxReturn());
      assertNotNull(string0);
      assertEquals("|wz ?^", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "2d");
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      List list0 = queryDescription0.getParameters();
      assertEquals((-2953), queryDescription0.getMaxReturn());
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals("2d", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      QueryDescription queryDescription0 = new QueryDescription("SS", "SS", stack0, "SS", (StringSet) null, 10, (ResultSpecification) null, (ILimitChecker) null);
      queryDescription0.getObjectKeys();
      assertEquals(10, queryDescription0.getMaxReturn());
      assertEquals("SS", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("x\"!Ci?p?S|k6", "x\"!Ci?p?S|k6", stack0, (String) null, stringSet0, (-763), resultSpecification0, (ILimitChecker) null);
      StringSet stringSet1 = queryDescription0.getObjectKeys();
      assertEquals((-763), queryDescription0.getMaxReturn());
      assertNotNull(stringSet1);
      assertEquals("x\"!Ci?p?S|k6", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringSet stringSet0 = new StringSet("XN~faV)_");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("ySFF%&l/U[Q4.xXr]", "B[NTy", arrayList0, (String) null, stringSet0, 0, resultSpecification0, iLimitChecker0);
      int int0 = queryDescription0.getMaxReturn();
      assertEquals(0, int0);
      assertEquals("B[NTy", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("", "", stack0, "", stringSet0, (-951), resultSpecification0, (ILimitChecker) null);
      int int0 = queryDescription0.getMaxReturn();
      assertEquals((-951), int0);
      assertEquals("", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 2, resultSpecification0, (ILimitChecker) null);
      queryDescription0.criticalSectionName = "";
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription0.getQuery());
      assertEquals(2, queryDescription0.getMaxReturn());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryDescription.listClone((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.QueryDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.offerLast(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      hashMap0.put(linkedList0, locale_Category0);
      // Undeclared exception!
      try { 
        queryDescription0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet("2d");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      queryDescription0.databaseName = null;
      // Undeclared exception!
      try { 
        queryDescription0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.QueryDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      HashMap<Locale.Category, Object> hashMap0 = new HashMap<Locale.Category, Object>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      arrayList0.add((Object) hashMap0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashMap0.put(locale_Category0, arrayList0);
      QueryDescription queryDescription0 = new QueryDescription("`xT", "`xT", arrayList0, "", stringSet0, 577, resultSpecification0, (ILimitChecker) null);
      // Undeclared exception!
      try { 
        queryDescription0.getCriticalSectionName();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription((String) null, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, ";'yJ", stringSet0, (-1), resultSpecification0, (ILimitChecker) null);
      linkedList0.offerLast(queryDescription0);
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 1, resultSpecification0, (ILimitChecker) null);
      // Undeclared exception!
      try { 
        queryDescription1.getCriticalSectionName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.QueryDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      StringSet stringSet0 = new StringSet("|M%S");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("_", (String) null, vector0, "2d$r", stringSet0, (-36), resultSpecification0, (ILimitChecker) null);
      // Undeclared exception!
      try { 
        queryDescription0.equals(queryDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      ILimitChecker iLimitChecker2 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker2).doesCompareWork();
      queryDescription0.returnLimit = iLimitChecker2;
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals("2d-org.apache.manifoldcf.core.database.QueryDescription-2d--2953-:0:limited", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QueryDescription queryDescription0 = new QueryDescription("2d$r", "?pe.r<h] %5z,t&z", (List) null, "Dfc[sb&7LxH(LP", (StringSet) null, 1406, (ResultSpecification) null, (ILimitChecker) null);
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals("2d$r-org.apache.manifoldcf.core.database.QueryDescription-?pe.r<h] %5z,t&z-1406-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "2d");
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      String string0 = queryDescription0.getCriticalSectionName();
      assertNotNull(string0);
      assertEquals("2d-org.apache.manifoldcf.core.database.QueryDescription-2d--2953-2d-:0", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      queryDescription0.cacheClassName = "|wz ?^";
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals("2d-org.apache.manifoldcf.core.database.QueryDescription-|wz ?^-2d--2953-:0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription((String) null, ":", vector0, "H_'bU1t]&aG\"", stringSet0, 2147483645, resultSpecification0, iLimitChecker0);
      String string0 = queryDescription0.getCriticalSectionName();
      assertEquals("-org.apache.manifoldcf.core.database.QueryDescription-:-2147483645-:0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      String[] stringArray0 = new String[6];
      StringSet stringSet0 = new StringSet(stringArray0);
      QueryDescription queryDescription0 = new QueryDescription("", "", linkedList0, "Dfc[sb&7LxH(LP", stringSet0, 2, resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription("", "", linkedList0, "DG!( 7]*-D;ppUnG", stringSet0, (-2953), resultSpecification0, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals("", queryDescription1.getQuery());
      assertEquals((-2953), queryDescription1.getMaxReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("2d$r", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "Unable to determine type from: ", stringSet0, 1, resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription("2d$r", "2d$r", linkedList0, "", stringSet0, 1, resultSpecification0, (ILimitChecker) null);
      boolean boolean0 = queryDescription1.equals(queryDescription0);
      assertFalse(boolean0);
      assertEquals(1, queryDescription1.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("82d$r", "", linkedList0, "82d$r", stringSet0, (-2953), resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", "", linkedList0, "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 0, resultSpecification0, iLimitChecker1);
      queryDescription0.equals(queryDescription1);
      assertEquals((-2953), queryDescription0.getMaxReturn());
      assertEquals("", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("i`lLGwx/g", "i`lLGwx/g", (List) null, "Ge{R=<", (StringSet) null, 1, resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription((String) null, "%\"'[i", (List) null, ":limited", (StringSet) null, (-1), resultSpecification0, (ILimitChecker) null);
      queryDescription1.equals(queryDescription0);
      assertEquals((-1), queryDescription1.getMaxReturn());
      assertEquals("%\"'[i", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("i`lLGwx/g", "i`lLGwx/g", (List) null, "Ge{R=<", (StringSet) null, 1, resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription((String) null, "%\"'[i", (List) null, ":limited", (StringSet) null, (-1), resultSpecification0, (ILimitChecker) null);
      queryDescription0.equals(queryDescription1);
      assertEquals((-1), queryDescription1.getMaxReturn());
      assertEquals("%\"'[i", queryDescription1.getQuery());
      assertEquals(1, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet("2d");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      ILimitChecker iLimitChecker2 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iLimitChecker2).doesCompareWork();
      queryDescription0.returnLimit = iLimitChecker2;
      queryDescription0.databaseName = null;
      boolean boolean0 = queryDescription0.equals(queryDescription0);
      assertEquals((-2953), queryDescription0.getMaxReturn());
      assertEquals("2d", queryDescription0.getQuery());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription(":", ":", linkedList0, ":", stringSet0, 2, resultSpecification0, iLimitChecker0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker1).doesCompareWork();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", arrayList0, "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 1, resultSpecification0, iLimitChecker1);
      queryDescription0.equals(queryDescription1);
      assertEquals(1, queryDescription1.getMaxReturn());
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      ILimitChecker iLimitChecker2 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker2).doesCompareWork();
      queryDescription0.returnLimit = iLimitChecker2;
      ILimitChecker iLimitChecker3 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker3).doesCompareWork();
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, (-1757), resultSpecification0, iLimitChecker3);
      queryDescription0.equals(queryDescription1);
      assertEquals((-1757), queryDescription1.getMaxReturn());
      assertEquals("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription1.getQuery());
      assertEquals("2d", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("82d$r", "", linkedList0, "82d$r", stringSet0, (-2953), resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker1).doesCompareWork();
      QueryDescription queryDescription1 = new QueryDescription("", "", linkedList0, "", stringSet0, 0, resultSpecification0, iLimitChecker1);
      queryDescription0.equals(queryDescription1);
      assertEquals((-2953), queryDescription0.getMaxReturn());
      assertEquals("", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("82d$r", "", linkedList0, "82d$r", stringSet0, (-2953), resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      queryDescription0.returnLimit = iLimitChecker1;
      ILimitChecker iLimitChecker2 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker2).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker2).duplicate();
      QueryDescription queryDescription1 = new QueryDescription("", "", linkedList0, "", stringSet0, 0, resultSpecification0, iLimitChecker2);
      queryDescription0.equals(queryDescription1);
      assertEquals("", queryDescription0.getQuery());
      assertEquals((-2953), queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<QueryDescription> vector0 = new Vector<QueryDescription>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ResultSpecification resultSpecification1 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 0, resultSpecification0, iLimitChecker0);
      resultSpecification0.setForm("-~R3/{6-uZ+O\"%}K", 218);
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, ")-F7'T:}8", stringSet0, 722, resultSpecification1, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription1.getQuery());
      assertEquals(722, queryDescription1.getMaxReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("S=wxscozNNcbQ1{pbM", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 0, resultSpecification0, iLimitChecker1);
      QueryDescription queryDescription1 = new QueryDescription("", "82d$r", linkedList0, "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 1306, (ResultSpecification) null, (ILimitChecker) null);
      boolean boolean0 = queryDescription1.equals(queryDescription0);
      assertFalse(boolean0);
      assertEquals(1306, queryDescription1.getMaxReturn());
      assertEquals("82d$r", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", vector0, "", (StringSet) null, 2, resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker1).doesCompareWork();
      QueryDescription queryDescription1 = new QueryDescription("", "X ", vector0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 1, (ResultSpecification) null, iLimitChecker1);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertFalse(boolean0);
      assertEquals(1, queryDescription1.getMaxReturn());
      assertEquals("X ", queryDescription1.getQuery());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      StringSet stringSet0 = new StringSet();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription((String) null, (String) null, vector0, (String) null, stringSet0, (-1), (ResultSpecification) null, iLimitChecker0);
      queryDescription0.equals(queryDescription0);
      assertEquals((-1), queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("S=wxscozNNcbQ1{pbM", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 0, resultSpecification0, iLimitChecker1);
      QueryDescription queryDescription1 = new QueryDescription("2d$r", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "Unable to determine type from: ", stringSet0, 1, resultSpecification0, (ILimitChecker) null);
      queryDescription1.cacheClassName = "Y|S5";
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertFalse(boolean0);
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription1.getQuery());
      assertEquals(1, queryDescription1.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("i`lLGwx/g", "i`lLGwx/g", (List) null, "Ge{R=<", (StringSet) null, 1, resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription("A6$w!e`UF<FbyEh", (String) null, (List) null, "-oB|u9f~wWf<", (StringSet) null, 939, resultSpecification0, (ILimitChecker) null);
      queryDescription1.cacheClassName = "@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $";
      boolean boolean0 = queryDescription1.equals(queryDescription0);
      assertEquals(939, queryDescription1.getMaxReturn());
      assertFalse(boolean0);
      assertEquals("i`lLGwx/g", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      queryDescription0.cacheClassName = "|wz ?^";
      boolean boolean0 = queryDescription0.equals(queryDescription0);
      assertEquals("2d", queryDescription0.getQuery());
      assertEquals((-2953), queryDescription0.getMaxReturn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringSet stringSet0 = new StringSet("x%");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("", "x%", linkedList0, "x%", stringSet0, 2, resultSpecification0, (ILimitChecker) null);
      linkedList0.add((Object) queryDescription0);
      QueryDescription queryDescription1 = new QueryDescription("x%", "@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "rn3", stringSet0, (-1995216869), resultSpecification0, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals((-1995216869), queryDescription1.getMaxReturn());
      assertEquals("x%", queryDescription0.getQuery());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringSet stringSet0 = new StringSet(stringArray0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("Predicates.and(", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", (List) null, "Predicates.and(", (StringSet) null, 513, resultSpecification0, (ILimitChecker) null);
      Stack<QueryDescription> stack0 = new Stack<QueryDescription>();
      QueryDescription queryDescription1 = new QueryDescription("\"wWa", "NCvj=TZEAnHsO<", stack0, "oatCKR}7;[aSw.NWS", stringSet0, 352, resultSpecification0, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertFalse(boolean0);
      assertEquals("NCvj=TZEAnHsO<", queryDescription1.getQuery());
      assertEquals(352, queryDescription1.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("a&{j]q1{", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "a&{j]q1{", stringSet0, 0, resultSpecification0, (ILimitChecker) null);
      QueryDescription queryDescription1 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "a&{j]q1{", (List) null, "", stringSet0, (-537), resultSpecification0, (ILimitChecker) null);
      boolean boolean0 = queryDescription0.equals(queryDescription1);
      assertEquals("a&{j]q1{", queryDescription1.getQuery());
      assertFalse(boolean0);
      assertEquals((-537), queryDescription1.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription((String) null, ":", vector0, "H_'bU1t]&aG\"", stringSet0, 2147483645, resultSpecification0, iLimitChecker0);
      boolean boolean0 = queryDescription0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2147483645, queryDescription0.getMaxReturn());
      assertEquals(":", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      ILimitChecker iLimitChecker2 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker2).doesCompareWork();
      queryDescription0.returnLimit = iLimitChecker2;
      queryDescription0.hashCode();
      assertEquals("2d", queryDescription0.getQuery());
      assertEquals((-2953), queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      QueryDescription queryDescription0 = new QueryDescription("VhyO0$p", "hi25/jU%4-_v_Zfb", linkedList0, "VhyO0$p", (StringSet) null, 1942, (ResultSpecification) null, (ILimitChecker) null);
      queryDescription0.hashCode();
      assertEquals(1942, queryDescription0.getMaxReturn());
      assertEquals("hi25/jU%4-_v_Zfb", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      queryDescription0.cacheClassName = "|wz ?^";
      queryDescription0.hashCode();
      assertEquals("2d", queryDescription0.getQuery());
      assertEquals((-2953), queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("i`lLGwx/g", "i`lLGwx/g", (List) null, "Ge{R=<", (StringSet) null, 1, resultSpecification0, (ILimitChecker) null);
      queryDescription0.hashCode();
      assertEquals("i`lLGwx/g", queryDescription0.getQuery());
      assertEquals(1, queryDescription0.getMaxReturn());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("2d", "2d", linkedList0, "2d", stringSet0, (-2953), resultSpecification0, iLimitChecker1);
      List list0 = queryDescription0.getParameters();
      assertEquals((-2953), queryDescription0.getMaxReturn());
      assertNotNull(list0);
      assertEquals("2d", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("i`lLGwx/g", "i`lLGwx/g", (List) null, "Ge{R=<", (StringSet) null, 1, resultSpecification0, (ILimitChecker) null);
      queryDescription0.getParameters();
      assertEquals(1, queryDescription0.getMaxReturn());
      assertEquals("i`lLGwx/g", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>(0);
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", "DiscreteDomain.integers()", vector0, "os.arch", stringSet0, 332, resultSpecification0, (ILimitChecker) null);
      int int0 = queryDescription0.getMaxReturn();
      assertEquals(332, int0);
      assertEquals("DiscreteDomain.integers()", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription((String) null, "", linkedList0, "H.~l0DcQc+K5", stringSet0, 32, resultSpecification0, (ILimitChecker) null);
      String string0 = queryDescription0.getQuery();
      assertEquals(32, queryDescription0.getMaxReturn());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", vector0, "", (StringSet) null, 2, resultSpecification0, iLimitChecker0);
      ResultSpecification resultSpecification1 = queryDescription0.getResultSpecification();
      assertEquals(2, queryDescription0.getMaxReturn());
      assertNotNull(resultSpecification1);
      assertEquals("", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector<QueryDescription> vector0 = new Vector<QueryDescription>();
      StringSet stringSet0 = new StringSet(vector0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", vector0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 0, resultSpecification0, iLimitChecker0);
      ILimitChecker iLimitChecker1 = queryDescription0.getReturnLimit();
      assertEquals(0, queryDescription0.getMaxReturn());
      assertNull(iLimitChecker1);
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription0.getQuery());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, Locale.Category> hashMap0 = new HashMap<Object, Locale.Category>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker1 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker1).doesCompareWork();
      doReturn(iLimitChecker0).when(iLimitChecker1).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("S=wxscozNNcbQ1{pbM", "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", linkedList0, "@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", stringSet0, 0, resultSpecification0, iLimitChecker1);
      StringSet stringSet1 = queryDescription0.getObjectKeys();
      assertEquals(0, queryDescription0.getMaxReturn());
      assertNotNull(stringSet1);
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", queryDescription0.getQuery());
  }
}
