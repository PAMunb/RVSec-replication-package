/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:31:16 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.manifoldcf.core.interfaces.ColumnDescription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnDescription_ESTest extends ColumnDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("Gw>K-t)2j/ImrIM#)0", false, false, (String) null, "Gw>K-t)2j/ImrIM#)0", false);
      String string0 = columnDescription0.getReferenceTable();
      assertNull(string0);
      assertFalse(columnDescription0.getIsNull());
      assertEquals("Gw>K-t)2j/ImrIM#)0", columnDescription0.getTypeString());
      assertEquals("Gw>K-t)2j/ImrIM#)0", columnDescription0.getReferenceColumn());
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertFalse(columnDescription0.getReferenceCascade());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("", false, false, "'%eO41_zl@4m'o 8;", "", true);
      boolean boolean0 = columnDescription0.getIsPrimaryKey();
      assertTrue(columnDescription0.getReferenceCascade());
      assertEquals("", columnDescription0.getTypeString());
      assertFalse(boolean0);
      assertEquals("", columnDescription0.getReferenceColumn());
      assertFalse(columnDescription0.getIsNull());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false, false, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false);
      assertFalse(columnDescription0.getIsNull());
      
      columnDescription0.isNull = true;
      boolean boolean0 = columnDescription0.getIsPrimaryKey();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("Gw>K-t)2j/ImrIM#)0", false, false, (String) null, "Gw>K-t)2j/ImrIM#)0", false);
      String string0 = columnDescription0.getTypeString();
      assertNotNull(string0);
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertFalse(columnDescription0.getReferenceCascade());
      assertFalse(columnDescription0.getIsNull());
      assertEquals("Gw>K-t)2j/ImrIM#)0", columnDescription0.getReferenceColumn());
      assertEquals("Gw>K-t)2j/ImrIM#)0", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("Gw>K-t)2j/ImrIM#)0", false, false, (String) null, "Gw>K-t)2j/ImrIM#)0", false);
      assertEquals("Gw>K-t)2j/ImrIM#)0", columnDescription0.getTypeString());
      
      columnDescription0.typeString = null;
      String string0 = columnDescription0.getTypeString();
      assertFalse(columnDescription0.getReferenceCascade());
      assertNull(string0);
      assertFalse(columnDescription0.getIsNull());
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertEquals("Gw>K-t)2j/ImrIM#)0", columnDescription0.getReferenceColumn());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("", false, true, "", "", false);
      String string0 = columnDescription0.getTypeString();
      assertEquals("", columnDescription0.getReferenceColumn());
      assertEquals("", string0);
      assertFalse(columnDescription0.getReferenceCascade());
      assertTrue(columnDescription0.getIsNull());
      assertEquals("", columnDescription0.getReferenceTable());
      assertNotNull(string0);
      assertFalse(columnDescription0.getIsPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("", true, true, "", "", true);
      String string0 = columnDescription0.getReferenceTable();
      assertTrue(columnDescription0.getIsNull());
      assertEquals("", columnDescription0.getTypeString());
      assertEquals("", columnDescription0.getReferenceColumn());
      assertTrue(columnDescription0.getReferenceCascade());
      assertNotNull(string0);
      assertTrue(columnDescription0.getIsPrimaryKey());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("", false, false, "YRYx", (String) null, false);
      String string0 = columnDescription0.getReferenceColumn();
      assertEquals("", columnDescription0.getTypeString());
      assertNull(string0);
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertEquals("YRYx", columnDescription0.getReferenceTable());
      assertFalse(columnDescription0.getReferenceCascade());
      assertFalse(columnDescription0.getIsNull());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("OxHh`nDixj3", false, false, "<ajsDocsU:", "", true);
      String string0 = columnDescription0.getReferenceColumn();
      assertEquals("", string0);
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertNotNull(string0);
      assertTrue(columnDescription0.getReferenceCascade());
      assertEquals("OxHh`nDixj3", columnDescription0.getTypeString());
      assertFalse(columnDescription0.getIsNull());
      assertEquals("<ajsDocsU:", columnDescription0.getReferenceTable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("}S,G", false, false, "}S,G", "}S,G", true);
      boolean boolean0 = columnDescription0.getReferenceCascade();
      assertEquals("}S,G", columnDescription0.getReferenceColumn());
      assertEquals("}S,G", columnDescription0.getTypeString());
      assertEquals("}S,G", columnDescription0.getReferenceTable());
      assertTrue(boolean0);
      assertFalse(columnDescription0.getIsNull());
      assertFalse(columnDescription0.getIsPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("", true, true, "]z^2DR<:>bkW", "xV{Z#zh-", true);
      boolean boolean0 = columnDescription0.getIsPrimaryKey();
      assertEquals("]z^2DR<:>bkW", columnDescription0.getReferenceTable());
      assertEquals("", columnDescription0.getTypeString());
      assertTrue(columnDescription0.getReferenceCascade());
      assertTrue(columnDescription0.getIsNull());
      assertTrue(boolean0);
      assertEquals("xV{Z#zh-", columnDescription0.getReferenceColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false, false, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false);
      assertFalse(columnDescription0.getIsNull());
      
      columnDescription0.isNull = true;
      boolean boolean0 = columnDescription0.getIsNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false, false, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false);
      String string0 = columnDescription0.getReferenceColumn();
      assertFalse(columnDescription0.getIsNull());
      assertFalse(columnDescription0.getReferenceCascade());
      assertNotNull(string0);
      assertFalse(columnDescription0.getIsPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false, false, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false);
      boolean boolean0 = columnDescription0.getReferenceCascade();
      assertFalse(columnDescription0.getIsNull());
      assertFalse(boolean0);
      assertFalse(columnDescription0.getIsPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false, false, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false);
      boolean boolean0 = columnDescription0.getIsNull();
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertFalse(boolean0);
      assertFalse(columnDescription0.getReferenceCascade());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnDescription columnDescription0 = new ColumnDescription("@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false, false, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", false);
      String string0 = columnDescription0.getReferenceTable();
      assertFalse(columnDescription0.getIsPrimaryKey());
      assertNotNull(string0);
      assertFalse(columnDescription0.getIsNull());
      assertFalse(columnDescription0.getReferenceCascade());
  }
}
