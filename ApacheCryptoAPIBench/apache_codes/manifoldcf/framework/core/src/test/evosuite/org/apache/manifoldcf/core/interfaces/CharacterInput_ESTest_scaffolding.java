/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 21 16:46:27 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CharacterInput_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.manifoldcf.core.interfaces.CharacterInput"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CharacterInput_ESTest_scaffolding.class.getClassLoader() ,
      "com.google.common.primitives.Longs$LongConverter",
      "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier",
      "com.google.common.base.Suppliers$SupplierOfInstance",
      "com.google.common.base.CharMatcher$ForPredicate",
      "com.google.common.cache.AbstractLoadingCache",
      "com.google.common.collect.MultimapBuilder$ArrayListSupplier",
      "org.openqa.selenium.json.CollectionCoercer",
      "org.apache.manifoldcf.core.interfaces.IPollingHook",
      "org.openqa.selenium.json.StringCoercer",
      "com.google.common.hash.BloomFilter$Strategy",
      "org.apache.commons.io.filefilter.EmptyFileFilter",
      "com.google.common.base.Enums$StringConverter",
      "com.google.common.collect.MultimapBuilder$EnumSetSupplier",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "com.google.common.base.Predicates$ContainsPatternPredicate",
      "org.apache.manifoldcf.core.interfaces.CharacterInput",
      "org.apache.commons.io.filefilter.AgeFileFilter",
      "com.google.common.base.CharMatcher$JavaLetterOrDigit",
      "com.google.common.base.Functions$FunctionForMapNoDefault",
      "com.google.common.base.Converter$IdentityConverter",
      "org.apache.manifoldcf.core.interfaces.NullCharacterInput",
      "org.apache.commons.io.filefilter.DirectoryFileFilter",
      "com.google.common.cache.ForwardingLoadingCache",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "com.google.common.cache.LocalCache$LocalManualCache",
      "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl",
      "com.google.common.base.Predicate",
      "com.google.common.base.CharMatcher$Invisible",
      "org.hsqldb.lib.FileUtil$DatabaseFilenameFilter",
      "com.google.common.base.CharMatcher$None",
      "com.google.common.collect.FilteredEntryMultimap$ValuePredicate",
      "com.google.common.hash.BloomFilterStrategies$BitArray",
      "com.google.common.collect.TreeBasedTable$Factory",
      "com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl",
      "com.google.common.collect.HashBasedTable$Factory",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "com.google.common.base.Predicates$InstanceOfPredicate",
      "com.google.common.collect.DiscreteDomain$BigIntegerDomain",
      "org.openqa.selenium.WebDriverException",
      "com.google.common.hash.AbstractStreamingHashFunction",
      "com.google.common.reflect.Types",
      "com.google.common.cache.LocalCache",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "org.openqa.selenium.json.JsonException",
      "com.google.common.collect.DiscreteDomain",
      "com.google.common.io.PatternFilenameFilter",
      "com.google.common.collect.Cut",
      "org.openqa.selenium.remote.ErrorHandler$FrameInfoToStackFrame",
      "com.google.common.base.Functions$ConstantFunction",
      "com.google.common.primitives.Shorts$ShortConverter",
      "com.google.common.hash.Hashing$LinearCongruentialGenerator",
      "com.google.common.collect.FilteredEntryMultimap$Keys",
      "com.google.common.collect.Maps$BiMapConverter",
      "com.google.common.io.Files$FilePredicate",
      "com.google.common.base.CharMatcher",
      "com.google.common.collect.Multimaps$Keys",
      "org.openqa.selenium.json.ObjectCoercer",
      "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache",
      "com.google.common.cache.ForwardingCache",
      "org.apache.commons.io.filefilter.WildcardFilter",
      "com.google.common.base.Predicates$CompositionPredicate",
      "com.google.common.reflect.Types$ParameterizedTypeImpl",
      "org.apache.manifoldcf.core.system.ManifoldCF$OverrideableManifoldCFConfiguration",
      "org.apache.manifoldcf.core.interfaces.ThreadContextFactory",
      "com.google.common.base.Predicates$OrPredicate",
      "com.google.common.base.CharMatcher$1",
      "org.apache.commons.io.filefilter.IOFileFilter",
      "com.google.common.base.CharMatcher$FastMatcher",
      "com.google.common.hash.Funnels$StringCharsetFunnel",
      "com.google.common.base.CharMatcher$JavaIsoControl",
      "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "com.google.common.base.Converter$ConverterComposition",
      "com.google.common.base.Predicates$IsEqualToPredicate",
      "org.apache.manifoldcf.core.interfaces.TempFileCharacterInput",
      "com.google.common.cache.LocalCache$ManualSerializationProxy",
      "com.google.common.hash.BloomFilterStrategies",
      "org.apache.manifoldcf.core.interfaces.ManifoldCFConfiguration",
      "com.google.common.base.CharMatcher$BitSetMatcher",
      "com.google.common.base.CharMatcher$JavaUpperCase",
      "com.google.common.collect.DiscreteDomain$IntegerDomain",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "com.google.common.hash.Funnels$ByteArrayFunnel",
      "com.google.common.base.CharMatcher$NamedFastMatcher",
      "org.hsqldb.lib.FileAccess",
      "com.google.common.base.Equivalence$EquivalentToPredicate",
      "org.apache.commons.io.filefilter.HiddenFileFilter",
      "com.google.common.collect.DiscreteDomain$LongDomain",
      "com.google.common.base.Converter$ReverseConverter",
      "com.google.common.base.Functions$ToStringFunction",
      "org.apache.commons.io.filefilter.FalseFileFilter",
      "com.google.common.base.Functions$FunctionComposition",
      "com.google.common.collect.MultimapBuilder$TreeSetSupplier",
      "com.google.common.base.CharMatcher$Is",
      "com.google.common.base.CharMatcher$SingleWidth",
      "com.google.common.hash.HashFunction",
      "com.google.common.collect.Multiset",
      "com.google.common.collect.AbstractMultimap",
      "com.google.common.base.Supplier",
      "com.google.common.hash.Hashing",
      "com.google.common.hash.AbstractCompositeHashFunction",
      "com.google.common.collect.Interners$InternerFunction",
      "com.google.common.hash.BloomFilter$SerialForm",
      "com.google.common.collect.MultimapBuilder$LinkedListSupplier",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "com.google.common.util.concurrent.UncheckedExecutionException",
      "org.apache.manifoldcf.core.interfaces.PersistentDatabaseObject",
      "com.google.common.collect.Range$RangeLexOrdering",
      "org.apache.manifoldcf.core.threadcontext.ThreadContext",
      "org.openqa.selenium.json.JsonInput",
      "com.google.common.collect.FilteredEntryMultimap$AsMap",
      "com.google.common.base.CharMatcher$Negated",
      "com.google.common.base.CharMatcher$Ascii",
      "com.google.common.hash.BloomFilter",
      "com.google.common.hash.Funnels$IntegerFunnel",
      "com.google.common.reflect.Types$JavaVersion",
      "com.google.common.base.Converter$FunctionBasedConverter",
      "com.google.common.hash.Hashing$ConcatenatedHashFunction",
      "com.google.common.collect.Ordering",
      "com.google.common.base.CharMatcher$Digit",
      "com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl",
      "com.google.common.cache.Cache",
      "org.apache.commons.io.filefilter.CanWriteFileFilter",
      "org.hsqldb.lib.FileUtil",
      "com.google.common.cache.LoadingCache",
      "com.google.common.base.CharMatcher$Whitespace",
      "com.google.common.base.Suppliers$SupplierFunctionImpl",
      "com.google.common.collect.BoundType$2",
      "com.google.common.collect.BoundType$1",
      "org.openqa.selenium.json.EnumCoercer",
      "com.google.common.base.Predicates$ObjectPredicate",
      "com.google.common.base.CharMatcher$JavaDigit",
      "com.google.common.base.Predicates$SubtypeOfPredicate",
      "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "org.openqa.selenium.json.StaticInitializerCoercer",
      "com.google.common.base.CharMatcher$InRange",
      "com.google.common.base.CharMatcher$IsNot",
      "com.google.common.base.CharMatcher$JavaLetter",
      "org.apache.manifoldcf.core.interfaces.ManifoldCFException",
      "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl",
      "com.google.common.base.CharMatcher$NegatedFastMatcher",
      "com.google.common.collect.Range",
      "com.google.common.cache.AbstractCache",
      "org.apache.commons.io.filefilter.ConditionalFileFilter",
      "org.openqa.selenium.json.UriCoercer",
      "com.google.common.hash.Funnel",
      "com.google.common.base.CharMatcher$IsEither",
      "org.apache.manifoldcf.core.system.ManifoldCFResourceLoader",
      "com.google.common.collect.FilteredMultimap",
      "com.google.common.cache.CacheStats",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "com.google.common.hash.Hashing$ChecksumType",
      "com.google.common.base.CharMatcher$Any",
      "org.apache.manifoldcf.core.system.ManifoldCF$FileTrack",
      "com.google.common.base.Suppliers$ThreadSafeSupplier",
      "com.google.common.hash.Funnels$UnencodedCharsFunnel",
      "com.google.common.base.Predicates",
      "com.google.common.hash.PrimitiveSink",
      "com.google.common.base.Functions$IdentityFunction",
      "com.google.common.collect.FluentIterable$FromIterableFunction",
      "com.google.common.reflect.Types$GenericArrayTypeImpl",
      "com.google.common.base.CharMatcher$And",
      "com.google.common.base.Suppliers$MemoizingSupplier",
      "com.google.common.hash.BloomFilter$1",
      "com.google.common.base.CharMatcher$AnyOf",
      "org.openqa.selenium.json.NumberCoercer",
      "org.apache.commons.io.filefilter.WildcardFileFilter",
      "com.google.common.base.Functions$SupplierFunction",
      "org.apache.manifoldcf.core.interfaces.IDBInterface",
      "com.google.common.collect.Maps$EntryFunction",
      "com.google.common.collect.FilteredEntryMultimap",
      "org.openqa.selenium.json.InstantCoercer",
      "org.apache.manifoldcf.core.system.ManifoldCF",
      "com.google.common.base.Functions$PredicateFunction",
      "com.google.common.primitives.Floats$FloatConverter",
      "org.openqa.selenium.json.BooleanCoercer",
      "org.apache.manifoldcf.core.interfaces.IHierarchyParent",
      "com.google.common.base.Predicates$ContainsPatternFromStringPredicate",
      "org.apache.manifoldcf.core.interfaces.IThreadContext",
      "com.google.common.base.SmallCharMatcher",
      "com.google.common.hash.Funnels$LongFunnel",
      "com.google.common.base.CharMatcher$RangesMatcher",
      "org.apache.manifoldcf.core.interfaces.IShutdownHook",
      "com.google.common.base.Converter",
      "com.google.common.base.Predicates$AndPredicate",
      "com.google.common.base.Function",
      "com.google.common.base.CharMatcher$BreakingWhitespace",
      "com.google.common.collect.ImmutableMap",
      "org.openqa.selenium.json.InstanceCoercer",
      "com.google.gson.internal.$Gson$Types$WildcardTypeImpl",
      "org.apache.commons.io.filefilter.FileFileFilter",
      "com.google.common.base.Predicates$NotPredicate",
      "com.google.common.base.Suppliers$SupplierFunction",
      "com.google.common.primitives.Ints$IntConverter",
      "org.openqa.selenium.json.PropertySetting",
      "org.apache.manifoldcf.core.system.ManifoldCF$ShutdownThread",
      "com.google.common.collect.BoundType",
      "com.google.common.reflect.Types$WildcardTypeImpl",
      "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl",
      "com.google.common.collect.Maps$ViewCachingAbstractMap",
      "org.openqa.selenium.json.TypeCoercer",
      "com.google.common.base.CharMatcher$JavaLowerCase",
      "org.apache.commons.io.filefilter.CanReadFileFilter",
      "org.apache.commons.io.IOCase",
      "com.google.common.collect.ForwardingObject",
      "com.google.common.io.BaseEncoding$Alphabet",
      "com.google.common.collect.AbstractMultiset",
      "com.google.common.cache.LocalCache$LoadingSerializationProxy",
      "com.google.common.reflect.TypeToken$TypeFilter",
      "com.google.common.collect.Multimap",
      "com.google.common.hash.Hashing$FarmHashFingerprint64Holder",
      "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "com.google.common.base.Suppliers$ExpiringMemoizingSupplier",
      "com.google.common.cache.LocalCache$LocalLoadingCache",
      "org.openqa.selenium.json.JsonTypeCoercer",
      "com.google.common.base.Suppliers",
      "org.openqa.selenium.json.UuidCoercer",
      "com.google.common.reflect.Types$NativeTypeVariableEquals",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "com.google.common.base.Suppliers$SupplierComposition",
      "com.google.common.hash.Funnels$SequentialFunnel",
      "org.openqa.selenium.json.MapCoercer",
      "com.google.common.primitives.Doubles$DoubleConverter",
      "org.openqa.selenium.json.UrlCoercer",
      "com.google.common.base.CharMatcher$Or",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "org.apache.manifoldcf.core.interfaces.Configuration",
      "com.google.common.base.CaseFormat$StringConverter",
      "com.google.common.collect.MultimapBuilder$HashSetSupplier",
      "com.google.common.base.Functions$ForMapWithDefault",
      "com.google.common.base.Predicates$InPredicate"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.io.File", false, CharacterInput_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.io.IOException", false, CharacterInput_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CharacterInput_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.manifoldcf.core.interfaces.PersistentDatabaseObject",
      "org.apache.manifoldcf.core.interfaces.CharacterInput",
      "org.apache.manifoldcf.core.interfaces.TempFileCharacterInput",
      "org.apache.manifoldcf.core.interfaces.NullCharacterInput",
      "org.apache.manifoldcf.core.system.ManifoldCF$ShutdownThread",
      "org.apache.manifoldcf.core.system.ManifoldCF",
      "org.apache.manifoldcf.core.interfaces.ThreadContextFactory",
      "org.apache.manifoldcf.core.threadcontext.ThreadContext",
      "org.apache.manifoldcf.core.interfaces.ManifoldCFException"
    );
  }
}
