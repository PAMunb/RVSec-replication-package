/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:51:06 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.manifoldcf.core.interfaces.UnitaryClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnitaryClause_ESTest extends UnitaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause((String) null, (Object) null);
      unitaryClause0.values = null;
      unitaryClause0.getValues();
      assertEquals("=", unitaryClause0.getOperation());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("w\"", "w\"");
      assertEquals("=", unitaryClause0.getOperation());
      
      unitaryClause0.operationName = "w\"";
      unitaryClause0.operationName = null;
      unitaryClause0.getOperation();
      assertEquals("w\"", unitaryClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("", (Object) null);
      assertEquals("=", unitaryClause0.getOperation());
      
      unitaryClause0.operationName = "";
      String string0 = unitaryClause0.getOperation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("-1AB9Q-FNN", "-1AB9Q-FNN", "-1AB9Q-FNN");
      String string0 = unitaryClause0.getColumnName();
      assertEquals("-1AB9Q-FNN", string0);
      assertEquals("-1AB9Q-FNN", unitaryClause0.getOperation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("-1AB9Q-FNN", "-1AB9Q-FNN", "-1AB9Q-FNN");
      assertEquals("-1AB9Q-FNN", unitaryClause0.getColumnName());
      
      unitaryClause0.columnName = "";
      String string0 = unitaryClause0.getColumnName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause((String) null, (Object) null);
      unitaryClause0.getValues();
      assertEquals("=", unitaryClause0.getOperation());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause((String) null, (Object) null);
      unitaryClause0.getJoinColumnName();
      assertEquals("=", unitaryClause0.getOperation());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause((String) null, (Object) null);
      String string0 = unitaryClause0.getColumnName();
      assertNull(string0);
      assertEquals("=", unitaryClause0.getOperation());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("15aG.hRTiU-", "15aG.hRTiU-");
      String string0 = unitaryClause0.getOperation();
      assertEquals("15aG.hRTiU-", unitaryClause0.getColumnName());
      assertEquals("=", string0);
      assertNotNull(string0);
  }
}
