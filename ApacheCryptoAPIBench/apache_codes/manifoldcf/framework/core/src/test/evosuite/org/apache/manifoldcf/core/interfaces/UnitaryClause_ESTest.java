/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:30:07 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.DayOfWeek;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.apache.manifoldcf.core.interfaces.UnitaryClause;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnitaryClause_ESTest extends UnitaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("RG:';\"", (Object) null);
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      unitaryClause0.values = (List) linkedList0;
      unitaryClause0.values = null;
      unitaryClause0.getValues();
      assertEquals("=", unitaryClause0.getOperation());
      assertEquals("RG:';\"", unitaryClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("g-n$xdHmK", "g-n$xdHmK");
      ArrayList<DayOfWeek> arrayList0 = new ArrayList<DayOfWeek>();
      unitaryClause0.values = (List) arrayList0;
      unitaryClause0.getValues();
      assertEquals("=", unitaryClause0.getOperation());
      assertEquals("g-n$xdHmK", unitaryClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      UnitaryClause unitaryClause0 = new UnitaryClause((String) null, (String) null, object0);
      String string0 = unitaryClause0.getOperation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      DayOfWeek dayOfWeek1 = dayOfWeek0.plus(0L);
      UnitaryClause unitaryClause0 = new UnitaryClause("", "", dayOfWeek1);
      String string0 = unitaryClause0.getOperation();
      assertEquals("", string0);
      assertEquals("", unitaryClause0.getColumnName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("*2J,3xMGt]=f;zU", "", "");
      String string0 = unitaryClause0.getColumnName();
      assertEquals("", unitaryClause0.getOperation());
      assertNotNull(string0);
      assertEquals("*2J,3xMGt]=f;zU", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause((String) null, (String) null, (Object) null);
      String string0 = unitaryClause0.getColumnName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("", "");
      unitaryClause0.getValues();
      assertEquals("=", unitaryClause0.getOperation());
      assertEquals("", unitaryClause0.getColumnName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("", "");
      unitaryClause0.getJoinColumnName();
      assertEquals("", unitaryClause0.getColumnName());
      assertEquals("=", unitaryClause0.getOperation());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("", "");
      String string0 = unitaryClause0.getColumnName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("=", unitaryClause0.getOperation());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      UnitaryClause unitaryClause0 = new UnitaryClause("", "");
      String string0 = unitaryClause0.getOperation();
      assertEquals("", unitaryClause0.getColumnName());
      assertNotNull(string0);
      assertEquals("=", string0);
  }
}
