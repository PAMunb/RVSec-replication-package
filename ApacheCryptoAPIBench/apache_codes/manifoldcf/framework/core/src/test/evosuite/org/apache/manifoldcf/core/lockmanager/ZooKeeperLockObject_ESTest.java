/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:24:23 GMT 2022
 */

package org.apache.manifoldcf.core.lockmanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.lockmanager.LockObjectFactory;
import org.apache.manifoldcf.core.lockmanager.LockPool;
import org.apache.manifoldcf.core.lockmanager.ZooKeeperConnectionPool;
import org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZooKeeperLockObject_ESTest extends ZooKeeperLockObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, object0, (ZooKeeperConnectionPool) null);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalReadLockNoWait();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("@(#)$Id: LockPool.java 988245 2010-08-23 18:39:35Z kwright $", 854);
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockPool0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalReadLock();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"35Z kwright $\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, object0, (ZooKeeperConnectionPool) null);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalNonExWriteLockNoWait();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("(6a", (-3049));
      ZooKeeperLockObject zooKeeperLockObject0 = null;
      try {
        zooKeeperLockObject0 = new ZooKeeperLockObject((LockPool) null, (Object) null, zooKeeperConnectionPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("Gvjd1bi.a", (-3299));
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockObjectFactory0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.clearGlobalReadLockNoWait();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot clear read lock we don't have: /org.apache.manifoldcf.locks-org.apache.manifoldcf.core.lockmanager.LockObjectFactory@0000000001
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, object0, (ZooKeeperConnectionPool) null);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalReadLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("Already have a connection before non-ex-write locking: ", (-4140));
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockPool0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalReadLockNoWait();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("@(#)$Id: LockPool.java 988245 2010-08-23 18:39:35Z kwright $", (-4131));
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockPool0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.clearGlobalNonExWriteLockNoWait();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot clear non-ex-write lock we don't have: /org.apache.manifoldcf.locks-org.apache.manifoldcf.core.lockmanager.LockPool@0000000002
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("@(#)$Id: LockPool.java 988245 2010-08-23 18:39:35Z kwright $", 548);
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockPool0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalNonExWriteLock();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"35Z kwright $\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, object0, (ZooKeeperConnectionPool) null);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.clearGlobalWriteLockNoWait();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot clear write lock we don't have: /org.apache.manifoldcf.locks-java.lang.Object@0000000004
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("yA9`+:YhVvp?-Wq-*==", 2560);
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockPool0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalWriteLock();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"YhVvp?-Wq-*==\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Integer integer0 = new Integer(0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("Cannot clear write lock we don't have: ", 0);
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, integer0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalWriteLockNoWait();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("@(#)$Id: LockPool.java 988245 2010-08-23 18:39:35Z kwright $", (-701));
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, object0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.clearLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.ZooKeeperLockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      ZooKeeperConnectionPool zooKeeperConnectionPool0 = new ZooKeeperConnectionPool("Cannot clear non-ex-write lock we don't have: ", (-87));
      ZooKeeperLockObject zooKeeperLockObject0 = new ZooKeeperLockObject(lockPool0, lockObjectFactory0, zooKeeperConnectionPool0);
      // Undeclared exception!
      try { 
        zooKeeperLockObject0.obtainGlobalNonExWriteLockNoWait();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
