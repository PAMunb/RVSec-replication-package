/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:36:34 GMT 2022
 */

package org.apache.manifoldcf.core.system;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.InvalidParameterException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Set;
import org.apache.manifoldcf.core.database.DBInterfaceMariaDB;
import org.apache.manifoldcf.core.database.DBInterfacePostgreSQL;
import org.apache.manifoldcf.core.interfaces.ConfigurationNode;
import org.apache.manifoldcf.core.interfaces.IDBInterface;
import org.apache.manifoldcf.core.interfaces.IShutdownHook;
import org.apache.manifoldcf.core.interfaces.IThreadContext;
import org.apache.manifoldcf.core.interfaces.ManifoldCFConfiguration;
import org.apache.manifoldcf.core.system.ManifoldCF;
import org.apache.manifoldcf.core.system.ManifoldCFResourceLoader;
import org.apache.manifoldcf.core.threadcontext.ThreadContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ManifoldCF_ESTest extends ManifoldCF_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      String string0 = manifoldCF_OverrideableManifoldCFConfiguration0.getProperty("java.io.tmpdir");
      assertEquals("/tmp", string0);
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.checkMaintenanceUnderway();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      
      String string0 = ManifoldCF.encrypt("OA", "#57:#)oyBIkw", "#57:#)oyBIkw");
      assertNotNull(string0);
      
      System.setCurrentTimeMillis((-1101L));
      File file0 = ManifoldCF.createTempDir("OA", "java.io.StringWriter@0000000002");
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals((-1101L), file0.lastModified());
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-250), (byte)22);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)22, (byte)91, (byte)5, (byte)60, (byte)96}, byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readDword(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = ManifoldCF.createTempDir("", "NoNotationOnEmptyElement");
      assertFalse(file0.isHidden());
      assertEquals("/tmp/44731139724645NoNotationOnEmptyElement", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("44731139724645NoNotationOnEmptyElement", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-2), (byte) (-46), (byte)115, (byte) (-71), (byte)109}, byteArray0);
      
      int int0 = ManifoldCF.readByte(byteArrayInputStream0);
      assertEquals(18, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-2), (byte) (-46), (byte)115, (byte) (-71), (byte)109}, byteArray0);
      
      float float0 = ManifoldCF.readfloat(byteArrayInputStream0);
      assertEquals((-2.3252887E-4F), float0, 0.01F);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-2), (byte) (-46), (byte)115, (byte) (-71), (byte)109}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ManifoldCF.hash(".");
      assertEquals("3A52CE780950D4D969792A2559CD519D7EE8C727", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)7);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-33), (byte) (-58), (byte) (-16), (byte) (-121), (byte) (-39), (byte)7}, byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readString(byteArrayInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      int int0 = ManifoldCF.readNibble('0');
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.createResourceLoader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ManifoldCF.resetEnvironment();
      File file0 = ManifoldCF.resolvePath(".equivalentTo(");
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(".equivalentTo(", file0.toString());
      assertNull(file0.getParent());
      assertEquals(".equivalentTo(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(".equivalentTo(", file0.toString());
      assertNull(file0.getParent());
      assertEquals(".equivalentTo(", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-34), (byte)7, (byte)55, (byte)13, (byte) (-26)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-34), (byte)7, (byte)55, (byte)13, (byte) (-26)}, byteArray0);
      
      int int0 = ManifoldCF.readSdword(dataInputStream0);
      assertEquals(923262483, int0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-34), (byte)7, (byte)55, (byte)13, (byte) (-26)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = ManifoldCF.readNibble('1');
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)37;
      try { 
        ManifoldCF.getCipher("-}Np", 1, "^&7v77/.!Vr&y", byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not build a cipher: Wrong IV length: must be 16 bytes long
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = ManifoldCF.workingDirectory;
      assertNull(file0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byteArrayOutputStream0.write(5);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0005", byteArrayOutputStream0.toString());
      
      ManifoldCF.writeDword(byteArrayOutputStream0, 0);
      assertEquals("\u0005\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(5, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("C\"w|?}{w&R?r[(g8\"Xi");
      assertEquals("C&34!w&124!?}{w&38!R?r&91!(g8&34!Xi", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      String string0 = manifoldCF_OverrideableManifoldCFConfiguration0.getProperty("Da^`R:M*w>ZhXMg&eU");
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNull(string0);
      
      String string1 = ManifoldCF.safeFileName("i/usat|hJ");
      assertEquals("i&47!usat&124!hJ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.pollAll(threadContext0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        ManifoldCF.readfloat(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      MockFile mockFile0 = new MockFile("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockFile0);
      
      manifoldCF_FileTrack0.addFile(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      manifoldCF_FileTrack0.finalize();
      // Undeclared exception!
      try { 
        ManifoldCF.deleteFile(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName(">6n=Z7udc5/V>");
      assertEquals("&62!6n&61!Z7udc5&47!V&62!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("BXStuBE-");
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals("BXStuBE-", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.isAbsolute());
      assertEquals("BXStuBE-", file0.getName());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ManifoldCF.cleanUpEnvironment((IThreadContext) null);
      String string0 = ManifoldCF.safeFileName("m(qe9UbufK");
      assertEquals("m(qe9UbufK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      int int0 = ManifoldCF.readNibble('9');
      assertEquals(9, int0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = ManifoldCF.workingDirectory;
      assertNull(file0);
      
      int int0 = ManifoldCF.readNibble('A');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readByteArray((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = ManifoldCF.getProcessID();
      assertNull(string0);
      
      String string1 = ManifoldCF.getMasterDatabaseUsername();
      assertNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-9), (byte)12, (byte) (-41), (byte)39, (byte)40, (byte)58, (byte)25}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-9), (byte)12, (byte) (-41), (byte)39, (byte)40, (byte)58, (byte)25}, byteArray0);
      
      float float0 = ManifoldCF.readfloat(bufferedInputStream0);
      assertEquals((-1.5499381E14F), float0, 0.01F);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-9), (byte)12, (byte) (-41), (byte)39, (byte)40, (byte)58, (byte)25}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.writeDword((OutputStream) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("http://apache.org/xml/features/validation/schema/ignore-xsi-type-until-elemdecl");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("http:/apache.org/xml/features/validation/schema/ignore-xsi-type-until-elemdecl", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("http:/apache.org/xml/features/validation/schema", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("ignore-xsi-type-until-elemdecl", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)13);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
      
      float float0 = ManifoldCF.readfloat(byteArrayInputStream0);
      assertEquals(4.346469E-31F, float0, 0.01F);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      ManifoldCF.resetEnvironment();
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ManifoldCF.pollAll(threadContext0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)5, (byte)37, (byte) (-127), (byte)32, (byte) (-37), (byte) (-33), (byte) (-40), (byte) (-104)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)5, (byte)37, (byte) (-127), (byte)32, (byte) (-37), (byte) (-33), (byte) (-40), (byte) (-104)}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)5, (byte)37, (byte) (-127), (byte)32, (byte) (-37), (byte) (-33), (byte) (-40), (byte) (-104)}, byteArray0);
      
      int int0 = ManifoldCF.readWord(sequenceInputStream0);
      assertEquals(9477, int0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5, (byte)37, (byte) (-127), (byte)32, (byte) (-37), (byte) (-33), (byte) (-40), (byte) (-104)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("9'oQ+tD0o@)xzhT");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.writeDword(mockPrintStream0, (-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempt to use an unsigned operator to write a signed value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("Da^`R:M*w>ZhXMg&eU");
      assertEquals("Da^`R&58!M*w&62!ZhXMg&38!eU", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ManifoldCF.hash("");
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-88), (byte)6);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-88), (byte)10, (byte) (-62)}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 669);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-88), (byte)10, (byte) (-62)}, byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readByte(pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-431), 200);
      assertEquals(200, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)125, (byte)11, (byte)90, (byte)57}, byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readfloat(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      // Undeclared exception!
      try { 
        ManifoldCF.getCipher("", 60, "59VuZh6&bbv?4,", byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the salt parameter must not be empty
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = ManifoldCF.readNibble('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("o4/");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("o4", file0.toString());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("o4");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "s");
      assertTrue(boolean0);
      
      boolean boolean1 = file0.setExecutable(true);
      assertTrue(boolean1);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1L, file0.length());
      assertEquals("o4", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = file0.setWritable(true, true);
      assertTrue(boolean2);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(1L, file0.length());
      assertEquals("o4", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ManifoldCF.recursiveDelete(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("o4", file0.toString());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      ManifoldCF.addToHash(messageDigest0, "");
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <in progress>\n", messageDigest0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      String string0 = ManifoldCF.getMasterDatabaseUsername();
      assertNull(string0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readDword(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ManifoldCFResourceLoader manifoldCFResourceLoader0 = ManifoldCF.resourceLoader;
      assertNull(manifoldCFResourceLoader0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/@(#)$Id: ManifoldCFResourceLoader.java 988245 2010-08-23 18:39:35Z kwright $44731139724645AES/CBC/PKCS5Padding");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "@(#)$Id: ManifoldCFResourceLoader.java 988245 2010-08-23 18:39:35Z kwright $");
      assertTrue(boolean0);
      
      try { 
        ManifoldCF.createTempDir("@(#)$Id: ManifoldCFResourceLoader.java 988245 2010-08-23 18:39:35Z kwright $", "AES/CBC/PKCS5Padding");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Temporary directory appears to be unwritable
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/d*9*9LW/'h44731139724645d*9*9LW/'h");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "jhH}&^2LWr");
      assertTrue(boolean0);
      
      try { 
        ManifoldCF.createTempDir("d*9*9LW/'h", "d*9*9LW/'h");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Temporary directory appears to be unwritable
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      manifoldCF_DatabaseShutdown0.closeDatabase();
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      manifoldCF_DatabaseShutdown0.doCleanup(threadContext0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      manifoldCF_DatabaseShutdown0.finalize();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      String string0 = ManifoldCF.encrypt("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", ";wyiYb};");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4700), 1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byteArrayInputStream0.mark(1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readSdword(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.safeFileName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = ManifoldCF.encrypt("E", "E", "E");
      assertNotNull(string0);
      
      String string1 = ManifoldCF.hash("java.io.StringWriter@0000000002");
      assertEquals("E2CC95074533B88CA4CDED90E62B1029F06CE5AA", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-75);
      // Undeclared exception!
      try { 
        ManifoldCF.getCipher("E", (-2042), "E", byteArray0);
        fail("Expecting exception: InvalidParameterException");
      
      } catch(InvalidParameterException e) {
         //
         // Invalid operation mode
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      int int0 = ManifoldCF.readNibble('2');
      assertEquals(2, int0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = ManifoldCF.tracker;
      assertNull(manifoldCF_FileTrack0);
      
      ManifoldCFConfiguration manifoldCFConfiguration0 = ManifoldCF.getConfiguration();
      assertNull(manifoldCFConfiguration0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      try { 
        manifoldCF_DatabaseShutdown0.finalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      int int0 = ManifoldCF.readNibble('E');
      assertEquals(14, int0);
      
      String string0 = ManifoldCF.safeFileName("k=)b<TUT3tOCv");
      assertEquals("k&61!)b&60!TUT3tOCv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      String string0 = ManifoldCF.safeFileName("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
      assertEquals("@(#)$Id&58! ThreadContext.java 988245 2010-08-23 18&58!39&58!35Z kwright $", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      manifoldCF_FileTrack0.addFile((File) null);
      try { 
        manifoldCF_FileTrack0.finalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF$FileTrack", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      try { 
        ManifoldCF.readNibble('/');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad hexadecimal value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        ManifoldCF.readNibble('\'');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad hexadecimal value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.checkProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1276), (-1276), (-714), (-714), (-1276)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string0 = ManifoldCF.encrypt("org.apache.manifoldcf.configuration.change.command", "org.apache.manifoldcf.configuration.change.command", "org.apache.manifoldcf.configuration.change.command");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      // Undeclared exception!
      ManifoldCF.readDword(inputStream0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      // Undeclared exception!
      try { 
        ManifoldCF.readByte((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        ManifoldCF.getHashValue((MessageDigest) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Couldn't encrypt: null
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MessageDigest messageDigest0 = null;
      try { 
        ManifoldCF.getHashValue((MessageDigest) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Couldn't encrypt: null
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment((IThreadContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2819, 2819).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      Long long0 = ManifoldCF.readLong(inputStream0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      ManifoldCF.writeByteArray(outputStream0, (byte[]) null);
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      String string0 = ManifoldCF.encrypt("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      char char0 = ManifoldCF.writeNibble((byte)6);
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pedro/lcf/properties.xml");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      try { 
        ManifoldCF.initializeEnvironment();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Initialization failed: Could not read configuration file '/home/pedro/lcf/properties.xml'
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      String string0 = manifoldCF_OverrideableManifoldCFConfiguration0.getPossiblyObfuscatedStringProperty("o4/", "o4/");
      assertEquals("o4/", string0);
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(string0);
      
      String string1 = ManifoldCF.encrypt("o4/", "name", "name");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = manifoldCF_OverrideableManifoldCFConfiguration0.getProperty(".sql.log");
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNull(string2);
      
      String string3 = ManifoldCF.safeFileName("org.openqa.selenium.json.StaticInitializerCoercer");
      assertEquals("org.openqa.selenium.json.StaticInitializerCoercer", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = ManifoldCF.safeFileName("ROE>}X0");
      assertEquals("ROE&62!}X0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("*@j<EuTU410 4*6C");
      assertEquals("*@j&60!EuTU410 4*6C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("\":@E[r\"R]");
      assertEquals("&34!&58!@E&91!r&34!R&93!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("m;\"+ ~Q=Z&9ojVc,Mb");
      assertEquals("m&59!&34!&43! ~Q&61!Z&38!9ojVc&44!Mb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = ManifoldCF.safeFileName("*s/4n8@JQE7");
      assertEquals("*s&47!4n8@JQE7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2254).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string0 = ManifoldCF.readString(inputStream0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ManifoldCF.safeFileName("m;\"+ ~Q=Z&9ojVc,Mb");
      assertEquals("m&59!&34!&43! ~Q&61!Z&38!9ojVc&44!Mb", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2819, 2819).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      Long long0 = ManifoldCF.readLong(inputStream0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      ManifoldCF.writeLong(outputStream0, long0);
      String string0 = ManifoldCF.encrypt("org.apache.manifoldcf.database.handletimeout", "7b:Tc", "7b:Tc");
      assertNotNull(string0);
      
      Random.setNextRandom(3521);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.resetEnvironment((IThreadContext) threadContext0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      ManifoldCF.initializeEnvironment();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-32);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-101), (byte) (-26), (byte) (-113), (byte) (-1), (byte) (-32)}, byteArray0);
      
      int int0 = ManifoldCF.readDword(byteArrayInputStream0);
      assertEquals((-1880712302), int0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-101), (byte) (-26), (byte) (-113), (byte) (-1), (byte) (-32)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ManifoldCF.obfuscate("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getDoubleProperty("?]XQumtf,<%X1M", 1118.7644214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string0 = ManifoldCF.encrypt("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      // Undeclared exception!
      ManifoldCF.readBytes(inputStream0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ManifoldCF.encrypt("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        ManifoldCF.writeDword((OutputStream) null, (-5021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempt to use an unsigned operator to write a signed value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.hsqldb.lib.FileUtil");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "org.hsqldb.lib.FileUtil";
      objectArray0[3] = (Object) "org.hsqldb.lib.FileUtil";
      mockPrintStream0.println(10);
      objectArray0[4] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.hsqldb.lib.FileUtil", objectArray0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(5, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      assertEquals(5, objectArray0.length);
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      ManifoldCF.writeDword(mockPrintStream1, 1660);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(5, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)6;
      // Undeclared exception!
      try { 
        ManifoldCF.readBytes((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.recursiveDelete((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getIntProperty("P'BHOTA5aW4{g", 1435);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getIntProperty("f", 994);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ManifoldCFResourceLoader manifoldCFResourceLoader0 = ManifoldCF.resourceLoader;
      assertNull(manifoldCFResourceLoader0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = ManifoldCF.dbShutdown;
      assertNull(manifoldCF_DatabaseShutdown0);
      
      ManifoldCF.addShutdownHook((IShutdownHook) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = ManifoldCF.deobfuscate("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ManifoldCF.isFolder("-q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      MockFile mockFile0 = new MockFile("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      String string0 = mockFile0.getCanonicalPath();
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", string0);
      assertEquals("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotNull(string0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = ManifoldCF.isFolder("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.addFile(mockFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'", false);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      objectOutputStream0.flush();
      objectOutputStream0.writeObject("'");
      ManifoldCF.writeWord(objectOutputStream0, (-1926));
      char char0 = ManifoldCF.writeNibble((-1926));
      assertEquals('\uF8AA', char0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getFileProperty("SG4ZSe*21c(,1TJ@ ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      String string0 = ManifoldCF.encrypt("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = ManifoldCF.writeNibble(2819);
      assertEquals('\u0B3A', char0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      String string0 = ")TI];eJLjl<Ge";
      try { 
        ManifoldCF.writeByteArray(pipedOutputStream0, (byte[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ManifoldCF.resetEnvironment();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-28);
      try { 
        ManifoldCF.writeByteArray(pipedOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ManifoldCF.DatabaseConnectionReleaseThread manifoldCF_DatabaseConnectionReleaseThread0 = new ManifoldCF.DatabaseConnectionReleaseThread();
      assertNotNull(manifoldCF_DatabaseConnectionReleaseThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      manifoldCF_DatabaseConnectionReleaseThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertTrue(manifoldCF_DatabaseConnectionReleaseThread0.isDaemon());
      assertFalse(manifoldCF_DatabaseConnectionReleaseThread0.isInterrupted());
      assertEquals(0, manifoldCF_DatabaseConnectionReleaseThread0.countStackFrames());
      
      manifoldCF_DatabaseConnectionReleaseThread0.run();
      assertTrue(manifoldCF_DatabaseConnectionReleaseThread0.isDaemon());
      assertFalse(manifoldCF_DatabaseConnectionReleaseThread0.isInterrupted());
      assertEquals(0, manifoldCF_DatabaseConnectionReleaseThread0.countStackFrames());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)10, (byte) (-52), (byte)0, (byte)97}, byteArray0);
      
      DBInterfaceMariaDB dBInterfaceMariaDB0 = null;
      try {
        dBInterfaceMariaDB0 = new DBInterfaceMariaDB((IThreadContext) null, "", "NowIsTheTime", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.LockManagerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ManifoldCF.DatabaseConnectionReleaseThread manifoldCF_DatabaseConnectionReleaseThread0 = new ManifoldCF.DatabaseConnectionReleaseThread();
      assertNotNull(manifoldCF_DatabaseConnectionReleaseThread0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      manifoldCF_DatabaseConnectionReleaseThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertEquals(0, manifoldCF_DatabaseConnectionReleaseThread0.countStackFrames());
      assertTrue(manifoldCF_DatabaseConnectionReleaseThread0.isDaemon());
      assertFalse(manifoldCF_DatabaseConnectionReleaseThread0.isInterrupted());
      
      manifoldCF_DatabaseConnectionReleaseThread0.run();
      assertEquals(0, manifoldCF_DatabaseConnectionReleaseThread0.countStackFrames());
      assertTrue(manifoldCF_DatabaseConnectionReleaseThread0.isDaemon());
      assertFalse(manifoldCF_DatabaseConnectionReleaseThread0.isInterrupted());
      
      IThreadContext iThreadContext0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)10, (byte)0, (byte)0, (byte)97}, byteArray0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      try { 
        manifoldCF_DatabaseShutdown0.finalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Random.setNextRandom(977);
      ManifoldCF.sleep(2194L);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        sequenceInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      String string0 = ManifoldCF.encrypt("lv", "(_>GW<I", "lv");
      assertNotNull(string0);
      
      String string1 = ManifoldCF.encrypt("2mo:i+d!9YRS!lFj", "Et|!rKR~e/I8WM", "lv");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char char0 = ManifoldCF.writeNibble(16);
      assertEquals('G', char0);
      
      ManifoldCFConfiguration manifoldCFConfiguration0 = ManifoldCF.getConfiguration();
      assertNull(manifoldCFConfiguration0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      try { 
        manifoldCF_DatabaseShutdown0.finalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("org.apache.manifoldcf.fileresources");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile("B3s", "org.apache.manifoldcf.database.username", (File) mockFile1);
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.exists());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertEquals("org.apache.manifoldcf.fileresources", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("org.apache.manifoldcf.fileresources", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("B3s0org.apache.manifoldcf.database.username", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/org.apache.manifoldcf.fileresources", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/org.apache.manifoldcf.fileresources/B3s0org.apache.manifoldcf.database.username", file0.toString());
      assertEquals(0L, file0.length());
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.exists());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertEquals("org.apache.manifoldcf.fileresources", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("org.apache.manifoldcf.fileresources", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("B3s0org.apache.manifoldcf.database.username", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/org.apache.manifoldcf.fileresources", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/org.apache.manifoldcf.fileresources/B3s0org.apache.manifoldcf.database.username", file0.toString());
      assertEquals(0L, file0.length());
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      
      // Undeclared exception!
      try { 
        ManifoldCF.deleteFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = ManifoldCF.workingDirectory;
      assertNull(file0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.deleteFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      try { 
        ManifoldCF.readByte(sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getMcfVersion();
      assertNull(string0);
      
      String string1 = ManifoldCF.obfuscate((String) null);
      assertNull(string1);
      
      String string2 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string2);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-767));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeWord(outputStream0, 1329);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack1 = new ManifoldCF.FileTrack();
      assertFalse(manifoldCF_FileTrack1.equals((Object)manifoldCF_FileTrack0));
      assertNotNull(manifoldCF_FileTrack1);
      
      threadContext0.save(manifoldCF_FileTrack1, manifoldCF_FileTrack1);
      assertNotSame(manifoldCF_FileTrack1, manifoldCF_FileTrack0);
      assertFalse(manifoldCF_FileTrack1.equals((Object)manifoldCF_FileTrack0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", false);
      assertNotNull(mockFileOutputStream0);
      
      ManifoldCF.writefloat(mockFileOutputStream0, 0.0F);
      ThreadContext threadContext1 = new ThreadContext();
      assertFalse(threadContext1.equals((Object)threadContext0));
      assertNotNull(threadContext1);
      
      // Undeclared exception!
      try { 
        ManifoldCF.dropSystemDatabase(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      try { 
        ManifoldCF.readSdword(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2819, 2819).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      Long long0 = ManifoldCF.readLong(inputStream0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ManifoldCF.encrypt("2mo:i+d!9YRS!lFj", "2mo:i+d!9YRS!lFj", (String) null);
      assertNull(string0);
      
      String string1 = ManifoldCF.encrypt("2mo:i+d!9YRS!lFj", (String) null, (String) null);
      assertNull(string1);
      
      char char0 = ManifoldCF.writeNibble(961);
      assertEquals('\u03F8', char0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2819);
      assertNotNull(bufferedInputStream0);
      
      try { 
        ManifoldCF.readSdword(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      manifoldCF_FileTrack0.finalize();
      try { 
        ManifoldCF.readNibble('d');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad hexadecimal value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1594);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1594);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      try { 
        ManifoldCF.readByteArray(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      try { 
        ManifoldCF.readByteArray(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.writeByteArray((OutputStream) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        ManifoldCF.readNibble('|');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad hexadecimal value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = ManifoldCF.readNibble('6');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      manifoldCF_FileTrack0.finalize();
      try { 
        ManifoldCF.readNibble('<');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad hexadecimal value
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-122), (byte) (-78)}, byteArray0);
      
      try { 
        ManifoldCF.readDword(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(439);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String string0 = ManifoldCF.encrypt("C6q", "C6q", "2mo:i+d!9YRS!lFj");
      assertNotNull(string0);
      
      String string1 = ManifoldCF.encrypt((String) null, "java.io.StringWriter@0000000002", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char char0 = ManifoldCF.writeNibble(961);
      assertEquals('\u03F8', char0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        ManifoldCF.createTempDir("d*9*9LW/'h", "d*9*9LW/'h");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Temporary directory appears to be unwritable
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = ManifoldCF.readNibble('1');
      assertEquals(1, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        ManifoldCF.readLong(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.writeLong((OutputStream) null, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)43);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[0];
      ManifoldCF.readBytes(pipedInputStream0, byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      String string0 = "O?Zm&[/`)mhVI.@";
      try { 
        ManifoldCF.decrypt("", "1gaK<7X!VWewDi$1',", "O?Zm&[/`)mhVI.@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // String can't be decrypted: too short
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      String string0 = ManifoldCF.encrypt("", (String) null, (String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 65, (byte)6);
      assertEquals((-64), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals((-64), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 65);
      assertEquals((-64), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      
      try { 
        ManifoldCF.readBytes(pushbackInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ManifoldCF.recursiveDelete(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      
      ManifoldCF.ShutdownThread manifoldCF_ShutdownThread0 = new ManifoldCF.ShutdownThread();
      assertNotNull(manifoldCF_ShutdownThread0);
      
      manifoldCF_ShutdownThread0.run();
      assertFalse(manifoldCF_ShutdownThread0.isDaemon());
      assertFalse(manifoldCF_ShutdownThread0.isInterrupted());
      assertEquals(0, manifoldCF_ShutdownThread0.countStackFrames());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.pollAll(threadContext0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertNotNull(messageDigest0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ManifoldCF.recursiveDelete(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      
      ManifoldCF.ShutdownThread manifoldCF_ShutdownThread0 = new ManifoldCF.ShutdownThread();
      assertNotNull(manifoldCF_ShutdownThread0);
      
      manifoldCF_ShutdownThread0.run();
      assertFalse(manifoldCF_ShutdownThread0.isDaemon());
      assertFalse(manifoldCF_ShutdownThread0.isInterrupted());
      assertEquals(0, manifoldCF_ShutdownThread0.countStackFrames());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)43;
      try { 
        ManifoldCF.readBytes(pipedInputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.recursiveDelete(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.FSObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      String string0 = ManifoldCF.decrypt((String) null, "sIsS2;\"<o4DM%hw60}", (String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      File file0 = null;
      // Undeclared exception!
      try { 
        manifoldCF_FileTrack0.deleteFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("?36O|%6My&");
      assertNotNull(mockFile0);
      
      String string0 = mockFile0.getAbsolutePath();
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/?36O|%6My&", string0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("?36O|%6My&", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("?36O|%6My&", mockFile0.getName());
      assertNotNull(string0);
      
      manifoldCF_FileTrack0.deleteFile(mockFile0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("?36O|%6My&", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("?36O|%6My&", mockFile0.getName());
      
      // Undeclared exception!
      try { 
        ManifoldCF.decrypt((String) null, "?36O|%6My&", "Missing required SALT value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getBooleanProperty("T^ ?il}H", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      File file0 = ManifoldCF.createTempDir("B>|RXd`", "%m@:_ .b");
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("B>|RXd`44731139724645%m@:_ .b", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b", file0.toString());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "B>|RXd`");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      String string0 = mockFile0.getCanonicalPath();
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b/B>|RXd`", string0);
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("B>|RXd`44731139724645%m@:_ .b", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b", file0.toString());
      assertFalse(file0.isFile());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("B>|RXd`", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b/B>|RXd`", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(string0);
      
      ManifoldCF.ensureFolder("B>|RXd`");
      // Undeclared exception!
      try { 
        ManifoldCF.getBooleanProperty("%m@:_ .b", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      String string0 = ManifoldCF.encrypt(" Invalidating key = ", (String) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack1 = new ManifoldCF.FileTrack();
      assertFalse(manifoldCF_FileTrack1.equals((Object)manifoldCF_FileTrack0));
      assertNotNull(manifoldCF_FileTrack1);
      
      manifoldCF_FileTrack1.finalize();
      assertNotSame(manifoldCF_FileTrack1, manifoldCF_FileTrack0);
      assertFalse(manifoldCF_FileTrack1.equals((Object)manifoldCF_FileTrack0));
      
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      threadContext0.save(sequenceInputStream0, object0);
      threadContext0.save(sequenceInputStream0, manifoldCF_FileTrack0);
      assertNotSame(manifoldCF_FileTrack0, manifoldCF_FileTrack1);
      assertFalse(manifoldCF_FileTrack0.equals((Object)manifoldCF_FileTrack1));
      
      ManifoldCF.deleteFolder("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
      String string1 = ManifoldCF.obfuscate("!ppQ @r.C;Foi");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        ManifoldCF.deobfuscate("a[$A>}-RD!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // String can't be decrypted: too short
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      String string0 = manifoldCF_OverrideableManifoldCFConfiguration0.getProperty("property");
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2819, 2819).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      Long long0 = ManifoldCF.readLong(inputStream0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      ManifoldCF.writeLong(outputStream0, long0);
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      String string0 = manifoldCF_OverrideableManifoldCFConfiguration0.getProperty("Starting LoggerContext[name={}, {}]...");
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNull(string0);
      
      String string1 = "";
      try { 
        MockURI.URI("", "Starting LoggerContext[name={}, {}]...", "", 2819, "G5%_FvRpma@UBi'-", "KLMplkl", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://Starting%20LoggerContext%5Bname=%7B%7D,%20%7B%7D%5D...@:2819G5%25_FvRpma@UBi'-?KLMplkl#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      ManifoldCF.resetEnvironment();
      try { 
        ManifoldCF.ensureFolder((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't make folder
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.writeByte((OutputStream) null, 2037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("o4/");
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("o4", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("o4", file0.toString());
      assertNotNull(file0);
      
      try { 
        ManifoldCF.deobfuscate("Node type 'libdir' requires a 'path attribute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.readfloat((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ManifoldCF.DatabaseConnectionReleaseThread manifoldCF_DatabaseConnectionReleaseThread0 = new ManifoldCF.DatabaseConnectionReleaseThread();
      assertNotNull(manifoldCF_DatabaseConnectionReleaseThread0);
      
      byte[] byteArray0 = ManifoldCF.getSecureRandom();
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        ManifoldCF.readfloat((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(boolean0);
      
      File file0 = MockFile.createTempFile("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
      assertEquals("/tmp/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $0@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", file0.toString());
      assertEquals("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $0@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      manifoldCF_FileTrack0.addFile(file0);
      assertEquals("/tmp/@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $0@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", file0.toString());
      assertEquals("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $0@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      
      // Undeclared exception!
      try { 
        ManifoldCF.getFileProperty("@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      File file0 = null;
      manifoldCF_FileTrack0.addFile((File) null);
      try { 
        manifoldCF_FileTrack0.finalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF$FileTrack", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ThreadContext threadContext1 = new ThreadContext();
      assertFalse(threadContext1.equals((Object)threadContext0));
      assertNotNull(threadContext1);
      
      File file0 = ManifoldCF.resolvePath("");
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.addFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.encrypt("d*9*9LW/'h", (String) null, "d*9*9LW/'h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string0);
      
      String string1 = "";
      String string2 = ManifoldCF.deobfuscate("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "j|6/G^['w";
      try { 
        ManifoldCF.createTempDir("", "j|6/G^['w");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Temporary directory appears to be unwritable
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = ManifoldCF.createTempDir("*@j<EuTU410 4*6C", "*@j<EuTU410 4*6C");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/*@j<EuTU410 4*6C44731139724645*@j<EuTU410 4*6C", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("*@j<EuTU410 4*6C44731139724645*@j<EuTU410 4*6C", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      File file0 = ManifoldCF.createTempDir("B>|RXd`", "%m@:_ .b");
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("B>|RXd`44731139724645%m@:_ .b", file0.getName());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "B>|RXd`");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      String string0 = mockFile0.getCanonicalPath();
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b/B>|RXd`", string0);
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("B>|RXd`44731139724645%m@:_ .b", file0.getName());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b/B>|RXd`", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp/B>|RXd`44731139724645%m@:_ .b", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("B>|RXd`", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(string0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      MockFile mockFile1 = new MockFile(uRI0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNotNull(mockFile1);
      
      mockFile1.deleteOnExit();
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals("foo.bar", mockFile1.getName());
      assertEquals("/tmp", mockFile1.getParent());
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      
      boolean boolean0 = mockFile1.mkdirs();
      assertTrue(boolean0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/tmp/foo.bar", mockFile1.toString());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isFile());
      assertEquals("foo.bar", mockFile1.getName());
      assertEquals("/tmp", mockFile1.getParent());
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      
      // Undeclared exception!
      try { 
        ManifoldCF.addFile(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = ManifoldCF.getMcfVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ManifoldCFResourceLoader manifoldCFResourceLoader0 = ManifoldCF.resourceLoader;
      assertNull(manifoldCFResourceLoader0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeString(outputStream0, "@(#)$Id: ManifoldCFResourceLoader.java 988245 2010-08-23 18:39:35Z kwright $");
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[0] = (byte)10;
      byteArray0[3] = (byte)0;
      String string0 = ManifoldCF.deobfuscate("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ManifoldCF.getMcfVersion();
      assertNull(string1);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ManifoldCF.resetEnvironment();
      String string0 = ManifoldCF.obfuscate("com.google.common.io.BaseEncoding$Alphabet");
      assertNotNull(string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      int int0 = MockThread.MAX_PRIORITY;
      assertEquals(10, int0);
      
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      ManifoldCF.addPollingHook(manifoldCF_CachePoll0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ManifoldCF.resetEnvironment();
      String string0 = ManifoldCF.obfuscate("com.google.common.io.BaseEncoding$Alphabet");
      assertNotNull(string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      ManifoldCF.addPollingHook(manifoldCF_CachePoll0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      File file0 = MockFile.createTempFile("\"_!F!:^xHo9$P2\"&w", "\"_!F!:^xHo9$P2\"&w");
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("\"_!F!:^xHo9$P2\"&w0\"_!F!:^xHo9$P2\"&w", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"_!F!:^xHo9$P2\"&w0\"_!F!:^xHo9$P2\"&w", file0.toString());
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("\"_!F!:^xHo9$P2\"&w0\"_!F!:^xHo9$P2\"&w", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/\"_!F!:^xHo9$P2\"&w0\"_!F!:^xHo9$P2\"&w", file0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.writeString((OutputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.writeString((OutputStream) null, "5gHAh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ManifoldCFResourceLoader manifoldCFResourceLoader0 = ManifoldCF.resourceLoader;
      assertNull(manifoldCFResourceLoader0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeString(outputStream0, "@(#)$Id: ManifoldCFResourceLoader.java 988245 2010-08-23 18:39:35Z kwright $");
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      String string0 = ManifoldCF.deobfuscate("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        ManifoldCF.writeByte(pipedOutputStream0, 2037);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.manifoldcf.database.username");
      assertFalse(boolean0);
      
      String string0 = ManifoldCF.deobfuscate("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.writeWord(dataOutputStream0, 1386);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)23;
      // Undeclared exception!
      try { 
        ManifoldCF.readBytes((InputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.cleanUpEnvironment();
      // Undeclared exception!
      try { 
        ManifoldCF.readBytes(inputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        ManifoldCF.readWord(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ManifoldCFResourceLoader manifoldCFResourceLoader0 = ManifoldCF.resourceLoader;
      assertNull(manifoldCFResourceLoader0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      manifoldCF_FileTrack0.doCleanup(threadContext0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      threadContext0.save(object0, sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ManifoldCF.pollAll(threadContext0);
      ManifoldCF.writeSdword(pipedOutputStream0, 57);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getDoubleProperty("A4&4J", 2856.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        ManifoldCF.getDoubleProperty("", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getStringProperty("Xn2;MHnzZ(L_bH^J<c", "Xn2;MHnzZ(L_bH^J<c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      int int0 = 1329;
      ManifoldCF.writeWord(outputStream0, 1329);
      ManifoldCF manifoldCF0 = new ManifoldCF();
      assertNull(manifoldCF0.getMasterDatabasePassword());
      assertNull(manifoldCF0.getMcfVersion());
      assertNull(manifoldCF0.getMasterDatabaseName());
      assertNull(manifoldCF0.getProcessID());
      assertNull(manifoldCF0.getMasterDatabaseUsername());
      assertNotNull(manifoldCF0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        ManifoldCF.getStringProperty("org.apache.manifoldcf.database.name", "s\"IggDL1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)3, (byte)92, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)3, (byte)92, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ManifoldCF.readDword(byteArrayInputStream0);
      assertEquals(1543700572, int0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)3, (byte)92, (byte)0, (byte)0}, byteArray0);
      
      int int1 = ManifoldCF.readByte(byteArrayInputStream0);
      assertEquals(0, int1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)3, (byte)92, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.checkMaintenanceUnderway();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      MockFile mockFile0 = new MockFile((String) null, "W!{BcQQ8c>l/b*G&DG");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("b*G&DG", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "3ABoT&bkNQk");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      String string0 = mockFile1.getCanonicalPath();
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l/b*G&DG/3ABoT&bkNQk", string0);
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("b*G&DG", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l/b*G&DG/3ABoT&bkNQk", mockFile1.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l/b*G&DG", mockFile1.getParent());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals("3ABoT&bkNQk", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(string0);
      
      mockFile0.deleteOnExit();
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("b*G&DG", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertNotSame(mockFile0, mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      // Undeclared exception!
      try { 
        ManifoldCF.checkMaintenanceUnderway();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ManifoldCF.resetEnvironment();
      // Undeclared exception!
      try { 
        ManifoldCF.readWord((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertNotNull(messageDigest0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      ManifoldCF.cleanUpEnvironment();
      String string0 = ManifoldCF.obfuscate("com.google.common.io.BaseEncoding$Alphabet");
      assertNotNull(string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      // Undeclared exception!
      ManifoldCF.readWord(inputStream0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(439).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = ManifoldCF.readDword(inputStream0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ManifoldCFConfiguration manifoldCFConfiguration0 = ManifoldCF.getConfiguration();
      assertNull(manifoldCFConfiguration0);
      
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      try { 
        manifoldCF_DatabaseShutdown0.finalize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        ManifoldCF.decrypt("", "Process ID cannot exceed 16 characters!", "Process ID cannot exceed 16 characters!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected end of base64 input
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getProcessID();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.noteConfigurationChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.addFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      MockFile mockFile0 = new MockFile((String) null, "W!{BcQQ8c>l/b*G&DG");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("b*G&DG", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNotNull(uRL0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      String string0 = mockFile1.getCanonicalPath();
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l/b*G&DG", string0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("b*G&DG", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l", mockFile1.getParent());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l/b*G&DG", mockFile1.toString());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals("b*G&DG", mockFile1.getName());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(string0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("b*G&DG", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotSame(mockFile0, mockFile1);
      assertTrue(mockFile0.equals((Object)mockFile1));
      
      boolean boolean0 = mockFile1.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("W!{BcQQ8c>l/b*G&DG", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("W!{BcQQ8c>l", mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("b*G&DG", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/W!{BcQQ8c>l/b*G&DG", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals("b*G&DG", mockFile1.getName());
      assertTrue(mockFile1.isDirectory());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      // Undeclared exception!
      try { 
        ManifoldCF.addFile(mockFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getCipher("{A=>R`%<~V\"h^ED", 1239, "{A=>R`%<~V\"h^ED", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.crypto.spec.IvParameterSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.decrypt("", (String) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(13).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string1 = ManifoldCF.readString(inputStream0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getCipher("flmwz;", 34, "", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.crypto.spec.IvParameterSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2819, 2819).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      Long long0 = ManifoldCF.readLong(inputStream0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      ManifoldCF.writeLong(outputStream0, long0);
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      byte[] byteArray0 = ManifoldCF.getSecureRandom();
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.createResourceLoader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      manifoldCF_FileTrack0.doCleanup(threadContext0);
      threadContext0.save(manifoldCF_FileTrack0, manifoldCF_FileTrack0);
      ManifoldCF.pollAll(threadContext0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeSdword(outputStream0, (-1137));
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ThreadContext threadContext1 = new ThreadContext();
      assertFalse(threadContext1.equals((Object)threadContext0));
      assertNotNull(threadContext1);
      
      // Undeclared exception!
      try { 
        manifoldCF_DatabaseShutdown0.doCleanup(threadContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ManifoldCF.getCipher(threadContext0, (-1561), "a~Ti3}", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeWord(outputStream0, 1329);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        ManifoldCF.getCipher(threadContext0, 55, "Temporary directory appears to be unwritable", byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(2238).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string0 = ManifoldCF.readString(inputStream0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      String string0 = ManifoldCF.hash("value");
      assertEquals("F32B67C7E26342AF42EFABC674D441DCA0A281C5", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte)85, (byte) (-103), (byte)117, (byte) (-39)}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte)85, (byte) (-103), (byte)117, (byte) (-39)}, byteArray0);
      
      byteArrayInputStream0.mark((byte) (-103));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte)85, (byte) (-103), (byte)117, (byte) (-39)}, byteArray0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.readByteArray(byteArrayInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.decrypt("", (String) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(74).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      String string1 = ManifoldCF.readString(inputStream0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ManifoldCF.cleanUpEnvironment();
      String string2 = ManifoldCF.getHashValue(messageDigest0);
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", string2);
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ManifoldCF.decrypt((String) null, "?36O|%6My&", "Missing required SALT value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      try { 
        ManifoldCF.deobfuscate("a~Ti3}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // String can't be decrypted: too short
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        ManifoldCF.deobfuscate("Node type 'libdir' requires a 'path attribute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      String string0 = "Missing required SALT value";
      // Undeclared exception!
      try { 
        ManifoldCF.decrypt((String) null, "?36O|%6My&", "Missing required SALT value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      try { 
        ManifoldCF.deobfuscate("property");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // String can't be decrypted: too short
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ManifoldCF.ensureFolder("");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        ManifoldCF.readString(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      try { 
        ManifoldCF.readString(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        ManifoldCF.readWord(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string0);
      
      String string1 = ManifoldCF.deobfuscate((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      File file0 = ManifoldCF.workingDirectory;
      assertNull(file0);
      
      String string0 = ManifoldCF.getProcessID();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getChildDatabaseName((IDBInterface) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      // Undeclared exception!
      try { 
        manifoldCF_DatabaseShutdown0.closeDatabase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      int int0 = (-5);
      ConfigurationNode configurationNode0 = new ConfigurationNode("]Ikd3U&Z9");
      assertEquals("]Ikd3U&Z9", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotNull(configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode0.findChild((-5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      ManifoldCF.readString(inputStream0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.decrypt("", (String) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      ManifoldCF.readString(inputStream0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("z46");
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertEquals("z46", file0.getName());
      assertEquals("z46", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("o4/");
      assertEquals("o4", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("o4");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "s");
      assertTrue(boolean0);
      
      boolean boolean1 = file0.setWritable(true, true);
      assertTrue(boolean1);
      assertTrue(file0.canRead());
      assertEquals("o4", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(boolean1 == boolean0);
      
      ManifoldCF.recursiveDelete(file0);
      assertEquals("o4", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals("o4", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      try { 
        MessageDigest.getInstance("");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      String string1 = ManifoldCF.hash("");
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      File file0 = ManifoldCF.resolvePath("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isHidden());
      assertNull(file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      
      // Undeclared exception!
      try { 
        ManifoldCF.registerConnectorServices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "b";
      ManifoldCF.deleteFolder("b");
      MockPrintStream mockPrintStream0 = new MockPrintStream("b");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.writeBytes(mockPrintStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("o4");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      boolean boolean1 = mockFile0.setWritable(true, true);
      assertTrue(boolean1);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(boolean1 == boolean0);
      
      ManifoldCF.recursiveDelete(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      try { 
        MessageDigest.getInstance("W!{BcQQ8c>l/b*G&DG");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "";
      ManifoldCF.deleteFolder("");
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ManifoldCF.writeBytes(outputStream0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertNull(file0.getParent());
      assertEquals("", file0.getName());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("", file0.toString());
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertNull(file0.getParent());
      assertEquals("", file0.getName());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ManifoldCF.ensureFolder("6A-!F&/l|E");
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      String string0 = ")wbeq&BGj";
      try { 
        MessageDigest.getInstance("L", ")wbeq&BGj");
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Long long0 = new Long(1975L);
      assertEquals(1975L, (long)long0);
      assertNotNull(long0);
      
      try { 
        ManifoldCF.writeLong(pipedOutputStream0, long0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.createResourceLoader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ManifoldCF.resetEnvironment();
      String string0 = ManifoldCF.obfuscate((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = ManifoldCF.obfuscate("org.apache.manifoldcf.database.maxquerytime");
      assertNotNull(string0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-2555L));
      assertEquals((-2555L), (long)long0);
      assertNotNull(long0);
      
      ManifoldCF.writeLong(outputStream0, long0);
      // Undeclared exception!
      try { 
        ManifoldCF.createResourceLoader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      String string0 = ManifoldCF.getHashValue(messageDigest0);
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", string0);
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "true";
      String string1 = ManifoldCF.hash("true");
      assertEquals("5FFE533B830F08A0326348A9160AFAFC8ADA44DB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ManifoldCF.registerConnectorServices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      ManifoldCF.readLong(inputStream0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      ManifoldCF.readLong(inputStream0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        ManifoldCF.deobfuscate("0<jYOG?^=q&N02%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected end of base64 input
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        ManifoldCF.deobfuscate("org.apache.manifoldcf.database.maxhandles");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected end of base64 input
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getSaltValue(threadContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ManifoldCF.getMasterDatabasePassword();
      assertNull(string0);
      
      try { 
        ManifoldCF.hash((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Couldn't encrypt: null
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = ManifoldCF.hash("");
      assertEquals("DA39A3EE5E6B4B0D3255BFEF95601890AFD80709", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ManifoldCF.resetEnvironment();
      ManifoldCF.DatabaseShutdown manifoldCF_DatabaseShutdown0 = new ManifoldCF.DatabaseShutdown();
      assertNotNull(manifoldCF_DatabaseShutdown0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      // Undeclared exception!
      try { 
        manifoldCF_DatabaseShutdown0.doCleanup(threadContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ManifoldCF.DatabaseConnectionReleaseThread manifoldCF_DatabaseConnectionReleaseThread0 = new ManifoldCF.DatabaseConnectionReleaseThread();
      assertNotNull(manifoldCF_DatabaseConnectionReleaseThread0);
      
      ManifoldCF.DatabaseConnectionReleaseThread manifoldCF_DatabaseConnectionReleaseThread1 = new ManifoldCF.DatabaseConnectionReleaseThread();
      assertFalse(manifoldCF_DatabaseConnectionReleaseThread1.equals((Object)manifoldCF_DatabaseConnectionReleaseThread0));
      assertNotNull(manifoldCF_DatabaseConnectionReleaseThread1);
      
      byte[] byteArray0 = ManifoldCF.getSecureRandom();
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = null;
      try { 
        ManifoldCF.hash((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Couldn't encrypt: null
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ManifoldCFResourceLoader manifoldCFResourceLoader0 = ManifoldCF.resourceLoader;
      assertNull(manifoldCFResourceLoader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("@(#)$Id: ManifoldCFResourceLoader.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockPrintStream0);
      
      ManifoldCF.writeWord(mockPrintStream0, 984);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ThreadContext threadContext1 = new ThreadContext();
      assertFalse(threadContext1.equals((Object)threadContext0));
      assertNotNull(threadContext1);
      
      // Undeclared exception!
      try { 
        ManifoldCF.dropSystemDatabase(threadContext1, (String) null, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeWord(outputStream0, 1329);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      threadContext0.save(manifoldCF_FileTrack0, (Object) null);
      try { 
        ManifoldCF.initializeEnvironment((IThreadContext) threadContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Initialization failed: Could not read configuration file '/home/pedro/lcf/properties.xml'
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.resolvePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = ManifoldCF.getMasterDatabaseName();
      assertNull(string0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.resolvePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      try { 
        ManifoldCF.initializeEnvironment((IThreadContext) threadContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Initialization failed: Could not read configuration file '/home/pedro/lcf/properties.xml'
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      ManifoldCF.initializeEnvironment((IThreadContext) null);
      // Undeclared exception!
      try { 
        ManifoldCF.getDoubleProperty("", 309.04534);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.noteConfigurationChange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N})~;OMS%");
      assertFalse(boolean0);
      
      ManifoldCF.ensureFolder("");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        ManifoldCF.initializeEnvironment();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Initialization failed: Could not read configuration file '/home/pedro/lcf/properties.xml'
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      ManifoldCF.resetEnvironment();
      ManifoldCF.ensureFolder("Initialization failed: ");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ManifoldCF.ensureFolder("lcf");
      try { 
        ManifoldCF.initializeEnvironment();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Initialization failed: Could not read configuration file '/home/pedro/lcf/properties.xml'
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      // Undeclared exception!
      try { 
        manifoldCF_CachePoll0.doPoll(threadContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ManifoldCF.CachePoll manifoldCF_CachePoll0 = new ManifoldCF.CachePoll();
      assertNotNull(manifoldCF_CachePoll0);
      
      ManifoldCFConfiguration manifoldCFConfiguration0 = ManifoldCF.getConfiguration();
      assertNull(manifoldCFConfiguration0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ManifoldCF.cleanUpEnvironment();
      ManifoldCF.resetEnvironment();
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.pollAll(threadContext0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MessageDigest messageDigest0 = ManifoldCF.startHash();
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      assertNotNull(messageDigest0);
      
      int int0 = messageDigest0.getDigestLength();
      assertEquals(20, int0);
      assertEquals("SHA", messageDigest0.getAlgorithm());
      assertEquals("SHA Message Digest from SUN, <initialized>\n", messageDigest0.toString());
      
      // Undeclared exception!
      try { 
        messageDigest0.digest((byte[]) null, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No output buffer given
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getFileProperty("*@j<EuTU410 4*6C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.getFileProperty("n3+p<%Sc{J)*;`A9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ManifoldCF.OverrideableManifoldCFConfiguration manifoldCF_OverrideableManifoldCFConfiguration0 = new ManifoldCF.OverrideableManifoldCFConfiguration();
      assertEquals(0, manifoldCF_OverrideableManifoldCFConfiguration0.getChildCount());
      assertNotNull(manifoldCF_OverrideableManifoldCFConfiguration0);
      
      // Undeclared exception!
      try { 
        ManifoldCF.findClass("@(#)$Id: ManifoldCFConfiguration.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.findClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.registerConnectorServices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ManifoldCF.writeByte(outputStream0, 2037);
      ThreadContext threadContext0 = new ThreadContext();
      assertNotNull(threadContext0);
      
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      assertNotNull(manifoldCF_FileTrack0);
      
      manifoldCF_FileTrack0.finalize();
      threadContext0.save(manifoldCF_FileTrack0, manifoldCF_FileTrack0);
      // Undeclared exception!
      try { 
        ManifoldCF.dropSystemDatabase(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = ManifoldCF.encrypt("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ManifoldCF.getMasterDatabaseUsername();
      assertNull(string1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ManifoldCF.writeLong(byteArrayOutputStream0, (Long) null);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0001", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.encrypt("", "@4D|;L)U", "@4D|;L)U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the salt parameter must not be empty
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        ManifoldCF.writeDword(pipedOutputStream0, 986);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      ManifoldCF.writeBytes(outputStream0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)44, (byte) (-57), (byte)58, (byte) (-94), (byte)0, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "{\\W#a1";
      ManifoldCF.deleteFolder("{W#a1");
      // Undeclared exception!
      try { 
        ManifoldCF.getChildDatabaseName((IDBInterface) null, "{W#a1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      File file0 = ManifoldCF.resolvePath("o4/");
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals("o4", file0.getName());
      assertEquals("o4", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      ManifoldCF.recursiveDelete(file0);
      assertFalse(file0.isAbsolute());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals("o4", file0.getName());
      assertEquals("o4", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.readLong((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ManifoldCF.deleteFolder("nb](4<4");
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      ManifoldCF.readByte(inputStream0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-99), (byte)102}, byteArray0);
      
      try { 
        ManifoldCF.readLong(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected EOF
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.readSdword((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(446);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        ManifoldCF.readDword(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      // Undeclared exception!
      ManifoldCF.readDword(inputStream0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getProperty(" NOT NULL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      String string0 = "OFF";
      DBInterfacePostgreSQL dBInterfacePostgreSQL0 = null;
      try {
        dBInterfacePostgreSQL0 = new DBInterfacePostgreSQL(threadContext0, "", "OFF", "OFF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      System.setCurrentTimeMillis((-475L));
      ManifoldCF.encrypt("FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE t1, INFORMATION_SCHEMA.TABLE_CONSTRAINTS t2 ", "FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE t1, INFORMATION_SCHEMA.TABLE_CONSTRAINTS t2 ", (String) null);
      ManifoldCF.getMasterDatabaseUsername();
      // Undeclared exception!
      try { 
        ManifoldCF.checkMaintenanceUnderway();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = ManifoldCF.getMasterDatabaseUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      // Undeclared exception!
      try { 
        ManifoldCF.createSystemDatabase(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = ManifoldCF.getSecureRandom();
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      ThreadContext threadContext0 = new ThreadContext();
      manifoldCF_FileTrack0.doCleanup(threadContext0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      manifoldCF_FileTrack0.finalize();
      ManifoldCFConfiguration manifoldCFConfiguration0 = ManifoldCF.getConfiguration();
      assertNull(manifoldCFConfiguration0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      // Undeclared exception!
      try { 
        ManifoldCF.checkMaintenanceUnderway();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      // Undeclared exception!
      try { 
        ManifoldCF.dropSystemDatabase(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "Missing required SALT value";
      ManifoldCF.encrypt("org.apache.manifoldcf.authimplementationclass", "Missing required SALT value", "Missing required SALT value");
      ThreadContext threadContext0 = new ThreadContext();
      ManifoldCF.FileTrack manifoldCF_FileTrack0 = new ManifoldCF.FileTrack();
      Set<File> set0 = manifoldCF_FileTrack0.filesToDelete;
      manifoldCF_FileTrack0.filesToDelete = set0;
      manifoldCF_FileTrack0.finalize();
      threadContext0.save("org.apache.manifoldcf.authimplementationclass", manifoldCF_FileTrack0);
      threadContext0.save("org.apache.manifoldcf.authimplementationclass", "java.io.StringWriter@0000000002");
      // Undeclared exception!
      try { 
        ManifoldCF.createSystemDatabase(threadContext0, "Missing required SALT value", "org.apache.manifoldcf.authimplementationclass");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        ManifoldCF.getLongProperty("Q'T,?3>m7+Z}g%Rc", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ManifoldCF.getMasterDatabasePassword();
      ManifoldCF.resetEnvironment();
      String string0 = "";
      long long0 = (-362L);
      // Undeclared exception!
      try { 
        ManifoldCF.getLongProperty("", (-362L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }
}
