/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:00:40 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.manifoldcf.core.interfaces.BinaryInput;
import org.apache.manifoldcf.core.interfaces.TempFileInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryInput_ESTest extends BinaryInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.length = (-5291L);
      long long0 = tempFileInput0.getLength();
      assertEquals((-5291L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      tempFileInput0.stream = (InputStream) sequenceInputStream0;
      tempFileInput0.closeStream();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.discard();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      BinaryInput binaryInput0 = tempFileInput0.transfer();
      assertNotSame(tempFileInput0, binaryInput0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.length = 863L;
      long long0 = tempFileInput0.getLength();
      assertEquals(863L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      MockFile mockFile0 = new MockFile("@(#)$Id: BinaryInput.java 988245 2010-08-23 18:39:35Z kwright $", "");
      tempFileInput0.file = (File) mockFile0;
      try { 
        tempFileInput0.getStream();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't create stream: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.doneWithStream();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterruptedIOException interruptedIOException0 = new InterruptedIOException();
      try { 
        BinaryInput.handleIOException(interruptedIOException0, "@(#)$Id: TempFileInput.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryInput.handleIOException((IOException) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      tempFileInput0.stream = (InputStream) dataInputStream0;
      tempFileInput0.doneWithStream();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      long long0 = tempFileInput0.getLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.length = 0L;
      long long0 = tempFileInput0.getLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      InputStream inputStream0 = tempFileInput0.getStream();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 844);
      tempFileInput0.stream = (InputStream) pushbackInputStream0;
      InputStream inputStream0 = tempFileInput0.getStream();
      assertSame(inputStream0, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      // Undeclared exception!
      try { 
        tempFileInput0.closeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }
}
