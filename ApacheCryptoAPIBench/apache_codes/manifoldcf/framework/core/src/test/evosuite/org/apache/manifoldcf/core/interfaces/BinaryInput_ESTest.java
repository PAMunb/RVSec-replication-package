/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:47:22 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import org.apache.manifoldcf.core.interfaces.BinaryInput;
import org.apache.manifoldcf.core.interfaces.TempFileInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BinaryInput_ESTest extends BinaryInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(file0).length();
      tempFileInput0.file = file0;
      tempFileInput0.calculateLength();
      long long0 = tempFileInput0.getLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      tempFileInput0.stream = inputStream0;
      tempFileInput0.closeStream();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.discard();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      TempFileInput tempFileInput0 = new TempFileInput(inputStream0, 0L);
      BinaryInput binaryInput0 = tempFileInput0.transfer();
      assertFalse(binaryInput0.equals((Object)tempFileInput0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(file0).length();
      tempFileInput0.file = file0;
      long long0 = tempFileInput0.getLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((-1L), 159L).when(file0).length();
      tempFileInput0.file = file0;
      tempFileInput0.calculateLength();
      long long0 = tempFileInput0.getLength();
      assertEquals(159L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryInput.handleIOException((IOException) null, "@(#)$Id: BinaryInput.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      tempFileInput0.file = file0;
      // Undeclared exception!
      try { 
        tempFileInput0.getStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      tempFileInput0.file = file0;
      // Undeclared exception!
      try { 
        tempFileInput0.getStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      // Undeclared exception!
      try { 
        tempFileInput0.closeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.doneWithStream();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      tempFileInput0.stream = inputStream0;
      tempFileInput0.doneWithStream();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOException iOException0 = mock(IOException.class, new ViolatedAssumptionAnswer());
      doReturn("@(#)$Id$").when(iOException0).getMessage();
      try { 
        BinaryInput.handleIOException(iOException0, "@(#)$Id$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO exception while @(#)$Id$: @(#)$Id$
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      long long0 = tempFileInput0.getLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((-1765L)).when(file0).length();
      tempFileInput0.file = file0;
      tempFileInput0.calculateLength();
      long long0 = tempFileInput0.getLength();
      assertEquals((-1765L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      InputStream inputStream0 = tempFileInput0.getStream();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputStream0).toString();
      tempFileInput0.stream = inputStream0;
      InputStream inputStream1 = tempFileInput0.getStream();
      assertSame(inputStream1, inputStream0);
  }
}
