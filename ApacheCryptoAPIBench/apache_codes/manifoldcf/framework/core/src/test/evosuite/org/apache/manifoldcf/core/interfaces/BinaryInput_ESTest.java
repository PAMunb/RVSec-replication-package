/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:28:12 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import org.apache.manifoldcf.core.interfaces.BinaryInput;
import org.apache.manifoldcf.core.interfaces.TempFileInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryInput_ESTest extends BinaryInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      byte[] byteArray0 = new byte[4];
      tempFileInput0.inMemoryBuffer = byteArray0;
      tempFileInput0.openStream();
      tempFileInput0.closeStream();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      BinaryInput binaryInput0 = tempFileInput0.transfer();
      assertFalse(binaryInput0.equals((Object)tempFileInput0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      InputStream inputStream0 = tempFileInput0.getStream();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      byte[] byteArray0 = new byte[4];
      tempFileInput0.inMemoryBuffer = byteArray0;
      long long0 = tempFileInput0.getLength();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        BinaryInput.handleIOException((IOException) null, "3'=)X;BS~r=)tXu=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      MockFile mockFile0 = new MockFile("@(#)$Id: BinaryInput.java 988245 2010-08-23 18:39:35Z kwright $");
      tempFileInput0.file = (File) mockFile0;
      try { 
        tempFileInput0.getStream();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't create stream: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      MockFile mockFile0 = new MockFile((File) null, "INSTANCE");
      tempFileInput0.file = (File) mockFile0;
      // Undeclared exception!
      try { 
        tempFileInput0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      // Undeclared exception!
      try { 
        tempFileInput0.closeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.doneWithStream();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterruptedIOException interruptedIOException0 = new InterruptedIOException();
      try { 
        BinaryInput.handleIOException(interruptedIOException0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.BinaryInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      long long0 = tempFileInput0.getLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-910), (byte)0);
      TempFileInput tempFileInput0 = new TempFileInput(byteArrayInputStream0, 4262L);
      long long0 = tempFileInput0.getLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      byte[] byteArray0 = new byte[3];
      tempFileInput0.inMemoryBuffer = byteArray0;
      tempFileInput0.openStream();
      InputStream inputStream0 = tempFileInput0.getStream();
      assertEquals(3, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      byte[] byteArray0 = new byte[7];
      tempFileInput0.inMemoryBuffer = byteArray0;
      tempFileInput0.getStream();
      tempFileInput0.doneWithStream();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TempFileInput tempFileInput0 = new TempFileInput();
      tempFileInput0.discard();
  }
}
