/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:24:04 GMT 2022
 */

package org.apache.manifoldcf.core.lockmanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.lockmanager.LockGate;
import org.apache.manifoldcf.core.lockmanager.LockObject;
import org.apache.manifoldcf.core.lockmanager.LockObjectFactory;
import org.apache.manifoldcf.core.lockmanager.LockPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LockObject_ESTest extends LockObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, object0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool1, lockObjectFactory0);
      lockObject0.clearGlobalReadLock();
      LockGate lockGate0 = lockPool1.getObject(lockObject0);
      lockObject0.enterWriteLock();
      lockObject0.obtainGlobalWriteLockNoWait();
      Object object1 = new Object();
      lockPool1.releaseObject(object1, lockGate0);
      lockObject0.obtainGlobalWriteLockNoWait();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockGate lockGate0 = lockPool0.getObject((Object) null);
      LockGate lockGate1 = lockPool0.getObject(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockGate0);
      lockObject0.clearGlobalWriteLock();
      lockPool0.releaseObject(object0, lockGate1);
      Object object1 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, lockObject0);
      lockPool0.getObject(object1);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.enterReadLock();
      lockObject1.enterReadLockNoWait();
      lockObject1.obtainGlobalNonExWriteLock();
      LockObject lockObject2 = lockObjectFactory0.newLockObject(lockPool0, "");
      lockObject1.leaveReadLock();
      lockObject2.obtainGlobalNonExWriteLock();
      lockObject1.enterReadLock();
      lockObject1.leaveReadLock();
      lockObject1.clearGlobalWriteLock();
      lockObject1.clearGlobalWriteLock();
      lockObject0.obtainGlobalReadLockNoWait();
      lockObject1.obtainGlobalNonExWriteLock();
      lockObject1.obtainGlobalNonExWriteLockNoWait();
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000007
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockPool0.getObject(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = new LockObject(lockPool0, object0);
      lockObject0.obtainGlobalWriteLock();
      lockObject0.makeInvalid();
      try { 
        lockObject0.leaveNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.enterWriteLock();
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject1 = new LockObject(lockPool1, lockObjectFactory0);
      lockObject1.clearGlobalReadLockNoWait();
      lockObject1.enterNonExWriteLock();
      lockObject1.enterNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockGate lockGate0 = lockPool1.getObject(object0);
      Object object1 = new Object();
      LockObject lockObject0 = new LockObject(lockPool1, object1);
      lockObject0.obtainGlobalWriteLock();
      lockObject0.clearGlobalNonExWriteLock();
      lockObject0.obtainGlobalNonExWriteLockNoWait();
      Object object2 = new Object();
      lockPool1.releaseObject(object2, lockGate0);
      lockObject0.enterReadLock();
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      lockObject0.enterNonExWriteLock();
      lockObject0.enterNonExWriteLock();
      Object object1 = new Object();
      lockPool0.getObject(object1);
      LockObject lockObject1 = new LockObject(lockPool0, (Object) null);
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      Long long0 = new Long(1L);
      Long.compare(1L, 1L);
      lockGate0.enterWriteLockNoWait(long0);
      lockPool0.releaseObject((Object) null, lockGate0);
      lockObject1.obtainGlobalReadLockNoWait();
      lockObject1.enterReadLock();
      try { 
        lockObject1.enterWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, ">2jR e@");
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.enterNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockPool0.getObject("");
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      Object object0 = new Object();
      Object object1 = new Object();
      lockPool0.getObject(object1);
      lockPool0.getObject(object0);
      lockObject0.enterReadLockNoWait();
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.clearGlobalReadLock();
      lockObject1.obtainGlobalReadLockNoWait();
      lockObject1.clearGlobalReadLock();
      lockObject0.obtainGlobalNonExWriteLock();
      lockObject0.clearGlobalWriteLockNoWait();
      lockObject0.makeInvalid();
      lockObject1.makeInvalid();
      try { 
        lockObject1.enterNonExWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.enterWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, (Object) null);
      Object object0 = new Object();
      LockGate lockGate0 = new LockGate(lockPool0, lockObject0, lockPool0);
      Long long0 = new Long(0L);
      lockGate0.enterWriteLock(long0);
      lockGate0.makeInvalid();
      lockPool0.releaseObject(object0, lockGate0);
      lockObject0.clearGlobalReadLock();
      try { 
        lockObject0.enterReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      Long long0 = new Long(15000L);
      lockGate0.enterWriteLock(long0);
      lockPool0.releaseObject(lockObjectFactory0, lockGate0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, "@(#)$Id: LockPool.java 988245 2010-08-23 18:39:35Z kwright $");
      lockObject0.obtainGlobalReadLockNoWait();
      lockObjectFactory0.newLockObject(lockPool0, long0);
      lockObject0.clearGlobalWriteLockNoWait();
      lockObject0.clearGlobalWriteLock();
      lockObject0.makeInvalid();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.obtainGlobalWriteLock();
      LockObject lockObject1 = lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      lockPool0.releaseObject(lockObject1, lockGate0);
      try { 
        lockObject1.leaveWriteLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LockObject lockObject0 = new LockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LockPool lockPool0 = new LockPool((LockObjectFactory) null);
      LockObject lockObject0 = new LockObject(lockPool0, "");
      lockObject0.enterWriteLock();
      lockObject0.leaveWriteLock();
      lockObject0.obtainGlobalReadLockNoWait();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      lockObject0.clearGlobalWriteLock();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockObjectFactory lockObjectFactory1 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory1);
      lockObjectFactory0.newLockObject(lockPool0, lockObjectFactory1);
      LockPool lockPool1 = new LockPool((LockObjectFactory) null);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool1, (Object) null);
      lockObject0.enterNonExWriteLockNoWait();
      lockObject0.leaveNonExWriteLock();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lockPool0.releaseObject(object0, (LockGate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.obtainGlobalWriteLockNoWait();
      lockObject0.obtainGlobalReadLock();
      lockObjectFactory0.newLockObject(lockPool0, "yKB");
      Object object0 = new Object();
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, object0);
      lockObject0.enterReadLockNoWait();
      lockObject0.enterReadLock();
      lockObject0.clearGlobalReadLock();
      // Undeclared exception!
      try { 
        lockObject1.leaveNonExWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000005
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, (Object) null);
      // Undeclared exception!
      try { 
        lockObject0.leaveNonExWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000003
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, "TW24PM~%#fH^qp/J");
      lockObject0.clearGlobalNonExWriteLock();
      lockObject0.enterWriteLockNoWait();
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.enterWriteLock();
      try { 
        lockObject0.enterNonExWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      lockPool1.getObject(object0);
      Object object1 = new Object();
      LockObject lockObject1 = new LockObject(lockPool1, object1);
      lockObject1.obtainGlobalReadLock();
      lockObject1.obtainGlobalReadLockNoWait();
      lockObject0.enterReadLock();
      lockObject0.obtainGlobalReadLock();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      LockObject lockObject0 = lockObjectFactory0.newLockObject((LockPool) null, (Object) null);
      try { 
        lockObject0.enterReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object0);
      Object object1 = new Object();
      lockPool0.getObject(object1);
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.enterNonExWriteLockNoWait();
      lockObject1.clearGlobalReadLockNoWait();
      lockObject0.obtainGlobalWriteLock();
      lockObject0.obtainGlobalReadLock();
      lockObject0.clearGlobalReadLock();
      lockObject0.obtainGlobalWriteLock();
      // Undeclared exception!
      try { 
        lockObject1.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000006
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, (Object) null);
      lockObject0.makeInvalid();
      lockObject0.obtainGlobalReadLockNoWait();
      LockObject lockObject1 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject1.enterWriteLockNoWait();
      lockObject0.obtainGlobalReadLock();
      try { 
        lockObject0.leaveReadLock();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, lockPool0);
      lockObject0.makeInvalid();
      try { 
        lockObject0.enterWriteLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.clearGlobalReadLock();
      lockObject0.clearGlobalNonExWriteLock();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockPool0.getObject(")[M~dGe@w3S_'");
      LockObject lockObject0 = new LockObject(lockPool0, (Object) null);
      lockObject0.clearGlobalNonExWriteLockNoWait();
      lockObject0.clearGlobalNonExWriteLockNoWait();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LockPool lockPool0 = new LockPool((LockObjectFactory) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lockPool0.getObject(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockGate lockGate0 = lockPool0.getObject(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, "@(#)$Id$");
      Long long0 = new Long(0L);
      Long.max(0L, 0L);
      lockGate0.freePermission(long0);
      lockObject0.obtainGlobalReadLock();
      Long long1 = new Long((-2894L));
      lockGate0.enterReadLock(long1);
      lockObject0.obtainGlobalNonExWriteLockNoWait();
      lockObject0.clearGlobalNonExWriteLockNoWait();
      lockObjectFactory0.newLockObject(lockPool0, lockObject0);
      lockPool0.releaseObject(lockGate0, lockGate0);
      lockObject0.enterNonExWriteLock();
      lockObject0.obtainGlobalWriteLock();
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000005
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      Object object0 = new Object();
      lockPool0.getObject(object0);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool1, lockPool1);
      // Undeclared exception!
      try { 
        lockObject0.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000007
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      LockObject lockObject0 = new LockObject(lockPool0, "Locked by another JVM");
      lockObject0.enterNonExWriteLock();
      lockPool0.getObject("Locked by another JVM");
      lockObject0.obtainGlobalNonExWriteLock();
      lockObject0.clearGlobalNonExWriteLockNoWait();
      lockPool0.getObject("@(#)$Id: LockPool.java 988245 2010-08-23 18:39:35Z kwright $");
      lockObjectFactory0.newLockObject(lockPool0, "Locked by another JVM");
      lockObject0.clearGlobalNonExWriteLock();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      LockGate lockGate0 = lockPool0.getObject(object1);
      lockPool0.releaseObject(object0, lockGate0);
      Object object2 = new Object();
      LockGate lockGate1 = lockPool0.getObject("u%xushp@");
      // Undeclared exception!
      try { 
        lockGate1.leaveWriteLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM failure: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000005
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, object1);
      lockObject0.enterWriteLock();
      LockObject lockObject1 = new LockObject(lockPool0, object0);
      // Undeclared exception!
      try { 
        lockObject1.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000004
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      LockGate lockGate0 = lockPool0.getObject(object0);
      Object object1 = new Object();
      lockPool0.releaseObject(object1, lockGate0);
      Object object2 = new Object();
      lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObjectFactory0.newLockObject(lockPool0, object2);
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool1, lockPool1);
      lockObject0.enterNonExWriteLockNoWait();
      try { 
        lockObject0.enterReadLockNoWait();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Locked by another thread in this JVM
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      LockObject lockObject0 = new LockObject(lockPool0, ">eyU");
      Object object0 = new Object();
      LockGate lockGate0 = lockPool0.getObject(object0);
      lockPool0.releaseObject(">eyU", lockGate0);
      lockObject0.obtainGlobalNonExWriteLockNoWait();
      lockObject0.obtainGlobalReadLock();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LockObjectFactory lockObjectFactory0 = new LockObjectFactory();
      LockPool lockPool0 = new LockPool(lockObjectFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      LockGate lockGate0 = lockPool0.getObject(object1);
      lockPool0.getObject("org.apache.manifoldcf.connectorcommon.system.ManifoldCF");
      lockPool0.releaseObject(lockObjectFactory0, lockGate0);
      LockObject lockObject0 = lockObjectFactory0.newLockObject(lockPool0, lockPool0);
      lockObject0.enterNonExWriteLockNoWait();
      LockObject lockObject1 = new LockObject(lockPool0, object0);
      Object object2 = new Object();
      LockPool lockPool1 = new LockPool(lockObjectFactory0);
      Object object3 = new Object();
      LockGate lockGate1 = lockPool1.getObject(object3);
      Long long0 = new Long(2360L);
      lockGate1.enterNonExWriteLock(long0);
      lockPool0.releaseObject(object2, lockGate1);
      // Undeclared exception!
      try { 
        lockObject1.leaveReadLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JVM error: Don't hold lock for object org.apache.manifoldcf.core.lockmanager.LockObject@0000000008
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.LockObject", e);
      }
  }
}
