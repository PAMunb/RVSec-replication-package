/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:23:13 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.apache.manifoldcf.core.interfaces.ConfigurationNode;
import org.apache.manifoldcf.core.interfaces.IHierarchyParent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurationNode_ESTest extends ConfigurationNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.setAttribute("", "");
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.setValue("");
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode("");
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode1, configurationNode0);
      
      boolean boolean0 = configurationNode1.equals(configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertFalse(boolean0);
      
      String string0 = null;
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode1, configurationNode0);
      
      // Undeclared exception!
      try { 
        ConfigurationNode.cloneAttributes((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode1);
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode1);
      assertNotNull(configurationNode2);
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      
      configurationNode2.value = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(configurationNode0));
      
      boolean boolean0 = arrayList0.add(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertTrue(boolean0);
      
      configurationNode2.children = (List<ConfigurationNode>) arrayList0;
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertEquals(1, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(configurationNode2.children.isEmpty());
      assertEquals(1, configurationNode2.children.size());
      
      ConfigurationNode configurationNode3 = configurationNode0.createNewNode(configurationNode2);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertEquals(1, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getType());
      assertEquals(1, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) vector0;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      configurationNode0.addChild(0, configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(1, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      
      // Undeclared exception!
      try { 
        configurationNode0.removeChild((-593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -593
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.setAttribute("", "=\u0005>\"l7XP?A");
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode("V'??lWSXUdL/cM`i");
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode1);
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("V'??lWSXUdL/cM`i", configurationNode2.getType());
      
      configurationNode2.addChild(0, configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("V'??lWSXUdL/cM`i", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      configurationNode1.attributes = map0;
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(configurationNode1.attributes.isEmpty());
      assertEquals(28, configurationNode1.attributes.size());
      
      int int0 = configurationNode2.getAttributeCount();
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("V'??lWSXUdL/cM`i", configurationNode2.getType());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertEquals(0, int0);
      
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      int int1 = configurationNode2.hashCode();
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(int1 == int0);
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("V'??lWSXUdL/cM`i", configurationNode2.getType());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      int int2 = configurationNode2.getChildCount();
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(int2 == int0);
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("V'??lWSXUdL/cM`i", configurationNode2.getType());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertEquals(1, int2);
      
      int int3 = configurationNode1.hashCode();
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals("V'??lWSXUdL/cM`i", configurationNode1.getType());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, linkedList0.size());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      boolean boolean0 = configurationNode0.equals("");
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertFalse(boolean0);
      
      configurationNode0.clearChildren();
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      
      linkedList0.push(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        configurationNode0.createDuplicate(boolean1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, linkedList0.size());
      assertEquals(0, configurationNode0.children.size());
      assertTrue(configurationNode0.children.isEmpty());
      
      boolean boolean0 = linkedList0.offerFirst(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = configurationNode0.equals("");
      assertFalse(boolean1 == boolean0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertFalse(boolean1);
      
      configurationNode0.clearChildren();
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      linkedList0.push(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(1, linkedList0.size());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      configurationNode0.attributes = map0;
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(28, configurationNode0.getAttributeCount());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, configurationNode0.attributes.size());
      assertFalse(configurationNode0.attributes.isEmpty());
      
      // Undeclared exception!
      configurationNode0.createDuplicate(false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("Yq");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Yq", configurationNode1.getType());
      
      boolean boolean0 = false;
      ConfigurationNode configurationNode2 = configurationNode0.createDuplicate(false);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("Yq", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      configurationNode0.attributes = map0;
      assertEquals(28, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, configurationNode0.attributes.size());
      assertFalse(configurationNode0.attributes.isEmpty());
      
      String string0 = configurationNode1.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertNotNull(string0);
      assertEquals(28, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Yq", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("(Yq [])", string0);
      
      ConfigurationNode configurationNode3 = configurationNode1.createDuplicate(false);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(28, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Yq", configurationNode1.getType());
      assertNull(configurationNode3.getValue());
      assertEquals("Yq", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      
      configurationNode1.value = "";
      assertEquals(28, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("Yq", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Yq", configurationNode1.getType());
      
      // Undeclared exception!
      try { 
        configurationNode0.setAttribute("", "org.apache.commons.io.IOCase");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      int int0 = 2;
      configurationNode0.removeChild(2);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode2 = configurationNode1.createDuplicate(false);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode2.type = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      
      ConfigurationNode configurationNode3 = configurationNode1.createDuplicate(false);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertNotNull(configurationNode3);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      
      int int1 = configurationNode1.getChildCount();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertFalse(int1 == int0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertEquals(0, int1);
      
      Iterator<String> iterator0 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(iterator0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      
      ConfigurationNode configurationNode4 = configurationNode1.createNewNode();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode4);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      
      configurationNode4.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      
      ConfigurationNode configurationNode5 = configurationNode3.createDuplicate(true);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode4));
      assertTrue(configurationNode5.equals((Object)configurationNode1));
      assertTrue(configurationNode5.equals((Object)configurationNode0));
      assertFalse(configurationNode5.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode3));
      assertNotNull(configurationNode5);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode5.getChildCount());
      assertEquals(0, configurationNode5.getAttributeCount());
      assertNull(configurationNode5.getValue());
      assertEquals("", configurationNode5.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode5);
      assertNotSame(configurationNode5, configurationNode0);
      assertNotSame(configurationNode5, configurationNode3);
      assertNotSame(configurationNode5, configurationNode2);
      assertNotSame(configurationNode5, configurationNode1);
      assertNotSame(configurationNode5, configurationNode4);
      
      Iterator<String> iterator1 = configurationNode5.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode5));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode5));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode4));
      assertTrue(configurationNode5.equals((Object)configurationNode1));
      assertTrue(configurationNode5.equals((Object)configurationNode0));
      assertFalse(configurationNode5.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode3));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode5.getChildCount());
      assertEquals(0, configurationNode5.getAttributeCount());
      assertNull(configurationNode5.getValue());
      assertEquals("", configurationNode5.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode5);
      assertNotSame(configurationNode5, configurationNode0);
      assertNotSame(configurationNode5, configurationNode3);
      assertNotSame(configurationNode5, configurationNode2);
      assertNotSame(configurationNode5, configurationNode1);
      assertNotSame(configurationNode5, configurationNode4);
      assertNotSame(iterator1, iterator0);
      
      configurationNode2.readOnly = false;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      
      String string0 = configurationNode5.toString();
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode5));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode5));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode4));
      assertTrue(configurationNode5.equals((Object)configurationNode1));
      assertTrue(configurationNode5.equals((Object)configurationNode0));
      assertFalse(configurationNode5.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode3));
      assertNotNull(string0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode5.getChildCount());
      assertEquals(0, configurationNode5.getAttributeCount());
      assertNull(configurationNode5.getValue());
      assertEquals("", configurationNode5.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode5);
      assertNotSame(configurationNode5, configurationNode0);
      assertNotSame(configurationNode5, configurationNode3);
      assertNotSame(configurationNode5, configurationNode2);
      assertNotSame(configurationNode5, configurationNode1);
      assertNotSame(configurationNode5, configurationNode4);
      assertEquals("( [])", string0);
      
      ConfigurationNode configurationNode6 = configurationNode2.createNewNode();
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode5));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode5));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertFalse(configurationNode6.equals((Object)configurationNode0));
      assertFalse(configurationNode6.equals((Object)configurationNode1));
      assertFalse(configurationNode6.equals((Object)configurationNode4));
      assertFalse(configurationNode6.equals((Object)configurationNode5));
      assertFalse(configurationNode6.equals((Object)configurationNode3));
      assertTrue(configurationNode6.equals((Object)configurationNode2));
      assertNotNull(configurationNode6);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals(0, configurationNode6.getAttributeCount());
      assertEquals(0, configurationNode6.getChildCount());
      assertNull(configurationNode6.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode6.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode6);
      assertNotSame(configurationNode1, configurationNode6);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode5);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode6);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode6, configurationNode0);
      assertNotSame(configurationNode6, configurationNode1);
      assertNotSame(configurationNode6, configurationNode4);
      assertNotSame(configurationNode6, configurationNode2);
      assertNotSame(configurationNode6, configurationNode5);
      assertNotSame(configurationNode6, configurationNode3);
      
      ConfigurationNode configurationNode7 = configurationNode4.createNewNode(configurationNode0);
      assertFalse(configurationNode7.equals((Object)configurationNode6));
      assertTrue(configurationNode7.equals((Object)configurationNode0));
      assertFalse(configurationNode7.equals((Object)configurationNode2));
      assertTrue(configurationNode7.equals((Object)configurationNode4));
      assertTrue(configurationNode7.equals((Object)configurationNode1));
      assertTrue(configurationNode7.equals((Object)configurationNode3));
      assertTrue(configurationNode7.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode6));
      assertTrue(configurationNode1.equals((Object)configurationNode5));
      assertFalse(configurationNode1.equals((Object)configurationNode6));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode5));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode6));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode7);
      assertNull(configurationNode7.getValue());
      assertEquals(0, configurationNode7.getChildCount());
      assertEquals(0, configurationNode7.getAttributeCount());
      assertEquals("", configurationNode7.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode7, configurationNode0);
      assertNotSame(configurationNode7, configurationNode6);
      assertNotSame(configurationNode7, configurationNode4);
      assertNotSame(configurationNode7, configurationNode1);
      assertNotSame(configurationNode7, configurationNode5);
      assertNotSame(configurationNode7, configurationNode2);
      assertNotSame(configurationNode7, configurationNode3);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode7);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode6);
      assertNotSame(configurationNode1, configurationNode6);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode7);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode6);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode5);
      assertNotSame(configurationNode4, configurationNode7);
      
      configurationNode7.addChild(0, configurationNode3);
      assertFalse(configurationNode7.equals((Object)configurationNode0));
      assertFalse(configurationNode7.equals((Object)configurationNode6));
      assertFalse(configurationNode7.equals((Object)configurationNode4));
      assertFalse(configurationNode7.equals((Object)configurationNode1));
      assertFalse(configurationNode7.equals((Object)configurationNode5));
      assertFalse(configurationNode7.equals((Object)configurationNode2));
      assertFalse(configurationNode7.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode7));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode6));
      assertTrue(configurationNode1.equals((Object)configurationNode5));
      assertFalse(configurationNode1.equals((Object)configurationNode6));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode7));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode7));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode5));
      assertFalse(configurationNode3.equals((Object)configurationNode6));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode5));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode6));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode7));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNull(configurationNode7.getValue());
      assertEquals(1, configurationNode7.getChildCount());
      assertEquals(0, configurationNode7.getAttributeCount());
      assertEquals("", configurationNode7.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode7, configurationNode0);
      assertNotSame(configurationNode7, configurationNode6);
      assertNotSame(configurationNode7, configurationNode4);
      assertNotSame(configurationNode7, configurationNode1);
      assertNotSame(configurationNode7, configurationNode5);
      assertNotSame(configurationNode7, configurationNode2);
      assertNotSame(configurationNode7, configurationNode3);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode7);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode6);
      assertNotSame(configurationNode1, configurationNode6);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode7);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode3, configurationNode7);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode6);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode5);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode6);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode5);
      assertNotSame(configurationNode4, configurationNode7);
      
      boolean boolean0 = configurationNode7.equals(configurationNode2);
      assertFalse(configurationNode7.equals((Object)configurationNode0));
      assertFalse(configurationNode7.equals((Object)configurationNode6));
      assertFalse(configurationNode7.equals((Object)configurationNode4));
      assertFalse(configurationNode7.equals((Object)configurationNode1));
      assertFalse(configurationNode7.equals((Object)configurationNode5));
      assertFalse(configurationNode7.equals((Object)configurationNode2));
      assertFalse(configurationNode7.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode7));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode6));
      assertTrue(configurationNode1.equals((Object)configurationNode5));
      assertFalse(configurationNode1.equals((Object)configurationNode6));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode7));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode7));
      assertTrue(configurationNode2.equals((Object)configurationNode6));
      assertFalse(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode5));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode4.equals((Object)configurationNode5));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode6));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode7));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNull(configurationNode7.getValue());
      assertEquals(1, configurationNode7.getChildCount());
      assertEquals(0, configurationNode7.getAttributeCount());
      assertEquals("", configurationNode7.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode7, configurationNode0);
      assertNotSame(configurationNode7, configurationNode6);
      assertNotSame(configurationNode7, configurationNode4);
      assertNotSame(configurationNode7, configurationNode1);
      assertNotSame(configurationNode7, configurationNode5);
      assertNotSame(configurationNode7, configurationNode2);
      assertNotSame(configurationNode7, configurationNode3);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode7);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode6);
      assertNotSame(configurationNode1, configurationNode6);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode7);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode7);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode5);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode6);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode6);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode5);
      assertNotSame(configurationNode4, configurationNode7);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2, 2959.6057F);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, String> map0 = ConfigurationNode.cloneAttributes(hashMap0);
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Iterator<String> iterator2 = configurationNode0.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode5));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode7));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode6));
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      assertNotNull(iterator2);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode7);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode6);
      assertNotSame(iterator2, iterator1);
      assertNotSame(iterator2, iterator0);
      
      // Undeclared exception!
      try { 
        configurationNode5.setAttribute("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", "='");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "DW:4EIQ72,R|xJpD!";
      ConfigurationNode configurationNode0 = new ConfigurationNode("DW:4EIQ72,R|xJpD!");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      configurationNode0.setValue("KHoR.:");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals("KHoR.:", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode2 = configurationNode1.createDuplicate(true);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals("KHoR.:", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode1.value = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      assertEquals("KHoR.:", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      configurationNode1.setValue("java.version");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals("KHoR.:", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("java.version", configurationNode1.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      boolean boolean0 = configurationNode1.equals(configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals("KHoR.:", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("java.version", configurationNode1.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertFalse(boolean0);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals("KHoR.:", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("java.version", configurationNode1.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      // Undeclared exception!
      try { 
        configurationNode1.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      int int0 = (-593);
      ConfigurationNode configurationNode1 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode1);
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode1);
      assertNotNull(configurationNode2);
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      
      ConfigurationNode configurationNode3 = new ConfigurationNode("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getValue());
      
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(configurationNode2));
      
      configurationNode0.children = (List<ConfigurationNode>) vector0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      assertTrue(configurationNode0.children.isEmpty());
      
      ConfigurationNode configurationNode4 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode4);
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getType());
      assertEquals(0, configurationNode4.getChildCount());
      
      // Undeclared exception!
      try { 
        configurationNode0.addChild((-7), configurationNode4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "DW:4EIQ72,R|xJpD!";
      ConfigurationNode configurationNode0 = new ConfigurationNode("DW:4EIQ72,R|xJpD!");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(true);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.setValue("java.version");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("java.version", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      boolean boolean0 = configurationNode0.equals(configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("java.version", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertTrue(boolean0);
      
      configurationNode0.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("java.version", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("DW:4EIQ72,R|xJpD!", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      // Undeclared exception!
      try { 
        configurationNode0.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      int int0 = 1020;
      boolean boolean0 = configurationNode0.equals((Object) null);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertFalse(boolean0);
      
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(configurationNode0));
      
      vector0.setSize(1020);
      assertFalse(vector0.isEmpty());
      assertEquals(1020, vector0.size());
      assertEquals(1020, vector0.capacity());
      assertFalse(vector0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) vector0;
      assertEquals(1020, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertFalse(vector0.isEmpty());
      assertEquals(1020, vector0.size());
      assertEquals(1020, vector0.capacity());
      assertEquals(1020, configurationNode0.children.size());
      assertFalse(configurationNode0.children.isEmpty());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode((String) null);
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      
      configurationNode0.addChild(0, configurationNode1);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(1021, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.removeChild(1020);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(1020, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      boolean boolean1 = vector0.add(configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1021, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertFalse(vector0.isEmpty());
      assertEquals(1021, vector0.size());
      assertEquals(2040, vector0.capacity());
      assertNotSame(configurationNode0, configurationNode1);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        configurationNode0.makeReadOnly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("fv5$bvg");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      configurationNode0.hashCode();
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      Map<String, String> map0 = ConfigurationNode.cloneAttributes(hashMap0);
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, linkedList0.size());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
      
      int int0 = configurationNode0.getChildCount();
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, int0);
      
      Iterator<String> iterator1 = configurationNode0.getAttributes();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(iterator1, iterator0);
      
      String string0 = configurationNode0.toString();
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("(fv5$bvg [])", string0);
      
      int int1 = configurationNode0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("fv5$bvg", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.attributes = null;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      configurationNode0.setValue("");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      String string0 = configurationNode0.getAttributeValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(configurationNode0));
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("");
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      
      boolean boolean0 = arrayList0.add(configurationNode2);
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(configurationNode2));
      assertFalse(arrayList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(configurationNode0.children.isEmpty());
      assertEquals(1, configurationNode0.children.size());
      
      configurationNode1.setValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      configurationNode0.clearChildren();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      String string1 = configurationNode0.getValue();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertNotNull(string1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertEquals("", string1);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      configurationNode2.hashCode();
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode1.removeChild(0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      int int0 = configurationNode1.getChildCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertEquals(0, int0);
      
      ConfigurationNode configurationNode3 = new ConfigurationNode(configurationNode1);
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("", configurationNode3.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      
      boolean boolean1 = configurationNode2.equals(configurationNode3);
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(boolean1 == boolean0);
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("", configurationNode3.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertFalse(boolean1);
      
      String string2 = configurationNode1.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertEquals("(:@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $ [])", string2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(false);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.setValue("");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.addChild(0, configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode1.getValue());
      assertEquals(1, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      
      configurationNode2.value = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      
      configurationNode1.addChild(0, configurationNode2);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(2, configurationNode1.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode0.setValue("aq8D<;l");
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("aq8D<;l", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode3 = new ConfigurationNode(configurationNode2);
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      
      String string0 = configurationNode1.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("aq8D<;l", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(2, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("(: [(@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $:@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $ []), (:aq8D<;l [])])", string0);
      
      ConfigurationNode configurationNode4 = configurationNode1.createNewNode(configurationNode3);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode4);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("aq8D<;l", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(2, configurationNode1.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode4.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode3.children = (List<ConfigurationNode>) linkedList0;
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, linkedList0.size());
      assertTrue(configurationNode3.children.isEmpty());
      assertEquals(0, configurationNode3.children.size());
      
      configurationNode3.readOnly = true;
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      
      Iterator<String> iterator0 = configurationNode2.getAttributes();
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode4));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      
      ConfigurationNode configurationNode5 = configurationNode4.createNewNode();
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode5.equals((Object)configurationNode2));
      assertFalse(configurationNode5.equals((Object)configurationNode4));
      assertFalse(configurationNode5.equals((Object)configurationNode1));
      assertFalse(configurationNode5.equals((Object)configurationNode0));
      assertFalse(configurationNode5.equals((Object)configurationNode3));
      assertNotNull(configurationNode5);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("aq8D<;l", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(2, configurationNode1.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode2.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode4.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNull(configurationNode5.getValue());
      assertEquals(0, configurationNode5.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode5.getType());
      assertEquals(0, configurationNode5.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode5);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode5);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode5);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode5, configurationNode2);
      assertNotSame(configurationNode5, configurationNode4);
      assertNotSame(configurationNode5, configurationNode1);
      assertNotSame(configurationNode5, configurationNode0);
      assertNotSame(configurationNode5, configurationNode3);
      
      // Undeclared exception!
      try { 
        linkedList0.set(0, configurationNode1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("?]NA9B");
      assertNotNull(configurationNode0);
      assertEquals("?]NA9B", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.makeReadOnly();
      assertEquals("?]NA9B", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(configurationNode0));
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals("?]NA9B", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      assertEquals("?]NA9B", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      
      boolean boolean0 = arrayList0.add(configurationNode1);
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode1, configurationNode0);
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(configurationNode0));
      
      boolean boolean1 = configurationNode0.equals("?]NA9B");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("?]NA9B", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertFalse(boolean1);
      
      configurationNode0.type = "com.google.common.collect.AbstractMultimap";
      assertEquals("com.google.common.collect.AbstractMultimap", configurationNode0.getType());
      assertEquals(1, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      String string0 = configurationNode0.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(string0);
      assertEquals("com.google.common.collect.AbstractMultimap", configurationNode0.getType());
      assertEquals(1, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals("(com.google.common.collect.AbstractMultimap [(null [])])", string0);
      
      // Undeclared exception!
      try { 
        configurationNode0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode(" ");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(" ", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode1.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("");
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      
      boolean boolean0 = configurationNode1.equals(configurationNode2);
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNull(configurationNode1.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertFalse(boolean0);
      
      String string0 = configurationNode0.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(" ", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertEquals("(  [])", string0);
      
      configurationNode0.readOnly = false;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(" ", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      // Undeclared exception!
      try { 
        configurationNode0.addChild(1679, configurationNode1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1679, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.attributes = null;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode1.children = (List<ConfigurationNode>) linkedList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, linkedList0.size());
      assertTrue(configurationNode1.children.isEmpty());
      assertEquals(0, configurationNode1.children.size());
      
      configurationNode0.setValue("");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      String string0 = configurationNode0.getAttributeValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(configurationNode0));
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("");
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("", configurationNode2.getType());
      
      boolean boolean0 = arrayList0.add(configurationNode2);
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(configurationNode1));
      assertFalse(arrayList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(configurationNode0.children.isEmpty());
      assertEquals(1, configurationNode0.children.size());
      
      configurationNode1.setValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      configurationNode0.clearChildren();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      String string1 = configurationNode0.getValue();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertNotNull(string1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertEquals("", string1);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      // Undeclared exception!
      try { 
        configurationNode1.removeChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("HOSTNAME");
      assertNotNull(configurationNode0);
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("HOSTNAME", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      ConfigurationNode configurationNode2 = configurationNode1.createDuplicate(false);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("HOSTNAME", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals("HOSTNAME", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode0.setAttribute("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", "HOSTNAME");
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      
      int int0 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("HOSTNAME", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int0);
      
      ConfigurationNode configurationNode3 = configurationNode0.createNewNode();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertNotNull(configurationNode3);
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("HOSTNAME", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      
      configurationNode3.setValue("");
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("HOSTNAME", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      
      boolean boolean0 = configurationNode0.equals(configurationNode3);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("HOSTNAME", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertFalse(boolean0);
      
      ConfigurationNode configurationNode4 = configurationNode0.createNewNode();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode4);
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("HOSTNAME", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals("HOSTNAME", configurationNode4.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("='");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("='", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("~E`a}8@;");
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals("~E`a}8@;", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      
      Iterator<String> iterator0 = configurationNode2.getAttributes();
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(iterator0);
      assertEquals("~E`a}8@;", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode0.addChild(0, configurationNode2);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      assertEquals("~E`a}8@;", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode1.value = "='";
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      assertEquals("='", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("='", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      
      configurationNode1.setAttribute("H#EB4o1g|e7|qCyK-]", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("='", configurationNode1.getValue());
      assertEquals("='", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      // Undeclared exception!
      try { 
        configurationNode0.findChild((-543));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.attributes = null;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      
      configurationNode0.setValue("");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      String string0 = configurationNode0.getAttributeValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(configurationNode1));
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("");
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      
      boolean boolean0 = arrayList0.add(configurationNode2);
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(configurationNode0));
      assertTrue(arrayList0.contains(configurationNode1));
      
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(configurationNode0.children.isEmpty());
      assertEquals(1, configurationNode0.children.size());
      
      configurationNode1.setValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.clearChildren();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      
      String string1 = configurationNode0.getValue();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(string1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals("", string1);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.removeChild(0);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      int int0 = configurationNode1.getChildCount();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("NxPa(M");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("NxPa(M", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.putIfAbsent("toVaP", "toVaP");
      assertNull(string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      configurationNode0.attributes = (Map<String, String>) hashMap0;
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, configurationNode0.attributes.size());
      assertFalse(configurationNode0.attributes.isEmpty());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode(configurationNode0);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(2, configurationNode2.getAttributeCount());
      assertEquals("NxPa(M", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      String string2 = hashMap0.put("", "");
      assertNull(string2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      ConfigurationNode configurationNode3 = configurationNode0.createNewNode(configurationNode1);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(3, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("NxPa(M", configurationNode3.getType());
      assertEquals(2, configurationNode3.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      
      configurationNode3.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertEquals(3, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals("NxPa(M", configurationNode3.getType());
      assertEquals(2, configurationNode3.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      
      String string3 = hashMap0.put("Td4zGsCZbp|f!Ei,Vc", "NxPa(M");
      assertNull(string3);
      assertEquals(4, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Iterator<String> iterator0 = configurationNode1.getAttributes();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      configurationNode2.readOnly = false;
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(2, configurationNode2.getAttributeCount());
      assertEquals("NxPa(M", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      
      String string4 = configurationNode1.getAttributeValue("NxPa(M");
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertNotNull(string4);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", string4);
      
      Iterator<String> iterator1 = configurationNode0.getAttributes();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(iterator1, iterator0);
      
      configurationNode0.setAttribute((String) null, (String) null);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode4 = configurationNode2.createNewNode(configurationNode0);
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertNotNull(configurationNode4);
      assertEquals("NxPa(M", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(4, configurationNode4.getAttributeCount());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(2, configurationNode2.getAttributeCount());
      assertEquals("NxPa(M", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode4.readOnly = false;
      assertEquals("NxPa(M", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(4, configurationNode4.getAttributeCount());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(4, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(2, configurationNode2.getAttributeCount());
      assertEquals("NxPa(M", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      
      configurationNode0.setAttribute("Attempt to change read-only object", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(5, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      
      configurationNode0.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(5, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      
      int int0 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(5, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertEquals(2, int0);
      
      configurationNode2.removeChild(0);
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(5, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(2, configurationNode2.getAttributeCount());
      assertEquals("NxPa(M", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      
      Integer integer0 = Integer.valueOf((-4236));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-4236), (int)integer0);
      
      boolean boolean0 = configurationNode4.equals(integer0);
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode4));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertEquals("NxPa(M", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(4, configurationNode4.getAttributeCount());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(5, configurationNode0.getAttributeCount());
      assertEquals("NxPa(M", configurationNode0.getType());
      assertEquals(2, configurationNode1.getAttributeCount());
      assertEquals("NxPa(M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(2, configurationNode2.getAttributeCount());
      assertEquals("NxPa(M", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        configurationNode3.addChild((-4236), configurationNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4236, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      
      configurationNode1.removeChild((-1510));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = hashMap0.put("{)b_ -/JT-%TNQ", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      configurationNode0.attributes = (Map<String, String>) hashMap0;
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(configurationNode0.attributes.isEmpty());
      assertEquals(1, configurationNode0.attributes.size());
      
      configurationNode1.setAttribute((String) null, "*%");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string1 = hashMap0.put("", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNull(string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(configurationNode1));
      
      configurationNode1.children = (List<ConfigurationNode>) vector0;
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, configurationNode1.children.size());
      assertTrue(configurationNode1.children.isEmpty());
      
      configurationNode1.setAttribute("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", (String) null);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode2 = configurationNode1.createDuplicate(true);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode2.value = "u";
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertEquals("u", configurationNode2.getValue());
      
      ConfigurationNode configurationNode3 = configurationNode1.createDuplicate(false);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertNotNull(configurationNode3);
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(1, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      
      ConfigurationNode configurationNode4 = new ConfigurationNode(configurationNode3);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode4);
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(1, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals("", configurationNode4.getType());
      assertEquals(1, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getValue());
      
      boolean boolean0 = configurationNode3.equals(configurationNode4);
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(1, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals("", configurationNode4.getType());
      assertEquals(1, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getValue());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode3);
      assertTrue(boolean0);
      
      configurationNode3.clearChildren();
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(1, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      assertEquals(FormatStyle.SHORT, formatStyle0);
      
      // Undeclared exception!
      try { 
        FormatStyle.valueOf("u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.format.FormatStyle.u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("'");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("'", configurationNode0.getType());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("'", configurationNode0.getType());
      assertEquals(0, linkedList0.size());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      configurationNode0.clearChildren();
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("'", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("'", configurationNode0.getType());
      assertEquals("'", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      String string0 = configurationNode1.getAttributeValue("'");
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("'", configurationNode0.getType());
      assertEquals("'", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      Map<String, String> map2 = ConfigurationNode.cloneAttributes(map1);
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotNull(map2);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(28, map2.size());
      assertFalse(map2.isEmpty());
      assertNotSame(map1, map2);
      assertNotSame(map2, map1);
      
      configurationNode0.setAttribute("*<Uct^W;\"yF]I", "*<Uct^W;\"yF]I");
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      configurationNode0.setValue("");
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      
      configurationNode0.setValue((String) null);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      Map<String, String> map3 = ConfigurationNode.cloneAttributes(map2);
      assertTrue(map0.equals((Object)map2));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map2));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map3.equals((Object)map0));
      assertTrue(map3.equals((Object)map1));
      assertTrue(map3.equals((Object)map2));
      assertNotNull(map3);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(28, map2.size());
      assertFalse(map2.isEmpty());
      assertFalse(map3.isEmpty());
      assertEquals(28, map3.size());
      assertNotSame(map1, map3);
      assertNotSame(map1, map2);
      assertNotSame(map2, map1);
      assertNotSame(map2, map3);
      assertNotSame(map3, map2);
      assertNotSame(map3, map1);
      
      int int0 = configurationNode0.getChildCount();
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, int0);
      
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(false);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode1.getValue();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNull(string0);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.removeChild(0);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string1 = configurationNode1.getAttributeValue("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNull(string1);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.setAttribute("IKr", "com.google.common.collect.TreeBasedTable$Factory");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      // Undeclared exception!
      try { 
        configurationNode0.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("r_ illD[%}l`");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("r_ illD[%}l`", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      // Undeclared exception!
      try { 
        configurationNode0.createNewNode((ConfigurationNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, linkedList0.size());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      configurationNode1.hashCode();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      boolean boolean0 = linkedList0.add(configurationNode1);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(1, linkedList0.size());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(configurationNode1));
      assertFalse(linkedList0.contains(configurationNode0));
      
      int int0 = configurationNode0.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals(0, int0);
      
      configurationNode0.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode2 = configurationNode0.findChild(0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      ConfigurationNode configurationNode3 = configurationNode2.createNewNode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      
      ConfigurationNode configurationNode4 = configurationNode0.createDuplicate(false);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode4);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertEquals(1, configurationNode4.getChildCount());
      assertNull(configurationNode4.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      
      configurationNode3.removeChild(0);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      
      configurationNode4.value = "";
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertEquals(1, configurationNode4.getChildCount());
      assertEquals("", configurationNode4.getValue());
      
      ConfigurationNode configurationNode5 = configurationNode3.createDuplicate(true);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode5.equals((Object)configurationNode4));
      assertTrue(configurationNode5.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode1));
      assertTrue(configurationNode5.equals((Object)configurationNode3));
      assertFalse(configurationNode5.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode5);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode5.getAttributeCount());
      assertEquals("", configurationNode5.getType());
      assertEquals(0, configurationNode5.getChildCount());
      assertNull(configurationNode5.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode3.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode5, configurationNode4);
      assertNotSame(configurationNode5, configurationNode3);
      assertNotSame(configurationNode5, configurationNode2);
      assertNotSame(configurationNode5, configurationNode1);
      assertNotSame(configurationNode5, configurationNode0);
      assertSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode5);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode5);
      
      configurationNode2.readOnly = true;
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      
      boolean boolean1 = configurationNode0.equals("");
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode5));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertFalse(boolean1);
      
      Iterator<String> iterator1 = configurationNode0.getAttributes();
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode5));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(iterator1, iterator0);
      
      int int1 = configurationNode2.getChildCount();
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode5));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertTrue(int1 == int0);
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode2.equals((Object)configurationNode5));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode5);
      assertNotSame(configurationNode2, configurationNode0);
      assertEquals(0, int1);
      
      configurationNode4.addChild(0, configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode5));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode4.equals((Object)configurationNode5));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertEquals("", configurationNode4.getValue());
      assertEquals(2, configurationNode4.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode4, configurationNode5);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      
      String string0 = configurationNode2.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode5));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode2.equals((Object)configurationNode5));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode4);
      assertSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode5);
      assertNotSame(configurationNode2, configurationNode0);
      assertEquals("( [])", string0);
      
      // Undeclared exception!
      try { 
        configurationNode2.createNewNode(configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("%):79NH(b");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      Iterator<String> iterator0 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.hashCode();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      configurationNode1.setAttribute("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", "M[,i@-f");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode2 = configurationNode0.createNewNode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("%):79NH(b", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      Iterator<String> iterator1 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(iterator1, iterator0);
      
      ConfigurationNode configurationNode3 = configurationNode0.createDuplicate(false);
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode3.getType());
      assertNull(configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      
      configurationNode1.type = "%):79NH(b";
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      
      configurationNode3.setValue("p2KRiC5Uk]+");
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("p2KRiC5Uk]+", configurationNode3.getValue());
      assertEquals("%):79NH(b", configurationNode3.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      
      configurationNode3.addChild(0, configurationNode0);
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("p2KRiC5Uk]+", configurationNode3.getValue());
      assertEquals("%):79NH(b", configurationNode3.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      
      String string0 = configurationNode1.toString();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertEquals("(%):79NH(b @(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $='M[,i@-f' [])", string0);
      
      String string1 = configurationNode1.getType();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertEquals("%):79NH(b", string1);
      
      int int0 = configurationNode0.getAttributeCount();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertEquals(0, int0);
      
      Iterator<String> iterator2 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertNotNull(iterator2);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("%):79NH(b", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(iterator2, iterator0);
      assertNotSame(iterator2, iterator1);
      
      String string2 = configurationNode0.toString();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertEquals("(%):79NH(b [])", string2);
      
      ConfigurationNode configurationNode4 = configurationNode3.createDuplicate(true);
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode4);
      assertEquals(1, configurationNode4.getChildCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode4.getType());
      assertEquals("p2KRiC5Uk]+", configurationNode4.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("p2KRiC5Uk]+", configurationNode3.getValue());
      assertEquals("%):79NH(b", configurationNode3.getType());
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      
      int int1 = configurationNode4.hashCode();
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(int1 == int0);
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertEquals(1, configurationNode4.getChildCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode4.getType());
      assertEquals("p2KRiC5Uk]+", configurationNode4.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("%):79NH(b", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("p2KRiC5Uk]+", configurationNode3.getValue());
      assertEquals("%):79NH(b", configurationNode3.getType());
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode4);
      
      // Undeclared exception!
      try { 
        configurationNode4.findChild(65535);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65535, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      configurationNode0.value = "";
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      String string1 = configurationNode0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("(: [])", string1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      configurationNode0.makeReadOnly();
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      String string2 = configurationNode0.getType();
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", string2);
      
      configurationNode0.children = null;
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        configurationNode0.removeChild(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("Yl6Z;>o4:pHe!?j");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      
      ArrayList<ConfigurationNode> arrayList0 = new ArrayList<ConfigurationNode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) arrayList0;
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, configurationNode0.children.size());
      assertTrue(configurationNode0.children.isEmpty());
      
      configurationNode0.value = "])";
      assertEquals("])", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.value = "])";
      assertEquals("])", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.readOnly = false;
      assertEquals("])", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.hashCode();
      assertEquals("])", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      String string0 = configurationNode0.getType();
      assertNotNull(string0);
      assertEquals("])", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("Yl6Z;>o4:pHe!?j", string0);
      
      boolean boolean0 = arrayList0.add(configurationNode0);
      assertEquals("])", configurationNode0.getValue());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals("])", configurationNode0.getValue());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = configurationNode0.findChild(0);
      assertNotNull(configurationNode1);
      assertEquals("])", configurationNode0.getValue());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(1, configurationNode1.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode1.getType());
      assertEquals("])", configurationNode1.getValue());
      assertSame(configurationNode0, configurationNode1);
      assertSame(configurationNode1, configurationNode0);
      
      configurationNode1.value = null;
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(1, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(1, configurationNode1.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      
      configurationNode0.removeChild(0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertSame(configurationNode0, configurationNode1);
      
      configurationNode1.setValue("sL)oz");
      assertEquals("sL)oz", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode1.getType());
      assertEquals("sL)oz", configurationNode1.getValue());
      assertSame(configurationNode0, configurationNode1);
      assertSame(configurationNode1, configurationNode0);
      
      configurationNode0.setAttribute("Yl6Z;>o4:pHe!?j", "Yl6Z;>o4:pHe!?j");
      assertEquals("sL)oz", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("Yl6Z;>o4:pHe!?j", configurationNode0.getType());
      assertSame(configurationNode0, configurationNode1);
      
      // Undeclared exception!
      try { 
        configurationNode0.findChild(1785);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("^~%T)YKc");
      assertNotNull(configurationNode0);
      assertEquals("^~%T)YKc", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("^~%T)YKc", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("^~%T)YKc", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      
      ConfigurationNode configurationNode2 = configurationNode0.createNewNode(configurationNode1);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals("^~%T)YKc", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("^~%T)YKc", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("^~%T)YKc", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      Stack<ConfigurationNode> stack0 = new Stack<ConfigurationNode>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(configurationNode0));
      
      configurationNode2.children = (List<ConfigurationNode>) stack0;
      assertEquals("^~%T)YKc", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("^~%T)YKc", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("^~%T)YKc", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(configurationNode2.children.isEmpty());
      assertEquals(0, configurationNode2.children.size());
      
      // Undeclared exception!
      try { 
        configurationNode2.removeChild((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("p<zs9><JA5Kg+^");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.removeChild(1067);
      assertNull(configurationNode0.getValue());
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      Stack<ConfigurationNode> stack0 = new Stack<ConfigurationNode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) stack0;
      assertNull(configurationNode0.getValue());
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      configurationNode0.setValue("p<zs9><JA5Kg+^");
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(false);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode1.getValue();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("p<zs9><JA5Kg+^", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("p<zs9><JA5Kg+^", string0);
      
      // Undeclared exception!
      try { 
        ConfigurationNode.cloneAttributes((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.value = "";
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.setAttribute("", "");
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      int int0 = configurationNode0.getAttributeCount();
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(1, int0);
      
      configurationNode0.setAttribute("", "");
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      Map<String, String> map2 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map0.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotNull(map2);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, map2.size());
      assertFalse(map2.isEmpty());
      assertNotSame(map2, map1);
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode(configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("", configurationNode2.getValue());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode2.setValue("");
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("", configurationNode2.getValue());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      String string0 = configurationNode1.toString();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertNotNull(string0);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertEquals("( [])", string0);
      
      configurationNode0.setAttribute("", "com.google.common.base.CharMatcher$None");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = configurationNode1.equals(object0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertFalse(boolean0);
      
      String string1 = configurationNode0.getAttributeValue("com.google.common.base.CharMatcher$None");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertNull(string1);
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      ConfigurationNode configurationNode3 = configurationNode0.createNewNode();
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals("", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      int int1 = configurationNode2.getAttributeCount();
      assertTrue(int1 == int0);
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode3));
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("", configurationNode2.getValue());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertEquals(1, int1);
      
      boolean boolean1 = configurationNode2.equals(map0);
      assertTrue(map0.equals((Object)map2));
      assertTrue(map0.equals((Object)map1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(boolean1 == boolean0);
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode3));
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("", configurationNode2.getValue());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode3);
      assertFalse(boolean1);
      
      configurationNode0.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      ConfigurationNode configurationNode4 = configurationNode1.createNewNode(configurationNode3);
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertNotNull(configurationNode4);
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals("", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
      
      configurationNode4.setAttribute("])", (String) null);
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals("", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("", configurationNode4.getType());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("bRm*xW[}v'#8=Oxl_y");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("bRm*xW[}v'#8=Oxl_y", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      String string0 = configurationNode0.toString();
      assertNotNull(string0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("bRm*xW[}v'#8=Oxl_y", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("(bRm*xW[}v'#8=Oxl_y [])", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", "(bRm*xW[}v'#8=Oxl_y [])");
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      configurationNode0.attributes = (Map<String, String>) hashMap0;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("bRm*xW[}v'#8=Oxl_y", configurationNode0.getType());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(configurationNode0.attributes.isEmpty());
      assertEquals(1, configurationNode0.attributes.size());
      
      String string2 = hashMap0.put("Attempt to change read-only object", "[y>TLbQlK");
      assertNull(string2);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string3 = configurationNode0.toString();
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("bRm*xW[}v'#8=Oxl_y", configurationNode0.getType());
      assertEquals(2, configurationNode0.getAttributeCount());
      assertEquals("(bRm*xW[}v'#8=Oxl_y Attempt to change read-only object='[y>TLbQlK' @(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $='(bRm*xW[}v'#8=Oxl_y [])' [])", string3);
      
      configurationNode0.makeReadOnly();
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("bRm*xW[}v'#8=Oxl_y", configurationNode0.getType());
      assertEquals(2, configurationNode0.getAttributeCount());
      
      String string4 = configurationNode0.getAttributeValue("");
      assertNull(string4);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("bRm*xW[}v'#8=Oxl_y", configurationNode0.getType());
      assertEquals(2, configurationNode0.getAttributeCount());
      
      // Undeclared exception!
      try { 
        configurationNode0.removeChild(790);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConfigurationNode configurationNode0 = null;
      try {
        configurationNode0 = new ConfigurationNode((ConfigurationNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("NjcPCE/~ESitd3UQ");
      assertNotNull(configurationNode0);
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      configurationNode1.attributes = map0;
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, configurationNode1.attributes.size());
      assertFalse(configurationNode1.attributes.isEmpty());
      
      configurationNode1.setValue(" ");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode1.getType());
      assertEquals(" ", configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode1.getAttributeValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(string0);
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode1.getType());
      assertEquals(" ", configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      int int0 = configurationNode0.getChildCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals("NjcPCE/~ESitd3UQ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        configurationNode0.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      
      Iterator<String> iterator0 = configurationNode1.getAttributes();
      assertNotNull(iterator0);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.addChild(0, configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(1, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.setAttribute((String) null, "Funnels.unencodedCharsFunnel()");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(1, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode0.getAttributeValue("22(- wJ_/.FJh@F63<");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string0);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      
      String string1 = configurationNode0.getType();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string1);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      
      configurationNode1.setAttribute((String) null, "");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(1, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      boolean boolean0 = configurationNode1.equals((Object) null);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(1, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertFalse(boolean0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      int int0 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(1, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(1, int0);
      
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertEquals(1, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string2 = configurationNode0.getAttributeValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string2);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      
      String string3 = configurationNode0.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(string3);
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals("(null [])", string3);
      
      int int1 = 4722;
      // Undeclared exception!
      try { 
        configurationNode0.removeChild(4722);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("I tyR;<.Ku;\u0000L]'");
      assertNotNull(configurationNode0);
      assertEquals("I tyR;<.Ku;\u0000L]'", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      configurationNode0.setAttribute("pDJkRmC", (String) null);
      assertEquals("I tyR;<.Ku;\u0000L]'", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("I tyR;<.Ku;\u0000L]'", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("I tyR;<.Ku;\u0000L]'", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode1.addChild(16, configurationNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      configurationNode0.attributes = map0;
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(28, configurationNode0.getAttributeCount());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, configurationNode0.attributes.size());
      assertFalse(configurationNode0.attributes.isEmpty());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(28, configurationNode0.getAttributeCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode();
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(28, configurationNode0.getAttributeCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNull(configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      Map<String, String> map2 = ConfigurationNode.cloneAttributes(configurationNode0.attributes);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertTrue(map0.equals((Object)map1));
      assertTrue(configurationNode0.attributes.equals((Object)map1));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotNull(map2);
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(28, configurationNode0.getAttributeCount());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, configurationNode0.attributes.size());
      assertFalse(configurationNode0.attributes.isEmpty());
      assertFalse(map2.isEmpty());
      assertEquals(28, map2.size());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertSame(configurationNode0.attributes, map0);
      assertNotSame(map2, map1);
      
      configurationNode1.attributes = map2;
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(28, configurationNode0.getAttributeCount());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(28, configurationNode0.attributes.size());
      assertFalse(configurationNode0.attributes.isEmpty());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertFalse(map2.isEmpty());
      assertEquals(28, map2.size());
      assertFalse(configurationNode1.attributes.isEmpty());
      assertEquals(28, configurationNode1.attributes.size());
      
      // Undeclared exception!
      try { 
        configurationNode1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("GLrxb$}t}#,}");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode2 = new ConfigurationNode("GLrxb$}t}#,}");
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("GLrxb$}t}#,}", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      configurationNode2.value = "$!W!sC";
      assertEquals("$!W!sC", configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("GLrxb$}t}#,}", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      
      int int0 = (-5386);
      configurationNode0.removeChild((-5386));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      configurationNode0.removeChild((-5386));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      int int1 = configurationNode0.getChildCount();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(int1 == int0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertEquals(0, int1);
      
      String string0 = configurationNode2.toString();
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals("$!W!sC", configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("GLrxb$}t}#,}", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertEquals("(GLrxb$}t}#,}:$!W!sC [])", string0);
      
      String string1 = IHierarchyParent._rcsid;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@(#)$Id$", string1);
      
      configurationNode2.setAttribute("I", "GLrxb$}t}#,}");
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertEquals("$!W!sC", configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("GLrxb$}t}#,}", configurationNode2.getType());
      assertEquals(1, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode1.value = "";
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      
      configurationNode0.removeChild(0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      
      String string2 = configurationNode1.getAttributeValue("$!W!sC");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertNull(string2);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("GLrxb$}t}#,}", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      // Undeclared exception!
      try { 
        configurationNode0.addChild((-5386), configurationNode1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5386, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("NR%2");
      assertNotNull(configurationNode0);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals("NR%2", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.type = "NR%2";
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      configurationNode1.type = "q~`Ki}";
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("q~`Ki}", configurationNode1.getType());
      
      String string0 = configurationNode0.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(string0);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals("(NR%2 [])", string0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(iterator0);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      String string1 = configurationNode0.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals("(NR%2 [])", string1);
      
      Iterator<String> iterator1 = configurationNode0.getAttributes();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(iterator1, iterator0);
      
      configurationNode1.attributes = map1;
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals("q~`Ki}", configurationNode1.getType());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(28, configurationNode1.attributes.size());
      assertFalse(configurationNode1.attributes.isEmpty());
      
      configurationNode1.setValue("_/`^zil=YZ13}7GX");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("_/`^zil=YZ13}7GX", configurationNode1.getValue());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals("q~`Ki}", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.setValue("q~`Ki}");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("q~`Ki}", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("q~`Ki}", configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("_/`^zil=YZ13}7GX", configurationNode1.getValue());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals("q~`Ki}", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string2 = configurationNode0.getAttributeValue("i1");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNull(string2);
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("q~`Ki}", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      
      boolean boolean0 = configurationNode0.equals("q~`Ki}");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals("NR%2", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("q~`Ki}", configurationNode0.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        configurationNode1.addChild((-2467), configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("Mapper");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("Mapper", configurationNode0.getType());
      
      configurationNode0.makeReadOnly();
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("Mapper", configurationNode0.getType());
      
      int int0 = (-4268);
      configurationNode0.type = "8Z=Qr`+!bU";
      assertEquals("8Z=Qr`+!bU", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      // Undeclared exception!
      try { 
        configurationNode0.findChild((-4268));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      configurationNode0.makeReadOnly();
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      
      Map<String, String> map0 = configurationNode1.attributes;
      assertNull(map0);
      
      configurationNode0.attributes = null;
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      int int0 = 1023;
      // Undeclared exception!
      try { 
        configurationNode1.addChild(1023, configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("chIxJWm-:eyV@c o");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.makeReadOnly();
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      Iterator<String> iterator0 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertNotNull(iterator0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode3 = configurationNode0.createNewNode(configurationNode1);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, String> map0 = ConfigurationNode.cloneAttributes(hashMap0);
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Iterator<String> iterator1 = configurationNode0.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(iterator1, iterator0);
      
      configurationNode0.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      
      String string0 = configurationNode0.getAttributeValue("chIxJWm-:eyV@c o");
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertNull(string0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      
      String string1 = configurationNode1.getAttributeValue("u");
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertNull(string1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      String string2 = configurationNode2.getValue();
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNull(string2);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      
      configurationNode3.attributes = map0;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, configurationNode3.attributes.size());
      assertTrue(configurationNode3.attributes.isEmpty());
      
      ConfigurationNode configurationNode4 = new ConfigurationNode(configurationNode2);
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNotNull(configurationNode4);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      
      boolean boolean0 = configurationNode3.equals(configurationNode4);
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode3));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode4));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode4);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode3);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        configurationNode0.clearChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("s{/mY<S=&r:d");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("s{/mY<S=&r:d", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("s{/mY<S=&r:d", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("s{/mY<S=&r:d", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      
      String string0 = configurationNode1.getValue();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("s{/mY<S=&r:d", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("s{/mY<S=&r:d", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string1 = configurationNode1.getType();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("s{/mY<S=&r:d", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("s{/mY<S=&r:d", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("s{/mY<S=&r:d", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("8/!M&U8xkAbY");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      Iterator<String> iterator1 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(iterator1, iterator0);
      
      configurationNode1.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode2 = configurationNode0.createDuplicate(true);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("8/!M&U8xkAbY", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode1.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.type = "";
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      int int0 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int0);
      
      configurationNode0.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode3 = configurationNode1.createDuplicate(true);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode3.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      
      ConfigurationNode configurationNode4 = configurationNode3.createDuplicate(false);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertFalse(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertNotNull(configurationNode4);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8/!M&U8xkAbY", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertEquals("8/!M&U8xkAbY", configurationNode3.getType());
      assertEquals("8/!M&U8xkAbY", configurationNode4.getType());
      assertEquals(0, configurationNode4.getChildCount());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNull(configurationNode4.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode4);
      assertSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode0.findChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode2.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode1.setAttribute("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      String string0 = configurationNode2.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      assertEquals("( [])", string0);
      
      ConfigurationNode configurationNode3 = configurationNode2.createDuplicate(false);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("", configurationNode2.getType());
      assertEquals("", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = null;
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode();
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertNull(configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      // Undeclared exception!
      try { 
        configurationNode2.equals(configurationNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = null;
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      
      int int0 = 731;
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode("IGNORE_TYPE_VARIABLE_OR_WILDCARD");
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", configurationNode1.getType());
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode();
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", configurationNode1.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode2.setValue((String) null);
      assertTrue(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", configurationNode1.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode1.setValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("IGNORE_TYPE_VARIABLE_OR_WILDCARD", configurationNode1.getType());
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode0.addChild(731, configurationNode1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 731, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode(" [");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(" [", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(" [", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(" [", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      
      boolean boolean0 = configurationNode1.equals(configurationNode0);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(" [", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(" [", configurationNode1.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      
      configurationNode0.removeChild(0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      configurationNode1.setAttribute("z", "");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode1.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode1.getType();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("", configurationNode1.getType());
      assertEquals(1, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("tGobbs9#9hac~[");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("tGobbs9#9hac~[", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("tGobbs9#9hac~[", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("tGobbs9#9hac~[", configurationNode1.getType());
      
      configurationNode1.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("tGobbs9#9hac~[", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("tGobbs9#9hac~[", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode1.setAttribute("tGobbs9#9hac~[", "com.google.common.base.CharMatcher$JavaUpperCase");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.removeChild(983);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.readOnly = true;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      int int0 = configurationNode0.getChildCount();
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        configurationNode0.setAttribute((String) null, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("%,8[r; QOtvf");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("%,8[r; QOtvf", configurationNode0.getType());
      
      configurationNode0.setAttribute("", "Functions.constant(");
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("%,8[r; QOtvf", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      
      // Undeclared exception!
      try { 
        configurationNode0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      configurationNode0.setValue("g");
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      configurationNode0.removeChild((-2992));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
      
      boolean boolean0 = configurationNode1.equals("g");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertFalse(boolean0);
      
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode0);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("g", configurationNode2.getValue());
      
      configurationNode2.setValue("bUnmj'@qsnHt5^9NA");
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals("bUnmj'@qsnHt5^9NA", configurationNode2.getValue());
      assertEquals("", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      configurationNode0.hashCode();
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("g", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(true);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode1.clearChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      
      configurationNode0.value = null;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) vector0;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, configurationNode0.children.size());
      assertTrue(configurationNode0.children.isEmpty());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      
      String string0 = configurationNode1.toString();
      assertNotNull(string0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("(null [])", string0);
      
      String string1 = configurationNode1.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("(null [])", string1);
      
      boolean boolean0 = vector0.add(configurationNode1);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertEquals(10, vector0.capacity());
      assertEquals("[(null [])]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertTrue(boolean0);
      assertFalse(vector0.contains(configurationNode0));
      
      ConfigurationNode configurationNode2 = configurationNode0.createNewNode();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      ConfigurationNode configurationNode3 = configurationNode2.createDuplicate(true);
      assertFalse(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertNull(configurationNode0.getValue());
      assertEquals(1, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNull(configurationNode2.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertNull(configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode3.setValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("", "");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashMap0.remove(object0, object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertNotNull(hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      String string1 = hashMap0.put((String) null, "");
      assertNull(string1);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string2 = hashMap0.put("4/of-,,0Fm.,", "4/of-,,0Fm.,");
      assertNull(string2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Map<String, String> map0 = ConfigurationNode.cloneAttributes(hashMap0);
      assertNotNull(map0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(3, map1.size());
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
      
      Map<String, String> map2 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map0.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotNull(map2);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map2.isEmpty());
      assertEquals(3, map2.size());
      assertNotSame(map0, map1);
      assertNotSame(map0, map2);
      assertNotSame(map2, map0);
      assertNotSame(map2, map1);
      
      Map<String, String> map3 = ConfigurationNode.cloneAttributes(hashMap0);
      assertTrue(map3.equals((Object)map2));
      assertTrue(map3.equals((Object)map0));
      assertTrue(map3.equals((Object)map1));
      assertNotNull(map3);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map3.isEmpty());
      assertEquals(3, map3.size());
      assertNotSame(map3, map1);
      assertNotSame(map3, map2);
      assertNotSame(map3, map0);
      
      ConfigurationNode configurationNode0 = new ConfigurationNode("Attempt to change read-only object");
      assertNotNull(configurationNode0);
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode(configurationNode0);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertNotNull(configurationNode2);
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Attempt to change read-only object", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      configurationNode1.setValue("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      
      ConfigurationNode configurationNode3 = configurationNode2.createDuplicate(false);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertNotNull(configurationNode3);
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Attempt to change read-only object", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals("Attempt to change read-only object", configurationNode3.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode3.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      
      configurationNode3.type = "R/kbUJX-mV#w\"Ipec";
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Attempt to change read-only object", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertNull(configurationNode3.getValue());
      assertEquals("R/kbUJX-mV#w\"Ipec", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      
      Map<String, String> map4 = ConfigurationNode.cloneAttributes(map2);
      assertTrue(map4.equals((Object)map2));
      assertTrue(map4.equals((Object)map3));
      assertTrue(map4.equals((Object)map0));
      assertTrue(map4.equals((Object)map1));
      assertTrue(map0.equals((Object)map3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map0.equals((Object)map2));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map3));
      assertNotNull(map4);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, map4.size());
      assertFalse(map4.isEmpty());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map2.isEmpty());
      assertEquals(3, map2.size());
      assertNotSame(map4, map1);
      assertNotSame(map4, map2);
      assertNotSame(map4, map3);
      assertNotSame(map4, map0);
      assertNotSame(map0, map1);
      assertNotSame(map0, map4);
      assertNotSame(map0, map2);
      assertNotSame(map0, map3);
      assertNotSame(map2, map3);
      assertNotSame(map2, map0);
      assertNotSame(map2, map4);
      assertNotSame(map2, map1);
      
      Map<String, String> map5 = ConfigurationNode.cloneAttributes(map2);
      assertTrue(map5.equals((Object)map2));
      assertTrue(map5.equals((Object)map4));
      assertTrue(map5.equals((Object)map1));
      assertTrue(map5.equals((Object)map0));
      assertTrue(map5.equals((Object)map3));
      assertTrue(map0.equals((Object)map3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map0.equals((Object)map4));
      assertTrue(map0.equals((Object)map2));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map3));
      assertTrue(map2.equals((Object)map4));
      assertNotNull(map5);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(map5.isEmpty());
      assertEquals(3, map5.size());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map2.isEmpty());
      assertEquals(3, map2.size());
      assertNotSame(map5, map4);
      assertNotSame(map5, map3);
      assertNotSame(map5, map2);
      assertNotSame(map5, map0);
      assertNotSame(map5, map1);
      assertNotSame(map0, map1);
      assertNotSame(map0, map4);
      assertNotSame(map0, map2);
      assertNotSame(map0, map3);
      assertNotSame(map0, map5);
      assertNotSame(map2, map3);
      assertNotSame(map2, map0);
      assertNotSame(map2, map4);
      assertNotSame(map2, map1);
      assertNotSame(map2, map5);
      
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      
      String string3 = configurationNode1.getAttributeValue((String) null);
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertNull(string3);
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      
      configurationNode3.setValue("ADLER_32");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertFalse(configurationNode1.equals((Object)configurationNode3));
      assertFalse(configurationNode1.equals((Object)configurationNode2));
      assertFalse(configurationNode2.equals((Object)configurationNode3));
      assertFalse(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode0));
      assertFalse(configurationNode3.equals((Object)configurationNode2));
      assertFalse(configurationNode3.equals((Object)configurationNode1));
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode1.getValue());
      assertEquals("Attempt to change read-only object", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("Attempt to change read-only object", configurationNode2.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("ADLER_32", configurationNode3.getValue());
      assertEquals("R/kbUJX-mV#w\"Ipec", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode3);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      
      ConfigurationNode configurationNode4 = configurationNode0.createDuplicate(false);
      assertFalse(configurationNode4.equals((Object)configurationNode1));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertFalse(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertNotNull(configurationNode4);
      assertEquals(0, configurationNode4.getChildCount());
      assertNull(configurationNode4.getValue());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertEquals("Attempt to change read-only object", configurationNode4.getType());
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertFalse(configurationNode0.equals((Object)configurationNode3));
      assertNotNull(iterator0);
      assertEquals("Attempt to change read-only object", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode0, configurationNode2);
      
      // Undeclared exception!
      try { 
        configurationNode2.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      boolean boolean0 = configurationNode0.equals("");
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertFalse(boolean0);
      
      configurationNode0.makeReadOnly();
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, configurationNode0.children.size());
      assertTrue(configurationNode0.children.isEmpty());
      
      boolean boolean1 = true;
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(true);
      assertNotNull(configurationNode1);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertSame(configurationNode0, configurationNode1);
      assertSame(configurationNode1, configurationNode0);
      
      boolean boolean2 = configurationNode1.equals(" [");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertSame(configurationNode0, configurationNode1);
      assertSame(configurationNode1, configurationNode0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        configurationNode0.clearChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("Cannot determine how to find fields: ");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals("Cannot determine how to find fields: ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.makeReadOnly();
      assertNull(configurationNode0.getValue());
      assertEquals("Cannot determine how to find fields: ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals("Cannot determine how to find fields: ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("Cannot determine how to find fields: ", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      configurationNode1.attributes = map0;
      assertNull(configurationNode0.getValue());
      assertEquals("Cannot determine how to find fields: ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(28, configurationNode1.getAttributeCount());
      assertEquals("Cannot determine how to find fields: ", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(configurationNode1.attributes.isEmpty());
      assertEquals(28, configurationNode1.attributes.size());
      
      // Undeclared exception!
      try { 
        configurationNode1.setValue("Cannot determine how to find fields: ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode(",5M*&ylO(]9Y=P,ap");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode1.getType());
      
      configurationNode0.value = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      int int0 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int0);
      
      configurationNode1.children = null;
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode1.getType());
      
      String string0 = configurationNode0.toString();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertEquals("(,5M*&ylO(]9Y=P,ap:@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $ [])", string0);
      
      int int1 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(int1 == int0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int1);
      
      configurationNode1.makeReadOnly();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      int int2 = configurationNode1.getAttributeCount();
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode0.getType());
      assertEquals("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(",5M*&ylO(]9Y=P,ap", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("naV/MV1");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals("naV/MV1", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals("naV/MV1", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("naV/MV1", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      int int0 = configurationNode1.getAttributeCount();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertEquals("naV/MV1", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("naV/MV1", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode(". ");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(". ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.removeChild(1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(". ", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(configurationNode0));
      
      configurationNode0.children = (List<ConfigurationNode>) vector0;
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(configurationNode0.children.isEmpty());
      assertEquals(0, configurationNode0.children.size());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      
      boolean boolean0 = vector0.removeElement(configurationNode1);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertFalse(boolean0);
      assertFalse(vector0.contains(configurationNode1));
      
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      
      Iterator<String> iterator0 = configurationNode2.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(iterator0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("", configurationNode2.getType());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getChildCount());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertNotSame(configurationNode2, configurationNode1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("='");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      configurationNode0.setValue((String) null);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("='", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, String> map0 = ConfigurationNode.cloneAttributes(hashMap0);
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = ConfigurationNode.cloneAttributes(map0);
      assertTrue(map1.equals((Object)map0));
      assertNotNull(map1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      
      boolean boolean0 = configurationNode0.equals("");
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertFalse(boolean0);
      
      configurationNode0.setValue("(");
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("(", configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      // Undeclared exception!
      try { 
        ConfigurationNode.cloneAttributes((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("8NOiN");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("8NOiN", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("8NOiN", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8NOiN", configurationNode1.getType());
      
      String string0 = configurationNode1.getType();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("8NOiN", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("8NOiN", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("8NOiN", string0);
      
      String string1 = configurationNode0.getAttributeValue((String) null);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertNull(string1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("8NOiN", configurationNode0.getType());
      assertNotSame(configurationNode0, configurationNode1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("M");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("M", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("M", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      
      Iterator<String> iterator0 = configurationNode1.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("M", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode1.toString();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("M", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("M", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("(M [])", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("\"^=(m@8c");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      ConfigurationNode configurationNode2 = configurationNode0.createNewNode(configurationNode1);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode1));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode2.getValue());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertEquals(0, configurationNode2.getChildCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertNotSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode1);
      assertNotSame(configurationNode2, configurationNode0);
      
      // Undeclared exception!
      try { 
        configurationNode0.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("com.google.common.collect.FilteredEntryMultimap$Keys");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals("com.google.common.collect.FilteredEntryMultimap$Keys", configurationNode0.getType());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals("com.google.common.collect.FilteredEntryMultimap$Keys", configurationNode0.getType());
      assertNull(configurationNode1.getValue());
      assertEquals("com.google.common.collect.FilteredEntryMultimap$Keys", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      
      configurationNode1.setValue("imte");
      assertFalse(configurationNode0.equals((Object)configurationNode1));
      assertFalse(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals("com.google.common.collect.FilteredEntryMultimap$Keys", configurationNode0.getType());
      assertEquals("com.google.common.collect.FilteredEntryMultimap$Keys", configurationNode1.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("imte", configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      
      configurationNode1.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals("", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("8iK>vN5@S");
      assertNotNull(configurationNode0);
      assertNull(configurationNode0.getValue());
      assertEquals("8iK>vN5@S", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = configurationNode0.createDuplicate(true);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertNull(configurationNode0.getValue());
      assertEquals("8iK>vN5@S", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("8iK>vN5@S", configurationNode1.getType());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      assertNotNull(configurationNode0);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      
      configurationNode1.hashCode();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals("", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getChildCount());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("$VALUES");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals("$VALUES", configurationNode0.getType());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.addChild(0, (ConfigurationNode) null);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals("$VALUES", configurationNode0.getType());
      assertEquals(1, configurationNode0.getChildCount());
      
      ConfigurationNode configurationNode1 = null;
      try {
        configurationNode1 = new ConfigurationNode(configurationNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "DB]e:";
      ConfigurationNode configurationNode0 = new ConfigurationNode("DB]e:");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("DB]e:", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      configurationNode0.makeReadOnly();
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("DB]e:", configurationNode0.getType());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      
      int int0 = (-1846285055);
      // Undeclared exception!
      try { 
        configurationNode0.removeChild((-1846285055));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("\":Su X{F5!Z");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      
      Iterator<String> iterator0 = configurationNode0.getAttributes();
      assertNotNull(iterator0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      
      Iterator<String> iterator1 = configurationNode0.getAttributes();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertNotSame(iterator1, iterator0);
      
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(configurationNode1);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      String string0 = configurationNode1.toString();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertEquals("(\":Su X{F5!Z [])", string0);
      
      configurationNode1.makeReadOnly();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      
      ConfigurationNode configurationNode2 = configurationNode1.createDuplicate(true);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode2.equals((Object)configurationNode0));
      assertNotNull(configurationNode2);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertEquals(0, configurationNode2.getChildCount());
      assertNull(configurationNode2.getValue());
      assertEquals("\":Su X{F5!Z", configurationNode2.getType());
      assertEquals(0, configurationNode2.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode2, configurationNode0);
      assertSame(configurationNode2, configurationNode1);
      
      ConfigurationNode configurationNode3 = configurationNode1.createNewNode(configurationNode0);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertNotNull(configurationNode3);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      
      Iterator<String> iterator2 = configurationNode3.getAttributes();
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertNotNull(iterator2);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(iterator2, iterator0);
      assertNotSame(iterator2, iterator1);
      
      ConfigurationNode configurationNode4 = configurationNode3.createDuplicate(false);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertNotNull(configurationNode4);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNull(configurationNode4.getValue());
      assertEquals("\":Su X{F5!Z", configurationNode4.getType());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      
      ConfigurationNode configurationNode5 = configurationNode4.createDuplicate(true);
      assertTrue(configurationNode0.equals((Object)configurationNode1));
      assertTrue(configurationNode0.equals((Object)configurationNode3));
      assertTrue(configurationNode0.equals((Object)configurationNode2));
      assertTrue(configurationNode0.equals((Object)configurationNode4));
      assertTrue(configurationNode1.equals((Object)configurationNode3));
      assertTrue(configurationNode1.equals((Object)configurationNode4));
      assertTrue(configurationNode1.equals((Object)configurationNode0));
      assertTrue(configurationNode3.equals((Object)configurationNode1));
      assertTrue(configurationNode3.equals((Object)configurationNode4));
      assertTrue(configurationNode3.equals((Object)configurationNode2));
      assertTrue(configurationNode3.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode0));
      assertTrue(configurationNode4.equals((Object)configurationNode1));
      assertTrue(configurationNode4.equals((Object)configurationNode3));
      assertTrue(configurationNode4.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode4));
      assertTrue(configurationNode5.equals((Object)configurationNode1));
      assertTrue(configurationNode5.equals((Object)configurationNode3));
      assertTrue(configurationNode5.equals((Object)configurationNode2));
      assertTrue(configurationNode5.equals((Object)configurationNode0));
      assertNotNull(configurationNode5);
      assertEquals(0, configurationNode0.getAttributeCount());
      assertNull(configurationNode0.getValue());
      assertEquals(0, configurationNode0.getChildCount());
      assertEquals("\":Su X{F5!Z", configurationNode0.getType());
      assertEquals(0, configurationNode1.getChildCount());
      assertNull(configurationNode1.getValue());
      assertEquals(0, configurationNode1.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode1.getType());
      assertEquals(0, configurationNode3.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode3.getType());
      assertEquals(0, configurationNode3.getChildCount());
      assertNull(configurationNode3.getValue());
      assertEquals(0, configurationNode4.getChildCount());
      assertNull(configurationNode4.getValue());
      assertEquals("\":Su X{F5!Z", configurationNode4.getType());
      assertEquals(0, configurationNode4.getAttributeCount());
      assertNull(configurationNode5.getValue());
      assertEquals(0, configurationNode5.getAttributeCount());
      assertEquals("\":Su X{F5!Z", configurationNode5.getType());
      assertEquals(0, configurationNode5.getChildCount());
      assertNotSame(configurationNode0, configurationNode5);
      assertNotSame(configurationNode0, configurationNode2);
      assertNotSame(configurationNode0, configurationNode4);
      assertNotSame(configurationNode0, configurationNode1);
      assertNotSame(configurationNode0, configurationNode3);
      assertNotSame(configurationNode1, configurationNode3);
      assertNotSame(configurationNode1, configurationNode5);
      assertNotSame(configurationNode1, configurationNode0);
      assertSame(configurationNode1, configurationNode2);
      assertNotSame(configurationNode1, configurationNode4);
      assertNotSame(configurationNode3, configurationNode4);
      assertNotSame(configurationNode3, configurationNode2);
      assertNotSame(configurationNode3, configurationNode1);
      assertNotSame(configurationNode3, configurationNode5);
      assertNotSame(configurationNode3, configurationNode0);
      assertNotSame(configurationNode4, configurationNode1);
      assertNotSame(configurationNode4, configurationNode3);
      assertNotSame(configurationNode4, configurationNode2);
      assertNotSame(configurationNode4, configurationNode0);
      assertNotSame(configurationNode4, configurationNode5);
      assertNotSame(configurationNode5, configurationNode0);
      assertNotSame(configurationNode5, configurationNode1);
      assertNotSame(configurationNode5, configurationNode3);
      assertNotSame(configurationNode5, configurationNode2);
      assertNotSame(configurationNode5, configurationNode4);
      
      int int0 = (-489);
      // Undeclared exception!
      try { 
        ConfigurationNode.cloneAttributes((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("8NOiN");
      assertNotNull(configurationNode0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8NOiN", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      String string0 = configurationNode0.getType();
      assertNotNull(string0);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8NOiN", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals("8NOiN", string0);
      
      String string1 = configurationNode0.getAttributeValue((String) null);
      assertNull(string1);
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8NOiN", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      
      int int0 = configurationNode0.getChildCount();
      assertEquals(0, configurationNode0.getChildCount());
      assertNull(configurationNode0.getValue());
      assertEquals("8NOiN", configurationNode0.getType());
      assertEquals(0, configurationNode0.getAttributeCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      LinkedList<ConfigurationNode> linkedList0 = new LinkedList<ConfigurationNode>();
      configurationNode0.children = (List<ConfigurationNode>) linkedList0;
      configurationNode0.equals("");
      linkedList0.push(configurationNode0);
      configurationNode0.removeChild(0);
      configurationNode0.equals("");
      configurationNode0.getChildCount();
      configurationNode0.toString();
      linkedList0.add(configurationNode0);
      // Undeclared exception!
      try { 
        configurationNode0.findChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      int int0 = 2;
      configurationNode0.removeChild(2);
      ConfigurationNode configurationNode2 = configurationNode1.createDuplicate(false);
      configurationNode2.type = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      ConfigurationNode configurationNode3 = configurationNode1.createDuplicate(false);
      configurationNode1.getChildCount();
      configurationNode1.getAttributes();
      ConfigurationNode configurationNode4 = configurationNode1.createNewNode();
      configurationNode4.makeReadOnly();
      ConfigurationNode configurationNode5 = configurationNode3.createDuplicate(true);
      configurationNode5.getAttributes();
      configurationNode2.readOnly = true;
      configurationNode5.toString();
      configurationNode2.createNewNode();
      ConfigurationNode configurationNode6 = configurationNode4.createNewNode(configurationNode0);
      configurationNode6.equals(configurationNode2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2, 2959.6057F);
      ConfigurationNode.cloneAttributes(hashMap0);
      configurationNode0.getAttributes();
      // Undeclared exception!
      try { 
        configurationNode5.setAttribute("@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $", "='");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configurationNode0.setValue("");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configurationNode1.makeReadOnly();
      configurationNode1.makeReadOnly();
      configurationNode1.equals(configurationNode0);
      String string0 = null;
      // Undeclared exception!
      try { 
        ConfigurationNode.cloneAttributes((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configurationNode0.setAttribute("", "");
      configurationNode0.setValue("");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configurationNode1.makeReadOnly();
      configurationNode1.equals(configurationNode0);
      String string0 = null;
      configurationNode1.makeReadOnly();
      // Undeclared exception!
      try { 
        ConfigurationNode.cloneAttributes((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("+");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configurationNode1.makeReadOnly();
      configurationNode1.makeReadOnly();
      configurationNode1.equals(configurationNode0);
      String string0 = null;
      String string1 = " ";
      // Undeclared exception!
      try { 
        configurationNode1.clearChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("Yq");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode(configurationNode0);
      boolean boolean0 = false;
      ConfigurationNode configurationNode3 = configurationNode2.createDuplicate(false);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      configurationNode0.attributes = map0;
      configurationNode1.toString();
      configurationNode1.createDuplicate(false);
      configurationNode0.toString();
      configurationNode1.value = "";
      configurationNode2.setAttribute((String) null, "org.apah.commons.io.IOCase");
      Map<String, String> map1 = configurationNode0.attributes;
      ConfigurationNode.cloneAttributes(map1);
      int int0 = (-1202);
      // Undeclared exception!
      try { 
        configurationNode0.addChild((-1202), configurationNode3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1202, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configurationNode0.setAttribute("", "=\u0005>\"l7XP?A");
      ConfigurationNode configurationNode1 = new ConfigurationNode("");
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode1);
      configurationNode2.addChild(0, configurationNode0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      configurationNode1.attributes = map0;
      int int0 = configurationNode2.getAttributeCount();
      assertEquals(0, int0);
      
      ConfigurationNode.cloneAttributes(map0);
      configurationNode1.makeReadOnly();
      configurationNode2.hashCode();
      configurationNode0.createNewNode();
      assertEquals(1, configurationNode0.getAttributeCount());
      
      ConfigurationNode configurationNode3 = configurationNode2.createDuplicate(false);
      assertTrue(configurationNode3.equals((Object)configurationNode2));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "DW:4EIQ72,R|xJpD!";
      ConfigurationNode configurationNode0 = new ConfigurationNode("DW:4EIQ72,R|xJpD!");
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      configurationNode1.createDuplicate(true);
      configurationNode1.value = "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $";
      configurationNode1.setValue("java.version");
      configurationNode1.equals(configurationNode0);
      configurationNode1.hashCode();
      // Undeclared exception!
      try { 
        configurationNode1.clearChildren();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configurationNode0.removeChild(0);
      configurationNode0.setAttribute("", "");
      configurationNode0.getType();
      ConfigurationNode configurationNode1 = configurationNode0.createNewNode();
      configurationNode1.toString();
      int int0 = 0;
      configurationNode1.setAttribute((String) null, "( [])");
      // Undeclared exception!
      try { 
        configurationNode0.findChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.ConfigurationNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode("NxPa(M");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("NxPa(M", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      hashMap0.putIfAbsent("toVaP", "toVaP");
      configurationNode0.attributes = (Map<String, String>) hashMap0;
      ConfigurationNode configurationNode1 = new ConfigurationNode(configurationNode0);
      ConfigurationNode configurationNode2 = configurationNode1.createNewNode(configurationNode0);
      hashMap0.put("", "");
      ConfigurationNode configurationNode3 = configurationNode0.createNewNode(configurationNode1);
      configurationNode3.hashCode();
      hashMap0.put("Td4zGsCZbp|f!Ei,Vc", "NxPa(M");
      configurationNode0.getAttributes();
      configurationNode2.readOnly = false;
      configurationNode1.getAttributeValue("NxPa(M");
      configurationNode0.getAttributes();
      configurationNode0.setAttribute((String) null, (String) null);
      ConfigurationNode configurationNode4 = configurationNode2.createNewNode(configurationNode0);
      configurationNode4.readOnly = false;
      configurationNode0.setAttribute("Attempt to change read-only object", "@(#)$Id: ConfigurationNode.java 988245 2010-08-23 18:39:35Z kwright $");
      configurationNode0.hashCode();
      configurationNode1.getAttributeCount();
      configurationNode2.removeChild(0);
      Integer integer0 = Integer.valueOf((-4236));
      configurationNode4.equals(integer0);
      // Undeclared exception!
      try { 
        configurationNode3.addChild((-4236), configurationNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4236, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      ConfigurationNode configurationNode1 = new ConfigurationNode((String) null);
      ConfigurationNode configurationNode2 = new ConfigurationNode(configurationNode1);
      configurationNode0.createNewNode(configurationNode2);
      Vector<ConfigurationNode> vector0 = new Vector<ConfigurationNode>();
      configurationNode0.children = (List<ConfigurationNode>) vector0;
      ConfigurationNode configurationNode3 = new ConfigurationNode((String) null);
      configurationNode0.addChild(0, configurationNode3);
      // Undeclared exception!
      try { 
        configurationNode0.removeChild((-593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -593
         //
         verifyException("java.util.Vector", e);
      }
  }
}
