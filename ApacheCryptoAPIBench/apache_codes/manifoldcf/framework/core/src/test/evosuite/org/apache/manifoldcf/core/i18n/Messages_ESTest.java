/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:42:54 GMT 2022
 */

package org.apache.manifoldcf.core.i18n;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.StringReader;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.Month;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.log4j.Logger;
import org.apache.manifoldcf.core.i18n.Messages;
import org.apache.manifoldcf.core.system.Logging;
import org.apache.velocity.app.VelocityEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Messages_ESTest extends Messages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("org.apache.manifoldcf.core.i18n.Messages$BundleKey");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-64), (byte)115, (byte)33, (byte) (-24), (byte)115, (byte)45}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-64), (byte)115, (byte)33, (byte) (-24), (byte)115, (byte)45}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle1 = new PropertyResourceBundle(byteArrayInputStream0);
      assertFalse(propertyResourceBundle1.equals((Object)propertyResourceBundle0));
      assertNotNull(propertyResourceBundle1);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-64), (byte)115, (byte)33, (byte) (-24), (byte)115, (byte)45}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      String string0 = "org.apache.logging.log4j.core.config.plugins.convert.TypeConverters$IntegerConverter";
      Locale locale1 = Locale.forLanguageTag("org.apache.logging.log4j.core.config.plugins.convert.TypeConverters$IntegerConverter");
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertSame(locale1, locale0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ResourceBundle.clearCache(classLoader0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) propertyResourceBundle1, (String) null, locale0, "y7&S27");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "y-pg", 1);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("y-pg", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("y-pg", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("UdVkqM0A Q", hashMap0, sQLNonTransientConnectionException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("y-pg", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: UdVkqM0A Q", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("UdVkqM0A Q", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)sQLClientInfoException0.fillInStackTrace();
      assertNotNull(sQLClientInfoException1);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("y-pg", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: UdVkqM0A Q", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("UdVkqM0A Q", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: UdVkqM0A Q", sQLClientInfoException1.toString());
      assertEquals("UdVkqM0A Q", sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      
      Messages.complainMissingBundle("UdVkqM0A Q", sQLClientInfoException0, "", locale0);
      assertEquals(1, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("y-pg", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: UdVkqM0A Q", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("UdVkqM0A Q", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)Messages.getResourceAsStream(class0, "", locale0, "");
      assertNotNull(byteArrayInputStream0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(125, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("w5");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "UdVkqM0A Q", locale0, "", objectArray0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(176, int0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Canada", string0);
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("Canada", string1);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("Canada", "Reconfiguration completed for {} ({})", "Canada");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.localeName = "";
      boolean boolean0 = messages_ResourceKey0.equals("Canada");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) propertyResourceBundle0, (String) null, locale0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("Canada", string0);
      
      Month month0 = Month.JULY;
      assertEquals(Month.JULY, month0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = null;
      String string2 = "Could not find value for key {}";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) propertyResourceBundle0, (String) null, locale0, "Could not find value for key {}", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zh_TW", "%@J{Ev<x*sJ,gkI$w", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("zh_TW", sQLNonTransientConnectionException0.getMessage());
      assertEquals("%@J{Ev<x*sJ,gkI$w", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: zh_TW", sQLNonTransientConnectionException0.toString());
      
      Locale locale0 = new Locale("%@J{Ev<x*sJ,gkI$w");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("%@j{ev<x*sj,gki$w", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("%@j{ev<x*sj,gki$w", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingBundle("zh_TW", sQLNonTransientConnectionException0, "Z", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte) (-57), (byte)0, (byte) (-72), (byte) (-120)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte) (-57), (byte)0, (byte) (-72), (byte) (-120)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.forLanguageTag("V");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "org.apache.manifoldcf.core.i18n.Messages$BundleKey", locale0, "Hur");
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte) (-57), (byte)0, (byte) (-72), (byte) (-120)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("#*}8&9P", "@<cPaKY", "]7");
      assertNotNull(messages_MessageKey0);
      
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      ResourceBundle resourceBundle0 = Messages.getResourceBundle(class0, "V", locale0);
      assertNull(resourceBundle0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = Messages.getString((ResourceBundle) propertyResourceBundle0, "]7", locale0, "h6L?");
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte) (-57), (byte)0, (byte) (-72), (byte) (-120)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("h6L?", string1);
      
      String string2 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "[F>", locale0, "");
      assertNull(string2);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte) (-57), (byte)0, (byte) (-72), (byte) (-120)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("a'a+cPJq!qf[<8d", "a'a+cPJq!qf[<8d", "a'a+cPJq!qf[<8d");
      assertNotNull(messages_MessageKey0);
      
      Integer integer0 = new Integer((-2055362305));
      assertNotNull(integer0);
      assertEquals((-2055362305), (int)integer0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("DE", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      String string0 = Messages.getString(class0, "Error parsing start value ", locale0, "", (Object[]) null);
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", string0);
      assertNotSame(locale0, locale1);
      
      String string1 = Messages.getMessage(class0, "", locale1, "a'a+cPJq!qf[<8d");
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string1);
      assertEquals("DE", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      boolean boolean0 = messages_MessageKey0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.forLanguageTag("Hur");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("hur", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("hur", locale0.getLanguage());
      assertEquals("hur", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "!}ZeY1", locale0, "sJwZ.%T");
      assertNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getISO3Country());
      assertEquals("hur", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("hur", locale0.getLanguage());
      assertEquals("hur", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string1 = Messages.getString((ResourceBundle) propertyResourceBundle0, "Hur", locale0, "6wnSq", (Object[]) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getISO3Country());
      assertEquals("hur", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("hur", locale0.getLanguage());
      assertEquals("hur", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("6wnSq", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.forLanguageTag("sJwZ.%T");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "Hur", locale0, "sJwZ.%T");
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("Hur", "sJwZ.%T", "Z");
      assertNotNull(messages_MessageKey0);
      
      Month month0 = Month.JULY;
      assertEquals(Month.JULY, month0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hur";
      objectArray0[1] = (Object) messages_MessageKey0;
      objectArray0[2] = (Object) propertyResourceBundle0;
      objectArray0[3] = (Object) "sJwZ.%T";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      String string1 = Messages.getString((ResourceBundle) propertyResourceBundle0, "Hur", locale0, "sJwZ.%T", objectArray0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(6, objectArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("sJwZ.%T", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = new Locale("M'w1?2ZZ*");
      assertNotNull(locale0);
      assertEquals("m'w1?2zz*", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("m'w1?2zz*", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      InputStream inputStream0 = Messages.getResourceAsStream(class0, "org.apache.manifoldcf.core.i18n.Messages$BundleKey", locale0, "");
      assertNotNull(inputStream0);
      assertEquals("m'w1?2zz*", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("m'w1?2zz*", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(125, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zh_TW", "a'a+cPJq!qf[<8d", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: zh_TW", sQLNonTransientConnectionException0.toString());
      assertEquals("zh_TW", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("a'a+cPJq!qf[<8d", sQLNonTransientConnectionException0.getSQLState());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      Messages.complainMissingBundle("zh_TW", sQLNonTransientConnectionException0, "A", locale0);
      assertEquals("java.sql.SQLNonTransientConnectionException: zh_TW", sQLNonTransientConnectionException0.toString());
      assertEquals("zh_TW", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("a'a+cPJq!qf[<8d", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage("zh_TW", sQLNonTransientConnectionException0, "n!~;{K((A_*3N&", (Locale) null, "A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.forLanguageTag("sJwZ.%T");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "Hur", locale0, "sJwZ.%T");
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("Hur", "sJwZ.%T", "Z");
      assertNotNull(messages_MessageKey0);
      
      Month month0 = Month.JULY;
      assertEquals(Month.JULY, month0);
      
      boolean boolean0 = messages_MessageKey0.equals(month0);
      assertFalse(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning("gu%y", "Hur");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: gu%y", sQLWarning0.toString());
      assertEquals("gu%y", sQLWarning0.getMessage());
      assertEquals("Hur", sQLWarning0.getSQLState());
      
      Messages.complainMissingMessage("Hur", sQLWarning0, "Hur", locale0, "Hur");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: gu%y", sQLWarning0.toString());
      assertEquals("gu%y", sQLWarning0.getMessage());
      assertEquals("Hur", sQLWarning0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("Z>i_VP0", "No type attribute provided for Layout on Appender ");
      assertNotNull(messages_BundleKey0);
      
      messages_BundleKey0.bundleName = "Gtv`>";
      messages_BundleKey0.localeName = null;
      boolean boolean0 = messages_BundleKey0.equals("Z>i_VP0");
      assertFalse(boolean0);
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("China", string0);
      
      String string1 = Messages.getMessage(class0, "", locale0, "No type attribute provided for Layout on Appender ");
      assertNull(string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, (String) null, locale0, "China");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.forLanguageTag("sJwZ.%T");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      Month month0 = Month.JULY;
      assertEquals(Month.JULY, month0);
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      ResourceBundle resourceBundle0 = Messages.getResourceBundle(class0, "Z", locale0);
      assertNull(resourceBundle0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "Z", locale0, "No backup en_US bundle found! ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(byteArrayInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      Locale locale0 = Locale.forLanguageTag("sJwZ.%T");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "Hur", locale0, "sJwZ.%T");
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("Hur", "sJwZ.%T", "Z");
      assertNotNull(messages_MessageKey0);
      
      Month month0 = Month.JULY;
      assertEquals(Month.JULY, month0);
      
      boolean boolean0 = messages_MessageKey0.equals(month0);
      assertFalse(boolean0);
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      ResourceBundle resourceBundle0 = Messages.getResourceBundle(class0, "Z", locale0);
      assertNull(resourceBundle0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "Z", locale0, "No backup en_US bundle found! ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("5xnm8QG8)+rNakK", "No resource in path '", "resource.loader");
      assertNotNull(messages_MessageKey0);
      
      Integer integer0 = new Integer((-82));
      assertNotNull(integer0);
      assertEquals((-82), (int)integer0);
      
      boolean boolean0 = messages_MessageKey0.equals(integer0);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      String string0 = Messages.getString(class0, "directive.evaluate.context.class", locale1, "No resource in path '", (Object[]) null);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("No resource in path '", string0);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", (-2147), (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)sQLTransactionRollbackException0.fillInStackTrace();
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals((-2147), sQLTransactionRollbackException1.getErrorCode());
      assertEquals("", sQLTransactionRollbackException1.getSQLState());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException2 = (SQLTransactionRollbackException)sQLTransactionRollbackException0.fillInStackTrace();
      assertNotNull(sQLTransactionRollbackException2);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException2.getMessage());
      assertEquals("", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException2.toString());
      assertEquals((-2147), sQLTransactionRollbackException2.getErrorCode());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException2);
      assertSame(sQLTransactionRollbackException2, sQLTransactionRollbackException0);
      assertSame(sQLTransactionRollbackException2, sQLTransactionRollbackException1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Messages.complainMissingMessage("", sQLTransactionRollbackException0, "", locale0, " returned null keys or values from loadAll");
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException2);
      
      Messages.complainMissingBundle((String) null, (Throwable) null, "g|s~]jC4R)6W120", locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "", " returned null keys or values from loadAll");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.resourceKey = "Ig |H+FjDB";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = messages_ResourceKey0.equals(object0);
      assertFalse(boolean0);
      
      Messages.ResourceKey messages_ResourceKey1 = new Messages.ResourceKey("org.apache.commons.io.filefilter.EmptyFileFilter", "<rp>I9T{\"0M*", "Ig |H+FjDB");
      assertFalse(messages_ResourceKey1.equals((Object)messages_ResourceKey0));
      assertNotNull(messages_ResourceKey1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      String string0 = locale0.getDisplayScript();
      assertNotNull(string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", string0);
      
      String string1 = "";
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("", "");
      assertNotNull(messages_BundleKey0);
      
      Logger logger0 = Logger.getRootLogger();
      assertNotNull(logger0);
      assertEquals("", logger0.getName());
      
      Logging.misc = logger0;
      assertEquals("", logger0.getName());
      assertEquals("", Logging.misc.getName());
      
      messages_BundleKey0.bundleName = "Q\"Dd^74tIrM3";
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("", "", (String) null);
      assertNotNull(messages_MessageKey0);
      
      messages_MessageKey0.localeName = "";
      String string2 = "";
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      Messages.complainMissingMessage("", mockThrowable0, "", locale0, "");
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.contains(""));
      
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getControl(list0);
      assertNotNull(resourceBundle_Control0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.contains(""));
      
      // Undeclared exception!
      try { 
        ResourceBundle.getBundle("", resourceBundle_Control0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name , locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UdVkqM0A Q", "Z>i_VP0", (-21));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("UdVkqM0A Q", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: UdVkqM0A Q", sQLSyntaxErrorException0.toString());
      assertEquals("Z>i_VP0", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-21), sQLSyntaxErrorException0.getErrorCode());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      Messages.complainMissingBundle("", sQLSyntaxErrorException0, "Z>i_VP0", locale0);
      assertEquals("UdVkqM0A Q", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: UdVkqM0A Q", sQLSyntaxErrorException0.toString());
      assertEquals("Z>i_VP0", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-21), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1274);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1274, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.KOREAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ko", locale2.toString());
      assertEquals("kor", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Messages.complainMissingBundle("u*F>w[zupF/", sQLSyntaxErrorException0, "", locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("UdVkqM0A Q", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: UdVkqM0A Q", sQLSyntaxErrorException0.toString());
      assertEquals("Z>i_VP0", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-21), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ko", locale2.toString());
      assertEquals("kor", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Messages.complainMissingBundle((String) null, (Throwable) null, "g|s~]jC4R)6W120", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "", " returned null keys or values from loadAll");
      assertNotNull(messages_ResourceKey0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = messages_ResourceKey0.equals(object0);
      assertFalse(boolean0);
      
      Messages.ResourceKey messages_ResourceKey1 = new Messages.ResourceKey(" returned null keys or values from loadAll", "<rp>I9T{\"0M*", "Ig |H+FjDB");
      assertFalse(messages_ResourceKey1.equals((Object)messages_ResourceKey0));
      assertNotNull(messages_ResourceKey1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(" returned null keys or values from loadAll", "Z>i_VP0");
      assertNotNull(sQLTransientException0);
      assertEquals("Z>i_VP0", sQLTransientException0.getSQLState());
      assertEquals(" returned null keys or values from loadAll", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException:  returned null keys or values from loadAll", sQLTransientException0.toString());
      
      Messages.complainMissingResource("ko", sQLTransientException0, "e<&9;7C$|`.", locale0, "q39.Igx(oBtSz");
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Z>i_VP0", sQLTransientException0.getSQLState());
      assertEquals(" returned null keys or values from loadAll", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException:  returned null keys or values from loadAll", sQLTransientException0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Messages.complainMissingBundle("", sQLNonTransientConnectionException0, "", locale0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "", "");
      assertNotNull(messages_ResourceKey0);
      
      Messages.ResourceKey messages_ResourceKey1 = new Messages.ResourceKey("ko_KR", (String) null, (String) null);
      assertFalse(messages_ResourceKey1.equals((Object)messages_ResourceKey0));
      assertNotNull(messages_ResourceKey1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = messages_ResourceKey1.equals(object0);
      assertFalse(messages_ResourceKey1.equals((Object)messages_ResourceKey0));
      assertFalse(boolean0);
      assertNotSame(messages_ResourceKey1, messages_ResourceKey0);
      
      Locale locale1 = Locale.JAPANESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertNotSame(locale1, locale0);
      
      boolean boolean1 = locale0.hasExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(boolean1);
      assertNotSame(locale0, locale1);
      
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      String string0 = "9:4";
      try { 
        Messages.getResourceAsStream(class0, "9:4", locale1, "ko_KR");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '9:4' named 'ko_KR' found for locale 'ja'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-1));
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals((-1), sQLNonTransientConnectionException0.getErrorCode());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingBundle("Z", sQLNonTransientConnectionException0, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("V");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("V", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: V", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("China", string0);
      
      String string1 = Messages.getMessage(class0, "Resource not found", locale0, "Resource not found");
      assertNull(string1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "fpF.eqn(AXVS", locale0, "+=ZTZyl.%%3732hP", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, "", locale0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("runtime.log.logsystem.log4j.logger", "", "");
      assertNotNull(messages_MessageKey0);
      
      Class<Integer> class0 = Integer.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
      
      String string0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("runtime.log.logsystem.log4j.logger", "", (int[]) null);
      assertNotNull(batchUpdateException0);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      
      int[] intArray0 = batchUpdateException0.getUpdateCounts();
      assertNull(intArray0);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = batchUpdateException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(14, stackTraceElementArray0.length);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      
      StackTraceElement[] stackTraceElementArray1 = batchUpdateException0.getStackTrace();
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotNull(stackTraceElementArray1);
      assertEquals(14, stackTraceElementArray1.length);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      
      Spliterator<Throwable> spliterator0 = batchUpdateException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      
      SQLException sQLException0 = new SQLException("runtime.log.logsystem.log4j.logger", (String) null, 0, batchUpdateException0);
      assertNotNull(sQLException0);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      assertEquals("java.sql.SQLException: runtime.log.logsystem.log4j.logger", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("runtime.log.logsystem.log4j.logger", sQLException0.getMessage());
      
      sQLException0.setNextException(batchUpdateException0);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      assertEquals("java.sql.SQLException: runtime.log.logsystem.log4j.logger", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("runtime.log.logsystem.log4j.logger", sQLException0.getMessage());
      
      Messages.logError("", sQLException0);
      assertEquals("runtime.log.logsystem.log4j.logger", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: runtime.log.logsystem.log4j.logger", batchUpdateException0.toString());
      assertEquals("java.sql.SQLException: runtime.log.logsystem.log4j.logger", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("runtime.log.logsystem.log4j.logger", sQLException0.getMessage());
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey((String) null, "0-hou '.87:^'=_5L9", (String) null);
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.localeName = "resource.loader";
      messages_ResourceKey0.pathName = "";
      messages_ResourceKey0.resourceKey = "0-hou '.87:^'=_5L9";
      boolean boolean0 = messages_ResourceKey0.equals((Object) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      boolean boolean1 = locale0.hasExtensions();
      assertTrue(boolean1 == boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(boolean1);
      
      try { 
        Messages.getResourceAsStream(class0, "", locale0, "0-hou '.87:^'=_5L9");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' named '0-hou '.87:^'=_5L9' found for locale 'ja'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      try { 
        Messages.getResourceAsStream(class0, "+=ZTZyl.%%3732hP", locale0, "org.apache.commons.collections.ExtendedProperties");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '+=ZTZyl.%%3732hP' named 'org.apache.commons.collections.ExtendedProperties' found for locale 'de_DE'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UdVkqM0A Q", "UdVkqM0A Q", (-1));
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("UdVkqM0A Q", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UdVkqM0A Q", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UdVkqM0A Q", sQLNonTransientConnectionException0.toString());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      Messages.complainMissingBundle("UdVkqM0A Q", sQLNonTransientConnectionException0, "A", locale0);
      assertEquals("UdVkqM0A Q", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("UdVkqM0A Q", sQLNonTransientConnectionException0.getMessage());
      assertEquals((-1), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UdVkqM0A Q", sQLNonTransientConnectionException0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingResource("A", (Throwable) null, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("V");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: V", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("V", sQLFeatureNotSupportedException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.manifoldcf.core.i18n.Messages$BundleKey", "\":25i&:&%o0|%", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: V", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("V", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("\":25i&:&%o0|%", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.manifoldcf.core.i18n.Messages$BundleKey", sQLTransientConnectionException0.toString());
      assertEquals("org.apache.manifoldcf.core.i18n.Messages$BundleKey", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Messages.complainMissingMessage("V", sQLTransientConnectionException0, "V", locale0, "V");
      assertEquals("java.sql.SQLFeatureNotSupportedException: V", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("V", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("\":25i&:&%o0|%", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.manifoldcf.core.i18n.Messages$BundleKey", sQLTransientConnectionException0.toString());
      assertEquals("org.apache.manifoldcf.core.i18n.Messages$BundleKey", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      SQLWarning sQLWarning0 = new SQLWarning("`");
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: `", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("`", sQLWarning0.getMessage());
      
      Messages.complainMissingMessage("`", sQLWarning0, "`", locale0, "`");
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("java.sql.SQLWarning: `", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("`", sQLWarning0.getMessage());
      
      Locale locale1 = Locale.CHINA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey((String) null, ".andThen(");
      assertNotNull(messages_BundleKey0);
      
      boolean boolean0 = messages_BundleKey0.equals((Object) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 65536;
      longArray0[1] = (long) 65536;
      longArray0[2] = (long) 65536;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("s4&/{vQ", (String) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: s4&/{vQ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("s4&/{vQ", sQLRecoverableException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".andThen(", "G$0sdiyS", 65536, longArray0, sQLRecoverableException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new long[] {65536L, 65536L, 65536L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("java.sql.SQLRecoverableException: s4&/{vQ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("s4&/{vQ", sQLRecoverableException0.getMessage());
      assertEquals(65536, batchUpdateException0.getErrorCode());
      assertEquals(".andThen(", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: .andThen(", batchUpdateException0.toString());
      assertEquals("G$0sdiyS", batchUpdateException0.getSQLState());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingResource((String) null, batchUpdateException0, ".andThen(", (Locale) null, "G$0sdiyS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Locale locale0 = new Locale("+=ZTZyl.%%3732hP");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("+=ztzyl.%%3732hp", locale0.getLanguage());
      assertEquals("+=ztzyl.%%3732hp", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("+=ztzyl.%%3732hp", locale0.getLanguage());
      assertEquals("+=ztzyl.%%3732hp", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        Messages.getString(class0, "zh_TW", locale0, "9?>szFNMF(RrH", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "{6F7.1:Pi<wV";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "{6F7.1:Pi<wV";
      // Undeclared exception!
      try { 
        Messages.getString(class0, "uy?VqE2Ntg]F<Qk", locale0, "{6F7.1:Pi<wV", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      Messages.complainMissingBundle("", sQLNonTransientConnectionException0, "", locale0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "", "");
      assertNotNull(messages_ResourceKey0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      String string0 = Messages.getString(class0, "+=ZTZyl.%%3732hP", locale0, "+=ZTZyl.%%3732hP", (Object[]) null);
      assertNotNull(string0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("+=ZTZyl.%%3732hP", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("[I|sB/;&D_gWy-<e]", "' in bundle '");
      assertNotNull(messages_BundleKey0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = messages_BundleKey0.equals(object0);
      assertFalse(boolean0);
      
      Class<Object> class0 = Object.class;
      Locale locale0 = new Locale("]", "]");
      assertNotNull(locale0);
      assertEquals("]_]", locale0.toString());
      assertEquals("]", locale0.getCountry());
      assertEquals("]", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      try { 
        Messages.getResourceAsStream(class0, "' in bundle '", locale0, "sOr{Wr3G3#*pSZmo");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' in bundle '' named 'sOr{Wr3G3#*pSZmo' found for locale ']_]'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      Locale.setDefault(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      String string1 = locale0.getScript();
      assertNotNull(string1);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", string1);
      
      try { 
        Messages.getResourceAsStream(class0, "", locale0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' named '' found for locale 'en_US'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("^86n", "^86n", "");
      assertNotNull(messages_ResourceKey0);
      
      Messages.ResourceKey messages_ResourceKey1 = new Messages.ResourceKey("", "", "contextName");
      assertFalse(messages_ResourceKey1.equals((Object)messages_ResourceKey0));
      assertNotNull(messages_ResourceKey1);
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("", "A|U-7dH01{d2", "");
      assertNotNull(messages_MessageKey0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = messages_ResourceKey0.equals(object0);
      assertFalse(messages_ResourceKey0.equals((Object)messages_ResourceKey1));
      assertFalse(boolean0);
      assertNotSame(messages_ResourceKey0, messages_ResourceKey1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", (-2147), (Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)sQLTransactionRollbackException0.fillInStackTrace();
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getSQLState());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals((-2147), sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      Messages.complainMissingMessage("", sQLTransactionRollbackException0, "", locale0, " returned null keys or values from loadAll");
      assertEquals((-2147), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      
      Messages.complainMissingBundle((String) null, (Throwable) null, "g|s~]jC4R)6W120", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "", " returned null keys or values from loadAll");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.resourceKey = "Ig |H+FjDB";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = messages_ResourceKey0.equals(object0);
      assertFalse(boolean0);
      
      Messages.ResourceKey messages_ResourceKey1 = new Messages.ResourceKey("org.apache.commons.io.filefilter.EmptyFileFilter", "<rp>I9T{\"0M*", "Ig |H+FjDB");
      assertFalse(messages_ResourceKey1.equals((Object)messages_ResourceKey0));
      assertNotNull(messages_ResourceKey1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertSame(locale1, locale0);
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertNotNull(locale2);
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("fr", locale2.getLanguage());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, (String) null, locale0, "V!)--6\"f?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UdVkqM0A Q", "Z>0_VP,`0", (-21));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Class<Integer> class0 = Integer.TYPE;
      Messages.getResourceAsStream(class0, "", locale0, "");
      locale0.getDisplayCountry();
      Class<Messages.ResourceKey> class1 = Messages.ResourceKey.class;
      Messages.getMessage(class1, "q \"O(l; $8PJ7+8", locale0, "GMc?2vHKfPS;)[");
      Messages.complainMissingMessage("Fv%ckWwU6FX'/Tjjj]", sQLSyntaxErrorException0, "Reconfiguration started for context {} ({})", locale0, "");
      assertEquals("UdVkqM0A Q", sQLSyntaxErrorException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = new Locale("M'w1?2ZZ*");
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      try { 
        Messages.getResourceAsStream(class0, "org.apache.manifoldcf.core.i18n.Messages$BundleKey", locale0, "M'w1?2ZZ*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'org.apache.manifoldcf.core.i18n.Messages$BundleKey' named 'M'w1?2ZZ*' found for locale 'm'w1?2zz*'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = null;
      Locale locale0 = Locale.PRC;
      String string1 = "rs";
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, (String) null, locale0, "rs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        Messages.getMessage(class0, "No resource in path '", locale0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.clone();
      // Undeclared exception!
      try { 
        Messages.getMessage(class0, "directive.foreach.skip.invalid", locale0, "directive.foreach.skip.invalid");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("5xq?Hto@?", "5xq?Hto@?");
      boolean boolean0 = messages_BundleKey0.equals("5xq?Hto@?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey((String) null, (String) null);
      messages_BundleKey0.localeName = null;
      Object object0 = new Object();
      messages_BundleKey0.equals(object0);
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.TAIWAN;
      locale0.hasExtensions();
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      String string0 = Messages.getString(class0, "`+ZTZyl.%%3732hP", locale0, "`+ZTZyl.%%3732hP", (Object[]) null);
      assertEquals("`+ZTZyl.%%3732hP", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Messages messages0 = new Messages();
      Messages.logError("com.google.common.cache.CacheStats", (Throwable) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("com.google.common.cache.CacheStats");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = ".Ot2zx[:a#h";
      String string1 = null;
      String string2 = "";
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey(".Ot2zx[:a#h", (String) null, "");
      // Undeclared exception!
      try { 
        ResourceBundle.getBundle((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$CacheKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Month> class0 = Month.class;
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "ZJABY4K>) hV9", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "30,S:EyE;{M", ")7=i0&w2R_}");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "' named '";
      String string1 = null;
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("' named '", "' named '", (String) null);
      Class<Object> class0 = Object.class;
      String string2 = ":u^0;>m7";
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, ":u^0;>m7", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "runtime.log.logsystem.log4j.logger");
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage((String) null, sQLTransientConnectionException0, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "org.apache.manifoldcf.core.i18n.Messages$BundleKey";
      String string1 = "\":25i&:&%o0|%";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("V");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.manifoldcf.core.i18n.Messages$BundleKey", "\":25i&:&%o0|%", sQLFeatureNotSupportedException0);
      sQLTransientConnectionException0.getSuppressed();
      Locale locale0 = Locale.CHINA;
      Messages.complainMissingMessage("V", sQLTransientConnectionException0, "V", locale0, "V");
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("'", "'", "'");
      Object object0 = new Object();
      boolean boolean0 = messages_MessageKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Month> class0 = Month.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Messages messages0 = new Messages();
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Messages.createVelocityEngine(class0);
      Messages messages0 = new Messages();
      String string0 = null;
      Throwable throwable0 = null;
      Locale locale0 = Locale.TAIWAN;
      locale0.getDisplayScript();
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage((String) null, (Throwable) null, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLWarning sQLWarning0 = new SQLWarning("");
      Messages.complainMissingMessage("", sQLWarning0, "", locale0, "");
      Locale locale1 = Locale.CHINA;
      assertEquals("CN", locale1.getCountry());
  }
}
