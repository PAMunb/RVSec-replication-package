/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:25:39 GMT 2022
 */

package org.apache.manifoldcf.core.i18n;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.channels.FileChannel;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ThaiBuddhistEra;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggerFactory;
import org.apache.manifoldcf.core.i18n.Messages;
import org.apache.manifoldcf.core.system.Logging;
import org.apache.velocity.app.VelocityEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Messages_ESTest extends Messages_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("tqwP/{$&c", "", "");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.pathName = "";
      messages_ResourceKey0.localeName = "";
      messages_ResourceKey0.pathName = "tqwP/{$&c";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tqwP/{$&c", "tqwP/{$&c", 1118, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(1118, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: tqwP/{$&c", sQLNonTransientConnectionException0.toString());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getMessage());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getSQLState());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      Messages.complainMissingMessage("tqwP/{$&c", sQLNonTransientConnectionException0, "org.apache.commons.io.filefilter.NameFileFilter", locale0, "");
      assertEquals(1118, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: tqwP/{$&c", sQLNonTransientConnectionException0.toString());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getMessage());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "P:~<]T:7&x=j=hV'";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "tqwP/{$&c";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "org.apache.commons.io.filefilter.NameFileFilter";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String string0 = Messages.getString(class0, "P:~<]T:7&x=j=hV'", locale0, "PG%wrn=K!j#|oD", objectArray0);
      assertEquals("PG%wrn=K!j#|oD", string0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string1 = Messages.getMessage(class0, "c#g", locale0, "");
      assertNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      StringReader stringReader0 = new StringReader("tqwP/{$&c");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray1[0] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray1[1] = object2;
      objectArray1[2] = (Object) "mcf";
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray1[3] = object3;
      String string2 = Messages.getString((ResourceBundle) propertyResourceBundle0, "FY", locale0, "mcf", objectArray1);
      assertEquals("mcf", string2);
      assertNotNull(string2);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("tqwP/{$&c", "", "");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.pathName = "";
      messages_ResourceKey0.localeName = "";
      messages_ResourceKey0.pathName = "tqwP/{$&c";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tqwP/{$&c", "tqwP/{$&c", 1118, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(1118, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: tqwP/{$&c", sQLNonTransientConnectionException0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Messages.complainMissingMessage("tqwP/{$&c", sQLNonTransientConnectionException0, "org.apache.commons.io.filefilter.NameFileFilter", locale0, "");
      assertEquals(1118, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: tqwP/{$&c", sQLNonTransientConnectionException0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "P:~<]T:7&x=j=hV'";
      objectArray0[1] = (Object) "tqwP/{$&c";
      objectArray0[2] = (Object) "tqwP/{$&c";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "org.apache.commons.io.filefilter.NameFileFilter";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String string0 = Messages.getString(class0, "P:~<]T:7&x=j=hV'", locale0, "PG%wrn=K!j#|oD", objectArray0);
      assertEquals("PG%wrn=K!j#|oD", string0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string1 = Messages.getString(class0, "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry", locale0, "", objectArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "'ZeJQy:*", "");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.resourceKey = "fA?";
      messages_ResourceKey0.localeName = null;
      messages_ResourceKey0.resourceKey = "'ZeJQy:*";
      boolean boolean2 = messages_ResourceKey0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      System.setCurrentTimeMillis(0L);
      Class<Integer> class0 = Integer.class;
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, (String) null, locale0, "8x\"a[h.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("tqwP/{$&c", "", "");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.pathName = "";
      messages_ResourceKey0.localeName = "";
      messages_ResourceKey0.pathName = "tqwP/{$&c";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("tqwP/{$&c", "tqwP/{$&c", 1118, (Throwable) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(1118, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getMessage());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: tqwP/{$&c", sQLNonTransientConnectionException0.toString());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Messages.complainMissingMessage("tqwP/{$&c", sQLNonTransientConnectionException0, "org.apache.commons.io.filefilter.NameFileFilter", locale0, "");
      assertEquals(1118, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getMessage());
      assertEquals("tqwP/{$&c", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: tqwP/{$&c", sQLNonTransientConnectionException0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "P:~<]T:7&x=j=hV'";
      objectArray0[1] = (Object) "tqwP/{$&c";
      objectArray0[2] = (Object) "tqwP/{$&c";
      objectArray0[4] = (Object) "org.apache.commons.io.filefilter.NameFileFilter";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String string0 = Messages.getString(class0, "P:~<]T:7&x=j=hV'", locale0, "PG%wrn=K!j#|oD", objectArray0);
      assertEquals("PG%wrn=K!j#|oD", string0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class1);
      assertNotNull(velocityEngine0);
      
      String string1 = Messages.getString(class0, "IQjl` [+>)C44-O^@F", locale0, (String) null, objectArray0);
      assertNull(string1);
      assertEquals(6, objectArray0.length);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("' for locale '");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "' for locale '", locale0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      try { 
        Messages.getResourceAsStream(class0, "", locale0, "W@!3S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' named 'W@!3S' found for locale ''
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("runtime.log.logsystem.class", "");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.fillInStackTrace();
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException1.getMessage());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("_steyO m0rH/", (String) null, 436, sQLSyntaxErrorException0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(436, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("_steyO m0rH/", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: _steyO m0rH/", sQLTransientException0.toString());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("runtime.log.logsystem.class");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      Object[] objectArray0 = new Object[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertTrue(boolean0);
      
      objectArray0[2] = (Object) mockPrintWriter0;
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) sQLSyntaxErrorException0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "", objectArray0);
      assertNotNull(mockPrintWriter1);
      assertEquals(7, objectArray0.length);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter1);
      assertEquals(7, objectArray0.length);
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      
      Locale locale1 = null;
      Class<Messages.MessageKey> class0 = Messages.MessageKey.class;
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)Messages.getResourceAsStream(class0, "org.apache.velocity.runtime.log.Log4JLogChute", (Locale) null, "");
      assertNotNull(byteArrayInputStream0);
      assertEquals(125, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage("_steyO m0rH/", sQLTransientException0, "org.apache.velocity.runtime.log.Log4JLogChute", (Locale) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Floats.stringConverter()");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.google.common.reflect.Types");
      assertTrue(boolean0);
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("Floats.stringConverter()", "Floats.stringConverter()", "x\"3Uo~");
      assertNotNull(messages_MessageKey0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("Floats.stringConverter()");
      assertNotNull(mockFileInputStream0);
      
      mockFileInputStream0.mark(985);
      assertEquals(32, mockFileInputStream0.available());
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(mockFileInputStream0);
      assertNotNull(propertyResourceBundle0);
      assertEquals((-3), mockFileInputStream0.available());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "Floats.stringConverter()", locale0, "Floats.stringConverter()");
      assertNull(string0);
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("com.google.common.reflect.Types"));
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-123);
      int int0 = mockFileInputStream0.read(byteArray0, 1, (-1505));
      assertArrayEquals(new byte[] {(byte)52, (byte) (-123)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertEquals((-3), mockFileInputStream0.available());
      
      String string1 = Messages.getMessage((ResourceBundle) propertyResourceBundle0, "3>gu~dcyQ`pw\"Ps-;", locale0, "");
      assertNull(string1);
      assertEquals((-3), mockFileInputStream0.available());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, ">'ELi;Cr(n/>>.isVN>", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      Locale locale0 = new Locale("=c[3*SV~1Ko", "=c[3*SV~1Ko");
      assertNotNull(locale0);
      assertEquals("=c[3*sv~1ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("=c[3*sv~1ko_=C[3*SV~1KO", locale0.toString());
      assertEquals("=C[3*SV~1KO", locale0.getCountry());
      
      ResourceBundle resourceBundle0 = Messages.getResourceBundle(class0, "=c[3*SV~1Ko", locale0);
      assertNull(resourceBundle0);
      assertEquals("=c[3*sv~1ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("=c[3*sv~1ko_=C[3*SV~1KO", locale0.toString());
      assertEquals("=C[3*SV~1KO", locale0.getCountry());
      
      String string0 = "Missing resource bundle '";
      PropertyResourceBundle propertyResourceBundle0 = null;
      try {
        propertyResourceBundle0 = new PropertyResourceBundle((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Properties$LineReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "' for locale '";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Messages.complainMissingResource("' for locale '", sQLRecoverableException0, "' for locale '", locale0, "' for locale '");
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = ":6-`O:8-{?";
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("' for locale '", "com.google.common.reflect.Types", ":6-`O:8-{?");
      assertNotNull(messages_ResourceKey0);
      
      messages_ResourceKey0.pathName = "N%Cz;co?^qIgCKmm&";
      boolean boolean1 = messages_ResourceKey0.equals(locale0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      Locale locale1 = Locale.CHINA;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertNotSame(locale1, locale0);
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotNull(set0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale1, locale0);
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotSame(locale0, locale1);
      
      String string2 = Messages.getMessage(class0, "com.google.common.reflect.Types", locale1, "");
      assertNull(string2);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertNotSame(locale1, locale0);
      
      ClassLoader classLoader0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("com.google.common.reflect.Types"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "<anonymous method>";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<anonymous method>", "<anonymous method>");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: <anonymous method>", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("<anonymous method>", sQLTransientConnectionException0.getMessage());
      assertEquals("<anonymous method>", sQLTransientConnectionException0.getSQLState());
      
      MockFile mockFile0 = new MockFile("j=y");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "-F(;x?Lo@W>4");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      File file0 = MockFile.createTempFile("org.apache.velocity.runtime.log.Log4JLogChute", "<anonymous method>", (File) mockFile1);
      assertNotNull(file0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertTrue(mockFile0.canWrite());
      assertEquals("j=y", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("j=y", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertEquals("-F(;x?Lo@W>4", mockFile1.getName());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y/-F(;x?Lo@W>4", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("org.apache.velocity.runtime.log.Log4JLogChute0<anonymous method>", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y/-F(;x?Lo@W>4", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y/-F(;x?Lo@W>4/org.apache.velocity.runtime.log.Log4JLogChute0<anonymous method>", file0.toString());
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      
      sQLTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertEquals("java.sql.SQLTransientConnectionException: <anonymous method>", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("<anonymous method>", sQLTransientConnectionException0.getMessage());
      assertEquals("<anonymous method>", sQLTransientConnectionException0.getSQLState());
      assertTrue(mockFile0.canWrite());
      assertEquals("j=y", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("j=y", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertEquals("-F(;x?Lo@W>4", mockFile1.getName());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y/-F(;x?Lo@W>4", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("org.apache.velocity.runtime.log.Log4JLogChute0<anonymous method>", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y/-F(;x?Lo@W>4", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/j=y/-F(;x?Lo@W>4/org.apache.velocity.runtime.log.Log4JLogChute0<anonymous method>", file0.toString());
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        Messages.complainMissingBundle("<anonymous method>", sQLTransientConnectionException0, "<anonymous method>", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("TyeQt/p?d3-=`M", "*J1j");
      assertNotNull(sQLTimeoutException0);
      assertEquals("*J1j", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("TyeQt/p?d3-=`M", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLTimeoutException0.toString());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals("*J1j", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("TyeQt/p?d3-=`M", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      Messages.logError("*J1j", sQLNonTransientException0);
      assertEquals("*J1j", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("TyeQt/p?d3-=`M", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: TyeQt/p?d3-=`M", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException("Unable to coerce type to UUID: ", "~OJxt,VIe'%vV", (-198));
      assertNotNull(sQLDataException0);
      assertEquals((-198), sQLDataException0.getErrorCode());
      assertEquals("~OJxt,VIe'%vV", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: Unable to coerce type to UUID: ", sQLDataException0.toString());
      assertEquals("Unable to coerce type to UUID: ", sQLDataException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      Locale locale0 = new Locale("", "", "org.apache.manifoldcf.core.i18n.Messages$ResourceKey");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("org.apache.manifoldcf.core.i18n.Messages$ResourceKey", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      
      Messages.complainMissingMessage("", sQLTransactionRollbackException0, "", locale0, "k\"14&F!o0?)G");
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("org.apache.manifoldcf.core.i18n.Messages$ResourceKey", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "yoUe^`L~2%S+U`Q~)", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", ": ", "");
      assertNotNull(messages_ResourceKey0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      Locale locale0 = Locale.forLanguageTag("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Messages.complainMissingMessage((String) null, batchUpdateException0, "", locale0, "_nqGzm[OQ3Pbuusbx");
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "fa5cs");
      assertNotNull(sQLRecoverableException0);
      assertEquals("fa5cs", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Messages.logError("", sQLRecoverableException0);
      assertEquals("fa5cs", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey((String) null, (String) null, "fa5cs");
      assertNotNull(messages_MessageKey0);
      
      boolean boolean0 = messages_MessageKey0.equals("fa5cs");
      assertFalse(boolean0);
      
      boolean boolean1 = messages_MessageKey0.equals(sQLRecoverableException0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("fa5cs", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      LoggerFactory loggerFactory0 = mock(LoggerFactory.class, new ViolatedAssumptionAnswer());
      Logger logger0 = Logger.getLogger("", loggerFactory0);
      logger0.getResourceBundle();
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "{q<q#eXMl9S", (Locale) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResourceBundle resourceBundle0 = null;
      String string0 = "";
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = "hS1A\"[z>8}hzW]p|#ok";
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, "", locale0, "hS1A\"[z>8}hzW]p|#ok", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      String string0 = "";
      Logger logger0 = Logger.getLogger("");
      assertNotNull(logger0);
      assertEquals("", logger0.getName());
      
      Logging.misc = logger0;
      assertEquals("", logger0.getName());
      assertEquals("", Logging.misc.getName());
      
      Class<Integer> class0 = Integer.class;
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      try { 
        Messages.getResourceAsStream(class0, "%H", locale0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '%H' named '' found for locale ''
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "/n&;OlIhVrEZ2[t";
      String string1 = null;
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("/n&;OlIhVrEZ2[t", (String) null, "K\"i?Ko{");
      assertNotNull(messages_MessageKey0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      messages_MessageKey0.bundleName = "K\"i?Ko{";
      messages_MessageKey0.messageKey = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      messages_MessageKey0.messageKey = "9 3pnzq<Z ~!";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) messages_MessageKey0;
      objectArray0[4] = (Object) "/n&;OlIhVrEZ2[t";
      objectArray0[5] = (Object) messages_MessageKey0;
      objectArray0[6] = (Object) locale0;
      messages_MessageKey0.messageKey = "O|=_I";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) messages_MessageKey0;
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) null, (String) null, locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("X/P2", "7", (-811));
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: X/P2", sQLWarning0.toString());
      assertEquals("7", sQLWarning0.getSQLState());
      assertEquals("X/P2", sQLWarning0.getMessage());
      assertEquals((-811), sQLWarning0.getErrorCode());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("7", sQLWarning0);
      assertNotNull(sQLTransientException0);
      assertEquals("java.sql.SQLWarning: X/P2", sQLWarning0.toString());
      assertEquals("7", sQLWarning0.getSQLState());
      assertEquals("X/P2", sQLWarning0.getMessage());
      assertEquals((-811), sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 7", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("7", sQLTransientException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("CharMatcher.singleWidth()", "CharMatcher.singleWidth()", sQLTransientException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLWarning: X/P2", sQLWarning0.toString());
      assertEquals("7", sQLWarning0.getSQLState());
      assertEquals("X/P2", sQLWarning0.getMessage());
      assertEquals((-811), sQLWarning0.getErrorCode());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 7", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("7", sQLTransientException0.getMessage());
      assertEquals("CharMatcher.singleWidth()", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: CharMatcher.singleWidth()", sQLRecoverableException0.toString());
      assertEquals("CharMatcher.singleWidth()", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingResource("CharMatcher.singleWidth()", sQLRecoverableException0, "7", locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages$ResourceKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("", "");
      assertNotNull(messages_BundleKey0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "V{Tk{`xdSKb@))N;", (-190));
      assertNotNull(sQLRecoverableException0);
      assertEquals("V{Tk{`xdSKb@))N;", sQLRecoverableException0.getSQLState());
      assertEquals((-190), sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      
      SQLException sQLException0 = new SQLException(sQLRecoverableException0);
      assertNotNull(sQLException0);
      assertEquals("V{Tk{`xdSKb@))N;", sQLRecoverableException0.getSQLState());
      assertEquals((-190), sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLRecoverableException: ", sQLException0.toString());
      assertEquals("java.sql.SQLRecoverableException: ", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Locale locale1 = Locale.KOREAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayName(locale1);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Messages.complainMissingBundle("", sQLException0, "", locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("V{Tk{`xdSKb@))N;", sQLRecoverableException0.getSQLState());
      assertEquals((-190), sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: java.sql.SQLRecoverableException: ", sQLException0.toString());
      assertEquals("java.sql.SQLRecoverableException: ", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotSame(locale0, locale1);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("", "96#X[OxTYG", (String) null);
      assertNotNull(messages_ResourceKey0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=w", "kbHyJ", 0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("=w", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("kbHyJ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: =w", sQLInvalidAuthorizationSpecException0.toString());
      
      Messages.complainMissingResource("h?+8ynSx#cn", sQLInvalidAuthorizationSpecException0, "B\"^ZggV{jeYhh'8", locale1, "");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("=w", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("kbHyJ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: =w", sQLInvalidAuthorizationSpecException0.toString());
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("O6`XMfEF5_", "EfS\"s2oL=O^", (String) null);
      assertNotNull(messages_MessageKey0);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("EfS\"s2oL=O^", (String) null, (String) null);
      assertNotNull(messages_ResourceKey0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("EfS\"s2oL=O^", (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("EfS\"s2oL=O^", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: EfS\"s2oL=O^", sQLTransientConnectionException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException("O6`XMfEF5_", sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("EfS\"s2oL=O^", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: EfS\"s2oL=O^", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: O6`XMfEF5_", sQLDataException0.toString());
      assertEquals("O6`XMfEF5_", sQLDataException0.getMessage());
      
      Locale locale0 = Locale.forLanguageTag("rY");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      Messages.complainMissingBundle("O6`XMfEF5_", sQLDataException0, "j=y", locale0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("EfS\"s2oL=O^", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: EfS\"s2oL=O^", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: O6`XMfEF5_", sQLDataException0.toString());
      assertEquals("O6`XMfEF5_", sQLDataException0.getMessage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      boolean boolean0 = messages_ResourceKey0.equals("O6`XMfEF5_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.fillInStackTrace();
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      Locale.setDefault(locale_Category0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage("", sQLNonTransientConnectionException0, "_", locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages$MessageKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(" ,(UrG6RGwe__yp");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      Messages.complainMissingMessage("q9U?SWx(h+GE$1", (Throwable) null, "q9U?SWx(h+GE$1", locale0, "q9U?SWx(h+GE$1");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      Messages.complainMissingBundle("!~JH#A53TK:[~!6'_M3", (Throwable) null, "&[Y;f1k\"!-k/@m", locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      try { 
        Messages.getResourceAsStream(class0, "", locale0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' named '' found for locale 'ko'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("runtime.log.logsystem.class", "");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.fillInStackTrace();
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException1.toString());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("_steyO m0rH/", (String) null, 436, sQLSyntaxErrorException0);
      assertNotNull(sQLTransientException0);
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(436, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: _steyO m0rH/", sQLTransientException0.toString());
      assertEquals("_steyO m0rH/", sQLTransientException0.getMessage());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("runtime.log.logsystem.class");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) sQLSyntaxErrorException0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "", objectArray0);
      assertNotNull(mockPrintWriter1);
      assertEquals(7, objectArray0.length);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter1);
      assertEquals(7, objectArray0.length);
      assertEquals("runtime.log.logsystem.class", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: runtime.log.logsystem.class", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      
      Locale locale1 = null;
      // Undeclared exception!
      try { 
        Messages.complainMissingMessage("_steyO m0rH/", sQLTransientException0, "org.apache.velocity.runtime.log.Log4JLogChute", (Locale) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      Locale locale1 = Locale.forLanguageTag("Vkqn.T[F$}");
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      Messages.complainMissingMessage("Multiple entries with same ", sQLTransientConnectionException0, "", locale0, "");
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertNotSame(locale0, locale1);
      
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("", "Multiple entries with same ");
      assertNotNull(messages_BundleKey0);
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, "Multiple entries with same ", locale0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      String string0 = null;
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      // Undeclared exception!
      try { 
        Messages.getResourceAsStream(class0, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
      
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("", "");
      assertNotNull(messages_BundleKey0);
      
      messages_BundleKey0.bundleName = "org.apache.manifoldcf.core.i18n.Messages$ResourceKey";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No backup en bundle found! ", "", 363);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLFeatureNotSupportedException0.toString());
      assertEquals(363, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("No backup en bundle found! ", sQLFeatureNotSupportedException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLFeatureNotSupportedException0.toString());
      assertEquals(363, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("No backup en bundle found! ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "No backup en bundle found! ", (-1), sQLWarning0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLFeatureNotSupportedException0.toString());
      assertEquals(363, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("No backup en bundle found! ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("No backup en bundle found! ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      sQLInvalidAuthorizationSpecException0.setNextException(sQLWarning0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLFeatureNotSupportedException0.toString());
      assertEquals(363, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("No backup en bundle found! ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLFeatureNotSupportedException: No backup en bundle found! ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("No backup en bundle found! ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("org.apache.manifoldcf.core.i18n.Messages$ResourceKey"));
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingBundle((String) null, sQLInvalidAuthorizationSpecException0, (String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("org.apache.commons.io.filefilter.RegexFileFilter", "org.apache.commons.io.filefilter.RegexFileFilter", "N}{\"$XeM|4:q?8@e'");
      assertNotNull(messages_ResourceKey0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.io.filefilter.RegexFileFilter");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.io.filefilter.RegexFileFilter", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Messages.complainMissingBundle("org.apache.commons.io.filefilter.RegexFileFilter", sQLTransactionRollbackException0, "org.apache.commons.io.filefilter.RegexFileFilter", locale0);
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.io.filefilter.RegexFileFilter", sQLTransactionRollbackException0.toString());
      assertEquals("org.apache.commons.io.filefilter.RegexFileFilter", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "}5?sBsV@[cS";
      String string1 = "Missing resource bundle '";
      SQLException sQLException0 = new SQLException("Missing resource bundle '");
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Missing resource bundle '", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: Missing resource bundle '", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLException0);
      assertNotNull(mockThrowable0);
      
      Locale locale0 = Locale.forLanguageTag("0 9C");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      Messages.complainMissingResource("}5?sBsV@[cS", mockThrowable0, "Missing resource bundle '", locale0, "velocity");
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Missing resource bundle '", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: Missing resource bundle '", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLException: Missing resource bundle '", mockThrowable0.toString());
      assertEquals("java.sql.SQLException: Missing resource bundle '", mockThrowable0.getMessage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      Locale locale1 = Locale.lookup(vector0, treeSet0);
      assertNull(locale1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Missing resource bundle '", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: Missing resource bundle '", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLException: Missing resource bundle '", mockThrowable0.toString());
      assertEquals("java.sql.SQLException: Missing resource bundle '", mockThrowable0.getMessage());
      
      String string2 = "SqUs!Z{=W9>'Fy|bu";
      // Undeclared exception!
      try { 
        Messages.complainMissingResource("}5?sBsV@[cS", mockThrowable0, "0 9C", (Locale) null, "SqUs!Z{=W9>'Fy|bu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = "org.apache.velocity.runtime.log.Log4JLogChute";
      try { 
        Messages.getResourceAsStream(class0, "", locale0, "org.apache.velocity.runtime.log.Log4JLogChute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' named 'org.apache.velocity.runtime.log.Log4JLogChute' found for locale 'zh'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      String string0 = "+KqVu7`j[4+1$H2-";
      String string1 = "0(_dE$1GTC";
      Locale locale0 = new Locale("0(_dE$1GTC");
      assertNotNull(locale0);
      assertEquals("0(_de$1gtc", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("0(_de$1gtc", locale0.toString());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "+KqVu7`j[4+1$H2-", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResourceBundle resourceBundle0 = null;
      String string0 = "1\\";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, "1", locale0, "1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        Messages.getString((ResourceBundle) propertyResourceBundle0, (String) null, locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PropertyResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_", "_", 124);
      assertNotNull(sQLTimeoutException0);
      assertEquals("_", sQLTimeoutException0.getMessage());
      assertEquals("_", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: _", sQLTimeoutException0.toString());
      assertEquals(124, sQLTimeoutException0.getErrorCode());
      
      Messages.logError("RzeqG0gPKN~_5_b5]K", sQLTimeoutException0);
      assertEquals("_", sQLTimeoutException0.getMessage());
      assertEquals("_", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: _", sQLTimeoutException0.toString());
      assertEquals(124, sQLTimeoutException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("Vm <)qezjO4Gx9[^L", "Vm <)qezjO4Gx9[^L", "Vm <)qezjO4Gx9[^L");
      assertNotNull(messages_MessageKey0);
      
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Messages.complainMissingMessage("Vm <)qezjO4Gx9[^L", (Throwable) null, "PG%wrn=K!j#|oD", locale0, "Vm <)qezjO4Gx9[^L");
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, "PG%wrn=K!j#|oD", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "Unable to deserialize BloomFilter from InputStream. strategyOrdinal: ";
      // Undeclared exception!
      try { 
        Messages.getString(class0, (String) null, locale0, "Unable to deserialize BloomFilter from InputStream. strategyOrdinal: ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<String> class0 = String.class;
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        Messages.getMessage(class0, "Missing resource bundle '", locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("org.apache.manifoldcf.core.i18n.Messages$MessageKey", "");
      assertNotNull(messages_BundleKey0);
      
      boolean boolean0 = messages_BundleKey0.equals("org.apache.manifoldcf.core.i18n.Messages$MessageKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      Class<String> class0 = String.class;
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      
      // Undeclared exception!
      try { 
        Messages.getMessage(class0, "Jb`m~W9Q<-:?ZDD>8k", locale0, "Jb`m~W9Q<-:?ZDD>8k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      
      try { 
        Messages.getResourceAsStream(class0, "p9w9NH.-", locale0, "-ER%q,ggqd{{NQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'p9w9NH.-' named '-ER%q,ggqd{{NQ' found for locale 'en_GB'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("\"$8)il=", "mcf.resource.loader.instance", "mcf.resource.loader.instance");
      assertNotNull(messages_ResourceKey0);
      
      boolean boolean0 = messages_ResourceKey0.equals("mcf.resource.loader.instance");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("Ll+P`OJm", "Ll+P`OJm", "Ll+P`OJm");
      assertNotNull(messages_ResourceKey0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "@&.O|j-P:Z4p} Wq";
      objectArray0[2] = (Object) "@&.O|j-P:Z4p} Wq";
      objectArray0[3] = (Object) "@&.O|j-P:Z4p} Wq";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "@&.O|j-P:Z4p} Wq";
      objectArray0[8] = (Object) "@&.O|j-P:Z4p} Wq";
      // Undeclared exception!
      try { 
        Messages.getString(class0, "@&.O|j-P:Z4p} Wq", locale0, "@&.O|j-P:Z4p} Wq", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "' found for locale '";
      objectArray0[1] = (Object) locale0;
      // Undeclared exception!
      try { 
        Messages.getString(class0, "' found for locale '", locale0, "' found for locale '", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        Messages.getMessage(class0, "_SQq`=)UVwZz+Pr$J", locale0, "_SQq`=)UVwZz+Pr$J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("': ", "': ", "': ");
      assertNotNull(messages_MessageKey0);
      
      boolean boolean0 = messages_MessageKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("%", "%", "%");
      assertNotNull(messages_MessageKey0);
      
      messages_MessageKey0.bundleName = "%";
      messages_MessageKey0.localeName = "%";
      boolean boolean0 = messages_MessageKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = Messages.getMessage(class0, "CharMatcher.inRange('", locale0, "CharMatcher.inRange('");
      assertNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      // Undeclared exception!
      try { 
        Messages.complainMissingResource("Mxh0fMpc&", sQLIntegrityConstraintViolationException0, "CharMatcher.inRange('", locale0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages$ResourceKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      Messages.complainMissingMessage("_G", sQLClientInfoException1, "_G", locale0, "");
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_G");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLClientInfoException1.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      Messages.complainMissingMessage("_G", sQLClientInfoException1, "_G", locale0, "L7*%fa");
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        Messages.getMessage((ResourceBundle) null, "_G", locale0, "/]q*8:y}s*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3`PWLty'", "Throwable", (-760));
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      
      Locale locale0 = new Locale("3`PWLty'", "'`@&3#", "Nd#xrYVpIgQR<WZ");
      assertNotNull(locale0);
      assertEquals("3`pwlty'_'`@&3#_Nd#xrYVpIgQR<WZ", locale0.toString());
      assertEquals("'`@&3#", locale0.getCountry());
      assertEquals("Nd#xrYVpIgQR<WZ", locale0.getVariant());
      assertEquals("3`pwlty'", locale0.getLanguage());
      
      Messages.complainMissingMessage("`JH6R.ve58i", sQLDataException0, "`JH6R.ve58i", locale0, "8mY");
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("3`pwlty'_'`@&3#_Nd#xrYVpIgQR<WZ", locale0.toString());
      assertEquals("'`@&3#", locale0.getCountry());
      assertEquals("Nd#xrYVpIgQR<WZ", locale0.getVariant());
      assertEquals("3`pwlty'", locale0.getLanguage());
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      
      Class<Messages.ResourceKey> class0 = Messages.ResourceKey.class;
      String string0 = sQLSyntaxErrorException0.getLocalizedMessage();
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", string0);
      assertNotNull(string0);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      
      VelocityEngine velocityEngine0 = Messages.createVelocityEngine(class0);
      assertNotNull(velocityEngine0);
      
      Messages.complainMissingResource("h(jIgk^", sQLDataException0, "IQjl` [+>)C44-O^@F", locale0, "`JH6R.ve58i");
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("3`pwlty'_'`@&3#_Nd#xrYVpIgQR<WZ", locale0.toString());
      assertEquals("'`@&3#", locale0.getCountry());
      assertEquals("Nd#xrYVpIgQR<WZ", locale0.getVariant());
      assertEquals("3`pwlty'", locale0.getLanguage());
      
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("IQjl` [+>)C44-O^@F", "8mY");
      assertNotNull(messages_BundleKey0);
      
      boolean boolean1 = messages_BundleKey0.equals(sQLRecoverableException0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      
      String string1 = Messages.getString((Class) class0, "Nd#xrYVpIgQR<WZ", locale0, "Throwable", (Object[]) throwableArray0);
      assertEquals("Throwable", string1);
      assertNotNull(string1);
      assertEquals(0, throwableArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLRecoverableException0.toString());
      assertEquals("Throwable", sQLRecoverableException0.getSQLState());
      assertEquals("3`PWLty'", sQLRecoverableException0.getMessage());
      assertEquals((-760), sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3`PWLty'", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLSyntaxErrorException: java.sql.SQLRecoverableException: 3`PWLty'", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("3`pwlty'_'`@&3#_Nd#xrYVpIgQR<WZ", locale0.toString());
      assertEquals("'`@&3#", locale0.getCountry());
      assertEquals("Nd#xrYVpIgQR<WZ", locale0.getVariant());
      assertEquals("3`pwlty'", locale0.getLanguage());
      
      Messages.BundleKey messages_BundleKey1 = new Messages.BundleKey("Nd#xrYVpIgQR<WZ", "^\"jTo8)?nl");
      assertNotNull(messages_BundleKey1);
      assertFalse(messages_BundleKey1.equals((Object)messages_BundleKey0));
      
      boolean boolean2 = messages_BundleKey0.equals(messages_BundleKey1);
      assertFalse(boolean2);
      assertFalse(messages_BundleKey1.equals((Object)messages_BundleKey0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(messages_BundleKey0.equals((Object)messages_BundleKey1));
      assertNotSame(messages_BundleKey1, messages_BundleKey0);
      assertNotSame(messages_BundleKey0, messages_BundleKey1);
      
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("h/N<H/e=1b3M$@UGi", "Throwable", "Throwable");
      assertNotNull(messages_ResourceKey0);
      
      boolean boolean3 = messages_ResourceKey0.equals("Nd#xrYVpIgQR<WZ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("`JH6R.ve58i", "h/N<H/e=1b3M$@UGi", "Nd#xrYVpIgQR<WZ");
      assertNotNull(messages_MessageKey0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("`JH6R.ve58i", (-760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-760.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Messages.BundleKey> class0 = Messages.BundleKey.class;
      Locale locale0 = Locale.forLanguageTag("=c[3*SV~1Ko");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      ResourceBundle resourceBundle0 = Messages.getResourceBundle(class0, "=c[3*SV~1Ko", locale0);
      assertNull(resourceBundle0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      ResourceBundle.clearCache();
      PropertyResourceBundle propertyResourceBundle0 = null;
      try {
        propertyResourceBundle0 = new PropertyResourceBundle((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Properties$LineReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string0 = "-ER\"q,ggqd{{NQ";
      try { 
        Messages.getResourceAsStream(class0, "p9w9NH.-", locale0, "-ER\"q,ggqd{{NQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'p9w9NH.-' named '-ER\"q,ggqd{{NQ' found for locale 'en_GB'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Messages messages0 = new Messages();
      assertNotNull(messages0);
      
      Class<Object> class0 = Object.class;
      String string0 = "p9w9NH.-";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string1 = "-ER%q,ggqd{{NQ";
      try { 
        Messages.getResourceAsStream(class0, "p9w9NH.-", locale0, "-ER%q,ggqd{{NQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'p9w9NH.-' named '-ER%q,ggqd{{NQ' found for locale 'en_GB'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("o");
      assertNotNull(stringReader0);
      
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(stringReader0);
      assertNotNull(propertyResourceBundle0);
      
      String string0 = Messages.getString((ResourceBundle) propertyResourceBundle0, "' for locale '", locale0, "o");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string1 = "W@!3S";
      try { 
        Messages.getResourceAsStream(class0, "o", locale0, "W@!3S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'o' named 'W@!3S' found for locale ''
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      Locale locale0 = Locale.ROOT;
      locale0.getExtensionKeys();
      try { 
        Messages.getResourceAsStream(class0, "", locale0, "Wt@!3S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path '' named 'Wt@!3S' found for locale ''
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("INSTANCE");
      Locale locale0 = Locale.ITALIAN;
      sQLDataException0.spliterator();
      Messages.complainMissingBundle("INSTANCE", sQLDataException0, "BkffU", locale0);
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("INSTANCE", "INSTANCE", "INSTANCE");
      messages_MessageKey0.bundleName = "";
      messages_MessageKey0.localeName = "' for locale '";
      messages_MessageKey0.localeName = "";
      Object object0 = new Object();
      messages_MessageKey0.equals(object0);
      Messages.ResourceKey messages_ResourceKey0 = new Messages.ResourceKey("INSTANCE", "INSTANCE", "INSTANCE");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("INSTANCE", "BkffU", "Y;gCB@]`", (-420));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      messages_MessageKey0.bundleName = "INSTANCE";
      Messages.complainMissingBundle("INSTANCE", sQLDataException0, "8HnP4wZ>F86)1l/t", locale0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Messages.complainMissingBundle("", sQLDataException0, "", locale0);
      Messages.complainMissingBundle("INSTANCE", sQLDataException0, "", locale0);
      Messages.complainMissingResource(";wsS<R'4'~lz", sQLDataException0, "N%Cz;co?^qIgCKmm&", locale0, "");
      Messages.BundleKey messages_BundleKey0 = new Messages.BundleKey("", "INSTANCE");
      Messages.complainMissingBundle("INSTANCE", sQLDataException0, "q0d`lj^5EJb@aA", locale0);
      Class<String> class0 = String.class;
      try { 
        Messages.getResourceAsStream(class0, "INSTANCE", locale0, "org.apache.manifoldcf.core.i18n.Messages$MessageKey");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No matching language resource in path 'INSTANCE' named 'org.apache.manifoldcf.core.i18n.Messages$MessageKey' found for locale 'it'
         //
         verifyException("org.apache.manifoldcf.core.i18n.Messages", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Floats.stringConverter()");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "fW&wy|lS");
      Locale locale0 = new Locale("Jw %Qu", "h2WOxcL3");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Locale locale1 = Locale.FRANCE;
      Messages.complainMissingResource("3", sQLIntegrityConstraintViolationException0, "Floats.stringConverter()", locale1, "Floats.stringConverter()");
      Messages.MessageKey messages_MessageKey0 = new Messages.MessageKey("Floats.stringConverter()", "Floats.stringConverter()", "x\"3Uo~");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("Floats.stringConverter()");
      mockFileInputStream0.mark(985);
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(mockFileInputStream0);
      Locale locale2 = Locale.CHINA;
      Messages.getMessage((ResourceBundle) propertyResourceBundle0, "Floats.stringConverter()", locale2, "Floats.stringConverter()");
      locale2.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      propertyResourceBundle0.getKeys();
      byteArray0[1] = (byte) (-123);
      mockFileInputStream0.read(byteArray0, 1, (-1505));
      Messages.getMessage((ResourceBundle) propertyResourceBundle0, "3>gu~dcyQ`pw\"Ps-;", locale2, "");
      Class<Object> class0 = Object.class;
      Messages.getString((ResourceBundle) propertyResourceBundle0, ">'ELi;Cr(n/>>.isVN>", locale1, "java.vendor");
      // Undeclared exception!
      try { 
        Messages.getResourceBundle(class0, ">'ELi;Cr(n/>>.isVN>", locale2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }
}
