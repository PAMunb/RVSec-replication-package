/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:22:19 GMT 2022
 */

package org.apache.manifoldcf.core.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import org.apache.manifoldcf.core.common.DateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateParser_ESTest extends DateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("9}`;veu'3>L+[|K<D#W", 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("UT");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("1378-05-17T06:54:00.000ZZ", 5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      String string0 = DateParser.formatISO8601Date(date0);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateParser.isNumeral("GMT-01:00", 1555);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateParser.isNumeral((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate("aAZ)(:\u0000/E( /");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate("~a)?Y~^]Ulc/_<'*#");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate(".lobs");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("System info: host: '%s', ip: '%s', os.name: '%s', os.arch: '%s', os.version '%s', java.version: '%s'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("Type wasnot an enum: ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("System info: host: '%s', ip: '%s', os.name: '%s', os.arch: '%s', os.version: '%s', java.version: '%s'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("Exception thrown by removal listener");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("FZ4 :2%dLf<NEJC$o");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("kz0 YCvHp {$8_Oq#x[");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("{[q,&fZp`!,%&oybzb3");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("{+%=rw", 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("", (-3539));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("GMT+12:00");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("3-kT:}");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("GMT-12:00");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("P.^Fyv:T3+M.u3y");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("2014-02-14T20:21:21.320Z");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("wZ+Q.T5FY");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("sp-z0~`<O}_ZK<TI#3");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("T");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date(" ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("-MM-dd'T'HH:mm:ss");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateParser.formatISO8601Date((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
