/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:38:59 GMT 2022
 */

package org.apache.manifoldcf.core.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.apache.manifoldcf.core.common.DateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateParser_ESTest extends DateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("1909-08-25T00:00:00.000Z", 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("5b67~", 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("'K\"b=TX84!P7Nj(io");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("T");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("1914-02-13T13:13:00.000Z");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String string0 = DateParser.formatISO8601Date(mockDate0);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateParser.isNumeral("T", 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateParser.isNumeral((String) null, 1225);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.DateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate("gAco$//2jP0G;sj9 z");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate("atIl/FZTONlv~q/).4$ZZ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate("_N'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Date date0 = DateParser.parseChinaDate("/5FCE(a0co,Tz%Fn_");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("ytVm info: hostr '%s', ip '%',os.name %',os.arhf p%s', oj.versin: s', java.vers}n %'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("System info: host: '%s', ip: '%s', os.name: '%s', os.arch: '%s', os.version: '%s', java.version: '%s'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("SysRem infj: host: '%s', ip: '%s', os.name: '%s', os.arch: '%s', os.version '%s',+java.version: '%'");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("\"KN g-e8}q8I!=8 7");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("f> B`*");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("p|~%V(:,");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date("loadAll failed to return a value for ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Date date0 = DateParser.parseRFC822Date(",uckets must be positive: %s");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("1906-05-18T07:39:00.000Z", 5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral("1915-01-27T00:56:00.000Z", 19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = DateParser.isNumeral((String) null, (-1751));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("GMT+12O%:00");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("GMT-12:00");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("GMTL+01:00");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("GT-7:0");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("TZ");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date("90n\"86A");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Date date0 = DateParser.parseISO8601Date((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateParser dateParser0 = new DateParser();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateParser.formatISO8601Date((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }
}
