/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:49:16 GMT 2022
 */

package org.apache.manifoldcf.core.cachemanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.List;
import org.apache.manifoldcf.core.cachemanager.BaseDescription;
import org.apache.manifoldcf.core.database.QueryDescription;
import org.apache.manifoldcf.core.interfaces.ICacheClass;
import org.apache.manifoldcf.core.interfaces.ILimitChecker;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.apache.manifoldcf.core.interfaces.StringSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseDescription_ESTest extends BaseDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("]jja7Bx2hm-Q:TM|o", (String) null, (List) null, "", stringSet0, 0, resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("", (-2842));
      assertEquals("", baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", "", (List) null, "5@Y<pQkC!Aa$(FMdY", stringSet0, (-2803), resultSpecification0, (ILimitChecker) null);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      assertNotNull(iCacheClass0);
      assertEquals("5@Y<pQkC!Aa$(FMdY", iCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      QueryDescription queryDescription0 = new QueryDescription(")qs{=v", ")qs{=v", (List) null, "", stringSet0, 601, (ResultSpecification) null, (ILimitChecker) null);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $");
      baseDescription_LocalCacheClass0.getMaxLRUCount();
      int int0 = baseDescription_LocalCacheClass0.getMaxLRUCount();
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", baseDescription_LocalCacheClass0.getClassName());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      QueryDescription queryDescription0 = new QueryDescription(")qs{=v", ")qs{=v", (List) null, "", stringSet0, 601, (ResultSpecification) null, (ILimitChecker) null);
      long long0 = queryDescription0.getObjectExpirationTime(601);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLimitChecker0).doesCompareWork();
      doReturn((ILimitChecker) null).when(iLimitChecker0).duplicate();
      QueryDescription queryDescription0 = new QueryDescription("", "&xs=2@yC_v0", (List) null, (String) null, stringSet0, (-1), (ResultSpecification) null, iLimitChecker0);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      assertNull(iCacheClass0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      QueryDescription queryDescription0 = new QueryDescription(")qs{=v", ")qs{=v", (List) null, "", stringSet0, 601, (ResultSpecification) null, (ILimitChecker) null);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $");
      String string0 = baseDescription_LocalCacheClass0.getClassName();
      assertEquals("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringSet stringSet0 = mock(StringSet.class, new ViolatedAssumptionAnswer());
      ResultSpecification resultSpecification0 = mock(ResultSpecification.class, new ViolatedAssumptionAnswer());
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("h`oLD_s#tp)T2?", "h`oLD_s#tp)T2?", (List) null, "h`oLD_s#tp)T2?", stringSet0, 1, resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("h`oLD_s#tp)T2?", 1);
      assertEquals("h`oLD_s#tp)T2?", baseDescription_LocalCacheClass0.getClassName());
  }
}
