/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:29:07 GMT 2022
 */

package org.apache.manifoldcf.core.cachemanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.time.DayOfWeek;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import org.apache.manifoldcf.core.cachemanager.BaseDescription;
import org.apache.manifoldcf.core.database.QueryDescription;
import org.apache.manifoldcf.core.interfaces.ICacheClass;
import org.apache.manifoldcf.core.interfaces.ILimitChecker;
import org.apache.manifoldcf.core.interfaces.ResultSpecification;
import org.apache.manifoldcf.core.interfaces.StringSet;
import org.apache.manifoldcf.core.interfaces.StringSetBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDescription_ESTest extends BaseDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      StringSet stringSet0 = new StringSet(stack0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", stack0, "~vH7\"Yz.C8", stringSet0, (-1679), resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", (-1679));
      assertEquals("@(#)$Id: QueryDescription.java 988245 2010-08-23 18:39:35Z kwright $", baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<DayOfWeek> linkedList0 = new LinkedList<DayOfWeek>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StringSet stringSet0 = new StringSet(hashMap0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription("u`9]T2@J+/8", "Setter", linkedList0, (String) null, stringSet0, (-1478), resultSpecification0, (ILimitChecker) null);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      assertNull(iCacheClass0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringSetBuffer stringSetBuffer0 = new StringSetBuffer();
      StringSet stringSet0 = new StringSet(stringSetBuffer0);
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("@(#)$Id: StringSet.java 988245 2010-08-23 18:39:35Z kwright $", (String) null, (List) null, "A=.mTr X'&_9o}'vC", stringSet0, 0, resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("F=", (-1));
      assertEquals("F=", baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", linkedList0, "", stringSet0, (-1340), resultSpecification0, iLimitChecker0);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      int int0 = iCacheClass0.getMaxLRUCount();
      assertEquals("", iCacheClass0.getClassName());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", linkedList0, "", stringSet0, (-1340), resultSpecification0, iLimitChecker0);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", 0);
      int int0 = baseDescription_LocalCacheClass0.getMaxLRUCount();
      assertEquals(0, int0);
      assertEquals("@(#)$Id: BaseDescription.java 988245 2010-08-23 18:39:35Z kwright $", baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      StringSet stringSet0 = new StringSet();
      ResultSpecification resultSpecification0 = new ResultSpecification();
      QueryDescription queryDescription0 = new QueryDescription((String) null, (String) null, linkedList0, (String) null, stringSet0, 51, resultSpecification0, (ILimitChecker) null);
      BaseDescription.LocalCacheClass baseDescription_LocalCacheClass0 = queryDescription0.new LocalCacheClass((String) null);
      assertNull(baseDescription_LocalCacheClass0.getClassName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", linkedList0, "", stringSet0, (-1340), resultSpecification0, iLimitChecker0);
      long long0 = queryDescription0.getObjectExpirationTime(0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringSet stringSet0 = new StringSet("");
      ResultSpecification resultSpecification0 = new ResultSpecification();
      ILimitChecker iLimitChecker0 = mock(ILimitChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLimitChecker0).doesCompareWork();
      QueryDescription queryDescription0 = new QueryDescription("", "", linkedList0, "", stringSet0, (-1340), resultSpecification0, iLimitChecker0);
      ICacheClass iCacheClass0 = queryDescription0.getObjectClass();
      assertNotNull(iCacheClass0);
      
      String string0 = iCacheClass0.getClassName();
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
