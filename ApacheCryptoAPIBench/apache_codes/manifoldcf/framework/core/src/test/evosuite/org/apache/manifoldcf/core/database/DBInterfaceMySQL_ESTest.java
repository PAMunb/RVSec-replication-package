/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:19:39 GMT 2022
 */

package org.apache.manifoldcf.core.database;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.manifoldcf.core.database.DBInterfaceMySQL;
import org.apache.manifoldcf.core.interfaces.ColumnDescription;
import org.apache.manifoldcf.core.threadcontext.ThreadContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBInterfaceMySQL_ESTest extends DBInterfaceMySQL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = DBInterfaceMySQL.mapType("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBInterfaceMySQL.mapType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" R-t.O9bC<{)d1e");
      // Undeclared exception!
      try { 
        DBInterfaceMySQL.appendDescription(stringBuilder0, "", (ColumnDescription) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.database.DBInterfaceMySQL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = DBInterfaceMySQL.mapType("float");
      assertEquals("DOUBLE", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("'t/7<");
      ColumnDescription columnDescription0 = new ColumnDescription(">5{MgccPI/R.a~", false, true, ">5{MgccPI/R.a~", "'t/7<", false);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "SELECT column_name, is_nullable, data_type, character_maximum_length ", columnDescription0, true, false);
      assertEquals("'t/7<SELECT column_name, is_nullable, data_type, character_maximum_length  >5{MgccPI/R.a~ NULL", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" R-t.O9bC<{)d1e");
      ColumnDescription columnDescription0 = new ColumnDescription(" VALUES (", true, true, "updateNClob(int, Reader, long)", "", true);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "", columnDescription0, false, true);
      assertEquals(" R-t.O9bC<{)d1e  VALUES ( NULL PRIMARY KEY REFERENCES updateNClob(int, Reader, long)() ON DELETE CASCADE", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("'t/7<");
      ColumnDescription columnDescription0 = new ColumnDescription(">5{MgccPI/R.a~", false, true, ">5{MgccPI/R.a~", "'t/7<", false);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "x", columnDescription0, false, true);
      assertEquals("'t/7<x >5{MgccPI/R.a~ NULL REFERENCES >5{MgccPI/R.a~('t/7<) ON DELETE RESTRICT", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ColumnDescription columnDescription0 = new ColumnDescription("oEcQ}=", false, false, (String) null, ":", false);
      DBInterfaceMySQL.appendDescription(stringBuilder0, "SELECT column_name, is_nullable, data_type, character_maximum_length ", columnDescription0, false, false);
      assertEquals("SELECT column_name, is_nullable, data_type, character_maximum_length  oEcQ}= NOT NULL", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBInterfaceMySQL.TableStatistics dBInterfaceMySQL_TableStatistics0 = new DBInterfaceMySQL.TableStatistics();
      int int0 = dBInterfaceMySQL_TableStatistics0.getEventCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBInterfaceMySQL.TableStatistics dBInterfaceMySQL_TableStatistics0 = new DBInterfaceMySQL.TableStatistics();
      dBInterfaceMySQL_TableStatistics0.reset();
      assertEquals(0, dBInterfaceMySQL_TableStatistics0.getEventCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBInterfaceMySQL.TableStatistics dBInterfaceMySQL_TableStatistics0 = new DBInterfaceMySQL.TableStatistics();
      dBInterfaceMySQL_TableStatistics0.add((-3840));
      assertEquals((-3840), dBInterfaceMySQL_TableStatistics0.getEventCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      DBInterfaceMySQL dBInterfaceMySQL0 = null;
      try {
        dBInterfaceMySQL0 = new DBInterfaceMySQL(threadContext0, ":G8qXKvE'Sx-t", (String) null, "@(#)$Id: ColumnDescription.java 988245 2010-08-23 18:39:35Z kwright $", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreadContext threadContext0 = new ThreadContext();
      DBInterfaceMySQL dBInterfaceMySQL0 = null;
      try {
        dBInterfaceMySQL0 = new DBInterfaceMySQL(threadContext0, "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $", "@(#)$Id: ThreadContext.java 988245 2010-08-23 18:39:35Z kwright $");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }
}
