/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 16:42:32 GMT 2022
 */

package org.apache.manifoldcf.core.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Enumeration;
import java.util.Stack;
import org.apache.manifoldcf.core.common.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)87;
      String string0 = base64_0.encodeByteArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)87}, byteArray0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)49;
      String string0 = base64_0.encodeByteArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)49, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      String string0 = base64_0.encodeByteArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)92}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decodeString("");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        base64_0.encodeStream(pipedInputStream0, (Writer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error encoding in base64
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[17];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(17, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(17, byteArray0.length);
      
      // Undeclared exception!
      try { 
        base64_0.encodeStream(pushbackInputStream0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockFile mockFile0 = new MockFile("java.io.StringWriter@0000000002");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      try { 
        base64_0.encodeNextWord(pipedInputStream0, mockFileWriter0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error encoding in base64
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yFMb&aO%/KMGa", true);
      assertNotNull(mockFileOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      // Undeclared exception!
      try { 
        base64_0.encodeNextWord((InputStream) null, outputStreamWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.encodeByteArray((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.decodeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      StringReader stringReader0 = new StringReader("O-e8Eh`8yfp*^q2");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        base64_0.decodeStream(stringReader0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      StringReader stringReader0 = new StringReader("@(#)$Id: Base64.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        base64_0.decodeNextWord(stringReader0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(enumeration0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(sequenceInputStream0);
      
      base64_0.encodeStream(sequenceInputStream0, (Writer) null);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-238));
      assertEquals((-238), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = base64_0.encodeNextWord(byteArrayInputStream0, (Writer) null);
      assertEquals((-238), byteArrayInputStream0.available());
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      StringReader stringReader0 = new StringReader("org.openqa.selenium.json.UriCoercer");
      assertNotNull(stringReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("@(#)$Id: Base64.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockPrintStream0);
      
      try { 
        base64_0.decodeStream(stringReader0, mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected end of base64 input
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("aqlc}uAAzD*|H");
      assertNotNull(mockPrintStream0);
      
      base64_0.decodeStream(stringReader0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      StringReader stringReader0 = new StringReader("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("aqlc}uAAzD*|H");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      boolean boolean0 = base64_0.decodeNextWord(stringReader0, bufferedOutputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("@(#)$Id: Base64.java 988245 2010-08-23 18:39:35Z kwright $");
      try { 
        base64_0.decodeNextWord(stringReader0, pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error converting from base 64
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.decodeString("h10~glt.$%')$\"ZUVi^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected end of base64 input
         //
         verifyException("org.apache.manifoldcf.core.common.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decodeString("@(#)$Id: Base64.java 988245 2010-08-23 18:39:35Z kwright $");
      assertEquals(30, byteArray0.length);
  }
}
