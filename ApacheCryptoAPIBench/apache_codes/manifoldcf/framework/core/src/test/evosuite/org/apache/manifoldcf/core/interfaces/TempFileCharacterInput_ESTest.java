/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:24:08 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.apache.manifoldcf.core.interfaces.CharacterInput;
import org.apache.manifoldcf.core.interfaces.TempFileCharacterInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TempFileCharacterInput_ESTest extends TempFileCharacterInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No type found for node");
      assertNotNull(stringReader0);
      
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput(stringReader0, (-3436L), 289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput((Reader) null, (-5401L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileCharacterInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput(pipedReader0, (-2698L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileCharacterInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput(pipedReader0, (-1L), 2119);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H{|o*LS:#0@B Z");
      assertNotNull(stringReader0);
      
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput(stringReader0);
      assertEquals(14L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?:jTf9!TINg n!");
      assertNotNull(stringReader0);
      
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput(stringReader0, (-1L));
      assertEquals(14L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      byte[] byteArray0 = new byte[8];
      tempFileCharacterInput0.inMemoryBuffer = byteArray0;
      assertEquals(8L, tempFileCharacterInput0.getUtf8StreamLength());
      
      tempFileCharacterInput0.calculateLength();
      assertEquals(8L, tempFileCharacterInput0.getUtf8StreamLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      MockFile mockFile0 = new MockFile("`_H8qw)]etFpc", "@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockFile0);
      
      tempFileCharacterInput0.file = (File) mockFile0;
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc/@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(tempFileCharacterInput0.file.isHidden());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc/@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileCharacterInput0.file.toString());
      assertEquals(0L, tempFileCharacterInput0.file.getTotalSpace());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc", tempFileCharacterInput0.file.getParent());
      assertTrue(tempFileCharacterInput0.file.isFile());
      assertTrue(tempFileCharacterInput0.file.isAbsolute());
      assertFalse(tempFileCharacterInput0.file.isDirectory());
      assertFalse(tempFileCharacterInput0.file.canExecute());
      assertFalse(tempFileCharacterInput0.file.exists());
      assertEquals(0L, tempFileCharacterInput0.file.getUsableSpace());
      assertFalse(tempFileCharacterInput0.file.canRead());
      assertEquals(0L, tempFileCharacterInput0.file.lastModified());
      assertEquals("@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileCharacterInput0.file.getName());
      assertFalse(tempFileCharacterInput0.file.canWrite());
      assertEquals(0L, tempFileCharacterInput0.file.getFreeSpace());
      assertEquals(0L, tempFileCharacterInput0.file.length());
      
      try { 
        tempFileCharacterInput0.calculateHashValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO exception while scanning file: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.CharacterInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      tempFileCharacterInput0.discard();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      Reader reader0 = tempFileCharacterInput0.getStream();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNull(reader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      byte[] byteArray0 = new byte[7];
      tempFileCharacterInput0.inMemoryBuffer = byteArray0;
      assertEquals(7L, tempFileCharacterInput0.getUtf8StreamLength());
      
      long long0 = tempFileCharacterInput0.getUtf8StreamLength();
      assertEquals(7L, tempFileCharacterInput0.getUtf8StreamLength());
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      long long0 = tempFileCharacterInput0.getUtf8StreamLength();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      InputStream inputStream0 = tempFileCharacterInput0.getUtf8Stream();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      MockFile mockFile0 = new MockFile("`_H8qw)]etFpc", "@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $");
      assertNotNull(mockFile0);
      
      tempFileCharacterInput0.file = (File) mockFile0;
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc", mockFile0.getParent());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc/@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", mockFile0.toString());
      assertFalse(tempFileCharacterInput0.file.isHidden());
      assertFalse(tempFileCharacterInput0.file.canWrite());
      assertEquals(0L, tempFileCharacterInput0.file.getFreeSpace());
      assertEquals(0L, tempFileCharacterInput0.file.length());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc", tempFileCharacterInput0.file.getParent());
      assertEquals(0L, tempFileCharacterInput0.file.getUsableSpace());
      assertTrue(tempFileCharacterInput0.file.isFile());
      assertTrue(tempFileCharacterInput0.file.isAbsolute());
      assertFalse(tempFileCharacterInput0.file.exists());
      assertFalse(tempFileCharacterInput0.file.canExecute());
      assertFalse(tempFileCharacterInput0.file.isDirectory());
      assertEquals(0L, tempFileCharacterInput0.file.lastModified());
      assertEquals("@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileCharacterInput0.file.getName());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/`_H8qw)]etFpc/@(#)$Id: TempFileCharacterInput.java 988245 2010-08-23 18:39:35Z kwright $", tempFileCharacterInput0.file.toString());
      assertEquals(0L, tempFileCharacterInput0.file.getTotalSpace());
      assertFalse(tempFileCharacterInput0.file.canRead());
      
      try { 
        tempFileCharacterInput0.getUtf8Stream();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such file: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.TempFileCharacterInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput((Reader) null, 0L, 0);
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertNotNull(tempFileCharacterInput0);
      
      InputStream inputStream0 = tempFileCharacterInput0.getUtf8Stream();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput((Reader) null, 0L, (-3263));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jp<UGn3");
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput(stringReader0, 1L, 3414);
      tempFileCharacterInput0.openStream();
      assertEquals(1L, tempFileCharacterInput0.getUtf8StreamLength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput(stringReader0, 0L, 1261);
      tempFileCharacterInput0.calculateHashValue();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput(stringReader0, 9223372036854775807L, 0);
      tempFileCharacterInput0.calculateLength();
      assertEquals(0L, tempFileCharacterInput0.getUtf8StreamLength());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      // Undeclared exception!
      try { 
        tempFileCharacterInput0.calculateHashValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      CharacterInput characterInput0 = tempFileCharacterInput0.transfer();
      assertNotSame(characterInput0, tempFileCharacterInput0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2586);
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput(pipedReader0, (-2964L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("B_=@p");
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TempFileCharacterInput tempFileCharacterInput0 = new TempFileCharacterInput();
      // Undeclared exception!
      try { 
        tempFileCharacterInput0.calculateLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TempFileCharacterInput tempFileCharacterInput0 = null;
      try {
        tempFileCharacterInput0 = new TempFileCharacterInput(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
}
