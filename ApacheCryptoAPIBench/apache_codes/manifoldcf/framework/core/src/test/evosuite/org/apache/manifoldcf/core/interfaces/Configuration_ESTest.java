/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:21:47 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.time.ZoneId;
import java.util.Map;
import org.apache.manifoldcf.core.common.XMLDoc;
import org.apache.manifoldcf.core.interfaces.Configuration;
import org.apache.manifoldcf.core.interfaces.ConfigurationNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Configuration_ESTest extends Configuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      boolean boolean0 = configuration1.equals(configuration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      String string0 = configuration0.toJSON();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.popState();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.popState();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("null");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.valueForKey("null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.popState();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.clearOuterNodes();
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("");
      configuration0.addOuterNode(configurationNode0);
      assertEquals("", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("{}");
      ConfigurationNode configurationNode0 = configuration0.readNode("SK8R7ybjY>k", configuration_JSONReader0);
      assertEquals("SK8R7ybjY>k", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("SK8R7ybjY>k");
      configuration0.addChild(0, configurationNode0);
      int int0 = configuration0.getChildCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("");
      // Undeclared exception!
      try { 
        Configuration.writeNode((Configuration.JSONWriter) null, configurationNode0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Configuration configuration0 = new Configuration("j]NF,xe.oh11o-");
      XMLDoc xMLDoc0 = new XMLDoc();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("}LCnNY");
      // Undeclared exception!
      try { 
        Configuration.writeNode(xMLDoc0, configuration0, configurationNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Configuration configuration0 = new Configuration("j]NF,xe.oh11o-");
      // Undeclared exception!
      try { 
        Configuration.writeNode((XMLDoc) null, configuration0, (ConfigurationNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Configuration configuration0 = new Configuration("n=\"uM ");
      // Undeclared exception!
      try { 
        configuration0.toXML();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      configuration1.children = null;
      // Undeclared exception!
      try { 
        configuration1.toXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      configuration1.children = null;
      // Undeclared exception!
      try { 
        configuration1.removeChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Configuration configuration0 = new Configuration("");
      // Undeclared exception!
      try { 
        configuration0.removeChild((-102));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Configuration configuration0 = new Configuration("");
      // Undeclared exception!
      try { 
        configuration0.readNode((XMLDoc) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Configuration configuration0 = new Configuration("p[d>fu");
      XMLDoc xMLDoc0 = new XMLDoc();
      // Undeclared exception!
      try { 
        configuration0.readNode(xMLDoc0, configuration0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.manifoldcf.core.interfaces.Configuration cannot be cast to org.w3c.dom.Node
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.readNode("A=5|", (Configuration.JSONReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Configuration configuration0 = new Configuration("]!~E)Tma>");
      ConfigurationNode configurationNode0 = new ConfigurationNode((String) null);
      // Undeclared exception!
      try { 
        configuration0.processObject(configurationNode0, "]!~E)Tma>", (Configuration.JSONReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.processObject("qu6?0;V5_`", (Configuration.JSONReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Configuration configuration0 = new Configuration("*RGNy1WbJV*Hr");
      // Undeclared exception!
      try { 
        configuration0.initializeFromDoc((XMLDoc) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.children = null;
      // Undeclared exception!
      try { 
        configuration0.findChild((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      // Undeclared exception!
      try { 
        configuration0.findChild(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endObject();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endObject();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.key("{c2d:");
      // Undeclared exception!
      try { 
        configuration_JSONWriter0.value("S!,YW*F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Configuration configuration0 = new Configuration((String) null);
      configuration0.clearChildren();
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Configuration configuration0 = new Configuration("k;?mo|n$5c+?F_Q");
      // Undeclared exception!
      try { 
        configuration0.addChild((-730), (ConfigurationNode) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -730, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.startObject();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONArray cannot be cast to org.json.simple.JSONObject
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      int int0 = configuration0.getChildCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("{}");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.getKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      String string0 = configuration_JSONWriter0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.pushState();
      configuration_JSONWriter0.endArray();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.endArray();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      configuration_JSONWriter0.endArray();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      ConfigurationNode configurationNode0 = new ConfigurationNode(",{");
      configuration_JSONWriter0.startArray();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertEquals(",{", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startObject();
      ConfigurationNode configurationNode0 = new ConfigurationNode("f!0f6#roBy*MS<T/");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, false);
      assertEquals(0, configurationNode0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      XMLDoc xMLDoc0 = new XMLDoc();
      boolean boolean0 = configuration0.equals(xMLDoc0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.clearChildren();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      ConfigurationNode configurationNode0 = new ConfigurationNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      // Undeclared exception!
      try { 
        configuration0.addChild((-1), configurationNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createDuplicate(true);
      // Undeclared exception!
      try { 
        configuration1.removeChild(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Configuration configuration0 = new Configuration("ALWAYS_FALSE");
      // Undeclared exception!
      try { 
        configuration0.removeChild(2560);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2560, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Configuration configuration0 = new Configuration("f!0f6#roBy*MS<T/");
      XMLDoc xMLDoc0 = new XMLDoc();
      try { 
        configuration0.initializeFromDoc(xMLDoc0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad xml - missing outer 'f!0f6#roBy*MS<T/' node - there are 0 nodes
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      XMLDoc xMLDoc0 = new XMLDoc();
      // Undeclared exception!
      try { 
        configuration0.initializeFromDoc(xMLDoc0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.fromXML("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>");
      assertEquals(0, configuration0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      configuration0.makeReadOnly();
      // Undeclared exception!
      try { 
        configuration0.fromJSON("SK8R7ybjY>k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempt to change read-only object
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      ConfigurationNode configurationNode0 = new ConfigurationNode(",{");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      configurationNode0.attributes = map0;
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
      assertEquals(28, configurationNode0.getAttributeCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Configuration configuration0 = new Configuration("j]NF,xe.oh11o-");
      ConfigurationNode configurationNode0 = configuration0.createNewNode("}LCnNY");
      configurationNode0.setValue("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      // Undeclared exception!
      try { 
        Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Naked value found with no context!
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $");
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, false, true);
      assertEquals("@(#)$Id: Configuration.java 988245 2010-08-23 18:39:35Z kwright $", configurationNode0.getType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      String string0 = configuration0.toXML();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      configuration1.children = null;
      configuration1.makeReadOnly();
      assertNotSame(configuration0, configuration1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createDuplicate(true);
      configuration1.makeReadOnly();
      assertNotSame(configuration1, configuration0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration configuration1 = configuration0.createNew();
      configuration1.children = null;
      Configuration configuration2 = configuration1.createDuplicate(true);
      assertNotSame(configuration2, configuration1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Configuration configuration0 = new Configuration("com.google.common.base.CharMatcher$JavaDigit");
      configuration0.makeReadOnly();
      Configuration configuration1 = configuration0.createDuplicate(true);
      assertSame(configuration1, configuration0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Configuration configuration0 = new Configuration("wW[j+ynt");
      Configuration configuration1 = configuration0.createDuplicate(false);
      assertNotSame(configuration1, configuration0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("{}");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.startArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.json.simple.JSONObject cannot be cast to org.json.simple.JSONArray
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("{}");
      String string0 = configuration_JSONReader0.readValue();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("[]");
      // Undeclared exception!
      try { 
        configuration_JSONReader0.endArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      ConfigurationNode configurationNode0 = configuration0.createNewNode("Bad xml - outer node is not '");
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      Configuration.writeNode(configuration_JSONWriter0, configurationNode0, true, false);
      assertEquals("Bad xml - outer node is not '", configurationNode0.getType());
      
      String string0 = configuration_JSONWriter0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Configuration.JSONWriter configuration_JSONWriter0 = new Configuration.JSONWriter();
      configuration_JSONWriter0.startArray();
      configuration_JSONWriter0.value("");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Configuration configuration0 = new Configuration("wW[j+ynt");
      // Undeclared exception!
      try { 
        configuration0.findChild((-1988));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        configuration0.fromXML((InputStream) mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Configuration configuration0 = new Configuration("Could not create BloomFilter of ");
      try { 
        configuration0.fromJSON("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Bad json: null
         //
         verifyException("org.apache.manifoldcf.core.interfaces.Configuration$JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Configuration configuration0 = new Configuration("");
      // Undeclared exception!
      try { 
        configuration0.fromXML("Unexpected escape code: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.common.XMLDoc", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Configuration.JSONReader configuration_JSONReader0 = new Configuration.JSONReader("{}");
      configuration0.processObject("", configuration_JSONReader0);
      assertTrue(configuration_JSONReader0.isNull());
      assertFalse(configuration_JSONReader0.isObject());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Configuration configuration0 = new Configuration("");
      ConfigurationNode configurationNode0 = new ConfigurationNode("");
      configuration0.removeOuterNode(configurationNode0);
      assertEquals(0, configuration0.getChildCount());
  }
}
