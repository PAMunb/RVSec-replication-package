/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:32:08 GMT 2022
 */

package org.apache.manifoldcf.core.interfaces;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.ZoneId;
import java.util.Map;
import org.apache.manifoldcf.core.interfaces.ConfigParams;
import org.apache.manifoldcf.core.interfaces.Specification;
import org.apache.manifoldcf.core.interfaces.VersionContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VersionContext_ESTest extends VersionContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VersionContext versionContext0 = new VersionContext((String) null, (ConfigParams) null, (Specification) null);
      String string0 = versionContext0.getVersionString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      Specification specification0 = new Specification();
      VersionContext versionContext0 = new VersionContext("B", configParams0, specification0);
      String string0 = versionContext0.getVersionString();
      assertEquals("B", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VersionContext versionContext0 = new VersionContext("", (ConfigParams) null, (Specification) null);
      versionContext0.getSpecification();
      assertEquals("", versionContext0.getVersionString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VersionContext versionContext0 = new VersionContext("", (ConfigParams) null, (Specification) null);
      versionContext0.getParams();
      assertEquals("", versionContext0.getVersionString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ConfigParams configParams0 = new ConfigParams(map0);
      Specification specification0 = new Specification();
      VersionContext versionContext0 = new VersionContext("@(#)$Id: Specification.java 988245 2010-08-23 18:39:35Z kwright $", configParams0, specification0);
      ConfigParams configParams1 = versionContext0.getParams();
      assertEquals("@(#)$Id: Specification.java 988245 2010-08-23 18:39:35Z kwright $", versionContext0.getVersionString());
      assertNotNull(configParams1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      Specification specification0 = new Specification();
      VersionContext versionContext0 = new VersionContext("", configParams0, specification0);
      Specification specification1 = versionContext0.getSpecification();
      assertNotNull(specification1);
      assertEquals("", versionContext0.getVersionString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      Specification specification0 = new Specification();
      VersionContext versionContext0 = new VersionContext("", configParams0, specification0);
      ConfigParams configParams1 = versionContext0.getParams();
      assertNotNull(configParams1);
      assertEquals("", versionContext0.getVersionString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConfigParams configParams0 = new ConfigParams();
      Specification specification0 = new Specification();
      VersionContext versionContext0 = new VersionContext("", configParams0, specification0);
      String string0 = versionContext0.getVersionString();
      assertEquals("", string0);
      assertNotNull(string0);
  }
}
