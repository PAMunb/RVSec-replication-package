/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:27:04 GMT 2022
 */

package org.apache.manifoldcf.core.lockmanager;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.manifoldcf.core.lockmanager.FileLockManager;
import org.apache.manifoldcf.core.lockmanager.LockPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileLockManager_ESTest extends FileLockManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileLockManager.ByteArrayBuffer fileLockManager_ByteArrayBuffer0 = new FileLockManager.ByteArrayBuffer();
      assertNotNull(fileLockManager_ByteArrayBuffer0);
      
      fileLockManager_ByteArrayBuffer0.length = 1354;
      // Undeclared exception!
      try { 
        fileLockManager_ByteArrayBuffer0.add((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1354
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager$ByteArrayBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+P}nh;,l'x", "+P}nh;,l'x");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("+P}nh;,l'x", "+P}nh;,l'x", (File) mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("+P}nh;,l'x", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x/+P}nh;,l'x", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x", mockFile0.getParent());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x/+P}nh;,l'x/+P}nh;,l'x0+P}nh;,l'x", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x/+P}nh;,l'x", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("+P}nh;,l'x0+P}nh;,l'x", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("+P}nh;,l'x", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x/+P}nh;,l'x", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x", mockFile0.getParent());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(fileLockManager0);
      
      byte[] byteArray0 = fileLockManager0.readData("7`A`8GDBL<p19HR=\"nC");
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("+P}nh;,l'x", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x/+P}nh;,l'x", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/+P}nh;,l'x", mockFile0.getParent());
      assertFalse(mockFile0.equals((Object)file0));
      assertNull(byteArray0);
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+P}nh;,l'x");
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+P}nh;,l'x/279/419/7`A`8GDBL&60!p19HR&61!&34!nC");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "+P}nh;,l'x");
      assertTrue(boolean0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertEquals("+P}nh;,l'x", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("+P}nh;,l'x", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertNotNull(fileLockManager0);
      
      String string0 = fileLockManager0.makeFilePath("7HgQGeaezf{kM");
      assertEquals("+P}nh;,l'x", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("+P}nh;,l'x", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("+P}nh;,l'x/724/796", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = FileLockManager.getFlagResourceName("Z3X1e");
      assertEquals("flag-Z3X1e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(fileLockManager0);
      
      fileLockManager0.setGlobalFlag("");
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      boolean boolean0 = fileLockManager0.checkGlobalFlag("");
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertNotNull(fileLockManager0);
      
      byte[] byteArray0 = new byte[2];
      try { 
        fileLockManager0.writeData("", byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO exception: null
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertNotNull(fileLockManager0);
      
      FileLockManager.ByteArrayBuffer fileLockManager_ByteArrayBuffer0 = new FileLockManager.ByteArrayBuffer();
      assertNotNull(fileLockManager_ByteArrayBuffer0);
      
      byte[] byteArray0 = fileLockManager_ByteArrayBuffer0.toArray();
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        fileLockManager0.writeData((String) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNotNull(fileLockManager0);
      
      try { 
        fileLockManager0.setGlobalFlag("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertNotNull(fileLockManager0);
      
      fileLockManager0.synchDirectory = null;
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      
      // Undeclared exception!
      try { 
        fileLockManager0.setGlobalFlag("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+P}nh;,l'x");
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+P}nh;,l'x/279/419/7`A`8GDBL&60!p19HR&61!&34!nC");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "+P}nh;,l'x");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertEquals("+P}nh;,l'x", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals("+P}nh;,l'x", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNotNull(fileLockManager0);
      
      try { 
        fileLockManager0.readData("7`A`8GDBL<p19HR=\"nC");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO exception: Simulated IOException
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNotNull(fileLockManager0);
      
      // Undeclared exception!
      try { 
        fileLockManager0.readData((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNotNull(fileLockManager0);
      
      // Undeclared exception!
      try { 
        fileLockManager0.makeFilePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLockManager.getSynchDirectoryProperty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileLockManager.ByteArrayBuffer fileLockManager_ByteArrayBuffer0 = new FileLockManager.ByteArrayBuffer();
      assertNotNull(fileLockManager_ByteArrayBuffer0);
      
      byte[] byteArray0 = new byte[7];
      fileLockManager_ByteArrayBuffer0.buffer = byteArray0;
      fileLockManager_ByteArrayBuffer0.add((byte) (-128));
      fileLockManager_ByteArrayBuffer0.add((byte)0);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      fileLockManager_ByteArrayBuffer0.buffer = byteArray1;
      fileLockManager_ByteArrayBuffer0.add((byte)0);
      fileLockManager_ByteArrayBuffer0.add((byte)2);
      fileLockManager_ByteArrayBuffer0.add((byte) (-128));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Cannot combine a BloomFilter with itself.");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("Cannot combine a BloomFilter with itself.", "Cannot combine a BloomFilter with itself.", (File) mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("Cannot combine a BloomFilter with itself.", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("Cannot combine a BloomFilter with itself.", mockFile0.toString());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/Cannot combine a BloomFilter with itself.", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/pedro/desenvolvimento/workspaces/workspaces-doutorado/workspace-rv/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/manifoldcf/framework/core/Cannot combine a BloomFilter with itself./Cannot combine a BloomFilter with itself.0Cannot combine a BloomFilter with itself.", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Cannot combine a BloomFilter with itself.0Cannot combine a BloomFilter with itself.", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals("Cannot combine a BloomFilter with itself.", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("Cannot combine a BloomFilter with itself.", mockFile0.toString());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(fileLockManager0);
      
      fileLockManager0.writeData("Cannot combine a BloomFilter with itself.", (byte[]) null);
      assertFalse(mockFile0.isHidden());
      assertEquals("Cannot combine a BloomFilter with itself.", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("Cannot combine a BloomFilter with itself.", mockFile0.toString());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+P}nh;,l'x");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("+P}nh;,l'x/279/419/7`A`8GDBL&60!p19HR&61!&34!nC");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "+P}nh;,l'x");
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      byte[] byteArray0 = fileLockManager0.readData("7`A`8GDBL<p19HR=\"nC");
      assertNotNull(byteArray0);
      
      fileLockManager0.writeData("org.apache.manifoldcf.synchdirectory", byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)80, (byte)125, (byte)110, (byte)104, (byte)59, (byte)44, (byte)108, (byte)39, (byte)120}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      FileLockManager fileLockManager1 = new FileLockManager(mockFile0);
      assertFalse(fileLockManager1.equals((Object)fileLockManager0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.manifoldcf.core.lockmanager.FileLockManager");
      FileLockManager fileLockManager0 = null;
      try {
        fileLockManager0 = new FileLockManager(mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Synch directory must point to an existing, writeable directory!
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileLockManager fileLockManager0 = null;
      try {
        fileLockManager0 = new FileLockManager((File) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Synch directory cannot be null
         //
         verifyException("org.apache.manifoldcf.core.lockmanager.FileLockManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      LockPool lockPool0 = fileLockManager0.getGlobalLockPool();
      assertNotNull(lockPool0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      fileLockManager0.setGlobalFlag("@(#)$Id: LockManager.java 988245 2010-08-23 18:39:35Z kwright $");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      boolean boolean0 = fileLockManager0.checkGlobalFlag("@(#)$Id$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "C:9!:\"?Rs-tVv8");
      mockFile0.mkdirs();
      FileLockManager fileLockManager0 = new FileLockManager(mockFile0);
      fileLockManager0.clearGlobalFlag((String) null);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileLockManager fileLockManager0 = null;
      try {
        fileLockManager0 = new FileLockManager();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.manifoldcf.core.system.ManifoldCF", e);
      }
  }
}
