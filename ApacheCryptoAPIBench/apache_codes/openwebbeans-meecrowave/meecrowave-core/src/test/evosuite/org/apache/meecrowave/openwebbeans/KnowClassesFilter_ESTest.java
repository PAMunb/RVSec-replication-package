/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:11:05 GMT 2022
 */

package org.apache.meecrowave.openwebbeans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.meecrowave.Meecrowave;
import org.apache.meecrowave.openwebbeans.KnowClassesFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KnowClassesFilter_ESTest extends KnowClassesFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      boolean boolean0 = knowClassesFilter0.accept(".@'vA>Q?x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      // Undeclared exception!
      try { 
        knowClassesFilter0.init((Meecrowave.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.meecrowave.openwebbeans.KnowClassesFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      // Undeclared exception!
      try { 
        knowClassesFilter0.accept((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.meecrowave.openwebbeans.KnowClassesFilter$OptimizedExclusionFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      boolean boolean0 = knowClassesFilter0.accept("gtar");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      boolean boolean0 = knowClassesFilter0.accept("org.apache.camel.cdi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      Meecrowave.Builder meecrowave_Builder0 = mock(Meecrowave.Builder.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.meecrowave.openwebbeans.KnowClassesFilter").when(meecrowave_Builder0).getScanningPackageExcludes();
      doReturn("org.apache.geronimo.javamail").when(meecrowave_Builder0).getScanningPackageIncludes();
      knowClassesFilter0.init(meecrowave_Builder0);
      boolean boolean0 = knowClassesFilter0.accept("org.apache.meecrowave.openwebbeans.KnowClassesFilter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      Meecrowave.Builder meecrowave_Builder0 = mock(Meecrowave.Builder.class, new ViolatedAssumptionAnswer());
      doReturn("text/x-setext").when(meecrowave_Builder0).getScanningPackageExcludes();
      doReturn("text/x-setext").when(meecrowave_Builder0).getScanningPackageIncludes();
      knowClassesFilter0.init(meecrowave_Builder0);
      boolean boolean0 = knowClassesFilter0.accept("text/x-setext");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      boolean boolean0 = knowClassesFilter0.accept("org.apache.meecrowave.openwebbeans.KnowClassesFilter");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      Meecrowave.Builder meecrowave_Builder0 = mock(Meecrowave.Builder.class, new ViolatedAssumptionAnswer());
      doReturn("").when(meecrowave_Builder0).getScanningPackageExcludes();
      doReturn(":*N3U<").when(meecrowave_Builder0).getScanningPackageIncludes();
      knowClassesFilter0.init(meecrowave_Builder0);
      boolean boolean0 = knowClassesFilter0.accept("uBb{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      KnowClassesFilter knowClassesFilter0 = new KnowClassesFilter();
      Meecrowave.Builder meecrowave_Builder0 = mock(Meecrowave.Builder.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.geronimo.specs").when(meecrowave_Builder0).getScanningPackageExcludes();
      doReturn("!3oA,Ar! j").when(meecrowave_Builder0).getScanningPackageIncludes();
      knowClassesFilter0.init(meecrowave_Builder0);
      boolean boolean0 = knowClassesFilter0.accept("org.apache.meecrowave.openwebbeans.KnowClassesFilter");
      assertFalse(boolean0);
  }
}
