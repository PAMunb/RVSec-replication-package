/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:13:14 GMT 2022
 */

package org.apache.meecrowave.logging.tomcat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.meecrowave.logging.tomcat.JULLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JULLog_ESTest extends JULLog_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JULLog jULLog0 = null;
      try {
        jULLog0 = new JULLog((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JULLog jULLog0 = new JULLog("0Cy");
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      jULLog0.error((Object) "0Cy", throwable0);
      assertTrue(jULLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JULLog jULLog0 = new JULLog("0Cy");
      jULLog0.error((Object) "0Cy");
      assertTrue(jULLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JULLog jULLog0 = new JULLog("0Cy");
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      jULLog0.warn((Object) "0Cy", throwable0);
      assertFalse(jULLog0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JULLog jULLog0 = new JULLog("");
      jULLog0.trace((Object) "");
      assertFalse(jULLog0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JULLog jULLog0 = new JULLog("0Cy");
      jULLog0.fatal((Object) "0Cy");
      assertFalse(jULLog0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JULLog jULLog0 = new JULLog("Qk3}<+KVK0c#3jYDpg");
      jULLog0.trace((Object) null, (Throwable) null);
      assertTrue(jULLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      jULLog0.info((Object) null);
      assertTrue(jULLog0.isFatalEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JULLog jULLog0 = new JULLog("");
      boolean boolean0 = jULLog0.isWarnEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      jULLog0.info((Object) "am", throwable0);
      assertTrue(jULLog0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      jULLog0.debug((Object) null, throwable0);
      assertTrue(jULLog0.isErrorEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      boolean boolean0 = jULLog0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      jULLog0.fatal((Object) "am", throwable0);
      assertFalse(jULLog0.isDebugEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      jULLog0.warn((Object) "am");
      assertTrue(jULLog0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      jULLog0.debug((Object) "am");
      assertTrue(jULLog0.isWarnEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JULLog jULLog0 = new JULLog("0Cy");
      boolean boolean0 = jULLog0.isFatalEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      boolean boolean0 = jULLog0.isErrorEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      boolean boolean0 = jULLog0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JULLog jULLog0 = new JULLog("am");
      boolean boolean0 = jULLog0.isDebugEnabled();
      assertFalse(boolean0);
  }
}
