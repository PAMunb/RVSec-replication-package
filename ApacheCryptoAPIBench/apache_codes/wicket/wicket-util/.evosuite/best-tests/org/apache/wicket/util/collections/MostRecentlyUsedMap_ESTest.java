/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:09:43 GMT 2022
 */

package org.apache.wicket.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.wicket.util.collections.MostRecentlyUsedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MostRecentlyUsedMap_ESTest extends MostRecentlyUsedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MostRecentlyUsedMap<Integer, Integer> mostRecentlyUsedMap0 = null;
      try {
        mostRecentlyUsedMap0 = new MostRecentlyUsedMap<Integer, Integer>((-1404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must have at least one entry
         //
         verifyException("org.apache.wicket.util.collections.MostRecentlyUsedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MostRecentlyUsedMap<Integer, Integer> mostRecentlyUsedMap0 = new MostRecentlyUsedMap<Integer, Integer>(1);
      Map.Entry<Integer, Integer> map_Entry0 = (Map.Entry<Integer, Integer>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mostRecentlyUsedMap0.removeEldestEntry(map_Entry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MostRecentlyUsedMap<Integer, Integer> mostRecentlyUsedMap0 = new MostRecentlyUsedMap<Integer, Integer>(1);
      Integer integer0 = new Integer(1);
      Integer integer1 = mostRecentlyUsedMap0.put(integer0, integer0);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      mostRecentlyUsedMap0.merge(integer1, integer0, biFunction0);
      assertFalse(mostRecentlyUsedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MostRecentlyUsedMap<Integer, Integer> mostRecentlyUsedMap0 = null;
      try {
        mostRecentlyUsedMap0 = new MostRecentlyUsedMap<Integer, Integer>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must have at least one entry
         //
         verifyException("org.apache.wicket.util.collections.MostRecentlyUsedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MostRecentlyUsedMap<Integer, Integer> mostRecentlyUsedMap0 = new MostRecentlyUsedMap<Integer, Integer>(2549);
      Integer integer0 = mostRecentlyUsedMap0.getRemovedValue();
      assertNull(integer0);
  }
}
