/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:08:42 GMT 2022
 */

package org.apache.wicket.util.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.PriorityQueue;
import java.util.Queue;
import org.apache.wicket.util.lang.Threads;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.event.EventRecodingLogger;
import org.slf4j.event.SubstituteLoggingEvent;
import org.slf4j.helpers.NOPLogger;
import org.slf4j.helpers.SubstituteLogger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Threads_ESTest extends Threads_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockThread mockThread0 = new MockThread("&zpfyu'zJY?5b*\"");
      // Undeclared exception!
      try { 
        Threads.dumpSingleThread((Logger) null, mockThread0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'logger' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, false);
      Threads.dumpSingleThread(substituteLogger0, mockThread0);
      // Undeclared exception!
      try { 
        Threads.dumpSingleThread(substituteLogger0, mockThread0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", (Queue<SubstituteLoggingEvent>) null, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, (Queue<SubstituteLoggingEvent>) null);
      // Undeclared exception!
      try { 
        Threads.dumpAllThreads(eventRecodingLogger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.slf4j.event.EventRecodingLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Threads.dumpAllThreads((Logger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'logger' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      // Undeclared exception!
      try { 
        Threads.dumpAllThreads(eventRecodingLogger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.slf4j.event.SubstituteLoggingEvent cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isWarnEnabled();
      Thread thread0 = mock(Thread.class, new ViolatedAssumptionAnswer());
      Threads.dumpSingleThread(logger0, thread0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger("", (Queue<SubstituteLoggingEvent>) null, false);
      MockThread mockThread0 = new MockThread("org.apache.wicket.util.lang.Threads$1");
      // Undeclared exception!
      try { 
        Threads.dumpSingleThread(substituteLogger0, mockThread0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.slf4j.event.EventRecodingLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      Threads.dumpAllThreads(nOPLogger0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isWarnEnabled();
      Threads.dumpAllThreads(logger0);
  }
}
