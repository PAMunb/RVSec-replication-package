/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:12:04 GMT 2022
 */

package org.apache.wicket.util.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.wicket.util.diff.AddDelta;
import org.apache.wicket.util.diff.ChangeDelta;
import org.apache.wicket.util.diff.Chunk;
import org.apache.wicket.util.diff.DeleteDelta;
import org.apache.wicket.util.diff.Delta;
import org.apache.wicket.util.diff.RevisionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Delta_ESTest extends Delta_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Chunk chunk0 = new Chunk(objectArray0, (-493), (-493));
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      Chunk chunk1 = deleteDelta0.getRevised();
      assertNull(chunk1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), (-1));
      chunk0.count = (-2833);
      Delta delta0 = Delta.newDelta(chunk0, chunk0);
      assertNotNull(delta0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Chunk chunk0 = new Chunk((List<Object>) null, 504, 0);
      Chunk chunk1 = new Chunk(326, 0);
      Delta delta0 = Delta.newDelta(chunk0, chunk1);
      assertNotNull(delta0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Chunk chunk0 = new Chunk(0, (-1945));
      AddDelta addDelta0 = new AddDelta(0, chunk0);
      StringBuilder stringBuilder0 = new StringBuilder();
      addDelta0.toString(stringBuilder0);
      assertEquals("0a1\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), (-1));
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      deleteDelta0.applyTo(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Chunk chunk0 = new Chunk((-978), (-1769));
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      deleteDelta0.patch(linkedList0);
      assertFalse(linkedList0.contains((-1769)));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Chunk chunk0 = new Chunk((List<Object>) null, 504, 0);
      List<Object> list0 = chunk0.chunk;
      Chunk chunk1 = new Chunk(list0, 27, (-3399), 0);
      Delta delta0 = Delta.newDelta(chunk1, chunk1);
      chunk1.count = (-3476);
      Chunk chunk2 = delta0.getRevised();
      assertSame(chunk1, chunk2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), (-1));
      Object[] objectArray0 = new Object[2];
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      Chunk chunk1 = new Chunk(objectArray0, (-3709), (-1), (-3709));
      deleteDelta0.init(chunk1, chunk1);
      Chunk chunk2 = deleteDelta0.getRevised();
      assertFalse(chunk2.equals((Object)chunk0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Chunk chunk0 = new Chunk((List<Object>) null, 504, 0);
      List<Object> list0 = chunk0.chunk;
      Chunk chunk1 = new Chunk(list0, 27, (-3399), 0);
      Delta delta0 = Delta.newDelta(chunk1, chunk1);
      Chunk chunk2 = delta0.getRevised();
      assertEquals(0, chunk2.rcsto());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), (-1));
      Delta delta0 = Delta.newDelta(chunk0, chunk0);
      Chunk chunk1 = delta0.getRevised();
      assertEquals(0, chunk1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Chunk chunk0 = new Chunk((-33), (-33));
      AddDelta addDelta0 = new AddDelta((-33), chunk0);
      Chunk chunk1 = addDelta0.getOriginal();
      assertNotSame(chunk1, chunk0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Chunk chunk0 = new Chunk(0, (-1945));
      AddDelta addDelta0 = new AddDelta(0, chunk0);
      Chunk chunk1 = addDelta0.getOriginal();
      assertNotSame(chunk1, chunk0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      Object[] objectArray0 = new Object[4];
      Chunk chunk0 = new Chunk(objectArray0, 3539, (-244));
      changeDelta0.init(chunk0, chunk0);
      Chunk chunk1 = changeDelta0.getOriginal();
      assertEquals(3538, chunk1.last());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), (-3399));
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      Chunk chunk1 = deleteDelta0.getOriginal();
      assertEquals((-1), chunk1.anchor());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 560, (-1951), 2258);
      AddDelta addDelta0 = new AddDelta(3011, chunk0);
      try { 
        addDelta0.verify(linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // original.first() > target.size()
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      // Undeclared exception!
      try { 
        changeDelta0.verify((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeleteDelta deleteDelta0 = new DeleteDelta();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        deleteDelta0.toString(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.DeleteDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeleteDelta deleteDelta0 = new DeleteDelta();
      // Undeclared exception!
      try { 
        deleteDelta0.toRCSString((StringBuilder) null, "+@4XmHHPx`7Z)2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.DeleteDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeleteDelta deleteDelta0 = new DeleteDelta();
      // Undeclared exception!
      try { 
        deleteDelta0.toRCSString("TSIwEVJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.DeleteDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        changeDelta0.patch(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeleteDelta deleteDelta0 = new DeleteDelta();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        deleteDelta0.applyTo(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.DeleteDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      // Undeclared exception!
      try { 
        changeDelta0.accept((RevisionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Chunk chunk0 = new Chunk((List<Object>) null, 504, 0);
      Delta delta0 = Delta.newDelta(chunk0, chunk0);
      Chunk chunk1 = delta0.getRevised();
      assertEquals(504, chunk1.rcsto());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Chunk chunk0 = new Chunk(560, 560);
      Delta delta0 = Delta.newDelta(chunk0, chunk0);
      assertNotNull(delta0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AddDelta addDelta0 = new AddDelta(4, (Chunk) null);
      Object[] objectArray0 = new Object[8];
      Chunk chunk0 = new Chunk(objectArray0, 4, 4, 4);
      List<Object> list0 = chunk0.chunk;
      try { 
        addDelta0.patch(list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Delta", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      Chunk chunk0 = changeDelta0.getOriginal();
      assertNull(chunk0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Chunk chunk0 = new Chunk((List<Object>) null, 504, 0);
      Delta delta0 = Delta.newDelta(chunk0, chunk0);
      String string0 = delta0.toRCSString((String) null);
      assertEquals("d505 0nulla504 0null", string0);
  }
}
