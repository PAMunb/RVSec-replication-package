/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:12:54 GMT 2022
 */

package org.apache.wicket.util.convert.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Locale;
import org.apache.wicket.util.convert.converter.SqlTimestampConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SqlTimestampConverter_ESTest extends SqlTimestampConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Timestamp timestamp0 = sqlTimestampConverter0.createDateLike((-739L));
      assertEquals(261000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter(158, 158);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        sqlTimestampConverter0.getDateFormat(locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 158
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimestampConverter0.getDateFormat((Locale) null);
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Class<Timestamp> class0 = sqlTimestampConverter0.getTargetType();
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter(0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Timestamp timestamp0 = sqlTimestampConverter0.createDateLike(0L);
      assertEquals(0, timestamp0.getNanos());
  }
}
