/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:07:31 GMT 2022
 */

package org.apache.wicket.util.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IllegalFormatConversionException;
import org.apache.wicket.util.lang.Checks;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Checks_ESTest extends Checks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(65);
      Checks.withinRangeShort(integer0, integer1, integer0, "no");
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(32);
      // Undeclared exception!
      try { 
        Checks.withinRangeShort(integer0, integer0, (Integer) null, "name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Checks.notNullShort((Object) null, "{)=.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // {)=. may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Checks.notEmpty((String) null, "BuL[%f-", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        Checks.notEmpty((String) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-71));
      Checks.withinRange(integer0, integer0, integer0, "org.apache.wicket.util.convert.ConversionException");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-71));
      Integer integer1 = new Integer(39);
      // Undeclared exception!
      try { 
        Checks.withinRange(integer0, integer0, integer1, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2554);
      Integer integer1 = new Integer(117);
      // Undeclared exception!
      try { 
        Checks.withinRange(integer0, integer0, integer1, " may not be null.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         //  may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Checks.notEmpty((String) null, "BuL[%f-", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // BuL[null-
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Checks.notEmpty("ANyG/E$1{T", "ANyG/E$1{T", objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[8];
      Checks.notNull(integer0, "", objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(65);
      // Undeclared exception!
      try { 
        Checks.withinRangeShort(integer1, integer0, integer1, "no");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no must have a value within [65,0], but was 65
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Checks.notEmptyShort("no", "no");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Checks.notNull((Object) null, "n-jYbxb(3d", objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // n-jYbxb(3d
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Checks checks0 = new Checks();
      Checks.notNullShort(checks0, "L7&");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Checks.notEmptyShort("", "^]lj>6[b.7?]}Z2K[:K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ^]lj>6[b.7?]}Z2K[:K may not be null or empty string.
         //
         verifyException("org.apache.wicket.util.lang.Checks", e);
      }
  }
}
