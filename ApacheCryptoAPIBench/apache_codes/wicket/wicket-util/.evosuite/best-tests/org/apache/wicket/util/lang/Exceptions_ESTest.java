/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:09:17 GMT 2022
 */

package org.apache.wicket.util.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.lang.Exceptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Exceptions_ESTest extends Exceptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Exceptions.Visit<Object> exceptions_Visit0 = new Exceptions.Visit<Object>();
      exceptions_Visit0.stop((Object) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = Exceptions.findCause((Throwable) null, class0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      mockThrowable0.initCause(mockThrowable1);
      Exceptions.IThrowableVisitor<Object> exceptions_IThrowableVisitor0 = (Exceptions.IThrowableVisitor<Object>) mock(Exceptions.IThrowableVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      Exceptions.visit((Throwable) mockThrowable0, exceptions_IThrowableVisitor0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        Exceptions.visit((Throwable) mockThrowable0, (Exceptions.IThrowableVisitor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Exceptions.Visit<Object> exceptions_Visit0 = new Exceptions.Visit<Object>();
      exceptions_Visit0.stop();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Exceptions.IThrowableVisitor<Object> exceptions_IThrowableVisitor0 = (Exceptions.IThrowableVisitor<Object>) mock(Exceptions.IThrowableVisitor.class, new ViolatedAssumptionAnswer());
      Object object0 = Exceptions.visit((Throwable) mockThrowable0, exceptions_IThrowableVisitor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = Exceptions.findCause((Throwable) mockThrowable0, class0);
      assertSame(throwable0, mockThrowable0);
  }
}
