/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:20:20 GMT 2022
 */

package org.apache.wicket.util.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import javax.swing.text.MaskFormatter;
import org.apache.wicket.util.convert.MaskConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MaskConverter_ESTest extends MaskConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MaskConverter<Object> maskConverter0 = new MaskConverter<Object>("BCQj1&PF!t#", class0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MaskConverter<Object> maskConverter0 = new MaskConverter<Object>("");
      Locale locale0 = Locale.ROOT;
      String string0 = maskConverter0.convertToString("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MaskConverter<String> maskConverter0 = new MaskConverter<String>("_;hz/o0:");
      Locale locale0 = Locale.forLanguageTag("_;hz/o0:");
      String string0 = maskConverter0.convertToObject("_;hz/o0:", locale0);
      assertEquals("_;hz/o0:", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MaskConverter<String> maskConverter0 = new MaskConverter<String>("/v?z`N&kiQ$B]@");
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        maskConverter0.convertToString("/v?z`N&kiQ$B]@", locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: Invalid character: ?
         //
         verifyException("org.apache.wicket.util.convert.MaskConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaskConverter<String> maskConverter0 = new MaskConverter<String>((String) null);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        maskConverter0.convertToObject((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.MaskFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaskConverter<List<Object>> maskConverter0 = null;
      try {
        maskConverter0 = new MaskConverter<List<Object>>((MaskFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'maskFormatter' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MaskFormatter maskFormatter0 = new MaskFormatter("org.apache.wicket.util.convert.ConversionException");
      MaskConverter<String> maskConverter0 = new MaskConverter<String>(maskFormatter0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MaskConverter<String> maskConverter0 = new MaskConverter<String>("k;f\u0005qdp'=lhY$n");
      // Undeclared exception!
      try { 
        maskConverter0.convertToObject("k;f\u0005qdp'=lhY$n", (Locale) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.text.ParseException: stringToValue passed invalid value
         //
         verifyException("org.apache.wicket.util.convert.MaskConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MaskConverter<Object> maskConverter0 = new MaskConverter<Object>("$VALUES");
      String string0 = maskConverter0.convertToString("$VALUES", (Locale) null);
      assertEquals("$VAlUES", string0);
  }
}
