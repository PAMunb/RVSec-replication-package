/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:10:49 GMT 2022
 */

package org.apache.wicket.util.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.lang.PackageName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PackageName_ESTest extends PackageName_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Package package0 = mock(Package.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(package0).getName();
      PackageName packageName0 = PackageName.forPackage(package0);
      String string0 = packageName0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Package package0 = mock(Package.class, new ViolatedAssumptionAnswer());
      doReturn("").when(package0).getName();
      PackageName packageName0 = PackageName.forPackage(package0);
      String string0 = packageName0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PackageName packageName0 = PackageName.forClass(class0);
      String string0 = packageName0.getName();
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Package package0 = mock(Package.class, new ViolatedAssumptionAnswer());
      doReturn("").when(package0).getName();
      PackageName packageName0 = PackageName.forPackage(package0);
      String string0 = packageName0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackageName.forPackage((Package) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.PackageName", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        PackageName.forClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Packages", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Package package0 = mock(Package.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(package0).getName();
      PackageName packageName0 = PackageName.forPackage(package0);
      // Undeclared exception!
      try { 
        packageName0.equals(packageName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Package package0 = mock(Package.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(package0).getName();
      PackageName packageName0 = PackageName.forPackage(package0);
      packageName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<PackageName> class0 = PackageName.class;
      PackageName packageName0 = PackageName.forClass(class0);
      packageName0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<PackageName> class0 = PackageName.class;
      PackageName packageName0 = PackageName.forClass(class0);
      boolean boolean0 = packageName0.equals(packageName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PackageName packageName0 = PackageName.forClass(class0);
      boolean boolean0 = packageName0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PackageName packageName0 = PackageName.forClass(class0);
      String string0 = packageName0.toString();
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Package package0 = mock(Package.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(package0).getName();
      PackageName packageName0 = PackageName.forPackage(package0);
      String string0 = packageName0.getName();
      assertNull(string0);
  }
}
