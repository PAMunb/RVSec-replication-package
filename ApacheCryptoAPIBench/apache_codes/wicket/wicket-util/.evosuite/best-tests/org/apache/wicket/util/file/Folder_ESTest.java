/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:56:35 GMT 2022
 */

package org.apache.wicket.util.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.URI;
import org.apache.wicket.util.file.File;
import org.apache.wicket.util.file.Folder;
import org.apache.wicket.util.lang.Bytes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Folder_ESTest extends Folder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Folder folder0 = new Folder("qL&", "qL&");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("q4hszb ", "qL&", (java.io.File) folder0);
      assertNotNull(file0);
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&", folder0.getParent());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", folder0.toString());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.exists());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.canRead());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canWrite());
      assertEquals("qL&", folder0.getName());
      assertTrue(folder0.isDirectory());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("q4hszb 0qL&", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&/q4hszb 0qL&", file0.toString());
      
      Folder.FileFilter folder_FileFilter0 = Folder.FileFilter.ALL_FILES;
      assertNotNull(folder_FileFilter0);
      
      File[] fileArray0 = folder0.getNestedFiles(folder_FileFilter0);
      assertEquals(1, fileArray0.length);
      assertNotNull(fileArray0);
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&", folder0.getParent());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", folder0.toString());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.exists());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.canRead());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canWrite());
      assertEquals("qL&", folder0.getName());
      assertTrue(folder0.isDirectory());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Folder folder0 = new Folder("9x5_5`5h<~fO@Y$gl", "9x5_5`5h<~fO@Y$gl");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("9x5_5`5h<~fO@Y$gl", "9x5_5`5h<~fO@Y$gl", (java.io.File) folder0);
      assertNotNull(file0);
      assertTrue(folder0.canWrite());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl", folder0.toString());
      assertFalse(folder0.isHidden());
      assertFalse(folder0.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl", folder0.getParent());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("9x5_5`5h<~fO@Y$gl", folder0.getName());
      assertTrue(folder0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals("9x5_5`5h<~fO@Y$gl09x5_5`5h<~fO@Y$gl", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl09x5_5`5h<~fO@Y$gl", file0.toString());
      
      File[] fileArray0 = folder0.getNestedFiles();
      assertEquals(1, fileArray0.length);
      assertNotNull(fileArray0);
      assertTrue(folder0.canWrite());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl", folder0.toString());
      assertFalse(folder0.isHidden());
      assertFalse(folder0.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl", folder0.getParent());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("9x5_5`5h<~fO@Y$gl", folder0.getName());
      assertTrue(folder0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      Folder[] folderArray0 = folder0.getFolders();
      assertEquals(2, folderArray0.length);
      assertNotNull(folderArray0);
      assertNull(folder0.getParent());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals("/", folder0.toString());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.exists());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canRead());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertEquals("", folder0.getName());
      assertTrue(folder0.isDirectory());
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Folder folder0 = new Folder("org.apache.wicket.util.file.Folder", "org.apache.wicket.util.file.Folder");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("FnM1(TfV3[0%\"oSm", "c'aHj", (java.io.File) folder0);
      assertNotNull(file0);
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder", folder0.toString());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
      assertEquals("org.apache.wicket.util.file.Folder", folder0.getName());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.isDirectory());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder", folder0.getParent());
      assertTrue(folder0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder/FnM1(TfV3[0%\"oSm0c'aHj", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("FnM1(TfV3[0%\"oSm0c'aHj", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder", file0.getParent());
      
      File[] fileArray0 = folder0.getFiles();
      assertEquals(1, fileArray0.length);
      assertNotNull(fileArray0);
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder", folder0.toString());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
      assertEquals("org.apache.wicket.util.file.Folder", folder0.getName());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.isDirectory());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder", folder0.getParent());
      assertTrue(folder0.canExecute());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "\\up`36I;.50t[G4Y";
      Folder folder0 = new Folder(string0);
      assertNotNull(folder0);
      
      System.setCurrentTimeMillis((-1328L));
      folder0.write("[<m");
      assertEquals("\\up`36I;.50t[G4Y", folder0.getName());
      assertTrue(folder0.canRead());
      assertTrue(folder0.isFile());
      assertTrue(folder0.exists());
      assertFalse(folder0.isHidden());
      assertEquals((-1328L), folder0.lastModified());
      assertNull(folder0.getParent());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals("\\up`36I;.50t[G4Y", folder0.toString());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder0.getTotalSpace());
      assertFalse(folder0.isDirectory());
      assertFalse(folder0.isAbsolute());
      assertEquals(4L, folder0.length());
      assertTrue(folder0.canExecute());
      
      Folder folder1 = folder0.folder("");
      assertFalse(folder1.equals((Object)folder0));
      assertNotNull(folder1);
      assertNotSame(folder0, folder1);
      assertNotSame(folder1, folder0);
      assertEquals("\\up`36I;.50t[G4Y", folder0.getName());
      assertTrue(folder0.canRead());
      assertTrue(folder0.isFile());
      assertTrue(folder0.exists());
      assertFalse(folder0.isHidden());
      assertEquals((-1328L), folder0.lastModified());
      assertNull(folder0.getParent());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals("\\up`36I;.50t[G4Y", folder0.toString());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder0.getTotalSpace());
      assertFalse(folder0.isDirectory());
      assertFalse(folder0.isAbsolute());
      assertEquals(4L, folder0.length());
      assertTrue(folder0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/\\up`36I;.50t[G4Y", folder1.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", folder1.getParent());
      assertEquals(4L, folder1.length());
      assertEquals(0L, folder1.getUsableSpace());
      assertFalse(folder1.isHidden());
      assertFalse(folder1.isDirectory());
      assertEquals(0L, folder1.getFreeSpace());
      assertTrue(folder1.canWrite());
      assertTrue(folder1.isAbsolute());
      assertTrue(folder1.canExecute());
      assertEquals(0L, folder1.getTotalSpace());
      assertEquals("\\up`36I;.50t[G4Y", folder1.getName());
      assertTrue(folder1.canRead());
      assertTrue(folder1.exists());
      assertTrue(folder1.isFile());
      assertEquals((-1328L), folder1.lastModified());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Folder folder0 = new Folder("$gL)-z?~O");
      assertNotNull(folder0);
      
      Folder folder1 = folder0.folder(".");
      assertFalse(folder1.equals((Object)folder0));
      assertNotNull(folder1);
      assertNotSame(folder0, folder1);
      assertNotSame(folder1, folder0);
      assertTrue(folder0.isFile());
      assertEquals(0L, folder0.lastModified());
      assertFalse(folder0.exists());
      assertFalse(folder0.isHidden());
      assertNull(folder0.getParent());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals(0L, folder0.getTotalSpace());
      assertFalse(folder0.isAbsolute());
      assertFalse(folder0.canExecute());
      assertFalse(folder0.canRead());
      assertEquals(0L, folder0.length());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals("$gL)-z?~O", folder0.toString());
      assertEquals("$gL)-z?~O", folder0.getName());
      assertFalse(folder0.canWrite());
      assertFalse(folder1.exists());
      assertFalse(folder1.isDirectory());
      assertTrue(folder1.isHidden());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/$gL)-z?~O", folder1.getParent());
      assertEquals(0L, folder1.length());
      assertEquals(0L, folder1.getUsableSpace());
      assertEquals(0L, folder1.getFreeSpace());
      assertTrue(folder1.isAbsolute());
      assertTrue(folder1.isFile());
      assertFalse(folder1.canRead());
      assertEquals(0L, folder1.lastModified());
      assertFalse(folder1.canWrite());
      assertEquals(0L, folder1.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/$gL)-z?~O/.", folder1.toString());
      assertEquals(".", folder1.getName());
      assertFalse(folder1.canExecute());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Folder folder0 = new Folder("9x5_5`5h<~fO@Y$gl", "9x5_5`5h<~fO@Y$gl");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("9x5_5`5h<~fO@Y$gl", "9x5_5`5h<~fO@Y$gl", (java.io.File) folder0);
      assertNotNull(file0);
      assertTrue(folder0.isDirectory());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(0L, folder0.length());
      assertFalse(folder0.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl", folder0.getParent());
      assertTrue(folder0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl", folder0.toString());
      assertTrue(folder0.canRead());
      assertTrue(folder0.exists());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals("9x5_5`5h<~fO@Y$gl", folder0.getName());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl09x5_5`5h<~fO@Y$gl", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/9x5_5`5h<~fO@Y$gl/9x5_5`5h<~fO@Y$gl", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("9x5_5`5h<~fO@Y$gl09x5_5`5h<~fO@Y$gl", file0.getName());
      assertTrue(file0.isFile());
      
      // Undeclared exception!
      try { 
        folder0.getNestedFiles((Folder.FileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Folder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      // Undeclared exception!
      try { 
        folder0.getFolders((Folder.FolderFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Folder$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Folder folder0 = new Folder("+3pBA!)fvL\\=!x~", "+3pBA!)fvL\\=!x~");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("+3pBA!)fvL\\=!x~", "+3pBA!)fvL\\=!x~", (java.io.File) folder0);
      assertNotNull(file0);
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals("+3pBA!)fvL\\=!x~", folder0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+3pBA!)fvL\\=!x~/+3pBA!)fvL\\=!x~", folder0.toString());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+3pBA!)fvL\\=!x~", folder0.getParent());
      assertEquals(0L, folder0.length());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertFalse(folder0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+3pBA!)fvL\\=!x~/+3pBA!)fvL\\=!x~/+3pBA!)fvL\\=!x~0+3pBA!)fvL\\=!x~", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+3pBA!)fvL\\=!x~/+3pBA!)fvL\\=!x~", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("+3pBA!)fvL\\=!x~0+3pBA!)fvL\\=!x~", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      
      // Undeclared exception!
      try { 
        folder0.getFiles((Folder.FileFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Folder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Folder folder0 = new Folder("$gL)-z?~O");
      assertNotNull(folder0);
      
      // Undeclared exception!
      try { 
        folder0.folder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Folder folder0 = new Folder((String) null, "cn`");
      assertNotNull(folder0);
      
      Folder folder1 = null;
      try {
        folder1 = new Folder(folder0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Folder folder0 = null;
      try {
        folder0 = new Folder((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Folder folder0 = null;
      try {
        folder0 = new Folder((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Folder folder0 = null;
      try {
        folder0 = new Folder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Folder folder0 = null;
      try {
        folder0 = new Folder((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Folder folder0 = new Folder("qL&", "qL&");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("org.apache.wicket.util.file.Folder$FileFilter$1", "o00Ee )ZN:BI'GIJy", (java.io.File) folder0);
      assertNotNull(file0);
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&", folder0.getParent());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertTrue(folder0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", folder0.toString());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertFalse(folder0.isFile());
      assertEquals("qL&", folder0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("org.apache.wicket.util.file.Folder$FileFilter$10o00Ee )ZN:BI'GIJy", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&/org.apache.wicket.util.file.Folder$FileFilter$10o00Ee )ZN:BI'GIJy", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      
      boolean boolean0 = folder0.removeFiles();
      assertTrue(boolean0);
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&", folder0.getParent());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertTrue(folder0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", folder0.toString());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertFalse(folder0.isFile());
      assertEquals("qL&", folder0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Folder folder0 = new Folder("$gL)-z?~O");
      assertNotNull(folder0);
      
      boolean boolean0 = folder0.removeFiles();
      assertTrue(boolean0);
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.isFile());
      assertFalse(folder0.exists());
      assertEquals("$gL)-z?~O", folder0.toString());
      assertFalse(folder0.canExecute());
      assertFalse(folder0.isAbsolute());
      assertFalse(folder0.canRead());
      assertFalse(folder0.canWrite());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertEquals("$gL)-z?~O", folder0.getName());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.lastModified());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      Folder.FolderFilter folder_FolderFilter0 = mock(Folder.FolderFilter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(folder_FolderFilter0).accept(any(org.apache.wicket.util.file.Folder.class));
      Folder[] folderArray0 = folder0.getFolders(folder_FolderFilter0);
      assertEquals(1, folderArray0.length);
      assertNotNull(folderArray0);
      assertEquals("/", folder0.toString());
      assertEquals("", folder0.getName());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isFile());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.canWrite());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.isAbsolute());
      assertNull(folder0.getParent());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Folder folder0 = new Folder("qL&", "qL&");
      assertNotNull(folder0);
      
      Folder.FolderFilter folder_FolderFilter0 = mock(Folder.FolderFilter.class, new ViolatedAssumptionAnswer());
      Folder[] folderArray0 = folder0.getFolders(folder_FolderFilter0);
      assertEquals(0, folderArray0.length);
      assertNotNull(folderArray0);
      assertEquals("qL&", folder0.getName());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.canExecute());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.exists());
      assertFalse(folder0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&/qL&", folder0.toString());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.lastModified());
      assertTrue(folder0.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/qL&", folder0.getParent());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.length());
      assertFalse(folder0.canWrite());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Folder folder0 = new Folder("'bytes' cannot be negative: ");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("'bytes' cannot be negative: ", "'bytes' cannot be negative: ", (java.io.File) folder0);
      assertNotNull(file0);
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertTrue(folder0.isDirectory());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertEquals("'bytes' cannot be negative: ", folder0.toString());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.canRead());
      assertEquals("'bytes' cannot be negative: ", folder0.getName());
      assertFalse(folder0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/'bytes' cannot be negative: ", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("'bytes' cannot be negative: 0'bytes' cannot be negative: ", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/'bytes' cannot be negative: /'bytes' cannot be negative: 0'bytes' cannot be negative: ", file0.toString());
      
      boolean boolean0 = folder0.remove();
      assertTrue(boolean0);
      assertFalse(folder0.canExecute());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.lastModified());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.canWrite());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertEquals("'bytes' cannot be negative: ", folder0.toString());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.isFile());
      assertEquals("'bytes' cannot be negative: ", folder0.getName());
      assertFalse(folder0.canRead());
      assertFalse(folder0.exists());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Folder folder0 = new Folder("vx,;aWoEC");
      assertNotNull(folder0);
      
      Folder.FileFilter folder_FileFilter0 = Folder.FileFilter.ALL_FILES;
      assertNotNull(folder_FileFilter0);
      
      File[] fileArray0 = folder0.getFiles(folder_FileFilter0);
      assertEquals(0, fileArray0.length);
      assertNotNull(fileArray0);
      assertEquals("vx,;aWoEC", folder0.getName());
      assertFalse(folder0.canWrite());
      assertFalse(folder0.canRead());
      assertFalse(folder0.canExecute());
      assertEquals(0L, folder0.lastModified());
      assertTrue(folder0.isFile());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertNull(folder0.getParent());
      assertFalse(folder0.exists());
      assertEquals("vx,;aWoEC", folder0.toString());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(0L, folder0.getTotalSpace());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Folder folder0 = new Folder("org.apache.wicket.util.file.Folder", "org.apache.wicket.util.file.Folder");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("FnM1(TfV3[0%\"oSm", "c'aHj", (java.io.File) folder0);
      assertNotNull(file0);
      assertTrue(folder0.canExecute());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canRead());
      assertFalse(folder0.isFile());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder", folder0.toString());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals("org.apache.wicket.util.file.Folder", folder0.getName());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder", folder0.getParent());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("FnM1(TfV3[0%\"oSm0c'aHj", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder/FnM1(TfV3[0%\"oSm0c'aHj", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      
      Folder.FileFilter folder_FileFilter0 = Folder.FileFilter.ALL_FILES;
      assertNotNull(folder_FileFilter0);
      
      File[] fileArray0 = folder0.getFiles(folder_FileFilter0);
      assertEquals(1, fileArray0.length);
      assertNotNull(fileArray0);
      assertTrue(folder0.canExecute());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canRead());
      assertFalse(folder0.isFile());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder/org.apache.wicket.util.file.Folder", folder0.toString());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals("org.apache.wicket.util.file.Folder", folder0.getName());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Folder", folder0.getParent());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.exists());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      Folder.FileFilter folder_FileFilter0 = Folder.FileFilter.ALL_FILES;
      assertNotNull(folder_FileFilter0);
      
      File[] fileArray0 = folder0.getNestedFiles(folder_FileFilter0);
      assertEquals(0, fileArray0.length);
      assertNotNull(fileArray0);
      assertEquals(0L, folder0.length());
      assertTrue(folder0.isDirectory());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertEquals("", folder0.getName());
      assertFalse(folder0.isFile());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals("/", folder0.toString());
      assertTrue(folder0.canRead());
      assertTrue(folder0.exists());
      assertTrue(folder0.canWrite());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isAbsolute());
      assertEquals(0L, folder0.getFreeSpace());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      
      Folder folder0 = new Folder(uRI0);
      assertNotNull(folder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";j;", " Ek^?&M");
      assertNotNull(mockFile0);
      
      Folder folder0 = new Folder(mockFile0);
      assertNotNull(folder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Folder folder0 = new Folder("qL&");
      assertNotNull(folder0);
      
      Folder[] folderArray0 = folder0.getFolders();
      assertEquals(0, folderArray0.length);
      assertNotNull(folderArray0);
      assertFalse(folder0.canRead());
      assertEquals("qL&", folder0.getName());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertFalse(folder0.canExecute());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.lastModified());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertFalse(folder0.canWrite());
      assertEquals("qL&", folder0.toString());
      assertTrue(folder0.isFile());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.exists());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertTrue(boolean0);
      
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      boolean boolean1 = folder0.remove();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertTrue(folder0.isDirectory());
      assertEquals("/", folder0.toString());
      assertEquals(1392409281320L, folder0.lastModified());
      assertTrue(folder0.exists());
      assertFalse(folder0.isFile());
      assertEquals("", folder0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Folder folder0 = new Folder("The size must be non-negative", "The size must be non-negative");
      assertNotNull(folder0);
      
      Folder folder1 = new Folder(folder0, "..");
      assertFalse(folder1.equals((Object)folder0));
      assertNotNull(folder1);
      
      java.io.File file0 = MockFile.createTempFile("Mon", "..", (java.io.File) folder1);
      assertFalse(folder0.equals((Object)folder1));
      assertFalse(folder1.equals((Object)folder0));
      assertNotNull(file0);
      assertNotSame(folder0, folder1);
      assertNotSame(folder1, folder0);
      assertEquals("The size must be non-negative", folder0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative", folder0.getParent());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative/The size must be non-negative", folder0.toString());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canWrite());
      assertEquals(0L, folder1.getUsableSpace());
      assertTrue(folder1.canWrite());
      assertTrue(folder1.isHidden());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative/The size must be non-negative/..", folder1.toString());
      assertFalse(folder1.isFile());
      assertTrue(folder1.isAbsolute());
      assertEquals("..", folder1.getName());
      assertTrue(folder1.isDirectory());
      assertEquals(0L, folder1.length());
      assertEquals(0L, folder1.getFreeSpace());
      assertEquals(1392409281320L, folder1.lastModified());
      assertTrue(folder1.exists());
      assertTrue(folder1.canExecute());
      assertTrue(folder1.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative/The size must be non-negative", folder1.getParent());
      assertEquals(0L, folder1.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative/The size must be non-negative/..", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative/The size must be non-negative/../Mon0..", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("Mon0..", file0.getName());
      assertTrue(file0.isFile());
      
      boolean boolean0 = folder0.remove();
      assertFalse(folder0.equals((Object)folder1));
      assertFalse(boolean0);
      assertNotSame(folder0, folder1);
      assertEquals("The size must be non-negative", folder0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative", folder0.getParent());
      assertTrue(folder0.exists());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The size must be non-negative/The size must be non-negative", folder0.toString());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.length());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canWrite());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Folder folder0 = new Folder(".");
      assertNotNull(folder0);
      
      Folder folder1 = new Folder(folder0, ".");
      assertFalse(folder1.equals((Object)folder0));
      assertNotNull(folder1);
      
      java.io.File file0 = MockFile.createTempFile("JM8CLv?4T0NvT", "`cimDS.ic0-c", (java.io.File) folder1);
      assertFalse(folder0.equals((Object)folder1));
      assertFalse(folder1.equals((Object)folder0));
      assertNotNull(file0);
      assertNotSame(folder0, folder1);
      assertNotSame(folder1, folder0);
      assertTrue(folder0.canRead());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.canWrite());
      assertEquals(".", folder0.getName());
      assertEquals(".", folder0.toString());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.isHidden());
      assertFalse(folder0.isFile());
      assertNull(folder0.getParent());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
      assertTrue(folder1.exists());
      assertEquals(0L, folder1.getFreeSpace());
      assertEquals(1392409281320L, folder1.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/./.", folder1.toString());
      assertEquals(".", folder1.getName());
      assertEquals(0L, folder1.getTotalSpace());
      assertEquals(0L, folder1.length());
      assertTrue(folder1.canExecute());
      assertTrue(folder1.canRead());
      assertTrue(folder1.canWrite());
      assertTrue(folder1.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/.", folder1.getParent());
      assertTrue(folder1.isHidden());
      assertTrue(folder1.isDirectory());
      assertEquals(0L, folder1.getUsableSpace());
      assertFalse(folder1.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/./.", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("JM8CLv?4T0NvT0`cimDS.ic0-c", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/././JM8CLv?4T0NvT0`cimDS.ic0-c", file0.toString());
      assertEquals(0L, file0.length());
      
      boolean boolean0 = folder0.remove();
      assertFalse(folder0.equals((Object)folder1));
      assertFalse(boolean0);
      assertNotSame(folder0, folder1);
      assertTrue(folder0.canRead());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.canWrite());
      assertEquals(".", folder0.getName());
      assertEquals(".", folder0.toString());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.isHidden());
      assertFalse(folder0.isFile());
      assertNull(folder0.getParent());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Folder folder0 = new Folder("qI");
      assertNotNull(folder0);
      
      try { 
        folder0.ensureExists();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to create folder qI
         //
         verifyException("org.apache.wicket.util.file.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Folder folder0 = new Folder("$gL)-z?~O");
      assertNotNull(folder0);
      
      folder0.ensureExists();
      assertEquals("$gL)-z?~O", folder0.toString());
      assertEquals(0L, folder0.getFreeSpace());
      assertNull(folder0.getParent());
      assertTrue(folder0.isDirectory());
      assertFalse(folder0.isHidden());
      assertEquals(0L, folder0.getUsableSpace());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.canRead());
      assertFalse(folder0.isFile());
      assertTrue(folder0.canWrite());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.exists());
      assertEquals("$gL)-z?~O", folder0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      folder0.ensureExists();
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals(0L, folder0.length());
      assertTrue(folder0.canExecute());
      assertTrue(folder0.isAbsolute());
      assertTrue(folder0.canWrite());
      assertTrue(folder0.canRead());
      assertTrue(folder0.isDirectory());
      assertNull(folder0.getParent());
      assertEquals("/", folder0.toString());
      assertEquals("", folder0.getName());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertFalse(folder0.isFile());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      assertNotNull(folder0);
      
      java.io.File file0 = MockFile.createTempFile("3hQXbB,~", "|ItZeGrX");
      assertNotNull(file0);
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/3hQXbB,~0|ItZeGrX", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("3hQXbB,~0|ItZeGrX", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      boolean boolean0 = folder0.remove();
      assertFalse(boolean0);
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertEquals("/", folder0.toString());
      assertEquals(0L, folder0.length());
      assertEquals("", folder0.getName());
      assertTrue(folder0.isDirectory());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
      
      boolean boolean1 = folder0.removeFiles();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1392409281320L, folder0.lastModified());
      assertEquals(0L, folder0.getTotalSpace());
      assertNull(folder0.getParent());
      assertEquals("/", folder0.toString());
      assertEquals(0L, folder0.length());
      assertEquals("", folder0.getName());
      assertTrue(folder0.isDirectory());
      assertTrue(folder0.exists());
      assertEquals(0L, folder0.getFreeSpace());
      assertTrue(folder0.canExecute());
      assertEquals(0L, folder0.getUsableSpace());
      assertFalse(folder0.isHidden());
      assertTrue(folder0.canRead());
      assertTrue(folder0.canWrite());
      assertTrue(folder0.isAbsolute());
      assertFalse(folder0.isFile());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      Folder folder0 = null;
      try {
        folder0 = new Folder(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Folder folder0 = new Folder("gd^wj!1/fjH");
      assertNotNull(folder0);
      
      Bytes bytes0 = folder0.freeDiskSpace();
      assertNotNull(bytes0);
      assertFalse(folder0.isAbsolute());
      assertEquals(0L, folder0.length());
      assertFalse(folder0.canRead());
      assertFalse(folder0.canWrite());
      assertTrue(folder0.isFile());
      assertEquals("gd^wj!1", folder0.getParent());
      assertEquals(0L, folder0.getTotalSpace());
      assertEquals("fjH", folder0.getName());
      assertFalse(folder0.canExecute());
      assertEquals("gd^wj!1/fjH", folder0.toString());
      assertFalse(folder0.exists());
      assertEquals(0L, folder0.lastModified());
      assertFalse(folder0.isHidden());
      assertFalse(folder0.isDirectory());
      assertEquals(0L, folder0.getFreeSpace());
      assertEquals(0L, folder0.getUsableSpace());
      assertEquals(0.0, bytes0.kilobytes(), 0.01);
      assertEquals(0.0, bytes0.gigabytes(), 0.01);
      assertEquals(0L, bytes0.bytes());
      assertEquals(0.0, bytes0.megabytes(), 0.01);
      assertEquals(0.0, bytes0.terabytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      // Undeclared exception!
      try { 
        folder0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Folder folder0 = new Folder("");
      Folder folder1 = folder0.folder("");
      assertTrue(folder1.canExecute());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      File[] fileArray0 = folder0.getNestedFiles();
      assertEquals(0, fileArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Folder folder0 = new Folder("", "");
      File[] fileArray0 = folder0.getFiles();
      assertEquals(0, fileArray0.length);
  }
}
