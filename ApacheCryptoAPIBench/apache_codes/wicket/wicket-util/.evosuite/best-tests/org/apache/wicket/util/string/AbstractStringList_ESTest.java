/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:06:51 GMT 2022
 */

package org.apache.wicket.util.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.wicket.util.string.IStringIterator;
import org.apache.wicket.util.string.StringList;
import org.apache.wicket.util.string.StringValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractStringList_ESTest extends AbstractStringList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringList stringList0 = StringList.repeat(2951, "");
      assertEquals(2951, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      String string0 = "";
      String string1 = stringList0.join(0, 0, "");
      assertEquals(2951, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = stringList0.toString();
      assertEquals(2951, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      StringList stringList1 = StringList.tokenize("", "bytes");
      assertEquals(0, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      stringList0.sort();
      assertEquals(2951, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList1);
      
      stringList0.add(2951, "P!nhJ.:iHe");
      assertEquals(10, stringList0.totalLength());
      assertEquals(2952, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList1);
      
      // Undeclared exception!
      stringList0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertNotNull(stringList0);
      
      List<String> list0 = stringList0.toList();
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      StringList stringList1 = StringList.tokenize("org.apache.wicket.util.string.AbstractStringList");
      assertEquals(48, stringList1.totalLength());
      assertEquals(1, stringList1.size());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      StringValue stringValue0 = mock(StringValue.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringValue0).toString();
      stringList1.add(stringValue0);
      assertEquals(90, stringList1.totalLength());
      assertEquals(2, stringList1.size());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotSame(stringList1, stringList0);
      
      stringList1.removeLast();
      assertEquals(48, stringList1.totalLength());
      assertEquals(1, stringList1.size());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotSame(stringList1, stringList0);
      
      StringList stringList2 = StringList.valueOf((Collection<?>) list0);
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, stringList2.size());
      assertEquals(0, stringList2.totalLength());
      assertFalse(list0.contains("org.apache.wicket.util.string.AbstractStringList"));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList0));
      assertNotNull(stringList2);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList2, stringList1);
      assertNotSame(stringList2, stringList0);
      
      StringList stringList3 = StringList.repeat(2919, "zN>&b,");
      assertEquals(2919, stringList3.size());
      assertEquals(17514, stringList3.totalLength());
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList2));
      assertFalse(stringList3.equals((Object)stringList0));
      assertNotNull(stringList3);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList2);
      assertNotSame(stringList3, stringList0);
      
      String string0 = stringList3.join(".imfl>a ");
      assertEquals(2919, stringList3.size());
      assertEquals(17514, stringList3.totalLength());
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList2));
      assertFalse(stringList3.equals((Object)stringList0));
      assertNotNull(string0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList2);
      assertNotSame(stringList3, stringList0);
      
      StringList stringList4 = StringList.tokenize("[vo<CS4/cFUW");
      assertEquals(12, stringList4.totalLength());
      assertEquals(1, stringList4.size());
      assertFalse(stringList4.equals((Object)stringList2));
      assertFalse(stringList4.equals((Object)stringList1));
      assertFalse(stringList4.equals((Object)stringList3));
      assertFalse(stringList4.equals((Object)stringList0));
      assertNotNull(stringList4);
      assertNotSame(stringList4, stringList2);
      assertNotSame(stringList4, stringList1);
      assertNotSame(stringList4, stringList3);
      assertNotSame(stringList4, stringList0);
      
      String string1 = stringList1.join(2919, 6, "org.apache.wicket.util.string.AbstractStringList");
      assertEquals(48, stringList1.totalLength());
      assertEquals(1, stringList1.size());
      assertEquals("", string1);
      assertFalse(stringList1.equals((Object)stringList3));
      assertFalse(stringList1.equals((Object)stringList2));
      assertFalse(stringList1.equals((Object)stringList4));
      assertFalse(stringList1.equals((Object)stringList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringList1, stringList3);
      assertNotSame(stringList1, stringList2);
      assertNotSame(stringList1, stringList4);
      assertNotSame(stringList1, stringList0);
      
      // Undeclared exception!
      stringList3.join();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      StringList stringList1 = StringList.repeat(2963, "]");
      assertEquals(2963, stringList1.size());
      assertEquals(2963, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      String string0 = stringList0.join("]");
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string0);
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotNull(string0);
      assertNotSame(stringList0, stringList1);
      
      String string1 = stringList1.join(3, 881, "");
      assertEquals(2963, stringList1.size());
      assertEquals(2963, stringList1.totalLength());
      assertEqualsstring1);
      assertFalse(stringList1.equals((Object)stringList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringList1, stringList0);
      
      List<String> list0 = stringList1.toList();
      assertEquals(2963, stringList1.size());
      assertEquals(2963, stringList1.totalLength());
      assertFalse(list0.isEmpty());
      assertEquals(2963, list0.size());
      assertFalse(list0.contains(string0));
      assertTrue(list0.contains("]"));
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(list0);
      assertNotSame(stringList1, stringList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      int int0 = 3012;
      StringList stringList1 = StringList.repeat(3012, (String) null);
      assertEquals(3012, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      String string0 = stringList1.join("org.apache.wicket.util.string.AbstractStringList");
      assertEquals(3012, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(string0);
      assertNotSame(stringList1, stringList0);
      
      // Undeclared exception!
      stringList1.join("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.join((-373), (-373), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AbstractStringList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertNotNull(stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.get((-1671));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("k7Q>A%LK*1=S/", "]");
      assertEquals(13, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(stringList0);
      
      IStringIterator iStringIterator0 = stringList0.iterator();
      assertEquals(13, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(iStringIterator0);
      
      int int0 = stringList0.totalLength();
      assertEquals(13, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertEquals(13, int0);
      
      int int1 = stringList0.totalLength();
      assertEquals(13, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertEquals(13, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      IStringIterator iStringIterator0 = stringList0.iterator();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(iStringIterator0);
      
      int int0 = stringList0.totalLength();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, int0);
      
      int int1 = stringList0.totalLength();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      int int0 = stringList0.size();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringList0;
      objectArray0[1] = (Object) stringList0;
      objectArray0[2] = (Object) stringList0;
      objectArray0[3] = (Object) stringList0;
      objectArray0[4] = (Object) stringList0;
      String string0 = stringList0.toString();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      StringList stringList1 = StringList.valueOf(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringList1.size());
      assertEquals(255, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.removeLast();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("", "");
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertNotNull(stringList0);
      
      stringList0.sort();
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      
      String string0 = stringList0.join();
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = stringList0.toArray();
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = stringList0.toArray();
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      StringList stringList1 = StringList.tokenize("");
      assertEquals(0, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.get(2145);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      StringList stringList0 = StringList.repeat(0, "z}U!39MN{zB]Nt");
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      List<String> list0 = stringList0.toList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains("z}U!39MN{zB]Nt"));
      assertNotNull(list0);
      
      String string0 = stringList0.toString();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String string1 = stringList0.join("z}U!39MN{zB]Nt");
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        stringList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringList stringList0 = StringList.valueOf("#o");
      assertEquals(2, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(stringList0);
      
      StringList stringList1 = StringList.valueOf("**+6bhD)[1GL9_");
      assertEquals(1, stringList1.size());
      assertEquals(14, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      boolean boolean0 = stringList0.contains("yEg+$vy7BjKlN7'0M7");
      assertEquals(2, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertFalse(boolean0);
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList1);
      
      String string0 = stringList0.join();
      assertEquals(2, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertEquals("#o", string0);
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotNull(string0);
      assertNotSame(stringList0, stringList1);
      
      String string1 = stringList0.get(0);
      assertEquals(2, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertEquals("#o", string1);
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringList0, stringList1);
      
      String[] stringArray0 = stringList0.toArray();
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotNull(stringArray0);
      assertNotSame(stringList0, stringList1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringList stringList0 = StringList.valueOf("");
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      StringList stringList1 = StringList.tokenize("");
      assertEquals(0, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      String string0 = stringList0.join();
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string0);
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotNull(string0);
      assertNotSame(stringList0, stringList1);
      
      stringList0.add("");
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList1);
      
      String string1 = stringList0.join(24, 10, "");
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertEquals("", string1);
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringList0, stringList1);
      
      String string2 = stringList0.join(10, (-1), "");
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertEquals("", string2);
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(stringList0, stringList1);
      
      stringList0.prepend("");
      assertEquals(0, stringList0.totalLength());
      assertEquals(3, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList1);
      
      String[] stringArray0 = stringList0.toArray();
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringList0.totalLength());
      assertEquals(3, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotNull(stringArray0);
      assertNotSame(stringList0, stringList1);
      
      IStringIterator iStringIterator0 = stringList0.iterator();
      assertEquals(0, stringList0.totalLength());
      assertEquals(3, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotNull(iStringIterator0);
      assertNotSame(stringList0, stringList1);
      
      String string3 = stringList1.join("");
      assertEquals(0, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertEquals("", string3);
      assertFalse(stringList1.equals((Object)stringList0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(stringList1, stringList0);
      
      StringList stringList2 = StringList.valueOf((Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringList0.totalLength());
      assertEquals(3, stringList0.size());
      assertEquals(3, stringList2.size());
      assertEquals(0, stringList2.totalLength());
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList1));
      assertNotNull(stringList2);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList1);
      
      String[] stringArray1 = stringList0.toArray();
      assertEquals(3, stringArray1.length);
      assertEquals(0, stringList0.totalLength());
      assertEquals(3, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.join((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AbstractStringList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectArray0;
      StringList stringList0 = StringList.valueOf(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(30, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(stringList0);
      
      int int0 = stringList0.size();
      assertEquals(1, objectArray0.length);
      assertEquals(30, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertEquals(1, int0);
      
      String[] stringArray0 = stringList0.toArray();
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(30, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.join((-523), 352, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringList stringList0 = new StringList();
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, stringList0.size());
      assertNotNull(stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.join(1748, 2323, "&amp;");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1748, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("k7Q>A%LK*1=S/", "]");
      assertEquals(13, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(stringList0);
      
      StringValue stringValue0 = mock(StringValue.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringValue0).toString();
      stringList0.add(stringValue0);
      assertEquals(2, stringList0.size());
      assertEquals(54, stringList0.totalLength());
      
      String[] stringArray0 = stringList0.toArray();
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringList0.size());
      assertEquals(54, stringList0.totalLength());
      assertNotNull(stringArray0);
      
      StringList stringList1 = StringList.tokenize("Z~XiC{j5;P%.c", "gMNXU");
      assertEquals(2, stringList1.size());
      assertEquals(12, stringList1.totalLength());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      int int0 = 8;
      StringList stringList2 = StringList.tokenize("[", ".zQ0+W sz|J");
      assertEquals(1, stringList2.size());
      assertEquals(1, stringList2.totalLength());
      assertFalse(stringList2.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList0));
      assertNotNull(stringList2);
      assertNotSame(stringList2, stringList1);
      assertNotSame(stringList2, stringList0);
      
      // Undeclared exception!
      try { 
        stringList0.join(0, 8, "]");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringList stringList0 = StringList.tokenize(".D:v<wXqal>9,[=>w*:");
      assertEquals(2, stringList0.size());
      assertEquals(18, stringList0.totalLength());
      assertNotNull(stringList0);
      
      String string0 = stringList0.join();
      assertEquals(2, stringList0.size());
      assertEquals(18, stringList0.totalLength());
      assertEquals(".D:v<wXqal>9, [=>w*:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("");
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      String string0 = stringList0.join();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string0);
      assertNotNull(string0);
      
      stringList0.prepend("");
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      
      List<String> list0 = stringList0.getList();
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(string0));
      assertNotNull(list0);
      
      StringList stringList1 = StringList.valueOf((Collection<?>) list0);
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, stringList1.size());
      assertEquals(0, stringList1.totalLength());
      assertTrue(list0.contains(string0));
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList1, stringList0);
      
      List<String> list1 = stringList0.toList();
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      
      StringList stringList2 = StringList.valueOf((Collection<?>) list1);
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, stringList2.totalLength());
      assertEquals(1, stringList2.size());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList1));
      assertNotNull(stringList2);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList1);
      
      IStringIterator iStringIterator0 = stringList2.iterator();
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, stringList2.totalLength());
      assertEquals(1, stringList2.size());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList1));
      assertNotNull(iStringIterator0);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList1);
      
      StringList stringList3 = StringList.valueOf((Collection<?>) list1);
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, stringList3.totalLength());
      assertEquals(1, stringList3.size());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList2));
      assertNotNull(stringList3);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList2);
      
      StringValue stringValue0 = mock(StringValue.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringValue0).toString();
      stringList3.add(stringValue0);
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(2, stringList3.size());
      assertEquals(41, stringList3.totalLength());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList2));
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList2);
      
      int int0 = stringList0.size();
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(1, int0);
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      
      stringList3.prepend("");
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(3, stringList3.size());
      assertEquals(41, stringList3.totalLength());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList2));
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList2);
      
      int int1 = stringList2.size();
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, stringList2.totalLength());
      assertEquals(1, stringList2.size());
      assertEquals(1, int1);
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList2.equals((Object)stringList3));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList1));
      assertTrue(int1 == int0);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList2, stringList3);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList1);
      
      stringList2.prepend("");
      assertEquals(1, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, stringList2.totalLength());
      assertEquals(2, stringList2.size());
      assertTrue(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(stringList2.equals((Object)stringList3));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList1));
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      assertNotSame(stringList2, stringList3);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList1);
      
      StringList stringList4 = StringList.valueOf(" iC P\"q:vR");
      assertEquals(1, stringList4.size());
      assertEquals(10, stringList4.totalLength());
      assertFalse(stringList4.equals((Object)stringList1));
      assertFalse(stringList4.equals((Object)stringList0));
      assertFalse(stringList4.equals((Object)stringList2));
      assertFalse(stringList4.equals((Object)stringList3));
      assertNotNull(stringList4);
      assertNotSame(stringList4, stringList1);
      assertNotSame(stringList4, stringList0);
      assertNotSame(stringList4, stringList2);
      assertNotSame(stringList4, stringList3);
      
      stringList0.prepend("");
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      
      int int2 = stringList0.totalLength();
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertEquals(0, int2);
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      
      Object[] objectArray0 = new Object[0];
      StringList stringList5 = StringList.valueOf(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringList5.totalLength());
      assertEquals(0, stringList5.size());
      assertFalse(stringList5.equals((Object)stringList2));
      assertFalse(stringList5.equals((Object)stringList4));
      assertFalse(stringList5.equals((Object)stringList3));
      assertFalse(stringList5.equals((Object)stringList1));
      assertFalse(stringList5.equals((Object)stringList0));
      assertNotNull(stringList5);
      assertNotSame(stringList5, stringList2);
      assertNotSame(stringList5, stringList4);
      assertNotSame(stringList5, stringList3);
      assertNotSame(stringList5, stringList1);
      assertNotSame(stringList5, stringList0);
      
      IStringIterator iStringIterator1 = stringList2.iterator();
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(0, stringList2.totalLength());
      assertEquals(2, stringList2.size());
      assertFalse(list1.contains(" iC P\"q:vR"));
      assertTrue(list1.contains(""));
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(iStringIterator1.equals((Object)iStringIterator0));
      assertFalse(list1.equals((Object)list0));
      assertFalse(stringList2.equals((Object)stringList3));
      assertFalse(stringList2.equals((Object)stringList5));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList4));
      assertNotNull(iStringIterator1);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      assertNotSame(iStringIterator1, iStringIterator0);
      assertNotSame(list1, list0);
      assertNotSame(stringList2, stringList3);
      assertNotSame(stringList2, stringList5);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList1);
      assertNotSame(stringList2, stringList4);
      
      String string1 = stringList0.toString();
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertEquals("[, ]", string1);
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      
      boolean boolean0 = stringList3.contains(" iC P\"q:vR");
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(3, stringList3.size());
      assertEquals(41, stringList3.totalLength());
      assertFalse(boolean0);
      assertFalse(list1.contains(" iC P\"q:vR"));
      assertTrue(list1.contains(""));
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(list1.equals((Object)list0));
      assertFalse(stringList3.equals((Object)stringList5));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList4));
      assertFalse(stringList3.equals((Object)stringList2));
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      assertNotSame(list1, list0);
      assertNotSame(stringList3, stringList5);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList4);
      assertNotSame(stringList3, stringList2);
      
      StringList stringList6 = StringList.valueOf("[, ]");
      assertEquals(4, stringList6.totalLength());
      assertEquals(1, stringList6.size());
      assertFalse(stringList6.equals((Object)stringList0));
      assertFalse(stringList6.equals((Object)stringList4));
      assertFalse(stringList6.equals((Object)stringList2));
      assertFalse(stringList6.equals((Object)stringList3));
      assertFalse(stringList6.equals((Object)stringList1));
      assertFalse(stringList6.equals((Object)stringList5));
      assertNotNull(stringList6);
      assertNotSame(stringList6, stringList0);
      assertNotSame(stringList6, stringList4);
      assertNotSame(stringList6, stringList2);
      assertNotSame(stringList6, stringList3);
      assertNotSame(stringList6, stringList1);
      assertNotSame(stringList6, stringList5);
      
      String[] stringArray0 = stringList3.toArray();
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(3, stringList3.size());
      assertEquals(41, stringList3.totalLength());
      assertFalse(list1.contains(" iC P\"q:vR"));
      assertTrue(list1.contains(""));
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(list1.equals((Object)list0));
      assertFalse(stringList3.equals((Object)stringList5));
      assertFalse(stringList3.equals((Object)stringList6));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList4));
      assertFalse(stringList3.equals((Object)stringList2));
      assertNotNull(stringArray0);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      assertNotSame(list1, list0);
      assertNotSame(stringList3, stringList5);
      assertNotSame(stringList3, stringList6);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList4);
      assertNotSame(stringList3, stringList2);
      
      StringList stringList7 = StringList.valueOf((Collection<?>) list1);
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals(1, stringList7.size());
      assertEquals(0, stringList7.totalLength());
      assertFalse(list1.contains(" iC P\"q:vR"));
      assertTrue(list1.contains(""));
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(list1.equals((Object)list0));
      assertFalse(stringList7.equals((Object)stringList2));
      assertFalse(stringList7.equals((Object)stringList5));
      assertFalse(stringList7.equals((Object)stringList4));
      assertFalse(stringList7.equals((Object)stringList3));
      assertFalse(stringList7.equals((Object)stringList0));
      assertFalse(stringList7.equals((Object)stringList1));
      assertFalse(stringList7.equals((Object)stringList6));
      assertNotNull(stringList7);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList7);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      assertNotSame(list1, list0);
      assertNotSame(stringList7, stringList2);
      assertNotSame(stringList7, stringList5);
      assertNotSame(stringList7, stringList4);
      assertNotSame(stringList7, stringList3);
      assertNotSame(stringList7, stringList0);
      assertNotSame(stringList7, stringList1);
      assertNotSame(stringList7, stringList6);
      
      StringList stringList8 = StringList.repeat(1, "[, ]");
      assertEquals(1, stringList8.size());
      assertEquals(4, stringList8.totalLength());
      assertFalse(stringList8.equals((Object)stringList5));
      assertFalse(stringList8.equals((Object)stringList1));
      assertFalse(stringList8.equals((Object)stringList2));
      assertFalse(stringList8.equals((Object)stringList4));
      assertFalse(stringList8.equals((Object)stringList0));
      assertFalse(stringList8.equals((Object)stringList3));
      assertFalse(stringList8.equals((Object)stringList6));
      assertFalse(stringList8.equals((Object)stringList7));
      assertNotNull(stringList8);
      assertNotSame(stringList8, stringList5);
      assertNotSame(stringList8, stringList1);
      assertNotSame(stringList8, stringList2);
      assertNotSame(stringList8, stringList4);
      assertNotSame(stringList8, stringList0);
      assertNotSame(stringList8, stringList3);
      assertNotSame(stringList8, stringList6);
      assertNotSame(stringList8, stringList7);
      
      String string2 = stringList0.get(1);
      assertEquals(0, stringList0.totalLength());
      assertEquals(2, stringList0.size());
      assertEquals("", string2);
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList8));
      assertFalse(stringList0.equals((Object)stringList7));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList8);
      assertNotSame(stringList0, stringList7);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList4);
      
      StringList stringList9 = StringList.valueOf(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringList9.totalLength());
      assertEquals(0, stringList9.size());
      assertFalse(stringList9.equals((Object)stringList3));
      assertFalse(stringList9.equals((Object)stringList0));
      assertFalse(stringList9.equals((Object)stringList6));
      assertFalse(stringList9.equals((Object)stringList8));
      assertFalse(stringList9.equals((Object)stringList5));
      assertFalse(stringList9.equals((Object)stringList7));
      assertFalse(stringList9.equals((Object)stringList2));
      assertFalse(stringList9.equals((Object)stringList1));
      assertFalse(stringList9.equals((Object)stringList4));
      assertNotNull(stringList9);
      assertNotSame(stringList9, stringList3);
      assertNotSame(stringList9, stringList0);
      assertNotSame(stringList9, stringList6);
      assertNotSame(stringList9, stringList8);
      assertNotSame(stringList9, stringList5);
      assertNotSame(stringList9, stringList7);
      assertNotSame(stringList9, stringList2);
      assertNotSame(stringList9, stringList1);
      assertNotSame(stringList9, stringList4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("");
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertNotNull(stringList0);
      
      String string0 = stringList0.join((-1918), (-1918), "d%K>hDei~!:Wj");
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringValue stringValue0 = mock(StringValue.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringValue0).toString();
      stringList0.add(stringValue0);
      assertEquals(42, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      
      StringList stringList1 = StringList.valueOf("");
      assertEquals(0, stringList1.totalLength());
      assertEquals(1, stringList1.size());
      assertFalse(stringList1.equals((Object)stringList0));
      assertNotNull(stringList1);
      assertNotSame(stringList1, stringList0);
      
      StringList stringList2 = StringList.tokenize("", "org.apache.wicket.util.string.StringValue");
      assertEquals(0, stringList2.size());
      assertEquals(0, stringList2.totalLength());
      assertFalse(stringList2.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList0));
      assertNotNull(stringList2);
      assertNotSame(stringList2, stringList1);
      assertNotSame(stringList2, stringList0);
      
      StringList stringList3 = StringList.tokenize("", "");
      assertEquals(0, stringList3.totalLength());
      assertEquals(0, stringList3.size());
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList2));
      assertNotNull(stringList3);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "org.apache.wicket.util.string.StringValue";
      objectArray0[3] = objectArray0[2];
      StringList stringList4 = StringList.valueOf(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(82, stringList4.totalLength());
      assertEquals(4, stringList4.size());
      assertFalse(stringList4.equals((Object)stringList3));
      assertFalse(stringList4.equals((Object)stringList1));
      assertFalse(stringList4.equals((Object)stringList0));
      assertFalse(stringList4.equals((Object)stringList2));
      assertNotNull(stringList4);
      assertNotSame(stringList4, stringList3);
      assertNotSame(stringList4, stringList1);
      assertNotSame(stringList4, stringList0);
      assertNotSame(stringList4, stringList2);
      
      List<String> list0 = stringList3.getList();
      assertEquals(0, stringList3.totalLength());
      assertEquals(0, stringList3.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("org.apache.wicket.util.string.StringValue"));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList2));
      assertFalse(stringList3.equals((Object)stringList4));
      assertNotNull(list0);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList2);
      assertNotSame(stringList3, stringList4);
      
      StringList stringList5 = StringList.valueOf((Collection<?>) list0);
      assertEquals(0, stringList3.totalLength());
      assertEquals(0, stringList3.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, stringList5.size());
      assertEquals(0, stringList5.totalLength());
      assertFalse(list0.contains("org.apache.wicket.util.string.StringValue"));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList2));
      assertFalse(stringList3.equals((Object)stringList4));
      assertFalse(stringList5.equals((Object)stringList2));
      assertFalse(stringList5.equals((Object)stringList1));
      assertFalse(stringList5.equals((Object)stringList0));
      assertFalse(stringList5.equals((Object)stringList3));
      assertFalse(stringList5.equals((Object)stringList4));
      assertNotNull(stringList5);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList2);
      assertNotSame(stringList3, stringList4);
      assertNotSame(stringList3, stringList5);
      assertNotSame(stringList5, stringList2);
      assertNotSame(stringList5, stringList1);
      assertNotSame(stringList5, stringList0);
      assertNotSame(stringList5, stringList3);
      assertNotSame(stringList5, stringList4);
      
      StringList stringList6 = StringList.repeat(0, "rOX$");
      assertEquals(0, stringList6.size());
      assertEquals(0, stringList6.totalLength());
      assertFalse(stringList6.equals((Object)stringList3));
      assertFalse(stringList6.equals((Object)stringList4));
      assertFalse(stringList6.equals((Object)stringList5));
      assertFalse(stringList6.equals((Object)stringList2));
      assertFalse(stringList6.equals((Object)stringList1));
      assertFalse(stringList6.equals((Object)stringList0));
      assertNotNull(stringList6);
      assertNotSame(stringList6, stringList3);
      assertNotSame(stringList6, stringList4);
      assertNotSame(stringList6, stringList5);
      assertNotSame(stringList6, stringList2);
      assertNotSame(stringList6, stringList1);
      assertNotSame(stringList6, stringList0);
      
      stringList0.remove(0);
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList4);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      
      stringList0.sort();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList4);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      
      StringList stringList7 = StringList.tokenize("", "");
      assertEquals(0, stringList7.size());
      assertEquals(0, stringList7.totalLength());
      assertFalse(stringList7.equals((Object)stringList4));
      assertFalse(stringList7.equals((Object)stringList6));
      assertFalse(stringList7.equals((Object)stringList3));
      assertFalse(stringList7.equals((Object)stringList0));
      assertFalse(stringList7.equals((Object)stringList1));
      assertFalse(stringList7.equals((Object)stringList2));
      assertFalse(stringList7.equals((Object)stringList5));
      assertNotNull(stringList7);
      assertNotSame(stringList7, stringList4);
      assertNotSame(stringList7, stringList6);
      assertNotSame(stringList7, stringList3);
      assertNotSame(stringList7, stringList0);
      assertNotSame(stringList7, stringList1);
      assertNotSame(stringList7, stringList2);
      assertNotSame(stringList7, stringList5);
      
      StringValue stringValue1 = mock(StringValue.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringValue1).toString();
      stringList7.add(stringValue1);
      assertEquals(1, stringList7.size());
      assertEquals(42, stringList7.totalLength());
      assertFalse(stringList7.equals((Object)stringList4));
      assertFalse(stringList7.equals((Object)stringList6));
      assertFalse(stringList7.equals((Object)stringList3));
      assertFalse(stringList7.equals((Object)stringList0));
      assertFalse(stringList7.equals((Object)stringList1));
      assertFalse(stringList7.equals((Object)stringList2));
      assertFalse(stringList7.equals((Object)stringList5));
      assertNotSame(stringList7, stringList4);
      assertNotSame(stringList7, stringList6);
      assertNotSame(stringList7, stringList3);
      assertNotSame(stringList7, stringList0);
      assertNotSame(stringList7, stringList1);
      assertNotSame(stringList7, stringList2);
      assertNotSame(stringList7, stringList5);
      
      List<String> list1 = stringList0.getList();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(list1.contains(string0));
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList7));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList7);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList4);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(list1, list0);
      
      String string1 = stringList0.toString();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("[]", string1);
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList7));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList7);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList4);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      
      String string2 = stringList1.join();
      assertEquals(0, stringList1.totalLength());
      assertEquals(1, stringList1.size());
      assertEquals("", string2);
      assertFalse(stringList1.equals((Object)stringList7));
      assertFalse(stringList1.equals((Object)stringList3));
      assertFalse(stringList1.equals((Object)stringList0));
      assertFalse(stringList1.equals((Object)stringList4));
      assertFalse(stringList1.equals((Object)stringList2));
      assertFalse(stringList1.equals((Object)stringList6));
      assertFalse(stringList1.equals((Object)stringList5));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(stringList1, stringList7);
      assertNotSame(stringList1, stringList3);
      assertNotSame(stringList1, stringList0);
      assertNotSame(stringList1, stringList4);
      assertNotSame(stringList1, stringList2);
      assertNotSame(stringList1, stringList6);
      assertNotSame(stringList1, stringList5);
      
      StringList stringList8 = StringList.valueOf("Kaxk<");
      assertEquals(1, stringList8.size());
      assertEquals(5, stringList8.totalLength());
      assertFalse(stringList8.equals((Object)stringList6));
      assertFalse(stringList8.equals((Object)stringList4));
      assertFalse(stringList8.equals((Object)stringList0));
      assertFalse(stringList8.equals((Object)stringList5));
      assertFalse(stringList8.equals((Object)stringList2));
      assertFalse(stringList8.equals((Object)stringList1));
      assertFalse(stringList8.equals((Object)stringList7));
      assertFalse(stringList8.equals((Object)stringList3));
      assertNotNull(stringList8);
      assertNotSame(stringList8, stringList6);
      assertNotSame(stringList8, stringList4);
      assertNotSame(stringList8, stringList0);
      assertNotSame(stringList8, stringList5);
      assertNotSame(stringList8, stringList2);
      assertNotSame(stringList8, stringList1);
      assertNotSame(stringList8, stringList7);
      assertNotSame(stringList8, stringList3);
      
      IStringIterator iStringIterator0 = stringList5.iterator();
      assertEquals(0, stringList3.totalLength());
      assertEquals(0, stringList3.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, stringList5.size());
      assertEquals(0, stringList5.totalLength());
      assertFalse(list0.contains(string1));
      assertFalse(stringList3.equals((Object)stringList8));
      assertFalse(stringList3.equals((Object)stringList7));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList6));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList2));
      assertFalse(stringList3.equals((Object)stringList4));
      assertFalse(stringList3.equals((Object)stringList5));
      assertTrue(list0.equals((Object)list1));
      assertFalse(stringList5.equals((Object)stringList2));
      assertFalse(stringList5.equals((Object)stringList1));
      assertFalse(stringList5.equals((Object)stringList0));
      assertFalse(stringList5.equals((Object)stringList8));
      assertFalse(stringList5.equals((Object)stringList3));
      assertFalse(stringList5.equals((Object)stringList7));
      assertFalse(stringList5.equals((Object)stringList4));
      assertFalse(stringList5.equals((Object)stringList6));
      assertNotNull(iStringIterator0);
      assertNotSame(stringList3, stringList8);
      assertNotSame(stringList3, stringList7);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList6);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList2);
      assertNotSame(stringList3, stringList4);
      assertNotSame(stringList3, stringList5);
      assertNotSame(list0, list1);
      assertNotSame(stringList5, stringList2);
      assertNotSame(stringList5, stringList1);
      assertNotSame(stringList5, stringList0);
      assertNotSame(stringList5, stringList8);
      assertNotSame(stringList5, stringList3);
      assertNotSame(stringList5, stringList7);
      assertNotSame(stringList5, stringList4);
      assertNotSame(stringList5, stringList6);
      
      String string3 = stringList8.join();
      assertEquals(1, stringList8.size());
      assertEquals(5, stringList8.totalLength());
      assertEquals("Kaxk<", string3);
      assertFalse(stringList8.equals((Object)stringList6));
      assertFalse(stringList8.equals((Object)stringList4));
      assertFalse(stringList8.equals((Object)stringList0));
      assertFalse(stringList8.equals((Object)stringList5));
      assertFalse(stringList8.equals((Object)stringList2));
      assertFalse(stringList8.equals((Object)stringList1));
      assertFalse(stringList8.equals((Object)stringList7));
      assertFalse(stringList8.equals((Object)stringList3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(stringList8, stringList6);
      assertNotSame(stringList8, stringList4);
      assertNotSame(stringList8, stringList0);
      assertNotSame(stringList8, stringList5);
      assertNotSame(stringList8, stringList2);
      assertNotSame(stringList8, stringList1);
      assertNotSame(stringList8, stringList7);
      assertNotSame(stringList8, stringList3);
      
      String string4 = stringList5.join(365, (-1918), "");
      assertEquals(0, stringList3.totalLength());
      assertEquals(0, stringList3.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, stringList5.size());
      assertEquals(0, stringList5.totalLength());
      assertEquals("", string4);
      assertFalse(list0.contains(string1));
      assertFalse(stringList3.equals((Object)stringList8));
      assertFalse(stringList3.equals((Object)stringList7));
      assertFalse(stringList3.equals((Object)stringList1));
      assertFalse(stringList3.equals((Object)stringList6));
      assertFalse(stringList3.equals((Object)stringList0));
      assertFalse(stringList3.equals((Object)stringList2));
      assertFalse(stringList3.equals((Object)stringList4));
      assertFalse(stringList3.equals((Object)stringList5));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(list0.equals((Object)list1));
      assertFalse(stringList5.equals((Object)stringList2));
      assertFalse(stringList5.equals((Object)stringList1));
      assertFalse(stringList5.equals((Object)stringList0));
      assertFalse(stringList5.equals((Object)stringList8));
      assertFalse(stringList5.equals((Object)stringList3));
      assertFalse(stringList5.equals((Object)stringList7));
      assertFalse(stringList5.equals((Object)stringList4));
      assertFalse(stringList5.equals((Object)stringList6));
      assertNotNull(string4);
      assertNotSame(stringList3, stringList8);
      assertNotSame(stringList3, stringList7);
      assertNotSame(stringList3, stringList1);
      assertNotSame(stringList3, stringList6);
      assertNotSame(stringList3, stringList0);
      assertNotSame(stringList3, stringList2);
      assertNotSame(stringList3, stringList4);
      assertNotSame(stringList3, stringList5);
      assertNotSame(list0, list1);
      assertNotSame(stringList5, stringList2);
      assertNotSame(stringList5, stringList1);
      assertNotSame(stringList5, stringList0);
      assertNotSame(stringList5, stringList8);
      assertNotSame(stringList5, stringList3);
      assertNotSame(stringList5, stringList7);
      assertNotSame(stringList5, stringList4);
      assertNotSame(stringList5, stringList6);
      
      String string5 = stringList2.join("An error occurred while converting '%s' to a double: %s");
      assertEquals(0, stringList2.size());
      assertEquals(0, stringList2.totalLength());
      assertEquals("", string5);
      assertFalse(stringList2.equals((Object)stringList1));
      assertFalse(stringList2.equals((Object)stringList7));
      assertFalse(stringList2.equals((Object)stringList0));
      assertFalse(stringList2.equals((Object)stringList8));
      assertFalse(stringList2.equals((Object)stringList3));
      assertFalse(stringList2.equals((Object)stringList5));
      assertFalse(stringList2.equals((Object)stringList6));
      assertFalse(stringList2.equals((Object)stringList4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertNotSame(stringList2, stringList1);
      assertNotSame(stringList2, stringList7);
      assertNotSame(stringList2, stringList0);
      assertNotSame(stringList2, stringList8);
      assertNotSame(stringList2, stringList3);
      assertNotSame(stringList2, stringList5);
      assertNotSame(stringList2, stringList6);
      assertNotSame(stringList2, stringList4);
      
      String string6 = stringList0.join();
      assertEquals(0, stringList0.size());
      assertEquals(0, stringList0.totalLength());
      assertEquals("", string6);
      assertFalse(stringList0.equals((Object)stringList5));
      assertFalse(stringList0.equals((Object)stringList2));
      assertFalse(stringList0.equals((Object)stringList7));
      assertFalse(stringList0.equals((Object)stringList6));
      assertFalse(stringList0.equals((Object)stringList4));
      assertFalse(stringList0.equals((Object)stringList3));
      assertFalse(stringList0.equals((Object)stringList1));
      assertFalse(stringList0.equals((Object)stringList8));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertNotSame(stringList0, stringList5);
      assertNotSame(stringList0, stringList2);
      assertNotSame(stringList0, stringList7);
      assertNotSame(stringList0, stringList6);
      assertNotSame(stringList0, stringList4);
      assertNotSame(stringList0, stringList3);
      assertNotSame(stringList0, stringList1);
      assertNotSame(stringList0, stringList8);
      
      StringList stringList9 = StringList.tokenize("");
      assertEquals(0, stringList9.totalLength());
      assertEquals(0, stringList9.size());
      assertFalse(stringList9.equals((Object)stringList0));
      assertFalse(stringList9.equals((Object)stringList2));
      assertFalse(stringList9.equals((Object)stringList6));
      assertFalse(stringList9.equals((Object)stringList4));
      assertFalse(stringList9.equals((Object)stringList7));
      assertFalse(stringList9.equals((Object)stringList3));
      assertFalse(stringList9.equals((Object)stringList8));
      assertFalse(stringList9.equals((Object)stringList1));
      assertFalse(stringList9.equals((Object)stringList5));
      assertNotNull(stringList9);
      assertNotSame(stringList9, stringList0);
      assertNotSame(stringList9, stringList2);
      assertNotSame(stringList9, stringList6);
      assertNotSame(stringList9, stringList4);
      assertNotSame(stringList9, stringList7);
      assertNotSame(stringList9, stringList3);
      assertNotSame(stringList9, stringList8);
      assertNotSame(stringList9, stringList1);
      assertNotSame(stringList9, stringList5);
      
      stringList7.sort();
      assertEquals(1, stringList7.size());
      assertEquals(42, stringList7.totalLength());
      assertFalse(stringList7.equals((Object)stringList4));
      assertFalse(stringList7.equals((Object)stringList6));
      assertFalse(stringList7.equals((Object)stringList3));
      assertFalse(stringList7.equals((Object)stringList0));
      assertFalse(stringList7.equals((Object)stringList8));
      assertFalse(stringList7.equals((Object)stringList9));
      assertFalse(stringList7.equals((Object)stringList1));
      assertFalse(stringList7.equals((Object)stringList2));
      assertFalse(stringList7.equals((Object)stringList5));
      assertNotSame(stringList7, stringList4);
      assertNotSame(stringList7, stringList6);
      assertNotSame(stringList7, stringList3);
      assertNotSame(stringList7, stringList0);
      assertNotSame(stringList7, stringList8);
      assertNotSame(stringList7, stringList9);
      assertNotSame(stringList7, stringList1);
      assertNotSame(stringList7, stringList2);
      assertNotSame(stringList7, stringList5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("$4%P_ZZ[o2");
      assertEquals(10, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertNotNull(stringList0);
      
      List<String> list0 = stringList0.toList();
      assertEquals(10, stringList0.totalLength());
      assertEquals(1, stringList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains("$4%P_ZZ[o2"));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringList stringList0 = StringList.tokenize("\"{ufxJ3:-_B08!A[8E");
      assertEquals(1, stringList0.size());
      assertEquals(18, stringList0.totalLength());
      assertNotNull(stringList0);
      
      String string0 = stringList0.join();
      assertEquals(1, stringList0.size());
      assertEquals(18, stringList0.totalLength());
      assertEquals("\"{ufxJ3:-_B08!A[8E", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringList stringList0 = StringList.valueOf("An error occurred while converting '%s' to a double: %s");
      stringList0.toList();
      stringList0.join((-14), (-14), "");
      stringList0.iterator();
      stringList0.size();
      stringList0.contains("An error occurred while converting '%s' to a double: %s");
      stringList0.join("An error occurred while converting '%s' to a double: %s");
      StringList stringList1 = StringList.tokenize("org.apache.wicket.util.string.AbstractStringList");
      stringList0.join();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringList1;
      StringList.valueOf(objectArray0);
      stringList1.sort();
      String[] stringArray0 = stringList1.toArray();
      StringList stringList2 = StringList.valueOf((String[]) null);
      StringList.valueOf(stringArray0);
      stringList1.join();
      stringList2.iterator();
      StringList stringList3 = StringList.valueOf((String[]) null);
      assertFalse(stringList3.equals((Object)stringList2));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringList stringList0 = new StringList();
      String string0 = stringList0.toString();
      assertEquals("[]", string0);
      
      String string1 = stringList0.toString();
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringList stringList0 = new StringList();
      // Undeclared exception!
      try { 
        stringList0.get(78);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringList stringList0 = new StringList();
      String[] stringArray0 = stringList0.toArray();
      stringList0.prepend("A:. w&L9.L?A");
      stringList0.removeLast();
      stringList0.add("");
      stringList0.contains("");
      stringList0.removeLast();
      List<String> list0 = stringList0.getList();
      StringList stringList1 = StringList.valueOf((Collection<?>) list0);
      StringList stringList2 = StringList.valueOf((Object[]) stringArray0);
      stringList2.join("");
      StringList.repeat(0, "");
      stringList2.join("A:. w&L9.L?A");
      int int0 = 3;
      stringList1.iterator();
      // Undeclared exception!
      try { 
        stringList1.get(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
