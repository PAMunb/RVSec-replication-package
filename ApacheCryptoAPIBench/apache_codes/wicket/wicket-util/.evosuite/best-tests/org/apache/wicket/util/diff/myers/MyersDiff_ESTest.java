/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:54:03 GMT 2022
 */

package org.apache.wicket.util.diff.myers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.diff.Revision;
import org.apache.wicket.util.diff.myers.MyersDiff;
import org.apache.wicket.util.diff.myers.PathNode;
import org.apache.wicket.util.diff.myers.Snake;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MyersDiff_ESTest extends MyersDiff_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      MyersDiff myersDiff0 = new MyersDiff();
      Revision revision0 = myersDiff0.diff(objectArray0, objectArray0);
      assertEquals(0, revision0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MyersDiff myersDiff0 = new MyersDiff();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) myersDiff0;
      Object[] objectArray1 = new Object[3];
      Revision revision0 = myersDiff0.diff(objectArray0, objectArray1);
      assertEquals(1, revision0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MyersDiff myersDiff0 = new MyersDiff();
      // Undeclared exception!
      try { 
        myersDiff0.diff((Object[]) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // original sequence is null
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MyersDiff myersDiff0 = new MyersDiff();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        myersDiff0.diff(objectArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MyersDiff.buildPath(objectArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = object0;
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = objectArray0[0];
      objectArray0[5] = objectArray0[0];
      objectArray0[6] = object0;
      objectArray0[7] = objectArray0[1];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = objectArray0[0];
      PathNode pathNode0 = MyersDiff.buildPath(objectArray0, objectArray1);
      Revision revision0 = MyersDiff.buildRevision(pathNode0, objectArray1, objectArray0);
      assertEquals(1, revision0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PathNode pathNode0 = MyersDiff.buildPath(objectArray0, objectArray0);
      Snake snake0 = new Snake((-2087), (-2087), pathNode0);
      // Undeclared exception!
      try { 
        MyersDiff.buildRevision(snake0, objectArray0, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // bad diffpath: found snake when looking for diff
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Snake snake0 = new Snake((-5), (-5), (PathNode) null);
      Revision revision0 = MyersDiff.buildRevision(snake0, objectArray0, objectArray0);
      assertEquals(0, revision0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = objectArray0[1];
      objectArray0[5] = objectArray0[4];
      objectArray0[6] = object0;
      objectArray0[7] = objectArray0[0];
      Object[] objectArray1 = new Object[8];
      PathNode pathNode0 = MyersDiff.buildPath(objectArray0, objectArray1);
      Revision revision0 = MyersDiff.buildRevision(pathNode0, objectArray1, objectArray0);
      assertEquals(1, revision0.size());
      assertEquals(8, pathNode0.i);
      assertEquals(8, pathNode0.j);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[1];
      PathNode pathNode0 = MyersDiff.buildPath(objectArray1, objectArray0);
      // Undeclared exception!
      try { 
        MyersDiff.buildRevision(pathNode0, objectArray0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // revised sequence is null
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MyersDiff myersDiff0 = new MyersDiff();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) myersDiff0;
      objectArray0[3] = (Object) myersDiff0;
      objectArray0[4] = (Object) myersDiff0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) myersDiff0;
      objectArray0[8] = object0;
      PathNode pathNode0 = MyersDiff.buildPath(objectArray0, objectArray0);
      // Undeclared exception!
      try { 
        MyersDiff.buildRevision(pathNode0, (Object[]) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // original sequence is null
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MyersDiff.buildRevision((PathNode) null, objectArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path is null
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = objectArray0[2];
      Object[] objectArray1 = new Object[8];
      objectArray1[3] = object0;
      // Undeclared exception!
      try { 
        MyersDiff.buildPath(objectArray0, objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[2];
      PathNode pathNode0 = MyersDiff.buildPath(objectArray0, objectArray1);
      // Undeclared exception!
      try { 
        MyersDiff.buildRevision(pathNode0, objectArray0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MyersDiff.buildPath(objectArray0, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // revised sequence is null
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MyersDiff.buildPath((Object[]) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // original sequence is null
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MyersDiff myersDiff0 = new MyersDiff();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        myersDiff0.diff(objectArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.myers.MyersDiff", e);
      }
  }
}
