/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:07:32 GMT 2022
 */

package org.apache.wicket.util.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.time.ITimeFrameSource;
import org.apache.wicket.util.time.Time;
import org.apache.wicket.util.time.TimeFrame;
import org.apache.wicket.util.time.TimeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeMap_ESTest extends TimeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn((TimeFrame) null).when(iTimeFrameSource0).getTimeFrame();
      // Undeclared exception!
      try { 
        timeMap0.put(iTimeFrameSource0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn((TimeFrame) null, (TimeFrame) null).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      Time time0 = mock(Time.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timeMap0.get(time0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      TimeFrame timeFrame0 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(timeFrame0).contains(any(org.apache.wicket.util.time.Time.class));
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame0, timeFrame0).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      Object object0 = timeMap0.get((Time) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      TimeFrame timeFrame0 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(timeFrame0).contains(any(org.apache.wicket.util.time.Time.class));
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame0, (TimeFrame) null).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      Time time0 = mock(Time.class, new ViolatedAssumptionAnswer());
      Object object0 = timeMap0.get(time0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      TimeFrame timeFrame0 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timeFrame0).toString();
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame0, timeFrame0).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      TimeFrame timeFrame1 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(timeFrame1).overlaps(any(org.apache.wicket.util.time.TimeFrame.class));
      doReturn((String) null).when(timeFrame1).toString();
      ITimeFrameSource iTimeFrameSource1 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame1).when(iTimeFrameSource1).getTimeFrame();
      // Undeclared exception!
      try { 
        timeMap0.put(iTimeFrameSource1, iTimeFrameSource1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeframe null overlaps timeframe null
         //
         verifyException("org.apache.wicket.util.time.TimeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      TimeFrame timeFrame0 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame0, timeFrame0).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      TimeFrame timeFrame1 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(timeFrame1).overlaps(any(org.apache.wicket.util.time.TimeFrame.class));
      ITimeFrameSource iTimeFrameSource1 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame1).when(iTimeFrameSource1).getTimeFrame();
      timeMap0.put(iTimeFrameSource1, iTimeFrameSource1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      TimeFrame timeFrame0 = mock(TimeFrame.class, new ViolatedAssumptionAnswer());
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn(timeFrame0, (TimeFrame) null).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      // Undeclared exception!
      try { 
        timeMap0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TimeMap timeMap0 = new TimeMap();
      ITimeFrameSource iTimeFrameSource0 = mock(ITimeFrameSource.class, new ViolatedAssumptionAnswer());
      doReturn((TimeFrame) null, (TimeFrame) null).when(iTimeFrameSource0).getTimeFrame();
      timeMap0.put(iTimeFrameSource0, iTimeFrameSource0);
      // Undeclared exception!
      try { 
        timeMap0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeMap", e);
      }
  }
}
