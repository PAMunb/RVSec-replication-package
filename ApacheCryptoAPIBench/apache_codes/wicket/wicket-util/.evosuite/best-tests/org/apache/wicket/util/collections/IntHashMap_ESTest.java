/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:51:40 GMT 2022
 */

package org.apache.wicket.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.wicket.util.collections.IntHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntHashMap_ESTest extends IntHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer(113);
      assertEquals(113, (int)integer0);
      assertNotNull(integer0);
      
      intHashMap0.createEntry(2, integer0, 0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      
      Integer integer1 = intHashMap0.put(0, integer0);
      assertEquals(2, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3367);
      assertEquals(3367, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = (IntHashMap.Entry<Integer>) mock(IntHashMap.Entry.class, new ViolatedAssumptionAnswer());
      IntHashMap.Entry<Integer> intHashMap_Entry1 = new IntHashMap.Entry<Integer>((-1270), integer0, intHashMap_Entry0);
      assertEquals((-1270), intHashMap_Entry1.getKey());
      assertFalse(intHashMap_Entry1.equals((Object)intHashMap_Entry0));
      assertNotNull(intHashMap_Entry1);
      
      IntHashMap.Entry<Integer> intHashMap_Entry2 = new IntHashMap.Entry<Integer>(2525, integer0, intHashMap_Entry1);
      assertEquals((-1270), intHashMap_Entry1.getKey());
      assertEquals(2525, intHashMap_Entry2.getKey());
      assertFalse(intHashMap_Entry1.equals((Object)intHashMap_Entry0));
      assertNotNull(intHashMap_Entry2);
      
      boolean boolean0 = intHashMap_Entry2.equals(intHashMap_Entry1);
      assertEquals((-1270), intHashMap_Entry1.getKey());
      assertEquals(2525, intHashMap_Entry2.getKey());
      assertFalse(intHashMap_Entry1.equals((Object)intHashMap_Entry0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(3342, 3342);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.size = 857;
      assertFalse(intHashMap0.isEmpty());
      assertEquals(857, intHashMap0.size());
      
      Set<IntHashMap.Entry<Object>> set0 = (Set<IntHashMap.Entry<Object>>)intHashMap0.entrySet();
      assertFalse(intHashMap0.isEmpty());
      assertEquals(857, intHashMap0.size());
      assertEquals(857, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Object object0 = intHashMap0.put(857, set0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(858, intHashMap0.size());
      assertEquals(858, set0.size());
      assertFalse(set0.isEmpty());
      assertNull(object0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = intHashMap0.removeEntryForKey(857);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(857, intHashMap0.size());
      assertEquals(857, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 5);
      IntHashMap.Entry<Object> intHashMap_Entry0 = new IntHashMap.Entry<Object>(0, intHashMap0, (IntHashMap.Entry<Object>) null);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals(0, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      intHashMap_EntryArray0[0] = intHashMap_Entry0;
      intHashMap0.table = intHashMap_EntryArray0;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      IntHashMap.Entry<Object> intHashMap_Entry1 = intHashMap0.removeEntryForKey(1224);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNull(intHashMap_Entry1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>(0);
      assertEquals(0, intHashMap1.size());
      assertTrue(intHashMap1.isEmpty());
      assertNotNull(intHashMap1);
      
      Object object0 = intHashMap1.put(1, intHashMap0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertFalse(intHashMap1.isEmpty());
      assertEquals(1, intHashMap1.size());
      assertNull(object0);
      
      intHashMap1.putAll(intHashMap1);
      assertFalse(intHashMap1.isEmpty());
      assertEquals(1, intHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>();
      assertTrue(intHashMap1.isEmpty());
      assertEquals(0, intHashMap1.size());
      assertFalse(intHashMap1.equals((Object)intHashMap0));
      assertNotNull(intHashMap1);
      
      intHashMap1.size = (-652);
      assertEquals((-652), intHashMap1.size());
      assertFalse(intHashMap1.isEmpty());
      
      intHashMap0.putAll(intHashMap1);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals((-652), intHashMap1.size());
      assertFalse(intHashMap1.isEmpty());
      assertNotSame(intHashMap0, intHashMap1);
      assertNotSame(intHashMap1, intHashMap0);
      assertFalse(intHashMap0.equals((Object)intHashMap1));
      assertFalse(intHashMap1.equals((Object)intHashMap0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put((-1172), intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = intHashMap0.put(12, integer0);
      assertEquals(2, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(0, 1452.5F);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put((-663), integer0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = intHashMap0.getEntry(0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(intHashMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(2, 1315.22F);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Integer integer1 = intHashMap0.put(2, integer0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(integer1);
      
      boolean boolean0 = intHashMap0.containsKey(8188);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer(1859);
      assertEquals(1859, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = intHashMap0.put(1859, integer0);
      assertEquals(1, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertNull(integer1);
      
      Integer integer2 = intHashMap0.get(19);
      assertEquals(1, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntHashMap<IntHashMap<Object>> intHashMap0 = new IntHashMap<IntHashMap<Object>>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.size = (-2838);
      assertFalse(intHashMap0.isEmpty());
      assertEquals((-2838), intHashMap0.size());
      
      boolean boolean0 = intHashMap0.isEmpty();
      assertFalse(intHashMap0.isEmpty());
      assertEquals((-2838), intHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = null;
      try {
        intHashMap0 = new IntHashMap<Integer>(1073741824, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 9);
      intHashMap0.transfer(intHashMap_EntryArray0);
      assertEquals(9, intHashMap_EntryArray0.length);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.init();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2247);
      assertEquals(2247, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(1894);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.addEntry(1, integer0, 1031);
      assertEquals(1, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      
      int int0 = intHashMap0.size();
      assertEquals(1, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(2797, 2797);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.size = (-1);
      assertEquals((-1), intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      
      int int0 = intHashMap0.size();
      assertEquals((-1), intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put(0, intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = intHashMap0.removeEntryForKey(0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Iterator<Integer> iterator0 = intHashMap0.newKeyIterator();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Iterator<IntHashMap.Entry<Integer>> iterator0 = (Iterator<IntHashMap.Entry<Integer>>)intHashMap0.newEntryIterator();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = IntHashMap.indexFor(0, (-6329));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = IntHashMap.indexFor(8165, 8165);
      assertEquals(8164, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = IntHashMap.indexFor((-1341), (-1341));
      assertEquals((-1342), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer(3046);
      assertEquals(3046, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = intHashMap0.put(1330, integer0);
      assertEquals(1, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertNull(object0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = intHashMap0.getEntry(1330);
      assertEquals(1, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1330, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer((-652));
      assertEquals((-652), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = intHashMap0.put((-328), integer0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = intHashMap0.getEntry((-328));
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertEquals((-328), intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      IntHashMap<IntHashMap<Object>> intHashMap1 = new IntHashMap<IntHashMap<Object>>();
      assertEquals(0, intHashMap1.size());
      assertTrue(intHashMap1.isEmpty());
      assertNotNull(intHashMap1);
      
      IntHashMap<Object> intHashMap2 = intHashMap1.put(1183, intHashMap0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertFalse(intHashMap1.isEmpty());
      assertEquals(1, intHashMap1.size());
      assertNull(intHashMap2);
      
      IntHashMap<Object> intHashMap3 = intHashMap1.get(1183);
      assertFalse(intHashMap1.isEmpty());
      assertEquals(1, intHashMap1.size());
      assertTrue(intHashMap3.isEmpty());
      assertEquals(0, intHashMap3.size());
      assertSame(intHashMap3, intHashMap0);
      assertNotNull(intHashMap3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 0);
      intHashMap0.table = intHashMap_EntryArray0;
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      int int0 = intHashMap0.capacity();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(32771);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 0);
      // Undeclared exception!
      intHashMap0.transfer(intHashMap_EntryArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      // Undeclared exception!
      try { 
        intHashMap0.transfer((IntHashMap.Entry<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(33);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put(2176, (Object) null);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 0);
      // Undeclared exception!
      try { 
        intHashMap0.transfer(intHashMap_EntryArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(8202);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      // Undeclared exception!
      intHashMap0.resize(8202);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intHashMap0.resize(8195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      // Undeclared exception!
      try { 
        intHashMap0.resize((-296));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put(0, intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        intHashMap0.resize(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer(2731);
      assertEquals(2731, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(2731, integer0, (IntHashMap.Entry<Integer>) null);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      intHashMap0.resize(0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.removeMapping(intHashMap_Entry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2731
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(32771);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.removeEntryForKey(32771);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntHashMap<IntHashMap<Object>> intHashMap0 = new IntHashMap<IntHashMap<Object>>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.remove(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.resize(0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.remove(1051);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1051
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      // Undeclared exception!
      try { 
        intHashMap0.putAllForCreate((IntHashMap<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>(4377);
      assertEquals(0, intHashMap1.size());
      assertTrue(intHashMap1.isEmpty());
      assertFalse(intHashMap1.equals((Object)intHashMap0));
      assertNotNull(intHashMap1);
      
      intHashMap1.size = 4377;
      assertFalse(intHashMap1.isEmpty());
      assertEquals(4377, intHashMap1.size());
      
      // Undeclared exception!
      intHashMap0.putAll(intHashMap1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      // Undeclared exception!
      try { 
        intHashMap0.putAll((IntHashMap<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntHashMap<IntHashMap<Object>> intHashMap0 = new IntHashMap<IntHashMap<Object>>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>();
      assertTrue(intHashMap1.isEmpty());
      assertEquals(0, intHashMap1.size());
      assertNotNull(intHashMap1);
      
      intHashMap1.modCount = null;
      assertTrue(intHashMap1.isEmpty());
      assertEquals(0, intHashMap1.size());
      
      // Undeclared exception!
      try { 
        intHashMap1.put((-1171), intHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.resize(0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      Integer integer0 = new Integer(1689);
      assertEquals(1689, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        intHashMap0.put(441, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 441
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intHashMap0.newValueIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.modCount = null;
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intHashMap0.newKeyIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(8202);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer((-2176));
      assertEquals((-2176), (int)integer0);
      assertNotNull(integer0);
      
      intHashMap0.createEntry((-2176), integer0, 2001);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      
      // Undeclared exception!
      intHashMap0.newEntryIterator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntHashMap<IntHashMap<Integer>> intHashMap0 = new IntHashMap<IntHashMap<Integer>>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.newEntryIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.resize(0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.getEntry(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer(284);
      assertEquals(284, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        intHashMap0.createEntry(284, integer0, 284);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 284
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.containsKey(3264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(8199);
      assertEquals(8199, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(8199);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put(8199, integer0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      // Undeclared exception!
      intHashMap0.clone();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(8195);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.table = null;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      
      // Undeclared exception!
      try { 
        intHashMap0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(8199, 8199);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      // Undeclared exception!
      intHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      intHashMap0.modCount = null;
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intHashMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Integer integer0 = new Integer(6403);
      assertEquals(6403, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        intHashMap0.addEntry(6403, integer0, 6403);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6403
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Iterator<Object> iterator0 = intHashMap0.newValueIterator();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(iterator0);
      
      Object object0 = intHashMap0.put((-663), iterator0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      IntHashMap<Integer> intHashMap1 = new IntHashMap<Integer>(1);
      assertEquals(0, intHashMap1.size());
      assertTrue(intHashMap1.isEmpty());
      assertNotNull(intHashMap1);
      
      Object object1 = intHashMap0.put((-663), intHashMap1);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertEquals(0, intHashMap1.size());
      assertTrue(intHashMap1.isEmpty());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(2247);
      assertEquals(2247, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = new IntHashMap.Entry<Object>(0, integer0, (IntHashMap.Entry<Object>) null);
      assertEquals(0, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      Object object0 = intHashMap_Entry0.getValue();
      assertEquals(0, intHashMap_Entry0.getKey());
      assertEquals(2247, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer((-2051));
      assertEquals((-2051), (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap.Entry<Object> intHashMap_Entry0 = new IntHashMap.Entry<Object>(3446, integer0, (IntHashMap.Entry<Object>) null);
      assertEquals(3446, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      int int0 = intHashMap_Entry0.getKey();
      assertEquals(3446, intHashMap_Entry0.getKey());
      assertEquals(3446, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      int int0 = intHashMap0.size();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap intHashMap1 = (IntHashMap)intHashMap0.clone();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertTrue(intHashMap1.isEmpty());
      assertEquals(0, intHashMap1.size());
      assertNotNull(intHashMap1);
      
      Set<IntHashMap.Entry<Object>> set0 = (Set<IntHashMap.Entry<Object>>)intHashMap0.entrySet();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      Collection<Integer> collection0 = intHashMap0.values();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(collection0);
      
      Collection<Integer> collection1 = intHashMap0.values();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertSame(collection1, collection0);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IntHashMap<IntHashMap<Integer>> intHashMap0 = new IntHashMap<IntHashMap<Integer>>(1997, 2864.105F);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertFalse(linkedHashSet0.contains(1997));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      intHashMap0.keySet = (Set<Integer>) linkedHashSet0;
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(intHashMap0.keySet.isEmpty());
      assertEquals(0, intHashMap0.keySet.size());
      
      Set<Integer> set0 = intHashMap0.keySet();
      assertFalse(set0.contains(1997));
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap<Integer> intHashMap1 = new IntHashMap<Integer>();
      assertTrue(intHashMap1.isEmpty());
      assertEquals(0, intHashMap1.size());
      assertNotNull(intHashMap1);
      
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 6);
      IntHashMap.Entry<Object> intHashMap_Entry0 = new IntHashMap.Entry<Object>((-652), intHashMap1, (IntHashMap.Entry<Object>) null);
      assertTrue(intHashMap1.isEmpty());
      assertEquals(0, intHashMap1.size());
      assertEquals((-652), intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      intHashMap_EntryArray0[0] = intHashMap_Entry0;
      intHashMap0.table = intHashMap_EntryArray0;
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      
      Object object0 = intHashMap0.put((-652), intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      intHashMap0.putAll(intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      intHashMap0.size = 947;
      assertEquals(947, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
      
      intHashMap0.putAllForCreate(intHashMap0);
      assertEquals(947, intHashMap0.size());
      assertFalse(intHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(2731);
      assertEquals(2731, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(947);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(947, (int)integer1);
      assertNotNull(integer1);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(2731, integer1, (IntHashMap.Entry<Integer>) null);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(intHashMap_Entry0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry1 = new IntHashMap.Entry<Integer>(2731, integer0, (IntHashMap.Entry<Integer>) null);
      assertEquals(2731, intHashMap_Entry1.getKey());
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(intHashMap_Entry1);
      
      boolean boolean0 = intHashMap_Entry1.equals(intHashMap_Entry0);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertEquals(2731, intHashMap_Entry1.getKey());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(2731, integer0, (IntHashMap.Entry<Integer>) null);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry1 = new IntHashMap.Entry<Integer>(12, integer0, (IntHashMap.Entry<Integer>) null);
      assertEquals(12, intHashMap_Entry1.getKey());
      assertNotNull(intHashMap_Entry1);
      
      IntHashMap.Entry<Integer> intHashMap_Entry2 = new IntHashMap.Entry<Integer>(12, (Integer) null, intHashMap_Entry0);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertEquals(12, intHashMap_Entry2.getKey());
      assertFalse(intHashMap_Entry2.equals((Object)intHashMap_Entry1));
      assertNotNull(intHashMap_Entry2);
      
      boolean boolean0 = intHashMap_Entry2.equals(intHashMap_Entry1);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertEquals(12, intHashMap_Entry1.getKey());
      assertEquals(12, intHashMap_Entry2.getKey());
      assertNotSame(intHashMap_Entry1, intHashMap_Entry2);
      assertNotSame(intHashMap_Entry2, intHashMap_Entry1);
      assertFalse(intHashMap_Entry1.equals((Object)intHashMap_Entry2));
      assertFalse(intHashMap_Entry2.equals((Object)intHashMap_Entry1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = intHashMap0.removeEntryForKey((-2));
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNull(intHashMap_Entry0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry1 = new IntHashMap.Entry<Integer>((-2), integer0, intHashMap_Entry0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals((-2), intHashMap_Entry1.getKey());
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(intHashMap_Entry1);
      
      IntHashMap.Entry<Integer> intHashMap_Entry2 = new IntHashMap.Entry<Integer>((-2), integer1, intHashMap_Entry0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals((-2), intHashMap_Entry2.getKey());
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(intHashMap_Entry2);
      
      boolean boolean0 = intHashMap_Entry2.equals(intHashMap_Entry1);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals((-2), intHashMap_Entry1.getKey());
      assertEquals((-2), intHashMap_Entry2.getKey());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(2731);
      assertEquals(2731, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(2731, integer0, (IntHashMap.Entry<Integer>) null);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry1 = new IntHashMap.Entry<Integer>(953, integer0, intHashMap_Entry0);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertEquals(953, intHashMap_Entry1.getKey());
      assertNotNull(intHashMap_Entry1);
      
      boolean boolean0 = intHashMap_Entry1.equals(intHashMap_Entry0);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertEquals(953, intHashMap_Entry1.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(20, (Integer) null, (IntHashMap.Entry<Integer>) null);
      assertEquals(20, intHashMap_Entry0.getKey());
      assertNotNull(intHashMap_Entry0);
      
      boolean boolean0 = intHashMap_Entry0.equals(intHashMap0);
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertEquals(20, intHashMap_Entry0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNotNull(intHashMap0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry0 = intHashMap0.removeEntryForKey((-2));
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertNull(intHashMap_Entry0);
      
      IntHashMap.Entry<Integer> intHashMap_Entry1 = new IntHashMap.Entry<Integer>((-2), integer0, intHashMap_Entry0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertEquals((-2), intHashMap_Entry1.getKey());
      assertNotNull(intHashMap_Entry1);
      
      IntHashMap.Entry<Integer> intHashMap_Entry2 = new IntHashMap.Entry<Integer>((-2), integer0, intHashMap_Entry0);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertEquals((-2), intHashMap_Entry2.getKey());
      assertNotNull(intHashMap_Entry2);
      
      boolean boolean0 = intHashMap_Entry2.equals(intHashMap_Entry1);
      assertEquals(0, intHashMap0.size());
      assertTrue(intHashMap0.isEmpty());
      assertEquals((-2), intHashMap_Entry1.getKey());
      assertEquals((-2), intHashMap_Entry2.getKey());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      assertTrue(intHashMap0.isEmpty());
      assertEquals(0, intHashMap0.size());
      assertNotNull(intHashMap0);
      
      Object object0 = intHashMap0.put(0, intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertNull(object0);
      
      boolean boolean0 = intHashMap0.containsValue((Object) null);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(8202);
      intHashMap0.put(8202, (Object) null);
      boolean boolean0 = intHashMap0.containsValue((Object) null);
      assertFalse(intHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      intHashMap0.put((-1178), intHashMap0);
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>();
      boolean boolean0 = intHashMap0.containsValue(intHashMap1);
      assertFalse(intHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      intHashMap0.put((-1178), intHashMap0);
      boolean boolean0 = intHashMap0.containsValue(intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(8202);
      // Undeclared exception!
      intHashMap0.containsValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IntHashMap<IntHashMap<Integer>> intHashMap0 = new IntHashMap<IntHashMap<Integer>>(1997, 2864.105F);
      intHashMap0.clear();
      assertTrue(intHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IntHashMap<IntHashMap<Integer>> intHashMap0 = new IntHashMap<IntHashMap<Integer>>(1997, 2864.105F);
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>(1997);
      IntHashMap.Entry<Object> intHashMap_Entry0 = intHashMap1.removeMapping(intHashMap0.keySet);
      assertNull(intHashMap_Entry0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      Integer integer0 = new Integer(2731);
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(2731, integer0, (IntHashMap.Entry<Integer>) null);
      IntHashMap.Entry<Integer> intHashMap_Entry1 = intHashMap0.removeMapping(intHashMap_Entry0);
      assertEquals(2731, intHashMap_Entry0.getKey());
      assertNull(intHashMap_Entry1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      IntHashMap<IntHashMap<Object>> intHashMap1 = new IntHashMap<IntHashMap<Object>>();
      intHashMap1.put(1183, intHashMap0);
      intHashMap1.remove((-2721));
      assertFalse(intHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      IntHashMap<IntHashMap<Object>> intHashMap1 = new IntHashMap<IntHashMap<Object>>();
      intHashMap1.put(Integer.MAX_VALUE, intHashMap0);
      assertFalse(intHashMap1.isEmpty());
      
      intHashMap1.remove(Integer.MAX_VALUE);
      assertEquals(0, intHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>(0);
      IntHashMap.Entry<Object>[] intHashMap_EntryArray0 = (IntHashMap.Entry<Object>[]) Array.newInstance(IntHashMap.Entry.class, 8);
      intHashMap1.table = intHashMap_EntryArray0;
      intHashMap0.put(0, intHashMap1);
      intHashMap1.putAll(intHashMap0);
      assertEquals(1, intHashMap0.size());
      assertEquals(1, intHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>(0);
      intHashMap0.put(0, intHashMap1);
      intHashMap1.putAll(intHashMap0);
      assertFalse(intHashMap0.isEmpty());
      assertEquals(1, intHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      IntHashMap<IntHashMap<Integer>> intHashMap0 = new IntHashMap<IntHashMap<Integer>>(1997, 2864.105F);
      intHashMap0.putAll(intHashMap0);
      assertEquals(0, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>();
      IntHashMap<Object> intHashMap1 = new IntHashMap<Object>(12);
      intHashMap1.put(Integer.MAX_VALUE, intHashMap0);
      intHashMap1.getEntry((-1));
      assertFalse(intHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      IntHashMap<Integer> intHashMap1 = new IntHashMap<Integer>();
      intHashMap0.put(0, intHashMap1);
      intHashMap0.getEntry(0);
      assertFalse(intHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(0);
      Integer integer0 = new Integer(0);
      intHashMap0.put(0, integer0);
      intHashMap0.containsKey((-760));
      assertEquals(1, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      IntHashMap<IntHashMap<Object>> intHashMap1 = new IntHashMap<IntHashMap<Object>>(1);
      intHashMap1.put(1, intHashMap0);
      boolean boolean0 = intHashMap1.containsKey(1);
      assertEquals(1, intHashMap1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(15);
      Integer integer0 = new Integer(15);
      intHashMap0.put(1, integer0);
      intHashMap0.resize(1);
      intHashMap0.get(1007);
      assertEquals(1, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      IntHashMap<IntHashMap<Object>> intHashMap0 = new IntHashMap<IntHashMap<Object>>();
      boolean boolean0 = intHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>(15);
      Integer integer0 = new Integer(15);
      intHashMap0.put((-1662), integer0);
      boolean boolean0 = intHashMap0.isEmpty();
      assertEquals(1, intHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = null;
      try {
        intHashMap0 = new IntHashMap<Integer>(Integer.MAX_VALUE, (-906.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -906.0
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = null;
      try {
        intHashMap0 = new IntHashMap<Object>((-1516));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1516
         //
         verifyException("org.apache.wicket.util.collections.IntHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Integer integer0 = new Integer(971);
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(0, integer0, (IntHashMap.Entry<Integer>) null);
      String string0 = intHashMap_Entry0.toString();
      assertEquals("0=971", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Integer integer0 = new Integer(971);
      IntHashMap.Entry<Integer> intHashMap_Entry0 = new IntHashMap.Entry<Integer>(0, integer0, (IntHashMap.Entry<Integer>) null);
      Integer integer1 = intHashMap_Entry0.setValue(integer0);
      assertNotNull(integer1);
      assertEquals(0, intHashMap_Entry0.getKey());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      IntHashMap<IntHashMap<Object>> intHashMap0 = new IntHashMap<IntHashMap<Object>>();
      float float0 = intHashMap0.loadFactor();
      assertEquals(0.75F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      intHashMap0.addEntry(13, (Object) null, 1);
      intHashMap0.clone();
      assertFalse(intHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      IntHashMap<Object> intHashMap0 = new IntHashMap<Object>();
      int int0 = intHashMap0.capacity();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      IntHashMap<Integer> intHashMap0 = new IntHashMap<Integer>(810);
      Set<Integer> set0 = intHashMap0.keySet();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      boolean boolean0 = linkedHashSet0.add(set0);
      assertTrue(boolean0);
  }
}
