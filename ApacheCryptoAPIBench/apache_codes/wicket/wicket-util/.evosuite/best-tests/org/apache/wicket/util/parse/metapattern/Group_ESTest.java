/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:12:01 GMT 2022
 */

package org.apache.wicket.util.parse.metapattern;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Matcher;
import org.apache.wicket.util.parse.metapattern.Group;
import org.apache.wicket.util.parse.metapattern.MetaPattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Group_ESTest extends Group_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.DASH;
      Group group0 = new Group(metaPattern0);
      group0.pattern(4389);
      // Undeclared exception!
      try { 
        group0.bind((-3180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.Group", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.HEXADECIMAL_DIGITS;
      Group group0 = new Group(metaPattern0);
      group0.bind((-8));
      // Undeclared exception!
      try { 
        group0.get((Matcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.Group", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.TILDE;
      Group group0 = new Group(metaPattern0);
      Matcher matcher0 = group0.matcher((CharSequence) "(~)");
      // Undeclared exception!
      try { 
        group0.get(matcher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Group group0 = null;
      try {
        group0 = new Group((MetaPattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.MetaPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.COLON;
      Group group0 = new Group(metaPattern0);
      group0.bind((-3715));
      // Undeclared exception!
      try { 
        group0.bind(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.Group", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.OPTIONAL_STRING;
      Group group0 = new Group(metaPattern0);
      // Undeclared exception!
      try { 
        group0.get((Matcher) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.Group", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.RIGHT_SQUARE;
      Group group0 = new Group(metaPattern0);
      String string0 = group0.toString();
      assertEquals("(\\])", string0);
  }
}
