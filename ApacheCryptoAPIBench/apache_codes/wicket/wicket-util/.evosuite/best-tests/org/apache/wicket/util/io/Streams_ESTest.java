/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:06:47 GMT 2022
 */

package org.apache.wicket.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharConversionException;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.InvalidPropertiesFormatException;
import java.util.Locale;
import java.util.Properties;
import org.apache.wicket.util.io.Streams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Streams_ESTest extends Streams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2450), 54);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte) (-40), (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertEquals(54, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        Streams.readString((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction$ByteArrayUrlStreamHandler");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte) (-75), (byte) (-92), (byte)2, (byte)0, (byte)83, (byte)0, (byte)89}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(117, int0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte) (-75), (byte) (-92), (byte)2, (byte)0, (byte)83, (byte)0, (byte)89}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction$ByteArrayUrlStreamHandler");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
      assertEquals(8, int1);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte) (-75), (byte) (-92), (byte)2, (byte)0, (byte)83, (byte)0, (byte)89}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Streams.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'bufSize' must not be <= 0
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "net.bytebuddy.dynamic.loading.ByteArrayClassLoader$PersistenceHandler$UrlDefinitionAction$ByteArrayUrlStreamHandler");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      int int2 = Streams.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, 2048);
      assertEquals(0, int2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      long long0 = sequenceInputStream0.skip(11L);
      assertEquals(0L, long0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("2su");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        Streams.copyAndClose(sequenceInputStream0, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      try { 
        Streams.readNonCaching(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream1.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream1, mockPrintStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(int1 == int0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String string0 = Streams.readString((InputStream) byteArrayInputStream0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      try { 
        Streams.readNonCaching(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 90, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertEquals((-89), byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(1, byteArray0.length);
      assertEquals((-89), byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("url");
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      assertNotNull(filterOutputStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, filterOutputStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(1, byteArray0.length);
      assertEquals((-89), byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(int1 == int0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String string0 = Streams.readString((InputStream) byteArrayInputStream1);
      assertEquals("\u0001", string0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      String string0 = Streams.readString((Reader) stringReader0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader1 = new StringReader("~ nECy);osA");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      MockFile mockFile0 = new MockFile("~ nECy);osA", "-0BR:;&']b}j+Jy7$TV");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      try { 
        Streams.copy((InputStream) pipedInputStream0, (OutputStream) mockFileOutputStream0, 59);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'c';
      charArray0[2] = '/';
      charArray0[3] = 'c';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      File file0 = MockFile.createTempFile("org.apache.wicket.util.io.Streams", "org.apache.wicket.util.io.Streams");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/org.apache.wicket.util.io.Streams0org.apache.wicket.util.io.Streams", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("org.apache.wicket.util.io.Streams0org.apache.wicket.util.io.Streams", file0.getName());
      assertEquals("/tmp", file0.getParent());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        Streams.copy((InputStream) pipedInputStream0, (OutputStream) mockFileOutputStream0, 4935);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = sequenceInputStream0.read();
      assertEquals((-1), int0);
      
      long long0 = sequenceInputStream0.skip((-3013L));
      assertEquals(0L, long0);
      
      long long1 = sequenceInputStream0.skip(11L);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      // Undeclared exception!
      try { 
        Streams.loadFromXml(properties0, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      OutputStream outputStream0 = null;
      int int0 = Streams.copy((InputStream) sequenceInputStream0, (OutputStream) null);
      assertEquals(0, int0);
      
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      try { 
        sequenceInputStream1.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("(6am");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Streams.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'bufSize' must not be <= 0
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)1;
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      // Undeclared exception!
      try { 
        Streams.copy((InputStream) mockFileInputStream0, (OutputStream) mockPrintStream0, (-338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'bufSize' must not be <= 0
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-115), (byte)22);
      assertArrayEquals(new byte[] {(byte)22, (byte)123, (byte)0, (byte) (-115), (byte)123, (byte) (-115), (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(22, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)123, (byte)0, (byte) (-115), (byte)123, (byte) (-115), (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream1.read();
      assertEquals(22, int0);
      assertArrayEquals(new byte[] {(byte)22, (byte)123, (byte)0, (byte) (-115), (byte)123, (byte) (-115), (byte)1}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      InputStream inputStream0 = null;
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      
      // Undeclared exception!
      try { 
        Streams.loadFromXml((Properties) null, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // properties must not be null
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        Streams.loadFromXml((Properties) null, byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // properties must not be null
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      
      String string0 = Streams.readString((InputStream) byteArrayInputStream0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      
      PipedReader pipedReader0 = new PipedReader((byte)1);
      assertNotNull(pipedReader0);
      
      try { 
        Streams.readString((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-127);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)115, (byte) (-127)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(95, int0);
      assertArrayEquals(new byte[] {(byte)95, (byte)115, (byte) (-127)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
      assertEquals(2, int1);
      assertArrayEquals(new byte[] {(byte)95, (byte)115, (byte) (-127)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Streams.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0, (int) (byte) (-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'bufSize' must not be <= 0
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      
      try { 
        Streams.loadFromXml(properties0, bufferedInputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("ftp", uRI0.getScheme());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.bar", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("ftp://foo.bar", uRL0.toExternalForm());
      
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        Streams.readString((InputStream) null, (CharSequence) "C(&H.s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-1), (byte)73, (byte) (-32), (byte)0, (byte)0, (byte) (-104), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      try { 
        Streams.readString((InputStream) byteArrayInputStream0, (CharSequence) stringBuffer0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(231);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        Streams.readString((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream1.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream1, mockPrintStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(int1 == int0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      try { 
        Streams.loadFromXml(properties0, byteArrayInputStream0);
        fail("Expecting exception: InvalidPropertiesFormatException");
      
      } catch(InvalidPropertiesFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        Streams.loadFromXml(properties0, dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte) (-115));
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)0, (byte) (-115), (byte)0, (byte) (-115), (byte)1}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals((-115), byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)0, (byte) (-115), (byte)0, (byte) (-115), (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-115), byteArrayInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("g+%  /Tw^");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)0, (byte) (-115), (byte)0, (byte) (-115), (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-115), byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      try { 
        Streams.loadFromXml(properties0, byteArrayInputStream0);
        fail("Expecting exception: InvalidPropertiesFormatException");
      
      } catch(InvalidPropertiesFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.IOCase");
      assertNotNull(mockPrintStream0);
      
      int int1 = Streams.copyAndClose(byteArrayInputStream0, mockPrintStream0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      // Undeclared exception!
      try { 
        Streams.readString((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      String string0 = Streams.readString((InputStream) sequenceInputStream0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Streams.readString((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      // Undeclared exception!
      try { 
        Streams.readNonCaching(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Streams.readNonCaching((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'url' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      
      // Undeclared exception!
      try { 
        Streams.readNonCaching(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e^ZiEB(:Do");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "e^ZiEB(:Do";
      objectArray0[1] = (Object) "e^ZiEB(:Do";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) "e^ZiEB(:Do";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "e^ZiEB(:Do", objectArray0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertEquals(4, objectArray0.length);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      try { 
        Streams.copyAndClose(pipedInputStream0, printStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties properties0 = new Properties();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 149);
      byteArrayInputStream0.read();
      MockPrintStream mockPrintStream0 = new MockPrintStream("L\"3>']5<Xp\"P>9F");
      MockFile mockFile0 = new MockFile("g+%  /Tw^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Streams.copyAndClose(byteArrayInputStream0, mockFileOutputStream0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      try { 
        Streams.loadFromXml(properties2, byteArrayInputStream0);
        fail("Expecting exception: InvalidPropertiesFormatException");
      
      } catch(InvalidPropertiesFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        Streams.copyAndClose((InputStream) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.wicket.util.io.Streams");
      char[] charArray0 = new char[4];
      stringReader0.markSupported();
      charArray0[0] = 'j';
      charArray0[1] = 'c';
      charArray0[2] = '/';
      charArray0[3] = '+';
      stringReader0.read(charArray0);
      stringReader0.read();
      Streams.readString((Reader) stringReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      stringReader0.read(charArray0);
      File file0 = MockFile.createTempFile("org.apache.wicket.util.io.Streams", "org.apache.wicket.util.io.Streams");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      try { 
        Streams.copyAndClose(pipedInputStream0, mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      Streams.readString((Reader) stringReader0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        MockURL.openStream((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        Streams.loadFromXml(properties0, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inputStream must not be null
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("url");
      Streams.readString((Reader) stringReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("url");
      stringReader0.skip((-951L));
      Streams.readString((Reader) stringReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
  }
}
