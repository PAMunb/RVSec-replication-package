/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:19:37 GMT 2022
 */

package org.apache.wicket.util.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.io.FileDeleteStrategy;
import org.apache.wicket.util.file.FileCleaner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileCleaner_ESTest extends FileCleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      FileDeleteStrategy fileDeleteStrategy0 = mock(FileDeleteStrategy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileCleaner0.track((java.io.File) null, (Object) null, fileDeleteStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The file must not be null
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      // Undeclared exception!
      try { 
        fileCleaner0.track((java.io.File) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The file must not be null
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      java.io.File file0 = mock(java.io.File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      fileCleaner0.destroy();
      // Undeclared exception!
      try { 
        fileCleaner0.track(file0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      fileCleaner0.destroy();
      java.io.File file0 = mock(java.io.File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      FileDeleteStrategy fileDeleteStrategy0 = mock(FileDeleteStrategy.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileCleaner0.track(file0, (Object) file0, fileDeleteStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      java.io.File file0 = mock(java.io.File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      fileCleaner0.track(file0, (Object) file0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      java.io.File file0 = mock(java.io.File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      FileDeleteStrategy fileDeleteStrategy0 = mock(FileDeleteStrategy.class, new ViolatedAssumptionAnswer());
      fileCleaner0.track(file0, (Object) file0, fileDeleteStrategy0);
  }
}
