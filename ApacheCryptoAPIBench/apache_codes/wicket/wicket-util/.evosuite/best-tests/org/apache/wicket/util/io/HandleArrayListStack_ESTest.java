/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:00:30 GMT 2022
 */

package org.apache.wicket.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.EmptyStackException;
import java.util.LinkedList;
import org.apache.wicket.util.io.HandleArrayListStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HandleArrayListStack_ESTest extends HandleArrayListStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(142);
      Integer integer0 = new Integer(0);
      handleArrayListStack0.add(integer0);
      handleArrayListStack0.push(integer0);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      int int0 = handleArrayListStack1.search(integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(142);
      Integer integer0 = new Integer(0);
      handleArrayListStack0.add(integer0);
      handleArrayListStack0.push(integer0);
      Integer integer1 = handleArrayListStack0.pop();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(142);
      Integer integer0 = new Integer(0);
      handleArrayListStack0.add(integer0);
      handleArrayListStack0.push(integer0);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      int int0 = handleArrayListStack1.search(handleArrayListStack1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      Integer integer0 = new Integer(0);
      handleArrayListStack0.push(integer0);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      Object object0 = new Object();
      handleArrayListStack1.push(object0);
      int int0 = handleArrayListStack1.search((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      handleArrayListStack0.push((Object) null);
      Object object0 = handleArrayListStack0.pop();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(142);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      Object object0 = new Object();
      handleArrayListStack1.push(object0);
      Object object1 = handleArrayListStack1.pop();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(142);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      Object object0 = new Object();
      handleArrayListStack1.push(object0);
      Object object1 = handleArrayListStack1.peek();
      assertTrue(handleArrayListStack1.contains(object1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      Integer integer0 = new Integer(0);
      handleArrayListStack0.push(integer0);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      Object object0 = new Object();
      handleArrayListStack1.push(object0);
      int int0 = handleArrayListStack1.indexOf(object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = null;
      try {
        handleArrayListStack0 = new HandleArrayListStack<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = null;
      try {
        handleArrayListStack0 = new HandleArrayListStack<Object>((-2547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2547
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      // Undeclared exception!
      try { 
        handleArrayListStack0.peek();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.HandleArrayListStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(142);
      Integer integer0 = new Integer(0);
      handleArrayListStack0.push(integer0);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      int int0 = handleArrayListStack1.lastIndexOf(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>(linkedList0);
      Integer integer0 = handleArrayListStack0.peek();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(3664);
      Object object0 = new Object();
      handleArrayListStack1.push(object0);
      int int0 = handleArrayListStack1.lastIndexOf(handleArrayListStack0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>();
      handleArrayListStack1.push(handleArrayListStack0);
      int int0 = handleArrayListStack1.search(handleArrayListStack0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      handleArrayListStack0.push((Object) null);
      int int0 = handleArrayListStack0.lastIndexOf((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      Integer integer0 = new Integer(0);
      handleArrayListStack0.push(integer0);
      HandleArrayListStack<Object> handleArrayListStack1 = new HandleArrayListStack<Object>(handleArrayListStack0);
      int int0 = handleArrayListStack1.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      handleArrayListStack0.push(handleArrayListStack0);
      int int0 = handleArrayListStack0.indexOf(handleArrayListStack0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      Object object0 = new Object();
      handleArrayListStack0.add(object0);
      int int0 = handleArrayListStack0.indexOf((Object) null);
      assertTrue(handleArrayListStack0.contains(object0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      handleArrayListStack0.add((Object) null);
      int int0 = handleArrayListStack0.indexOf((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      int int0 = handleArrayListStack0.indexOf(handleArrayListStack0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      boolean boolean0 = handleArrayListStack0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HandleArrayListStack<Integer> handleArrayListStack0 = new HandleArrayListStack<Integer>();
      Integer integer0 = new Integer(1251);
      handleArrayListStack0.push(integer0);
      boolean boolean0 = handleArrayListStack0.empty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HandleArrayListStack<Object> handleArrayListStack0 = new HandleArrayListStack<Object>();
      // Undeclared exception!
      try { 
        handleArrayListStack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.HandleArrayListStack", e);
      }
  }
}
