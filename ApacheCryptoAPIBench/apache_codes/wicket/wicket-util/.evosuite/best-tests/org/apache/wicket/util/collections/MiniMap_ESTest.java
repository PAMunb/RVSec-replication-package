/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:55:44 GMT 2022
 */

package org.apache.wicket.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.wicket.util.collections.MiniMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MiniMap_ESTest extends MiniMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = new Integer((-1178));
      miniMap0.put(integer0, integer0);
      miniMap0.clear();
      Integer integer1 = new Integer(1630);
      miniMap0.put((Integer) null, integer1);
      miniMap0.containsValue(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1832);
      Function<Integer, Integer> function0 = Function.identity();
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      miniMap0.keySet();
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function0);
      Integer integer2 = new Integer((-1));
      miniMap0.put(integer2, integer0);
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      miniMap0.remove((Object) integer1);
      Integer integer3 = new Integer(2289);
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 2289);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(3475);
      miniMap0.keySet();
      Integer integer0 = new Integer((-272));
      Function<Integer, Integer> function0 = Function.identity();
      Function<Integer, Integer> function1 = function0.andThen((Function<? super Integer, ? extends Integer>) function0);
      Function<Integer, Integer> function2 = function1.compose((Function<? super Integer, ? extends Integer>) function0);
      miniMap0.computeIfAbsent(integer0, function2);
      Integer integer1 = new Integer(221);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(217);
      miniMap0.put(integer2, integer3);
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      miniMap0.remove((Object) integer2);
      Integer integer4 = new Integer((-1005));
      Integer integer5 = new Integer(217);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer((-1005));
      // Undeclared exception!
      miniMap0.put(integer6, integer7);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = null;
      Integer integer1 = new Integer(1630);
      miniMap0.put((Integer) null, integer1);
      MiniMap<Integer, Integer> miniMap1 = null;
      try {
        miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 1630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.wicket.util.collections.MiniMap$3$1$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1826);
      Integer integer0 = new Integer(1826);
      Function<Integer, Integer> function0 = Function.identity();
      miniMap0.computeIfAbsent(integer0, function0);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , anyInt());
      miniMap0.replaceAll(biFunction0);
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 1826);
      miniMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = new Integer((-1610));
      miniMap0.putIfAbsent(integer0, integer0);
      miniMap0.isFull();
      // Undeclared exception!
      try { 
        miniMap0.put((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = new Integer(1630);
      miniMap0.put((Integer) null, integer0);
      miniMap0.containsValue(integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = new Integer(1630);
      miniMap0.put((Integer) null, integer0);
      // Undeclared exception!
      try { 
        miniMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1832);
      Function<Integer, Integer> function0 = Function.identity();
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      miniMap0.computeIfAbsent(integer0, function0);
      miniMap0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(592);
      Integer integer0 = new Integer(592);
      Function<Integer, Integer> function0 = Function.identity();
      miniMap0.computeIfAbsent(integer0, function0);
      Integer integer1 = new Integer(592);
      miniMap0.put(integer1, integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = new Integer(1630);
      // Undeclared exception!
      try { 
        miniMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      hashMap0.clear();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, 2639);
      assertNotNull(miniMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap1 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(miniMap0, 2639);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      miniMap1.putAll(hashMap0);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      int int0 = miniMap1.size();
      assertEquals(0, int0);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      MiniMap<Integer, Integer> miniMap2 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap2);
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      
      MiniMap<Integer, Integer> miniMap3 = new MiniMap<Integer, Integer>(miniMap2, 2639);
      assertNotNull(miniMap3);
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      miniMap3.putAll(miniMap2);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap2);
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      MiniMap<Integer, Integer> miniMap4 = new MiniMap<Integer, Integer>(miniMap3, 2639);
      assertNotNull(miniMap4);
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertFalse(miniMap4.equals((Object)miniMap2));
      assertFalse(miniMap4.equals((Object)miniMap3));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      assertFalse(miniMap4.isFull());
      assertEquals(0, miniMap4.size());
      assertTrue(miniMap4.isEmpty());
      
      Integer integer0 = new Integer(2640);
      assertEquals(2640, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = miniMap3.put(integer0, integer0);
      assertNull(integer1);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap4);
      assertNotSame(miniMap3, miniMap2);
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap4));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertFalse(miniMap3.isEmpty());
      assertEquals(1, miniMap3.size());
      assertFalse(miniMap3.isFull());
      
      miniMap4.putAll(miniMap2);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap4);
      assertNotSame(miniMap3, miniMap2);
      assertNotSame(miniMap4, miniMap2);
      assertNotSame(miniMap4, miniMap3);
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap4));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertFalse(miniMap4.equals((Object)miniMap2));
      assertFalse(miniMap4.equals((Object)miniMap3));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertFalse(miniMap3.isEmpty());
      assertEquals(1, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertFalse(miniMap4.isFull());
      assertEquals(0, miniMap4.size());
      assertTrue(miniMap4.isEmpty());
      
      hashMap0.putAll(miniMap1);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      Integer integer2 = new Integer(2640);
      assertEquals(2640, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = miniMap4.get(integer2);
      assertNull(integer3);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap4);
      assertNotSame(miniMap3, miniMap2);
      assertNotSame(miniMap4, miniMap2);
      assertNotSame(miniMap4, miniMap3);
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap4));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertFalse(miniMap4.equals((Object)miniMap2));
      assertFalse(miniMap4.equals((Object)miniMap3));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertFalse(miniMap3.isEmpty());
      assertEquals(1, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertFalse(miniMap4.isFull());
      assertEquals(0, miniMap4.size());
      assertTrue(miniMap4.isEmpty());
      
      Integer integer4 = new Integer(2640);
      assertEquals(2640, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      
      Integer integer5 = miniMap2.get(integer4);
      assertNull(integer5);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap5 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap1, 0);
      assertNotNull(miniMap5);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, miniMap5.size());
      assertTrue(miniMap5.isFull());
      assertTrue(miniMap5.isEmpty());
      
      boolean boolean0 = miniMap5.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, miniMap5.size());
      assertTrue(miniMap5.isFull());
      assertTrue(miniMap5.isEmpty());
      
      Integer integer6 = miniMap3.remove((Object) integer4);
      assertEquals(2640, (int)integer6);
      assertNotNull(integer6);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap4);
      assertNotSame(miniMap3, miniMap2);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap4));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      boolean boolean1 = miniMap1.containsValue(integer6);
      assertFalse(boolean1);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap4);
      assertNotSame(miniMap3, miniMap2);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer6));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(boolean1 == boolean0);
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap4));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      Set<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> set0 = (Set<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)miniMap0.entrySet();
      assertNotNull(set0);
      assertNotSame(miniMap0, miniMap1);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      boolean boolean2 = miniMap3.isEmpty();
      assertTrue(boolean2);
      assertNotSame(miniMap2, miniMap4);
      assertNotSame(miniMap2, miniMap3);
      assertNotSame(miniMap3, miniMap4);
      assertNotSame(miniMap3, miniMap2);
      assertFalse(miniMap2.equals((Object)miniMap4));
      assertFalse(miniMap2.equals((Object)miniMap3));
      assertFalse(miniMap3.equals((Object)miniMap4));
      assertFalse(miniMap3.equals((Object)miniMap2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)miniMap0.entrySet();
      assertNotNull(set0);
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      Integer integer1 = new Integer(1832);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = miniMap0.put(integer0, integer1);
      assertNull(integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(1, miniMap0.size());
      
      // Undeclared exception!
      try { 
        miniMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertTrue(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        miniMap0.containsKey(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertTrue(miniMap0.isFull());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        miniMap0.containsValue(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<Integer, Integer> function1 = function0.andThen((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function1);
      assertFalse(function1.equals((Object)function0));
      
      Function<Integer, Integer> function2 = function1.compose((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function2);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function2);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function0.equals((Object)function2));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      Integer integer2 = new Integer((-607));
      assertEquals((-607), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer((-607));
      assertEquals((-607), (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      miniMap0.forEach(biConsumer0);
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      Integer integer4 = miniMap0.getOrDefault(integer2, integer3);
      assertEquals((-607), (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      Collection<Integer> collection0 = miniMap0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(integer3));
      assertTrue(collection0.contains(integer1));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      Integer integer5 = miniMap0.remove((Object) integer4);
      assertNull(integer5);
      assertTrue(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer3);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      BiFunction<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction0 = (BiFunction<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction1 = (BiFunction<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer6 = new Integer(1806);
      assertEquals(1806, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      
      Integer integer7 = miniMap0.remove((Object) integer6);
      assertNull(integer7);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap1 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap0, 1806);
      assertNotNull(miniMap1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      assertFalse(miniMap1.isFull());
      
      boolean boolean0 = miniMap1.containsKey(integer6);
      assertFalse(boolean0);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      assertFalse(miniMap1.isFull());
      
      int int0 = miniMap0.size();
      assertEquals(1, int0);
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      Collection<Integer> collection1 = miniMap0.values();
      assertNotNull(collection1);
      assertTrue(collection1.contains(integer1));
      assertFalse(collection1.contains(integer3));
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1832;
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<Integer, Integer> function1 = function0.andThen((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function1);
      assertFalse(function1.equals((Object)function0));
      
      Function<Integer, Integer> function2 = function1.compose((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function2);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertFalse(function2.equals((Object)function0));
      
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function2);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(function0.equals((Object)function1));
      assertFalse(function0.equals((Object)function2));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertFalse(function2.equals((Object)function0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer2 = new Integer((-607));
      assertEquals((-607), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(1832);
      assertEquals(1832, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      miniMap0.forEach(biConsumer0);
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer4 = miniMap0.getOrDefault(integer3, (Integer) null);
      assertEquals(1832, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Collection<Integer> collection0 = miniMap0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains((-607)));
      assertTrue(collection0.contains(1832));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 1168);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap1.isFull());
      assertFalse(miniMap1.isEmpty());
      assertEquals(1, miniMap1.size());
      
      Integer integer5 = miniMap1.remove((Object) integer4);
      assertEquals(1832, (int)integer5);
      assertNotNull(integer5);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer4));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      Function<Integer, Integer> function3 = function1.compose((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function3);
      assertNotSame(function3, function2);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function0.equals((Object)function2));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function3.equals((Object)function2));
      assertFalse(function3.equals((Object)function0));
      assertFalse(function3.equals((Object)function1));
      
      int int1 = (-170);
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap2 = null;
      try {
        miniMap2 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((-170));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      boolean boolean0 = miniMap0.isFull();
      assertTrue(boolean0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(226);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(226);
      assertEquals(226, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        miniMap0.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      Function<Integer, Integer> function1 = function0.andThen((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function1);
      assertFalse(function1.equals((Object)function0));
      
      Function<Integer, Integer> function2 = function1.compose((Function<? super Integer, ? extends Integer>) function0);
      assertNotNull(function2);
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function2);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertFalse(function0.equals((Object)function2));
      assertFalse(function0.equals((Object)function1));
      assertFalse(function1.equals((Object)function0));
      assertFalse(function1.equals((Object)function2));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer2 = new Integer((-607));
      assertEquals((-607), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(131);
      assertEquals(131, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Function<Integer, Integer> function3 = Function.identity();
      assertNotNull(function3);
      assertSame(function3, function0);
      assertFalse(function3.equals((Object)function1));
      assertFalse(function3.equals((Object)function2));
      
      Integer integer4 = miniMap0.computeIfAbsent(integer3, function0);
      assertEquals(131, (int)integer4);
      assertNotNull(integer4);
      assertSame(function0, function3);
      assertFalse(function0.equals((Object)function2));
      assertFalse(function0.equals((Object)function1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(2, miniMap0.size());
      
      Integer integer5 = new Integer((-359));
      assertEquals((-359), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      
      boolean boolean0 = miniMap0.containsKey(integer3);
      assertTrue(boolean0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(2, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, 1);
      assertNotNull(miniMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(1);
      assertNotNull(miniMap1);
      assertEquals(0, miniMap1.size());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = miniMap1.replace(integer0, (Integer) null, (Integer) null);
      assertFalse(boolean0);
      assertEquals(0, miniMap1.size());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap2 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1);
      assertNotNull(miniMap2);
      assertFalse(miniMap2.equals((Object)miniMap0));
      assertEquals(0, miniMap2.size());
      assertFalse(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap3 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap1, 3191);
      assertNotNull(miniMap3);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>> set0 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>>)miniMap3.entrySet();
      assertNotNull(set0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      Integer integer1 = new Integer(2836);
      assertEquals(2836, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = miniMap1.remove((Object) integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, miniMap1.size());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      miniMap3.clear();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      Set<Map.Entry<Integer, Integer>> set1 = (Set<Map.Entry<Integer, Integer>>)miniMap1.entrySet();
      assertNotNull(set1);
      assertEquals(0, miniMap1.size());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      Integer integer3 = new Integer(2834);
      assertEquals(2834, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      boolean boolean1 = miniMap3.containsKey(integer0);
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, miniMap3.size());
      assertFalse(miniMap3.isFull());
      assertTrue(miniMap3.isEmpty());
      
      miniMap1.clear();
      assertEquals(0, miniMap1.size());
      assertFalse(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        miniMap3.containsKey((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      Integer integer0 = new Integer(2404);
      assertEquals(2404, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1630);
      assertEquals(1630, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = miniMap0.put((Integer) null, integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      boolean boolean0 = miniMap0.containsValue(integer1);
      assertTrue(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function0);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer2 = new Integer(527);
      assertEquals(527, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((-5277));
      assertEquals((-5277), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = miniMap0.remove((Object) integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      boolean boolean0 = miniMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Set<Integer> set0 = miniMap0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(integer2));
      assertTrue(set0.contains(integer0));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(29);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      boolean boolean0 = miniMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(739);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = miniMap0.containsValue(object0);
      assertFalse(boolean0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MiniMap<Integer, Integer> miniMap0 = null;
      try {
        miniMap0 = new MiniMap<Integer, Integer>(hashMap0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(3343);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      
      Integer integer0 = miniMap0.remove((Object) null);
      assertNull(integer0);
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = miniMap0.remove((Object) integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        miniMap0.replace(integer0, integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 0);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertTrue(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        miniMap1.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(0);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      int int0 = miniMap0.size();
      assertEquals(0, int0);
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, 1);
      assertNotNull(miniMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap1 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(miniMap0, 1);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      boolean boolean0 = miniMap0.isEmpty();
      assertTrue(boolean0);
      assertNotSame(miniMap0, miniMap1);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Set<Integer> set0 = miniMap1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(1));
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      boolean boolean1 = miniMap1.isFull();
      assertFalse(boolean1);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertFalse(boolean1 == boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap2 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(0);
      assertNotNull(miniMap2);
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap2.size());
      
      boolean boolean2 = miniMap2.isFull();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(miniMap2.isFull());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap2.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      boolean boolean0 = miniMap0.isFull();
      assertFalse(boolean0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1;
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = miniMap0.replace(integer0, integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      int int1 = miniMap0.size();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      boolean boolean0 = miniMap0.isFull();
      assertFalse(boolean0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      // Undeclared exception!
      try { 
        miniMap1.replace((Integer) null, (Integer) null, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      Set<Integer> set0 = miniMap0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(1));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1876);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      miniMap0.clear();
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(2293);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      
      Collection<Integer> collection0 = miniMap0.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(2293));
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(330);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      BiConsumer<Integer, Integer> biConsumer0 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 0);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(330);
      assertEquals(330, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      miniMap0.putAll(miniMap1);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      boolean boolean0 = miniMap1.replace(integer0, integer1, integer1);
      assertFalse(boolean0);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      miniMap0.putAll(miniMap1);
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      
      miniMap0.forEach(biConsumer0);
      assertNotSame(miniMap0, miniMap1);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      Set<Integer> set0 = miniMap0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(1));
      assertNotSame(miniMap0, miniMap1);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      Set<Integer> set1 = miniMap0.keySet();
      assertNotNull(set1);
      assertFalse(set1.contains(1));
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(set1, set0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertTrue(set1.equals((Object)set0));
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap2 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(hashMap0, 1);
      assertNotNull(miniMap2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap2.size());
      assertFalse(miniMap2.isFull());
      
      miniMap2.clear();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap2.size());
      assertFalse(miniMap2.isFull());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap3 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(330);
      assertNotNull(miniMap3);
      assertEquals(0, miniMap3.size());
      assertTrue(miniMap3.isEmpty());
      assertFalse(miniMap3.isFull());
      
      Collection<AbstractMap.SimpleImmutableEntry<Integer, Integer>> collection0 = miniMap3.values();
      assertNotNull(collection0);
      assertEquals(0, miniMap3.size());
      assertTrue(miniMap3.isEmpty());
      assertFalse(miniMap3.isFull());
      
      // Undeclared exception!
      try { 
        miniMap1.put(integer1, integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = null;
      try {
        miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(0);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      Set<AbstractMap.SimpleImmutableEntry<Integer, Integer>> set0 = miniMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> set1 = (Set<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)miniMap0.entrySet();
      assertNotNull(set1);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      boolean boolean0 = miniMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap1 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(0);
      assertNotNull(miniMap1);
      assertTrue(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-1402));
      assertEquals((-1402), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1402));
      assertEquals((-1402), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = hashMap0.put(integer0, abstractMap_SimpleImmutableEntry1);
      assertNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        miniMap1.putAll(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(0);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
      
      miniMap0.clear();
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = null;
      try {
        miniMap0 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Map<? extends Integer, ? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Integer integer0 = new Integer(1630);
      assertEquals(1630, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1630);
      assertEquals(1630, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = miniMap0.put(integer1, (Integer) null);
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(miniMap0.isFull());
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isEmpty());
      
      MiniMap<Integer, Integer> miniMap1 = null;
      try {
        miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Set<Integer> set0 = miniMap0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(1832));
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function0);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = miniMap0.put(integer2, integer0);
      assertNull(integer3);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer4 = miniMap0.remove((Object) integer1);
      assertEquals(1832, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer5 = new Integer(2289);
      assertEquals(2289, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer(2289);
      assertEquals(2289, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      
      Integer integer7 = miniMap0.put(integer5, integer6);
      assertNull(integer7);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(2, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(2837);
      assertEquals(2837, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3040);
      assertEquals(3040, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(3040);
      assertEquals(3040, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = hashMap0.put((Integer) null, abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = hashMap0.put((Integer) null, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = hashMap0.getOrDefault(integer0, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry3);
      assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap0 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, 1835);
      assertNotNull(miniMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(1835);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      Integer integer3 = miniMap1.remove((Object) abstractMap_SimpleImmutableEntry4);
      assertNull(integer3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry3);
      assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      boolean boolean0 = miniMap1.isEmpty();
      assertTrue(boolean0);
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      Integer integer4 = new Integer(2837);
      assertEquals(2837, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = miniMap0.get(integer4);
      assertNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      
      Set<Integer> set0 = miniMap1.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(3040));
      assertFalse(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap2 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1835);
      assertNotNull(miniMap2);
      assertFalse(miniMap2.isFull());
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isEmpty());
      
      boolean boolean1 = miniMap2.containsValue(integer1);
      assertFalse(boolean1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(boolean1 == boolean0);
      assertFalse(miniMap2.isFull());
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(1832);
      assertEquals(1832, (int)integer0);
      assertNotNull(integer0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
      
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function0);
      assertEquals(1832, (int)integer1);
      assertNotNull(integer1);
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer2 = miniMap0.remove((Object) integer0);
      assertEquals(1832, (int)integer2);
      assertNotNull(integer2);
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertEquals(0, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(2054);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(2054);
      assertEquals(2054, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = miniMap0.replace(integer0, integer0);
      assertNull(integer1);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      int int0 = 0;
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 0);
      assertNotNull(miniMap1);
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      miniMap1.clear();
      assertNotSame(miniMap0, miniMap1);
      assertNotSame(miniMap1, miniMap0);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      
      MiniMap<Integer, Integer> miniMap2 = new MiniMap<Integer, Integer>(miniMap1, 0);
      assertNotNull(miniMap2);
      assertFalse(miniMap0.equals((Object)miniMap1));
      assertFalse(miniMap1.equals((Object)miniMap0));
      assertFalse(miniMap2.equals((Object)miniMap0));
      assertFalse(miniMap2.equals((Object)miniMap1));
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap1.isFull());
      assertEquals(0, miniMap1.size());
      assertTrue(miniMap1.isEmpty());
      assertTrue(miniMap2.isEmpty());
      assertEquals(0, miniMap2.size());
      assertTrue(miniMap2.isFull());
      
      int int1 = (-1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer2 = hashMap0.put((Integer) null, (Integer) null);
      assertNull(integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        miniMap2.putAll(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(0);
      assertNotNull(miniMap0);
      assertTrue(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        miniMap0.put(integer0, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(2127);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(2127);
      assertEquals(2127, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = miniMap0.put(integer0, integer0);
      assertNull(integer1);
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(hashMap0, 1688);
      assertNotNull(miniMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(1272);
      assertEquals(1272, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1688);
      assertEquals(1688, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = miniMap0.merge(integer0, integer1, biFunction0);
      assertEquals(1688, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer3 = new Integer(1272);
      assertEquals(1272, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = hashMap0.put(integer3, integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Integer integer5 = new Integer(1272);
      assertEquals(1272, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer integer6 = hashMap0.put(integer3, integer5);
      assertEquals(1272, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Integer integer7 = new Integer(3182);
      assertEquals(3182, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      
      Integer integer8 = new Integer(1688);
      assertEquals(1688, (int)integer8);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      
      boolean boolean0 = miniMap0.replace(integer3, integer7, integer8);
      assertFalse(boolean0);
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer9 = new Integer(1);
      assertEquals(1, (int)integer9);
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer5));
      
      Integer integer10 = miniMap0.put(integer3, integer9);
      assertEquals(1688, (int)integer10);
      assertNotNull(integer10);
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer9));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer5));
      assertTrue(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer7));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer11 = miniMap0.put(integer9, integer10);
      assertNull(integer11);
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer10));
      assertTrue(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer9));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer10));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer5));
      assertTrue(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer7));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(2, miniMap0.size());
      
      Set<Integer> set0 = miniMap0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains(integer10));
      assertTrue(set0.contains(integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(2, miniMap0.size());
      
      MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> miniMap1 = new MiniMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(0);
      assertNotNull(miniMap1);
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      Integer integer12 = new Integer((-766));
      assertEquals((-766), (int)integer12);
      assertNotNull(integer12);
      assertFalse(integer12.equals((Object)integer0));
      assertFalse(integer12.equals((Object)integer8));
      assertFalse(integer12.equals((Object)integer3));
      assertFalse(integer12.equals((Object)integer7));
      assertFalse(integer12.equals((Object)integer10));
      assertFalse(integer12.equals((Object)integer2));
      assertFalse(integer12.equals((Object)integer6));
      assertFalse(integer12.equals((Object)integer5));
      assertFalse(integer12.equals((Object)integer9));
      assertFalse(integer12.equals((Object)integer1));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer8, integer12);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer12.equals((Object)integer0));
      assertFalse(integer12.equals((Object)integer8));
      assertFalse(integer12.equals((Object)integer3));
      assertFalse(integer12.equals((Object)integer7));
      assertFalse(integer12.equals((Object)integer10));
      assertFalse(integer12.equals((Object)integer2));
      assertFalse(integer12.equals((Object)integer6));
      assertFalse(integer12.equals((Object)integer5));
      assertFalse(integer12.equals((Object)integer9));
      assertFalse(integer12.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer12));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer9));
      assertTrue(integer8.equals((Object)integer10));
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer12.equals((Object)integer0));
      assertFalse(integer12.equals((Object)integer8));
      assertFalse(integer12.equals((Object)integer3));
      assertFalse(integer12.equals((Object)integer7));
      assertFalse(integer12.equals((Object)integer10));
      assertFalse(integer12.equals((Object)integer2));
      assertFalse(integer12.equals((Object)integer6));
      assertFalse(integer12.equals((Object)integer5));
      assertFalse(integer12.equals((Object)integer9));
      assertFalse(integer12.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer12));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer9));
      assertTrue(integer8.equals((Object)integer10));
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer12.equals((Object)integer0));
      assertFalse(integer12.equals((Object)integer8));
      assertFalse(integer12.equals((Object)integer3));
      assertFalse(integer12.equals((Object)integer7));
      assertFalse(integer12.equals((Object)integer10));
      assertFalse(integer12.equals((Object)integer2));
      assertFalse(integer12.equals((Object)integer6));
      assertFalse(integer12.equals((Object)integer5));
      assertFalse(integer12.equals((Object)integer9));
      assertFalse(integer12.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer12));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer9));
      assertTrue(integer8.equals((Object)integer10));
      
      boolean boolean1 = miniMap1.replace((Integer) null, abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry1);
      assertFalse(boolean1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertFalse(integer12.equals((Object)integer0));
      assertFalse(integer12.equals((Object)integer8));
      assertFalse(integer12.equals((Object)integer3));
      assertFalse(integer12.equals((Object)integer7));
      assertFalse(integer12.equals((Object)integer10));
      assertFalse(integer12.equals((Object)integer2));
      assertFalse(integer12.equals((Object)integer6));
      assertFalse(integer12.equals((Object)integer5));
      assertFalse(integer12.equals((Object)integer9));
      assertFalse(integer12.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(boolean1 == boolean0);
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer12));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer9));
      assertTrue(integer8.equals((Object)integer10));
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = miniMap1.remove((Object) integer10);
      assertNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer12));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer10));
      assertTrue(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer9));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer12));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer10));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer5));
      assertTrue(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer7));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer0));
      assertFalse(integer10.equals((Object)integer12));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(miniMap1.isFull());
      assertTrue(miniMap1.isEmpty());
      assertEquals(0, miniMap1.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(2, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(213);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = miniMap0.get((Object) null);
      assertNull(integer0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(1630);
      assertEquals(1630, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = miniMap0.put((Integer) null, integer0);
      assertNull(integer1);
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      
      Integer integer2 = miniMap0.put(integer0, (Integer) null);
      assertNull(integer2);
      assertFalse(miniMap0.isFull());
      assertFalse(miniMap0.isEmpty());
      assertEquals(2, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      assertNotNull(miniMap0);
      assertEquals(0, miniMap0.size());
      assertTrue(miniMap0.isEmpty());
      assertFalse(miniMap0.isFull());
      
      Integer integer0 = new Integer(1630);
      assertEquals(1630, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = miniMap0.put((Integer) null, integer0);
      assertNull(integer1);
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
      assertFalse(miniMap0.isFull());
      
      MiniMap<Integer, Integer> miniMap1 = null;
      try {
        miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 1630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.wicket.util.collections.MiniMap$3$1$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(851);
      assertNotNull(miniMap0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)miniMap0.entrySet();
      assertNotNull(set0);
      assertFalse(miniMap0.isFull());
      assertTrue(miniMap0.isEmpty());
      assertEquals(0, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1826);
      Integer integer0 = new Integer(1826);
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer1 = miniMap0.computeIfAbsent(integer0, function0);
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 1826);
      boolean boolean0 = miniMap1.replace(integer1, integer1, integer0);
      assertEquals(1, miniMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1630);
      Integer integer0 = new Integer(1630);
      Integer integer1 = new Integer(1630);
      miniMap0.put(integer0, integer1);
      MiniMap<Integer, Integer> miniMap1 = new MiniMap<Integer, Integer>(miniMap0, 1630);
      assertFalse(miniMap0.isEmpty());
      assertEquals(1, miniMap0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      Integer integer0 = new Integer(1832);
      miniMap0.put(integer0, integer0);
      miniMap0.isFull();
      boolean boolean0 = miniMap0.containsKey(integer0);
      assertFalse(miniMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 2857;
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(2857);
      Integer integer0 = new Integer(2857);
      Integer integer1 = new Integer(2857);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      miniMap0.put(abstractMap_SimpleImmutableEntry1, integer1);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      miniMap0.putIfAbsent(abstractMap_SimpleImmutableEntry1, integer1);
      int int1 = 0;
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap1 = null;
      try {
        miniMap1 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(miniMap0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MiniMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MiniMap<Integer, Integer> miniMap0 = new MiniMap<Integer, Integer>(1832);
      Integer integer0 = new Integer(1832);
      boolean boolean0 = miniMap0.containsKey(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap0 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(1630);
      MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> miniMap1 = new MiniMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(miniMap0, 1630);
      assertFalse(miniMap1.equals((Object)miniMap0));
  }
}
