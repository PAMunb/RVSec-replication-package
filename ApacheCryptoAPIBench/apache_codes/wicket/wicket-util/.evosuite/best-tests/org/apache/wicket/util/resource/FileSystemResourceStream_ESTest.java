/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:10:00 GMT 2022
 */

package org.apache.wicket.util.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.nio.file.FileSystem;
import java.nio.file.Path;
import java.nio.file.spi.FileSystemProvider;
import org.apache.wicket.util.file.File;
import org.apache.wicket.util.file.Folder;
import org.apache.wicket.util.lang.Bytes;
import org.apache.wicket.util.resource.FileSystemResourceStream;
import org.apache.wicket.util.time.Time;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileSystemResourceStream_ESTest extends FileSystemResourceStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = new File("A~]dX)T5?UexC[p8", "A~]dX)T5?UexC[p8");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      String string0 = fileSystemResourceStream0.toString();
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/A~]dX)T5?UexC[p8/A~]dX)T5?UexC[p8", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = new File("6c,", "YD+q^==NG~~Lc}lF");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      String string0 = fileSystemResourceStream0.locationAsString();
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/6c,/YD+q^==NG~~Lc}lF", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = new File("ir0'");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      // Undeclared exception!
      try { 
        fileSystemResourceStream0.length();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Length of path ir0' could not be acquired
         //
         verifyException("org.apache.wicket.util.resource.FileSystemResourceStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystem) null).when(path0).getFileSystem();
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(path0);
      // Undeclared exception!
      try { 
        fileSystemResourceStream0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = new File("^w", "^w");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(file0);
      // Undeclared exception!
      try { 
        fileSystemResourceStream0.lastModifiedTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Modification time of path /home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/^w/^w could not be acquired
         //
         verifyException("org.apache.wicket.util.resource.FileSystemResourceStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystemProvider) null).when(fileSystem0).provider();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystem0).when(path0).getFileSystem();
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(path0);
      // Undeclared exception!
      try { 
        fileSystemResourceStream0.lastModifiedTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = new File("il%jh$4v?");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      try { 
        fileSystemResourceStream0.getInputStream();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Input stream of path il%jh$4v? could not be acquired
         //
         verifyException("org.apache.wicket.util.resource.FileSystemResourceStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn((FileSystem) null).when(path0).getFileSystem();
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(path0);
      // Undeclared exception!
      try { 
        fileSystemResourceStream0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = new File("A~]dX)T5?UexC[p8");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      // Undeclared exception!
      try { 
        fileSystemResourceStream0.getContentType();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.nio.file.Files$FileTypeDetectors
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemResourceStream fileSystemResourceStream0 = null;
      try {
        fileSystemResourceStream0 = new FileSystemResourceStream((Path) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'path' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemResourceStream fileSystemResourceStream0 = null;
      try {
        fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'file' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = new File((java.io.File) null, "");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      String string0 = fileSystemResourceStream0.locationAsString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = new File((java.io.File) null, "");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      fileSystemResourceStream0.getInputStream();
      fileSystemResourceStream0.close();
      assertNull(fileSystemResourceStream0.getVariation());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = new File("A~]dX)T5?UexC[p8");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      fileSystemResourceStream0.close();
      assertNull(fileSystemResourceStream0.getStyle());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = new File("", "=mro]M");
      Folder folder0 = file0.getParentFolder();
      java.io.File file1 = folder0.getAbsoluteFile();
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(file1);
      InputStream inputStream0 = fileSystemResourceStream0.getInputStream();
      InputStream inputStream1 = fileSystemResourceStream0.getInputStream();
      assertSame(inputStream1, inputStream0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = new File((java.io.File) null, "");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      Bytes bytes0 = fileSystemResourceStream0.length();
      assertEquals(0.00390625, bytes0.megabytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = new File((java.io.File) null, "");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      Time time0 = fileSystemResourceStream0.lastModifiedTime();
      assertEquals(1650591982839L, time0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = new File("", "");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(file0);
      Path path0 = fileSystemResourceStream0.getPath();
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemResourceStream fileSystemResourceStream0 = null;
      try {
        fileSystemResourceStream0 = new FileSystemResourceStream((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'file' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = new File((java.io.File) null, "");
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream((java.io.File) file0);
      String string0 = fileSystemResourceStream0.toString();
      assertEquals("", string0);
  }
}
