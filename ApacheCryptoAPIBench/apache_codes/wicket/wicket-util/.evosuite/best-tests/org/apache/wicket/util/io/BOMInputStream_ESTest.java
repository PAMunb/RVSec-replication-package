/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:52:55 GMT 2022
 */

package org.apache.wicket.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.wicket.util.io.BOMInputStream;
import org.apache.wicket.util.io.ByteOrderMark;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BOMInputStream_ESTest extends BOMInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      long long0 = bOMInputStream0.skip((byte)96);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[3];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[3];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_32BE;
      byteOrderMarkArray0[0] = byteOrderMark0;
      byteOrderMarkArray0[1] = byteOrderMarkArray0[0];
      byteOrderMarkArray0[2] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.reset();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)91, 255);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, true);
      long long0 = bOMInputStream0.skip((byte)0);
      assertEquals((-84L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Enumeration<BOMInputStream> enumeration0 = (Enumeration<BOMInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(sequenceInputStream0, true);
      int int0 = bOMInputStream0.read(byteArray0, (int) (byte)4, (-2163));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0, false);
      byte[] byteArray0 = new byte[0];
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.skip((-223L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0, false);
      try { 
        bOMInputStream0.skip(1L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.read((byte[]) null, 3188, 3188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0, false);
      try { 
        bOMInputStream0.read((byte[]) null, 2, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)63);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, true);
      // Undeclared exception!
      try { 
        bOMInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null, true);
      // Undeclared exception!
      try { 
        bOMInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-3), 106);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.mark((-603));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1509), 3);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, true);
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.hasBOM();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.getBOMCharsetName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.getBOMCharsetName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.getBOM();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-271), 108);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bOMInputStream0.getBOM();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BOMInputStream bOMInputStream0 = new BOMInputStream(pipedInputStream0);
      try { 
        bOMInputStream0.getBOM();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[2];
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, false, byteOrderMarkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[0];
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream((InputStream) null, true, byteOrderMarkArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No BOMs specified
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0, 4, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      byteOrderMarkArray0[1] = byteOrderMarkArray0[0];
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, true, byteOrderMarkArray0);
      bOMInputStream0.read(byteArray0);
      bOMInputStream0.getBOM();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      byteOrderMarkArray0[1] = byteOrderMarkArray0[0];
      byteOrderMarkArray0[2] = byteOrderMarkArray0[0];
      byteOrderMarkArray0[3] = byteOrderMarkArray0[1];
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      long long0 = bOMInputStream0.skip((-72L));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        bOMInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<BOMInputStream> enumeration0 = (Enumeration<BOMInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(sequenceInputStream0, false);
      bOMInputStream0.mark((byte)0);
      try { 
        bOMInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Enumeration<BOMInputStream> enumeration0 = (Enumeration<BOMInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(sequenceInputStream0, false);
      BOMInputStream bOMInputStream1 = new BOMInputStream(bOMInputStream0);
      ByteOrderMark byteOrderMark0 = bOMInputStream1.getBOM();
      assertNull(byteOrderMark0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.getBOMCharsetName();
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[3];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      String string0 = bOMInputStream0.getBOMCharsetName();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals("KyG C7=$VN=Rd", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[3];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, true, byteOrderMarkArray0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[1];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      bOMInputStream0.getBOM();
      boolean boolean0 = bOMInputStream0.hasBOM(byteOrderMark0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[3];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      bOMInputStream0.getBOM();
      boolean boolean0 = bOMInputStream0.hasBOM(byteOrderMark1);
      assertEquals(5, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      byteOrderMarkArray0[1] = byteOrderMark0;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      boolean boolean0 = bOMInputStream0.hasBOM(byteOrderMarkArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BOMInputStream bOMInputStream0 = new BOMInputStream((InputStream) null);
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_32LE;
      // Undeclared exception!
      try { 
        bOMInputStream0.hasBOM(byteOrderMark0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stream not configure to detect ByteOrderMark[UTF-32LE: 0xFF,0xFE,0x0,0x0]
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[3];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      byteOrderMarkArray0[3] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
      boolean boolean0 = bOMInputStream0.hasBOM();
      assertEquals(5, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      bOMInputStream0.hasBOM();
      bOMInputStream0.mark(3816);
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[0];
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream((InputStream) null, byteOrderMarkArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No BOMs specified
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream((InputStream) null, (ByteOrderMark[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No BOMs specified
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = new int[2];
      ByteOrderMark[] byteOrderMarkArray0 = new ByteOrderMark[4];
      ByteOrderMark byteOrderMark0 = ByteOrderMark.UTF_8;
      byteOrderMarkArray0[0] = byteOrderMark0;
      ByteOrderMark byteOrderMark1 = new ByteOrderMark("KyG C7=$VN=Rd", intArray0);
      byteOrderMarkArray0[1] = byteOrderMark1;
      byteOrderMarkArray0[2] = byteOrderMark0;
      BOMInputStream bOMInputStream0 = null;
      try {
        bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, byteOrderMarkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.BOMInputStream$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0);
      int int0 = bOMInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BOMInputStream bOMInputStream0 = new BOMInputStream(byteArrayInputStream0, false);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bOMInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }
}
