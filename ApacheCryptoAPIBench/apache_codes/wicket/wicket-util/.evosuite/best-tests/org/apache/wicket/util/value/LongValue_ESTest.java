/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:57:38 GMT 2022
 */

package org.apache.wicket.util.value;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.value.LongValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongValue_ESTest extends LongValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      LongValue longValue1 = LongValue.max(longValue0, longValue0);
      assertEquals("0", longValue1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongValue longValue0 = new LongValue(4287L);
      LongValue longValue1 = new LongValue(0);
      LongValue longValue2 = LongValue.min(longValue0, longValue1);
      assertEquals("4287", longValue0.toString());
      assertEquals("0", longValue2.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      LongValue longValue1 = new LongValue(1L);
      boolean boolean0 = longValue0.lessThanOrEqual(longValue1);
      assertEquals("1", longValue1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LongValue longValue0 = new LongValue(4287L);
      LongValue longValue1 = new LongValue(2180L);
      boolean boolean0 = longValue0.lessThan(longValue1);
      assertFalse(boolean0);
      assertEquals("2180", longValue1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.lessThanOrEqual((-1L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.lessThan((-1106L));
      assertEquals("-1", longValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue(1L);
      boolean boolean0 = longValue1.greaterThanOrEqual(longValue0);
      assertTrue(boolean0);
      assertEquals("1", longValue1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue((-332L));
      boolean boolean0 = longValue1.greaterThan(longValue0);
      assertFalse(longValue1.equals((Object)longValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LongValue longValue0 = new LongValue(1682L);
      boolean boolean0 = longValue0.greaterThanOrEqual(887L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.greaterThan((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1494L));
      LongValue longValue1 = new LongValue(1L);
      boolean boolean0 = longValue0.equals(longValue1);
      assertFalse(boolean0);
      assertEquals("1", longValue1.toString());
      assertFalse(longValue1.equals((Object)longValue0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LongValue longValue0 = LongValue.maxNullSafe((LongValue) null, (LongValue) null);
      assertNull(longValue0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongValue.min((LongValue) null, (LongValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'lhs' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongValue.max((LongValue) null, (LongValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'lhs' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongValue longValue0 = new LongValue(732L);
      // Undeclared exception!
      try { 
        longValue0.lessThanOrEqual((LongValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      // Undeclared exception!
      try { 
        longValue0.lessThan((LongValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongValue longValue0 = new LongValue(1037L);
      // Undeclared exception!
      try { 
        longValue0.greaterThanOrEqual((LongValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongValue longValue0 = new LongValue((-3387L));
      // Undeclared exception!
      try { 
        longValue0.greaterThan((LongValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LongValue longValue0 = new LongValue((-3468L));
      // Undeclared exception!
      try { 
        longValue0.compareTo((LongValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      LongValue longValue1 = new LongValue(2525L);
      LongValue longValue2 = LongValue.maxNullSafe(longValue1, longValue0);
      int int0 = longValue2.compareTo(longValue0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      int int0 = longValue0.compareTo(longValue0);
      assertEquals("-1", longValue0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongValue longValue0 = new LongValue(85L);
      LongValue longValue1 = new LongValue(339L);
      int int0 = longValue0.compareTo(longValue1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongValue longValue0 = new LongValue(291L);
      LongValue longValue1 = LongValue.maxNullSafe(longValue0, (LongValue) null);
      assertEquals("291", longValue1.toString());
      assertNotNull(longValue1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = LongValue.maxNullSafe((LongValue) null, longValue0);
      assertNotNull(longValue1);
      assertEquals("-1", longValue1.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue(2180L);
      LongValue longValue2 = LongValue.min(longValue0, longValue1);
      assertEquals("-1", longValue2.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      boolean boolean0 = longValue0.lessThanOrEqual(longValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LongValue longValue0 = new LongValue(85L);
      LongValue longValue1 = new LongValue(339L);
      boolean boolean0 = longValue1.lessThanOrEqual(longValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue(1873L);
      boolean boolean0 = longValue0.lessThan(longValue1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.lessThan(longValue0);
      assertFalse(boolean0);
      assertEquals("-1", longValue0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      boolean boolean0 = longValue0.lessThanOrEqual(757L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongValue longValue0 = new LongValue((-59L));
      boolean boolean0 = longValue0.lessThanOrEqual((-2128L));
      assertEquals("-59", longValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.lessThan(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LongValue longValue0 = new LongValue(4287L);
      boolean boolean0 = longValue0.lessThan(4287L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.greaterThanOrEqual(longValue0);
      assertTrue(boolean0);
      assertEquals("-1", longValue0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LongValue longValue0 = new LongValue(0L);
      LongValue longValue1 = new LongValue((-2832L));
      boolean boolean0 = longValue1.greaterThanOrEqual(longValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue(0L);
      boolean boolean0 = longValue1.greaterThan(longValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.greaterThan(longValue0);
      assertEquals("-1", longValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LongValue longValue0 = new LongValue(85L);
      boolean boolean0 = longValue0.greaterThanOrEqual(85L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1903L));
      boolean boolean0 = longValue0.greaterThanOrEqual((-16L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LongValue longValue0 = new LongValue(4287L);
      boolean boolean0 = longValue0.greaterThan(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.greaterThan(1873L);
      assertEquals("-1", longValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LongValue longValue0 = new LongValue(4287L);
      LongValue longValue1 = new LongValue(2180L);
      boolean boolean0 = longValue0.equals(longValue1);
      assertFalse(longValue1.equals((Object)longValue0));
      assertFalse(boolean0);
      assertEquals("2180", longValue1.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      boolean boolean0 = longValue0.equals(longValue0);
      assertTrue(boolean0);
      assertEquals("-1", longValue0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      Object object0 = new Object();
      boolean boolean0 = longValue0.equals(object0);
      assertEquals("-1", longValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue((-4456L));
      LongValue longValue2 = LongValue.max(longValue0, longValue1);
      assertEquals("-1", longValue2.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = new LongValue(1873L);
      LongValue longValue2 = LongValue.max(longValue0, longValue1);
      assertEquals("1873", longValue2.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      LongValue longValue1 = LongValue.min(longValue0, longValue0);
      assertEquals("-1", longValue1.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      String string0 = longValue0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LongValue longValue0 = new LongValue((-1L));
      longValue0.hashCode();
      assertEquals("-1", longValue0.toString());
  }
}
