/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:06:47 GMT 2022
 */

package org.apache.wicket.util.convert.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import org.apache.wicket.util.convert.converter.LocalDateConverter;
import org.apache.wicket.util.convert.converter.LocalDateTimeConverter;
import org.apache.wicket.util.convert.converter.ZonedDateTimeConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractJavaTimeConverter_ESTest extends AbstractJavaTimeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ZonedDateTimeConverter zonedDateTimeConverter0 = new ZonedDateTimeConverter();
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        zonedDateTimeConverter0.convertToObject("~4K7zX", locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot parse '~4K7zX
         //
         verifyException("org.apache.wicket.util.convert.converter.AbstractConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ZonedDateTimeConverter zonedDateTimeConverter0 = new ZonedDateTimeConverter();
      Locale locale0 = Locale.ITALIAN;
      DateTimeFormatter dateTimeFormatter0 = zonedDateTimeConverter0.getDateTimeFormatter(locale0);
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZonedDateTimeConverter zonedDateTimeConverter0 = new ZonedDateTimeConverter();
      DateTimeFormatter dateTimeFormatter0 = zonedDateTimeConverter0.getDateTimeFormatter((Locale) null);
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      LocalDateConverter localDateConverter0 = new LocalDateConverter();
      String string0 = localDateConverter0.convertToString((LocalDate) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocalDateTimeConverter localDateTimeConverter0 = new LocalDateTimeConverter();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Locale locale0 = Locale.GERMANY;
      String string0 = localDateTimeConverter0.convertToString(localDateTime0, locale0);
      assertEquals("14.02.2014 20:21:21", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LocalDateTimeConverter localDateTimeConverter0 = new LocalDateTimeConverter();
      Locale locale0 = Locale.PRC;
      LocalDateTime localDateTime0 = localDateTimeConverter0.convertToObject("", locale0);
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LocalDateTimeConverter localDateTimeConverter0 = new LocalDateTimeConverter();
      Locale locale0 = Locale.GERMANY;
      LocalDateTime localDateTime0 = localDateTimeConverter0.convertToObject("14.02.2014 20:21:21", locale0);
      assertNotNull(localDateTime0);
  }
}
