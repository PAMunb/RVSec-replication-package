/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:09:08 GMT 2022
 */

package org.apache.wicket.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.wicket.util.io.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThresholdingOutputStream_ESTest extends ThresholdingOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((byte)0, file0);
      boolean boolean0 = deferredFileOutputStream0.isThresholdExceeded();
      assertFalse(boolean0);
      assertEquals(0, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(3135, deferredFileOutputStream_FileFactory0);
      byte[] byteArray0 = new byte[9];
      deferredFileOutputStream0.write(byteArray0, (int) (byte)1, (int) (byte)0);
      assertEquals(3135, deferredFileOutputStream0.getThreshold());
      assertEquals(0L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1176, file0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(byteArray0, (int) (byte)28, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1738, file0);
      deferredFileOutputStream0.checkThreshold(1738);
      assertEquals(1738, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1495, deferredFileOutputStream_FileFactory0);
      byte[] byteArray0 = new byte[9];
      deferredFileOutputStream0.write(byteArray0);
      assertEquals(9L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1495, deferredFileOutputStream_FileFactory0);
      deferredFileOutputStream0.write(0);
      assertEquals(1L, deferredFileOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-3187), deferredFileOutputStream_FileFactory0);
      boolean boolean0 = deferredFileOutputStream0.isThresholdExceeded();
      assertEquals((-3187), deferredFileOutputStream0.getThreshold());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1738, file0);
      boolean boolean0 = deferredFileOutputStream0.isThresholdExceeded();
      assertEquals(1738, deferredFileOutputStream0.getThreshold());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((byte)0, file0);
      int int0 = deferredFileOutputStream0.getThreshold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2702), deferredFileOutputStream_FileFactory0);
      int int0 = deferredFileOutputStream0.getThreshold();
      assertEquals((-2702), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1773, deferredFileOutputStream_FileFactory0);
      byte[] byteArray0 = new byte[6];
      deferredFileOutputStream0.write(byteArray0, (int) (byte)2, (int) (byte)2);
      long long0 = deferredFileOutputStream0.getByteCount();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("/").when(file0).getAbsolutePath();
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      doReturn(file0).when(deferredFileOutputStream_FileFactory0).createFile();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((byte)0, deferredFileOutputStream_FileFactory0);
      try { 
        deferredFileOutputStream0.write((byte[]) null, 2141130146, 2123);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-842), deferredFileOutputStream_FileFactory0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.ThresholdingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((byte)0, file0);
      try { 
        deferredFileOutputStream0.write(byteArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, file0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("<_@e/)").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, file0);
      try { 
        deferredFileOutputStream0.write(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      doReturn((File) null).when(deferredFileOutputStream_FileFactory0).createFile();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1495, deferredFileOutputStream_FileFactory0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.checkThreshold(2383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      doReturn(file0).when(deferredFileOutputStream_FileFactory0).createFile();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2146926148), deferredFileOutputStream_FileFactory0);
      try { 
        deferredFileOutputStream0.checkThreshold(1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1738, file0);
      deferredFileOutputStream0.flush();
      assertEquals(1738, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, file0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("bABu?cP/=p^BYF6=q").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1), file0);
      try { 
        deferredFileOutputStream0.write((byte[]) null, (-1), 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, file0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1773, deferredFileOutputStream_FileFactory0);
      deferredFileOutputStream0.getByteCount();
      assertEquals(1773, deferredFileOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("<_@e/)").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, file0);
      byte[] byteArray0 = new byte[2];
      try { 
        deferredFileOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1061, deferredFileOutputStream_FileFactory0);
      int int0 = deferredFileOutputStream0.getThreshold();
      assertEquals(1061, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-2146926148), deferredFileOutputStream_FileFactory0);
      deferredFileOutputStream0.close();
      assertEquals((-2146926148), deferredFileOutputStream0.getThreshold());
  }
}
