/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:03:53 GMT 2022
 */

package org.apache.wicket.util.watch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.Path;
import java.util.Set;
import org.apache.wicket.util.file.File;
import org.apache.wicket.util.file.Folder;
import org.apache.wicket.util.listener.IChangeListener;
import org.apache.wicket.util.resource.FileSystemResourceStream;
import org.apache.wicket.util.resource.StringBufferResourceStream;
import org.apache.wicket.util.time.Duration;
import org.apache.wicket.util.watch.IModifiable;
import org.apache.wicket.util.watch.ModificationWatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModificationWatcher_ESTest extends ModificationWatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      // Undeclared exception!
      try { 
        modificationWatcher0.remove((IModifiable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      File file0 = new File("org.apache.wicket.util.file.Files", "6)RGH52YE");
      Folder folder0 = new Folder(file0);
      Path path0 = folder0.toPath();
      FileSystemResourceStream fileSystemResourceStream0 = new FileSystemResourceStream(path0);
      // Undeclared exception!
      try { 
        modificationWatcher0.add(fileSystemResourceStream0, (IChangeListener<IModifiable>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Modification time of path /home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Files/6)RGH52YE could not be acquired
         //
         verifyException("org.apache.wicket.util.resource.FileSystemResourceStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      modificationWatcher0.start(duration0);
      modificationWatcher0.destroy();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      modificationWatcher0.destroy();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      ModificationWatcher.Entry modificationWatcher_Entry0 = new ModificationWatcher.Entry();
      StringBufferResourceStream stringBufferResourceStream0 = new StringBufferResourceStream("uFlWOjFtBL~S)fK-6Dm");
      modificationWatcher_Entry0.modifiable = (IModifiable) stringBufferResourceStream0;
      IChangeListener<IModifiable> iChangeListener0 = (IChangeListener<IModifiable>) mock(IChangeListener.class, new ViolatedAssumptionAnswer());
      modificationWatcher0.add(modificationWatcher_Entry0.modifiable, iChangeListener0);
      modificationWatcher0.checkModified();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      StringBufferResourceStream stringBufferResourceStream0 = new StringBufferResourceStream("uFlWOjFtBL~S)fK-6Dm");
      IModifiable iModifiable0 = modificationWatcher0.remove(stringBufferResourceStream0);
      assertNull(iModifiable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      ModificationWatcher.Entry modificationWatcher_Entry0 = new ModificationWatcher.Entry();
      StringBufferResourceStream stringBufferResourceStream0 = new StringBufferResourceStream("uFlWOjFtBL~S)fK-6Dm");
      modificationWatcher_Entry0.modifiable = (IModifiable) stringBufferResourceStream0;
      IChangeListener<IModifiable> iChangeListener0 = (IChangeListener<IModifiable>) mock(IChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = modificationWatcher0.add(modificationWatcher_Entry0.modifiable, iChangeListener0);
      boolean boolean1 = modificationWatcher0.add(stringBufferResourceStream0, (IChangeListener<IModifiable>) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      File file0 = new File("\"fyz9Yz:", "\"fyz9Yz:");
      boolean boolean0 = modificationWatcher0.add(file0, (IChangeListener<IModifiable>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      ModificationWatcher.Entry modificationWatcher_Entry0 = new ModificationWatcher.Entry();
      StringBufferResourceStream stringBufferResourceStream0 = new StringBufferResourceStream("uFlWOjFtBL~S)fK-6Dm");
      modificationWatcher_Entry0.modifiable = (IModifiable) stringBufferResourceStream0;
      IChangeListener<IModifiable> iChangeListener0 = (IChangeListener<IModifiable>) mock(IChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = modificationWatcher0.add(modificationWatcher_Entry0.modifiable, iChangeListener0);
      IChangeListener<IModifiable> iChangeListener1 = (IChangeListener<IModifiable>) mock(IChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = modificationWatcher0.add(modificationWatcher_Entry0.modifiable, iChangeListener1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      StringBufferResourceStream stringBufferResourceStream0 = new StringBufferResourceStream();
      IChangeListener<IModifiable> iChangeListener0 = (IChangeListener<IModifiable>) mock(IChangeListener.class, new ViolatedAssumptionAnswer());
      modificationWatcher0.add(stringBufferResourceStream0, iChangeListener0);
      IModifiable iModifiable0 = modificationWatcher0.remove(stringBufferResourceStream0);
      assertSame(stringBufferResourceStream0, iModifiable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher((Duration) null);
      // Undeclared exception!
      try { 
        modificationWatcher0.add((IModifiable) null, (IChangeListener<IModifiable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModificationWatcher modificationWatcher0 = new ModificationWatcher();
      Set<IModifiable> set0 = modificationWatcher0.getEntries();
      assertEquals(0, set0.size());
  }
}
