/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:59:36 GMT 2022
 */

package org.apache.wicket.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.apache.wicket.util.io.XmlReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlReader_ESTest extends XmlReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = null;
      try {
        xmlReader0 = new XmlReader(byteArrayInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, (String) null);
      char[] charArray0 = new char[9];
      int int0 = xmlReader0.read(charArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, (String) null);
      char[] charArray0 = new char[9];
      int int0 = xmlReader0.read(charArray0, (int) (byte)0, 1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, (String) null);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        xmlReader0.read(charArray0, 9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XmlReader xmlReader0 = new XmlReader(sequenceInputStream0, (String) null);
      xmlReader0.close();
      try { 
        xmlReader0.init();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlReader xmlReader0 = null;
      try {
        xmlReader0 = new XmlReader((InputStream) null, "-I!Fu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'inputStream' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XmlReader xmlReader0 = null;
      try {
        xmlReader0 = new XmlReader(pipedInputStream0, "!xa_cS{f.,]X#3J2H");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, (String) null);
      xmlReader0.init();
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, "UTF-16BE");
      xmlReader0.init();
      assertEquals(8, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = null;
      try {
        xmlReader0 = new XmlReader(byteArrayInputStream0, "inputStream");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = null;
      try {
        xmlReader0 = new XmlReader(byteArrayInputStream0, "eSXr/T}v$Kw\" sR\"lX");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = null;
      try {
        xmlReader0 = new XmlReader(byteArrayInputStream0, "tU]v=5Mr6umj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, (String) null);
      xmlReader0.toString();
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XmlReader xmlReader0 = new XmlReader(byteArrayInputStream0, (String) null);
      xmlReader0.getEncoding();
      assertEquals(3, byteArrayInputStream0.available());
  }
}
