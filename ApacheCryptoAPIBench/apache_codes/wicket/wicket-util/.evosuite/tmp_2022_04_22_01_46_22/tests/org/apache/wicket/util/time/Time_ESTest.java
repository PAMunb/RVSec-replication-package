/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:11:33 GMT 2022
 */

package org.apache.wicket.util.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import org.apache.wicket.util.time.AbstractTime;
import org.apache.wicket.util.time.Duration;
import org.apache.wicket.util.time.Time;
import org.apache.wicket.util.time.TimeOfDay;
import org.apache.wicket.util.value.LongValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Time_ESTest extends Time_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Time time0 = Time.millis((-1745L));
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time0.add(duration0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Time time0 = Time.now();
      time0.toString();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      Time.parseDate((Calendar) mockGregorianCalendar0, "2014.02.14-8.21pm");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Time time0 = Time.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time0.subtract(duration0);
      time0.get((Calendar) mockGregorianCalendar0, 16);
      time0.getHour((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.getSecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Time time0 = Time.now();
      time0.getSecond();
      // Undeclared exception!
      try { 
        time0.getSecond((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.get((Calendar) null, (-3508));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      Time time0 = Time.millis(0L);
      time0.START_OF_UNIX_TIME.toRfc1123TimestampString();
      // Undeclared exception!
      try { 
        time0.toDateString((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getMonth((Calendar) mockGregorianCalendar0);
      Time time1 = Time.millis(2205L);
      time0.subtract(time1);
      Time.now();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      try { 
        Time.parseDate((Calendar) mockGregorianCalendar1, "");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      Time.valueOf("6`", "6`");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.getHour((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Time time0 = Time.now();
      LongValue.maxNullSafe(time0, time0);
      // Undeclared exception!
      try { 
        Time.valueOf((Calendar) null, "Dec");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf(timeOfDay0);
      time0.toString((Calendar) null, ">,!.&");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Time.now();
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(1341L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      Time time1 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time1.getSecond();
      time1.fromNow();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      // Undeclared exception!
      try { 
        time0.START_OF_UNIX_TIME.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.parseDate((Calendar) null, ">wjHu]*}Db`7)lD{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      // Undeclared exception!
      try { 
        time0.getDayOfMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.valueOf((Calendar) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(9223372036854775807L).when(timeOfDay0).getMilliseconds();
      Time.valueOf(timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(9223372036854775807L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.toRfc1123TimestampString();
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar0, "Tue, 16 Jan \u75DD010 13:08:25 GMT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Tue, 16 Jan \u75DD010 13:08:25 GMT\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.subtract((Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Time time0 = Time.millis(0);
      time0.toDateString();
      time0.getMinute();
      time0.getMonth();
      time0.getDayOfMonth();
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      Time time1 = time0.add(duration0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time1.getMonth((Calendar) mockGregorianCalendar0);
      time1.getSecond();
      // Undeclared exception!
      try { 
        time0.toString("d;SWyf{>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      // Undeclared exception!
      try { 
        time0.toString((Calendar) mockGregorianCalendar0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(1519L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.START_OF_UNIX_TIME.toDateString();
      time0.getMinute();
      time0.getDayOfMonth();
      Date date0 = time0.toDate();
      Time.valueOf(date0);
      time0.getMonth((Calendar) mockGregorianCalendar0);
      time0.getSecond();
      time0.toString("0{^");
      time0.START_OF_UNIX_TIME.getHour((Calendar) mockGregorianCalendar0);
      time0.toString((Calendar) mockGregorianCalendar0, "");
      time0.getYear((Calendar) mockGregorianCalendar0);
      time0.getMinute((Calendar) mockGregorianCalendar0);
      time0.getMonth((Calendar) mockGregorianCalendar0);
      Time time1 = Time.START_OF_UNIX_TIME;
      time1.getSecond();
      Time.parseDate((Calendar) mockGregorianCalendar0, "1970.01.01");
      // Undeclared exception!
      try { 
        time1.get(1652);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Time time0 = Time.now();
      time0.toTimeString();
      time0.getDayOfMonth();
      // Undeclared exception!
      try { 
        time0.getYear((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Time time0 = Time.millis(428L);
      time0.getDayOfMonth();
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        time0.START_OF_UNIX_TIME.getYear((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Time time0 = Time.millis(9223372036854775807L);
      time0.START_OF_UNIX_TIME.getHour();
      // Undeclared exception!
      try { 
        time0.elapsedSince();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This time is in the future
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.toDateString((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getDayOfMonth();
      time0.getDayOfMonth((Calendar) mockGregorianCalendar0);
      Time time1 = LongValue.max(time0, time0);
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(duration0).getMilliseconds();
      time1.add(duration0);
      time1.getSecond();
      Time.millis(14);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(1486L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.toString();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getYear((Calendar) mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      // Undeclared exception!
      try { 
        time0.getMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Time time0 = Time.millis(1094L);
      Time time1 = Time.millis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getSecond((Calendar) mockGregorianCalendar0);
      time0.START_OF_UNIX_TIME.getYear();
      time0.START_OF_UNIX_TIME.getSecond();
      time0.getMinute((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time1.elapsedSince();
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay1 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay1).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar2, timeOfDay1);
      // Undeclared exception!
      try { 
        time1.getMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      // Undeclared exception!
      try { 
        time0.get((Calendar) mockGregorianCalendar0, (-1951));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      // Undeclared exception!
      try { 
        Time.parseDate((Calendar) mockGregorianCalendar0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.toDateString((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getDayOfMonth();
      time0.getDayOfMonth((Calendar) mockGregorianCalendar0);
      Time time1 = LongValue.max(time0, time0);
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time1.add(duration0);
      time1.getSecond();
      time0.getHour();
      time0.getSecond();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Time.now();
      // Undeclared exception!
      try { 
        Time.valueOf((Calendar) null, (TimeOfDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Time time0 = Time.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.toString((Calendar) mockGregorianCalendar0, "");
      Date date0 = time0.toDate();
      Time.valueOf(date0);
      Calendar calendar0 = null;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Time.valueOf((Calendar) null, timeOfDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.getMinute((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      // Undeclared exception!
      try { 
        time0.getMinute((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Time time0 = Time.millis((-1L));
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      time1.toDateString();
      Time time2 = Time.parseDate("1969.12.31");
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(duration0).getMilliseconds();
      Time time3 = time0.START_OF_UNIX_TIME.subtract(duration0);
      time3.START_OF_UNIX_TIME.subtract(time2);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(timeOfDay0).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.elapsedSince();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time2.START_OF_UNIX_TIME.getMonth((Calendar) mockGregorianCalendar1);
      time0.toString((Calendar) mockGregorianCalendar1, "1969.12.31");
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar1, "1969.12.31");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"1969.12.31\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Time time0 = Time.millis(0L);
      Date date0 = time0.toDate();
      Time.valueOf(date0);
      time0.toDateString();
      Time time1 = Time.parseDate("1970.01.01");
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time0.subtract(duration0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time1.elapsedSince();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay1 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay1).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay1);
      time0.getMonth((Calendar) mockGregorianCalendar1);
      // Undeclared exception!
      try { 
        time1.toString((Calendar) mockGregorianCalendar1, "X 8f9!M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        Time.valueOf("a1R7]H7O=:Z;sQZ~", "");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"a1R7]H7O=:Z;sQZ~\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn((-2327L)).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.START_OF_UNIX_TIME.toDateString();
      time0.getMinute();
      time0.getMonth();
      time0.getDayOfMonth();
      time0.getMonth((Calendar) mockGregorianCalendar0);
      time0.getSecond();
      time0.toString("0{^");
      time0.get(14);
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      time0.toRfc1123TimestampString();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time1.toDateString((Calendar) mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)AbstractTime.localtime;
      time1.getMinute((Calendar) mockGregorianCalendar1);
      MockGregorianCalendar mockGregorianCalendar3 = (MockGregorianCalendar)AbstractTime.localtime;
      time1.getMonth((Calendar) mockGregorianCalendar3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Time time0 = Time.millis((-1L));
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      time1.toDateString();
      Time.parseDate("1969.12.31");
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(duration0).getMilliseconds();
      Time time2 = time0.START_OF_UNIX_TIME.subtract(duration0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(timeOfDay0).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      Duration duration1 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration1).getMilliseconds();
      Time time3 = time0.subtract(duration1);
      time3.get(0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getDayOfMonth((Calendar) mockGregorianCalendar1);
      time2.get(0);
      time2.toDate();
      time1.fromNow();
      time1.elapsedSince();
      try { 
        Time.valueOf("1969.12.31");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"1969.12.31\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.valueOf((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.get(1381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Time time0 = Time.now();
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      time1.elapsedSince();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time1.getYear((Calendar) mockGregorianCalendar0);
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      LongValue.min(time1, time0);
      Time.valueOf(timeOfDay0);
      LongValue.maxNullSafe(time0, time0);
      time0.getMinute((Calendar) mockGregorianCalendar0);
      int int0 = 1518;
      // Undeclared exception!
      try { 
        time1.get(1518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Time time0 = Time.millis(0L);
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      Duration duration0 = time0.subtract(time1);
      Time.millis(0L);
      Time.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time1.getYear((Calendar) mockGregorianCalendar0);
      String string0 = "";
      time0.toString("");
      time1.START_OF_UNIX_TIME.add(duration0);
      try { 
        Time.parseDate("*:");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"*:\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf(timeOfDay0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.get((Calendar) mockGregorianCalendar0, 4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      try { 
        Time.valueOf("", "");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        Time.valueOf("?1*<F7w9", "?1*<F7w9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"?1*<F7w9\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time0.subtract(duration0);
      Duration duration1 = mock(Duration.class, new ViolatedAssumptionAnswer());
      String string0 = "9l&7/?]$";
      time0.getDayOfMonth();
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar0, "9l&7/?]$");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"9l&7/?]$\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      // Undeclared exception!
      try { 
        time0.toString((Calendar) mockGregorianCalendar0, ",BB;K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'B'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Time time0 = Time.now();
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      Time time1 = time0.add(duration0);
      Calendar calendar0 = null;
      time0.subtract(time1);
      // Undeclared exception!
      try { 
        time1.START_OF_UNIX_TIME.toString((Calendar) null, "po$}KW]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'p'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Time time0 = Time.now();
      time0.elapsedSince();
      time0.getHour();
      // Undeclared exception!
      try { 
        Time.valueOf((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      time0.START_OF_UNIX_TIME.getYear();
      time1.START_OF_UNIX_TIME.toDateString((Calendar) mockGregorianCalendar0);
      try { 
        Time.valueOf("org.apache.wicket.util.time.TimeOfDay");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"org.apache.wicket.util.time.TimeOfDay\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Time time0 = Time.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.START_OF_UNIX_TIME.toDateString((Calendar) mockGregorianCalendar0);
      time0.toDateString();
      time0.fromNow();
      // Undeclared exception!
      try { 
        Time.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Time time0 = Time.now();
      time0.toString("");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.START_OF_UNIX_TIME.toDateString();
      time0.getMinute();
      time0.getMonth();
      time0.getDayOfMonth();
      time0.getMonth((Calendar) mockGregorianCalendar0);
      time0.getSecond();
      time0.toString("0{^");
      time0.START_OF_UNIX_TIME.getHour((Calendar) mockGregorianCalendar0);
      time0.toString((Calendar) mockGregorianCalendar0, "");
      time0.getMinute((Calendar) mockGregorianCalendar0);
      time0.getYear((Calendar) mockGregorianCalendar0);
      time0.getMinute((Calendar) mockGregorianCalendar0);
      time0.getMonth((Calendar) mockGregorianCalendar0);
      TimeOfDay timeOfDay1 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay1).getMilliseconds();
      Time time1 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay1);
      time1.START_OF_UNIX_TIME.toDate();
      time0.get((Calendar) mockGregorianCalendar0, 14);
      time0.getSecond((Calendar) mockGregorianCalendar0);
      time0.getHour((Calendar) mockGregorianCalendar0);
      try { 
        Time.parseDate((Calendar) mockGregorianCalendar0, "Unrecognized units: ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Unrecognized units: \"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      Time time0 = Time.START_OF_UNIX_TIME;
      // Undeclared exception!
      try { 
        time0.add((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Time time0 = Time.millis(819L);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.toDateString((Calendar) mockGregorianCalendar0);
      time0.START_OF_UNIX_TIME.toDateString((Calendar) mockGregorianCalendar0);
      time0.getYear();
      Time time1 = Time.now();
      time1.getMonth();
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time1.add(duration0);
      try { 
        Time.valueOf("1970.01.01");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"1970.01.01\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      // Undeclared exception!
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar0, (TimeOfDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Time time0 = Time.millis((-1L));
      Date date0 = time0.toDate();
      Time time1 = Time.valueOf(date0);
      time1.toDateString();
      Time.parseDate("1969.12.31");
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time0.START_OF_UNIX_TIME.subtract(duration0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay0).getMilliseconds();
      Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay0);
      time0.elapsedSince();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay1 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timeOfDay1).getMilliseconds();
      Time time2 = Time.valueOf((Calendar) mockGregorianCalendar1, timeOfDay1);
      time2.START_OF_UNIX_TIME.getMonth((Calendar) mockGregorianCalendar1);
      time0.toString((Calendar) mockGregorianCalendar1, "1969.12.31");
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar1, "1969.12.31");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"1969.12.31\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar0, "T");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"T\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      try { 
        Time.valueOf((Calendar) mockGregorianCalendar0, "|'mB");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"|'mB\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeOfDay timeOfDay0 = mock(TimeOfDay.class, new ViolatedAssumptionAnswer());
      doReturn(1177L).when(timeOfDay0).getMilliseconds();
      Time time0 = Time.valueOf(timeOfDay0);
      // Undeclared exception!
      try { 
        time0.elapsedSince();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This time is in the future
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Time time0 = Time.now();
      time0.getMinute();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      Date date0 = time0.toDate();
      Time.valueOf(date0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      try { 
        Time.valueOf("%=B9GWS\"(t`>");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"%=B9GWS\"(t`>\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.subtract((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Time time0 = Time.now();
      time0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Time time0 = Time.now();
      time0.fromNow();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Time time0 = Time.now();
      time0.get(1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      time0.getHour();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Time time0 = Time.millis(1094L);
      Time time1 = Time.millis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getSecond((Calendar) mockGregorianCalendar0);
      time0.START_OF_UNIX_TIME.getYear();
      time0.START_OF_UNIX_TIME.getSecond();
      time0.getMinute((Calendar) mockGregorianCalendar0);
      time0.toDateString();
      Time time2 = Time.parseDate("1970.01.01");
      time0.getDayOfMonth((Calendar) mockGregorianCalendar0);
      time1.getHour();
      Time time3 = Time.millis(0);
      Time time4 = Time.millis(0L);
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(duration0).getMilliseconds();
      time4.subtract(duration0);
      time2.START_OF_UNIX_TIME.get(0);
      time1.getDayOfMonth((Calendar) mockGregorianCalendar0);
      time2.get(0);
      time0.toDate();
      time1.fromNow();
      time3.elapsedSince();
      try { 
        Time.valueOf("1970.01.01");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"1970.01.01\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      // Undeclared exception!
      try { 
        Time.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getSecond((Calendar) mockGregorianCalendar0);
      time0.toDate();
      // Undeclared exception!
      try { 
        Time.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      time0.getSecond();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Time time0 = Time.now();
      time0.getYear();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      time0.getMonth();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Time time0 = Time.now();
      // Undeclared exception!
      try { 
        time0.toString("byto");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'b'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Time time0 = Time.millis((-368L));
      time0.getSecond();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getSecond((Calendar) mockGregorianCalendar0);
      time0.START_OF_UNIX_TIME.toRfc1123TimestampString();
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)AbstractTime.localtime;
      time0.getYear((Calendar) mockGregorianCalendar1);
      time0.getMonth();
      // Undeclared exception!
      try { 
        time0.toString("x}k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'x'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Time time0 = Time.now();
      String string0 = time0.toRfc1123TimestampString();
      assertEquals("Fri, 14 Feb 2014 20:21:21 GMT", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      try { 
        Time.parseDate((Calendar) mockGregorianCalendar0, "k*");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"k*\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      String string0 = "*xz}L2-+";
      try { 
        Time.parseDate((Calendar) mockGregorianCalendar0, "*xz}L2-+");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"*xz}L2-+\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      try { 
        Time.parseDate("w;?=M/g`(vl#(b3-Q");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"w;?=M/g`(vl#(b3-Q\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      try { 
        Time.parseDate("u3uHj]7UDm]$cbmHp");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"u3uHj]7UDm]$cbmHp\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.valueOf("3DPDC&Y", "0VnYMFN5aD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.valueOf("Mon", "Mon");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      // Undeclared exception!
      try { 
        Time.valueOf((TimeOfDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        Time.valueOf((TimeOfDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }
}
