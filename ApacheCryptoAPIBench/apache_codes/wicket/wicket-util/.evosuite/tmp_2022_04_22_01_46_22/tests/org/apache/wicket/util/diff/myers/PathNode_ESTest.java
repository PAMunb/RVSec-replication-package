/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:05:21 GMT 2022
 */

package org.apache.wicket.util.diff.myers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.wicket.util.diff.myers.DiffNode;
import org.apache.wicket.util.diff.myers.PathNode;
import org.apache.wicket.util.diff.myers.Snake;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PathNode_ESTest extends PathNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PathNode pathNode0 = mock(PathNode.class, CALLS_REAL_METHODS);
      Snake snake0 = new Snake(0, 0, pathNode0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertEquals(0, snake0.j);
      assertEquals(0, snake0.i);
      assertNotNull(snake0);
      
      DiffNode diffNode0 = new DiffNode(0, 0, snake0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertFalse(diffNode0.isBootstrap());
      assertFalse(diffNode0.isSnake());
      assertEquals(0, snake0.j);
      assertEquals(0, snake0.i);
      assertEquals(0, diffNode0.j);
      assertEquals(0, diffNode0.i);
      assertNotNull(diffNode0);
      
      String string0 = diffNode0.prev.toString();
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertFalse(diffNode0.isBootstrap());
      assertFalse(diffNode0.isSnake());
      assertEquals(0, snake0.j);
      assertEquals(0, snake0.i);
      assertEquals(0, diffNode0.j);
      assertEquals(0, diffNode0.i);
      assertEquals("[(0,0)(0,0)]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PathNode pathNode0 = mock(PathNode.class, CALLS_REAL_METHODS);
      Snake snake0 = new Snake(2042, 2042, pathNode0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertEquals(2042, snake0.i);
      assertEquals(2042, snake0.j);
      assertNotNull(snake0);
      
      DiffNode diffNode0 = new DiffNode(1, 0, snake0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertFalse(diffNode0.isSnake());
      assertFalse(diffNode0.isBootstrap());
      assertEquals(2042, snake0.i);
      assertEquals(2042, snake0.j);
      assertEquals(1, diffNode0.i);
      assertEquals(0, diffNode0.j);
      assertNotNull(diffNode0);
      
      String string0 = diffNode0.prev.toString();
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertFalse(diffNode0.isSnake());
      assertFalse(diffNode0.isBootstrap());
      assertEquals(2042, snake0.i);
      assertEquals(2042, snake0.j);
      assertEquals(1, diffNode0.i);
      assertEquals(0, diffNode0.j);
      assertEquals("[(2042,2042)(0,0)]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PathNode pathNode0 = mock(PathNode.class, CALLS_REAL_METHODS);
      doReturn(true).when(pathNode0).isSnake();
      Snake snake0 = new Snake(0, 0, pathNode0);
      assertFalse(snake0.isBootstrap());
      assertTrue(snake0.isSnake());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertNotNull(snake0);
      
      boolean boolean0 = snake0.prev.isSnake();
      assertFalse(snake0.isBootstrap());
      assertTrue(snake0.isSnake());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PathNode pathNode0 = mock(PathNode.class, CALLS_REAL_METHODS);
      doReturn(false).when(pathNode0).isSnake();
      Snake snake0 = new Snake(2042, 2042, pathNode0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertEquals(2042, snake0.i);
      assertEquals(2042, snake0.j);
      assertNotNull(snake0);
      
      boolean boolean0 = snake0.prev.isSnake();
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertEquals(2042, snake0.i);
      assertEquals(2042, snake0.j);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PathNode pathNode0 = mock(PathNode.class, CALLS_REAL_METHODS);
      Snake snake0 = new Snake(0, 0, pathNode0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertNotNull(snake0);
      
      DiffNode diffNode0 = new DiffNode((-829), 0, snake0);
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertFalse(diffNode0.isSnake());
      assertTrue(diffNode0.isBootstrap());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertEquals(0, diffNode0.j);
      assertEquals((-829), diffNode0.i);
      assertNotNull(diffNode0);
      
      boolean boolean0 = diffNode0.isBootstrap();
      assertTrue(snake0.isSnake());
      assertFalse(snake0.isBootstrap());
      assertFalse(diffNode0.isSnake());
      assertTrue(diffNode0.isBootstrap());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertEquals(0, diffNode0.j);
      assertEquals((-829), diffNode0.i);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PathNode pathNode0 = mock(PathNode.class, CALLS_REAL_METHODS);
      Snake snake0 = new Snake(0, 0, pathNode0);
      assertFalse(snake0.isBootstrap());
      assertTrue(snake0.isSnake());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertNotNull(snake0);
      
      DiffNode diffNode0 = new DiffNode(0, 0, snake0);
      assertFalse(snake0.isBootstrap());
      assertTrue(snake0.isSnake());
      assertFalse(diffNode0.isSnake());
      assertFalse(diffNode0.isBootstrap());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertEquals(0, diffNode0.j);
      assertEquals(0, diffNode0.i);
      assertNotNull(diffNode0);
      
      boolean boolean0 = diffNode0.isBootstrap();
      assertFalse(snake0.isBootstrap());
      assertTrue(snake0.isSnake());
      assertFalse(diffNode0.isSnake());
      assertFalse(diffNode0.isBootstrap());
      assertEquals(0, snake0.i);
      assertEquals(0, snake0.j);
      assertEquals(0, diffNode0.j);
      assertEquals(0, diffNode0.i);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Snake snake0 = new Snake(0, 1, (PathNode) null);
      DiffNode diffNode0 = new DiffNode(0, 1, snake0);
      PathNode pathNode0 = diffNode0.previousSnake();
      assertEquals(1, pathNode0.j);
      assertNotNull(pathNode0);
      assertEquals(0, pathNode0.i);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Snake snake0 = new Snake(0, (-1393), (PathNode) null);
      boolean boolean0 = snake0.isBootstrap();
      assertTrue(boolean0);
      assertEquals(0, snake0.i);
      assertEquals((-1393), snake0.j);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DiffNode diffNode0 = new DiffNode(0, 0, (PathNode) null);
      PathNode pathNode0 = diffNode0.previousSnake();
      assertNotNull(pathNode0);
      assertEquals(0, pathNode0.j);
      assertEquals(0, pathNode0.i);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Snake snake0 = new Snake((-1814), (-1814), (PathNode) null);
      PathNode pathNode0 = snake0.previousSnake();
      assertEquals((-1814), snake0.j);
      assertNull(pathNode0);
      assertEquals((-1814), snake0.i);
  }
}
