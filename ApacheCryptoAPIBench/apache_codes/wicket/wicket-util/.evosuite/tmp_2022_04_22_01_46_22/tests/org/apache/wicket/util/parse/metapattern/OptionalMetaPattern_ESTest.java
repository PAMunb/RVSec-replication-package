/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:14:57 GMT 2022
 */

package org.apache.wicket.util.parse.metapattern;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import org.apache.wicket.util.parse.metapattern.MetaPattern;
import org.apache.wicket.util.parse.metapattern.OptionalMetaPattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionalMetaPattern_ESTest extends OptionalMetaPattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MetaPattern[] metaPatternArray0 = new MetaPattern[4];
      OptionalMetaPattern optionalMetaPattern0 = null;
      try {
        optionalMetaPattern0 = new OptionalMetaPattern(metaPatternArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.MetaPattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OptionalMetaPattern optionalMetaPattern0 = null;
      try {
        optionalMetaPattern0 = new OptionalMetaPattern("Qs@[E");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // Qs@[E
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OptionalMetaPattern optionalMetaPattern0 = null;
      try {
        optionalMetaPattern0 = new OptionalMetaPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MetaPattern[] metaPatternArray0 = new MetaPattern[4];
      OptionalMetaPattern optionalMetaPattern0 = new OptionalMetaPattern(metaPatternArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.WHITESPACE;
      OptionalMetaPattern optionalMetaPattern0 = new OptionalMetaPattern(metaPattern0);
      String string0 = optionalMetaPattern0.toString();
      assertEquals("(?:\\s+)?", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OptionalMetaPattern optionalMetaPattern0 = new OptionalMetaPattern("org.apache.wicket.util.parse.metapattern.OptionalMetaPattern");
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OptionalMetaPattern optionalMetaPattern0 = null;
      try {
        optionalMetaPattern0 = new OptionalMetaPattern((MetaPattern[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OptionalMetaPattern optionalMetaPattern0 = new OptionalMetaPattern((List<MetaPattern>) null);
      // Undeclared exception!
      try { 
        optionalMetaPattern0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.parse.metapattern.MetaPattern", e);
      }
  }
}
