/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:56:21 GMT 2022
 */

package org.apache.wicket.util.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.wicket.util.string.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      entities0.addEntity("#J;", 127);
      entities0.HTML40.addEntity("#J;", (-3617));
      String string0 = entities0.escape(">G#]U");
      assertEquals("&#J;;&gt;G#]U", string0);
      assertNotNull(string0);
      
      String string1 = entities0.unescape("&#J;;&gt;G#]U");
      assertEquals("&#J;;>G#]U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      entities0.addEntity("gJ;", 127);
      entities0.HTML40.addEntity("gJ;", (-3617));
      String string0 = entities0.escape(">G#]U");
      assertEquals("&gJ;;&gt;G#]U", string0);
      assertNotNull(string0);
      
      String string1 = entities0.unescape("&gJ;;&gt;G#]U");
      assertEquals("&gJ;;>G#]U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int[] intArray0 = new int[9];
      intArray0[0] = 118;
      intArray0[1] = (-3089);
      intArray0[2] = 96;
      intArray0[3] = 111;
      intArray0[4] = 129;
      intArray0[5] = 424;
      intArray0[6] = 151;
      intArray0[7] = 104;
      intArray0[8] = (-2496);
      entities_BinaryEntityMap0.values = intArray0;
      // Undeclared exception!
      try { 
        entities0.entityValue("sim");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 225
         //
         verifyException("org.apache.wicket.util.string.Entities$ArrayEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.size = (-303);
      String string0 = entities_ArrayEntityMap0.name(231);
      assertNull(string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      entities0.unescape((Writer) stringWriter0, "rho");
      assertEquals("rho", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('\\');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("\\", stringWriter0.toString());
      assertEquals("\\", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("\\null", stringWriter0.toString());
      assertEquals("\\null", stringWriter1.toString());
      assertEquals("\\null", stringWriter2.toString());
      
      entities0.escape((Writer) stringWriter2, "I_aY9XG`h5|,");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("\\nullI_aY9XG`h5|,", stringWriter0.toString());
      assertEquals("\\nullI_aY9XG`h5|,", stringWriter1.toString());
      assertEquals("\\nullI_aY9XG`h5|,", stringWriter2.toString());
      
      String string0 = entities0.entityName(256);
      assertNull(string0);
      
      Entities entities1 = new Entities();
      assertNotNull(entities1);
      assertFalse(entities1.equals((Object)entities0));
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string1 = entities_LookupEntityMap0.name(47);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1101);
      intArray0[1] = (-1101);
      intArray0[2] = (-1101);
      intArray0[3] = (-1101);
      entities_ArrayEntityMap0.add("K.{5rs_TM4v()E", (-1101));
      intArray0[4] = (-1101);
      intArray0[5] = (-1101);
      entities_ArrayEntityMap0.values = intArray0;
      entities_ArrayEntityMap0.size = (-1101);
      int int0 = entities_ArrayEntityMap0.value("hellip");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      entities0.addEntity("org.apache.wicket.util.lang.Generics", (-2241));
      Entities.fillWithHtml40Entities(entities0);
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int int0 = entities_BinaryEntityMap0.value("^znM");
      assertEquals((-1), int0);
      
      int int1 = entities_BinaryEntityMap0.value("sim");
      assertEquals(8764, int1);
      assertFalse(int1 == int0);
      
      entities_BinaryEntityMap0.add("sim", 8764);
      int int2 = entities0.entityValue("sim");
      assertEquals(8764, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int int0 = entities_BinaryEntityMap0.value("^znM");
      assertEquals((-1), int0);
      
      Entities entities1 = new Entities();
      assertNotNull(entities1);
      assertFalse(entities1.equals((Object)entities0));
      
      String string0 = entities1.unescape("&GzReE*");
      assertEquals("&GzReE*", string0);
      assertNotNull(string0);
      assertFalse(entities1.equals((Object)entities0));
      assertNotSame(entities1, entities0);
      
      Entities entities2 = Entities.XML;
      assertNotNull(entities2);
      assertFalse(entities2.equals((Object)entities1));
      assertFalse(entities2.equals((Object)entities0));
      assertNotSame(entities2, entities1);
      assertNotSame(entities2, entities0);
      
      String string1 = entities2.unescape("&GzReE*");
      assertEquals("&GzReE*", string1);
      assertNotNull(string1);
      assertFalse(entities2.equals((Object)entities1));
      assertFalse(entities2.equals((Object)entities0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(entities2, entities1);
      assertNotSame(entities2, entities0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities((Entities.EntityMap) null);
      assertNotNull(entities0);
      
      entities0.XML.addEntity("SqxI\"", 1147);
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = 142;
      // Undeclared exception!
      try { 
        entities0.entityName(142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = entities0.escape(">G#]U");
      assertEquals("&gt;G#]U", string0);
      assertNotNull(string0);
      
      int int0 = entities0.entityValue(">G#]U");
      assertEquals((-1), int0);
      
      String string1 = entities0.unescape("&gt;G#]U");
      assertEquals(">G#]U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = entities0.unescape(">G#]U");
      assertEquals(">G#]U", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = entities0.escape("5>G#]UV");
      assertEquals("5&gt;G#]UV", string0);
      assertNotNull(string0);
      
      int int0 = entities0.entityValue("5>G#]UV");
      assertEquals((-1), int0);
      
      String string1 = entities0.unescape("5&gt;G#]UV");
      assertEquals("5>G#]UV", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = entities0.escape("rang");
      assertEquals("rang", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = entities0.escape(">G#]U");
      assertEquals("&gt;G#]U", string0);
      assertNotNull(string0);
      
      String string1 = entities0.unescape("&gt;G#]U");
      assertEquals(">G#]U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = entities0.unescape("B_VxCXj<C50G)r:&/f=;");
      assertEquals("B_VxCXj<C50G)r:&/f=;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add("sup", 1074);
      entities_BinaryEntityMap0.size = (-1956);
      entities_BinaryEntityMap0.size = 4;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 1074;
      intArray0[4] = 1074;
      entities_BinaryEntityMap0.ensureCapacity((-3622));
      intArray0[5] = 4;
      intArray0[6] = 4;
      intArray0[7] = 1074;
      entities_BinaryEntityMap0.values = intArray0;
      entities_BinaryEntityMap0.add("zq2(;'`.i>lD:4)#[", (-731));
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      String string0 = entities_BinaryEntityMap0.name(4);
      assertNull(string0);
      
      Entities.TreeEntityMap entities_TreeEntityMap1 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap1);
      assertFalse(entities_TreeEntityMap1.equals((Object)entities_TreeEntityMap0));
      
      String string1 = entities_BinaryEntityMap0.name(1074);
      assertNull(string1);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(146);
      assertNotNull(entities_ArrayEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      String[][] stringArray0 = new String[0][3];
      entities0.addEntities(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringWriter stringWriter0 = new StringWriter(4);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "zq2(;'`.i>lD:4)#[", 4, (-731));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char[] charArray0 = new char[1];
      entities0.escape((Writer) stringWriter0, "cH");
      assertEquals("cH", stringWriter0.toString());
      
      entities0.unescape((Writer) stringWriter0, "*Nr.S=/gLOU)&eMu?6");
      assertEquals("cH*Nr.S=/gLOU)&eMu?6", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("cH*Nr.S=/gLOU)&eMu?6", stringWriter0.toString());
      
      charArray0[0] = '1';
      stringWriter0.write(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals("cH*Nr.S=/gLOU)&eMu?61", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("cH*Nr.S=/gLOU)&eMu?61", stringWriter0.toString());
      
      entities0.HTML32.unescape((Writer) stringWriter0, "diams");
      assertEquals("cH*Nr.S=/gLOU)&eMu?61diams", stringWriter0.toString());
      
      int int0 = (-803);
      // Undeclared exception!
      try { 
        entities0.XML.entityName((-803));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -803
         //
         verifyException("org.apache.wicket.util.string.Entities$LookupEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = entities0.escape("5>~G#]v");
      assertEquals("5&gt;~G#]v", string0);
      assertNotNull(string0);
      
      Entities entities1 = new Entities();
      assertNotNull(entities1);
      assertFalse(entities1.equals((Object)entities0));
      
      String string1 = entities1.unescape("5&gt;~G#]v");
      assertEquals("5&gt;~G#]v", string1);
      assertNotNull(string1);
      assertFalse(entities1.equals((Object)entities0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(entities1, entities0);
      
      String string2 = entities1.unescape("5&gt;~G#]v");
      assertEquals("5&gt;~G#]v", string2);
      assertNotNull(string2);
      assertFalse(entities1.equals((Object)entities0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(entities1, entities0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = entities0.unescape("-~;F&a/N&");
      assertEquals("-~;F&a/N&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      entities0.unescape((Writer) stringWriter0, "&");
      assertEquals("&", stringWriter0.toString());
      
      String[][] stringArray0 = new String[6][0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "\"A=jXVyQko";
      stringArray1[1] = "&";
      stringArray1[2] = "&";
      stringArray1[3] = "&";
      stringArray1[4] = "&";
      stringArray1[5] = "&";
      stringArray1[6] = "&";
      stringArray1[7] = "&";
      stringArray1[8] = "&";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "W>RAwm-]_";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "me,/gbgj}";
      stringArray3[1] = "W>RAwm-]_";
      stringArray3[2] = "&";
      stringArray3[3] = "W>RAwm-]_";
      stringArray3[4] = "&";
      stringArray3[5] = "\"A=jXVyQko";
      stringArray3[6] = "&";
      stringArray3[7] = "&";
      stringArray3[8] = "\"A=jXVyQko";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[7];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "\"A=jXVyQko";
      stringArray4[1] = "me,/gbgj}";
      stringArray4[2] = "me,/gbgj}";
      stringArray4[3] = "me,/gbgj}";
      stringArray4[4] = "me,/gbgj}";
      stringArray4[5] = "\"A=jXVyQko";
      stringArray4[6] = "\"A=jXVyQko";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[6];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray5[0] = "W>RAwm-]_";
      stringArray5[1] = "\"A=jXVyQko";
      stringArray5[2] = "me,/gbgj}";
      stringArray5[3] = "me,/gbgj}";
      stringArray5[4] = "\"A=jXVyQko";
      stringArray5[5] = "\"A=jXVyQko";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[2];
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      
      stringArray6[0] = "&";
      stringArray6[1] = "\"A=jXVyQko";
      stringArray0[5] = stringArray6;
      // Undeclared exception!
      try { 
        entities0.addEntities(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(1);
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.add("le", (-1146479434));
      String string0 = entities_ArrayEntityMap0.name((-811));
      assertNull(string0);
      
      Entities entities1 = new Entities();
      assertNotNull(entities1);
      assertFalse(entities1.equals((Object)entities0));
      
      int int0 = entities_ArrayEntityMap0.value("66`[!<t\"=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      int int0 = entities0.entityValue("asymp");
      assertEquals(8776, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.entityName(233);
      assertEquals("eacute", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      entities_HashEntityMap0.add("vnmbT5B2$a,mfd", 125);
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add("vnmbT5B2$a,mfd", 125);
      String string0 = entities_BinaryEntityMap0.name(125);
      assertEquals("vnmbT5B2$a,mfd", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.HTML40.unescape((Writer) null, "&vx3e8-tCMQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = entities_LookupEntityMap0.value("S^mU{4$c");
      assertEquals((-1), int0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(505);
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.add("S^mU{4$c", 150);
      String string0 = entities_ArrayEntityMap0.name(150);
      assertEquals("S^mU{4$c", string0);
      assertNotNull(string0);
      
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.unescape((Writer) null, "S^mU{4$c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(106);
      assertNotNull(entities_ArrayEntityMap0);
      
      entities_ArrayEntityMap0.size = 106;
      Entities entities0 = new Entities(entities_ArrayEntityMap0);
      assertNotNull(entities0);
      
      String string0 = entities_ArrayEntityMap0.name(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = entities0.escape("pqMX>?.[a_-Y");
      assertEquals("pqMX&gt;?.[a_-Y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.escape((Writer) null, "4OCn4s`v/.R_P`,ZEe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(1869);
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      String string0 = "QnyR/yyL<pp";
      int int1 = entities0.entityValue("QnyR/yyL<pp");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Entities.fillWithHtml40Entities(entities0);
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string1 = "8707";
      entities0.unescape((Writer) stringWriter0, "8707");
      assertEquals("8707", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "8707", 168, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.entityName((-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -961
         //
         verifyException("org.apache.wicket.util.string.Entities$LookupEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = "S^mU{4$c";
      int int0 = entities_LookupEntityMap0.value("S^mU{4$c");
      assertEquals((-1), int0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(150);
      assertNotNull(entities_ArrayEntityMap0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 150;
      intArray0[1] = 150;
      entities_ArrayEntityMap0.add("S^mU{4$c", 150);
      entities_ArrayEntityMap0.values = intArray0;
      String string1 = entities_ArrayEntityMap0.name(130);
      assertNull(string1);
      
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String[] stringArray0 = new String[7];
      stringArray0[4] = "S^mU{4$c";
      stringArray0[5] = null;
      String[][] stringArray1 = new String[1][9];
      stringArray1[0] = stringArray0;
      // Undeclared exception!
      try { 
        entities0.addEntities(stringArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      entities_LookupEntityMap0.add("8)0.", 113);
      String string0 = "S^mU{4$c";
      int int0 = entities_LookupEntityMap0.value("S^mU{4$c");
      assertEquals((-1), int0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(150);
      assertNotNull(entities_ArrayEntityMap0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 150;
      intArray0[1] = 150;
      entities_ArrayEntityMap0.values = intArray0;
      String string1 = entities_ArrayEntityMap0.name(130);
      assertNull(string1);
      
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String[][] stringArray0 = new String[5][1];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "8)0.";
      stringArray1[1] = "8)0.";
      stringArray1[2] = "8)0.";
      stringArray1[3] = "8)0.";
      stringArray1[4] = "S^mU{4$c";
      stringArray1[5] = null;
      stringArray1[6] = "S^mU{4$c";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = null;
      stringArray2[1] = "8)0.";
      stringArray2[2] = null;
      stringArray2[3] = "S^mU{4$c";
      stringArray2[4] = null;
      stringArray2[5] = "S^mU{4$c";
      stringArray2[6] = null;
      stringArray2[7] = "8)0.";
      stringArray2[8] = "8)0.";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "S^mU{4$c";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[0];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[2];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray5[0] = "C-!w}(s\"@Q";
      stringArray5[1] = "S^mU{4$c";
      stringArray0[4] = stringArray5;
      // Undeclared exception!
      try { 
        entities0.XML.addEntities(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8)0.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(118);
      assertNotNull(entities_ArrayEntityMap0);
      
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = entities_ArrayEntityMap0.name(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = entities_LookupEntityMap0.name(220);
      assertNull(string0);
      
      String string1 = ".}e\\w\\E`rY1?5bZ3Pi";
      entities_LookupEntityMap0.add(".}ewE`rY1?5bZ3Pi", 45);
      String string2 = entities_LookupEntityMap0.name(79);
      assertNull(string2);
      
      int int0 = entities_LookupEntityMap0.value(".}ewE`rY1?5bZ3Pi");
      assertEquals(45, int0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(2670);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.ensureCapacity(1696);
      int int1 = 135;
      entities_BinaryEntityMap0.size = 135;
      String string3 = entities_BinaryEntityMap0.name(220);
      assertNull(string3);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(110);
      assertNotNull(entities_ArrayEntityMap0);
      
      Entities entities0 = new Entities(entities_ArrayEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        entities0.HTML40.unescape((Writer) stringWriter0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      String string0 = null;
      int int0 = entities_HashEntityMap0.value((String) null);
      assertEquals((-1), int0);
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities entities0 = new Entities(entities_HashEntityMap0);
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char char0 = 'r';
      Entities.fillWithHtml40Entities(entities0);
      // Undeclared exception!
      try { 
        entities0.HTML32.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      int int0 = entities_TreeEntityMap0.value("r^lkrL5}Ol~skD^*");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.unescape((Writer) null, "ni");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      entities0.unescape((Writer) stringWriter0, "8727");
      assertEquals("8727", stringWriter0.toString());
      
      entities0.HTML32.addEntity("", 0);
      String string0 = entities0.escape("D~}wTuF]hqG=|fK?#");
      assertEquals("D~}wTuF]hqG=|fK?#", string0);
      assertNotNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(115);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add((String) null, 111);
      int[] intArray0 = new int[5];
      intArray0[0] = 115;
      intArray0[1] = 0;
      intArray0[2] = 111;
      intArray0[3] = 111;
      intArray0[4] = 0;
      entities_BinaryEntityMap0.values = intArray0;
      String string1 = entities_BinaryEntityMap0.name(869);
      assertNull(string1);
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      entities_TreeEntityMap0.add("", 1038);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(37);
      assertNotNull(entities_ArrayEntityMap0);
      
      Entities.ArrayEntityMap entities_ArrayEntityMap1 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap1);
      assertFalse(entities_ArrayEntityMap1.equals((Object)entities_ArrayEntityMap0));
      
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      entities_TreeEntityMap0.add("X#go5", 37);
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      Entities entities0 = new Entities(entities_LookupEntityMap0);
      assertNotNull(entities0);
      
      String string0 = entities0.XML.escape("X#go5");
      assertEquals("X#go5", string0);
      assertNotNull(string0);
      
      String string1 = entities_LookupEntityMap0.name(37);
      assertNull(string1);
      
      Entities.fillWithHtml40Entities(entities0);
      entities0.addEntity((String) null, 37);
      String string2 = entities0.HTML40.unescape("-+cY${aT!");
      assertEquals("-+cY${aT!", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[][] stringArray0 = new String[0][0];
      entities0.XML.addEntities(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = entities_LookupEntityMap0.name(37);
      assertNull(string3);
      
      Entities.fillWithHtml40Entities(entities0);
      entities_LookupEntityMap0.add((String) null, 37);
      String string4 = entities0.XML.entityName(37);
      assertNull(string4);
      
      String string5 = entities0.entityName(1036);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String[][] stringArray0 = new String[1][7];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      // Undeclared exception!
      try { 
        entities0.addEntities(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      Entities entities0 = new Entities(entities_HashEntityMap0);
      assertNotNull(entities0);
      
      String string0 = entities0.escape("HmZBF");
      assertEquals("HmZBF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      entities_HashEntityMap0.add("", 5338);
      entities_HashEntityMap0.add("", 88);
      entities_HashEntityMap0.add("", 1);
      entities_HashEntityMap0.add("", 47);
      entities_HashEntityMap0.add("", 88);
      entities_HashEntityMap0.add("", 1073741824);
      entities_HashEntityMap0.add("", (-400));
      entities_HashEntityMap0.add("P&", 151);
      entities_HashEntityMap0.add("", 151);
      String string0 = entities_HashEntityMap0.name(3008);
      assertNull(string0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_HashEntityMap0.add("", 3008);
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      int int0 = entities_HashEntityMap0.value("");
      assertEquals(3008, int0);
      
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      assertNotNull(entities_PrimitiveEntityMap0);
      
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      String string1 = entities0.HTML32.entityName(151);
      assertNull(string1);
      
      String string2 = entities0.escape("");
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities entities0 = new Entities(entities_TreeEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int int0 = entities0.entityValue("sim");
      assertEquals(8764, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.addEntities((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      int int0 = 136;
      String string0 = entities0.HTML32.entityName(12);
      assertNull(string0);
      
      String string1 = entities0.escape("_EL.dh$");
      assertEquals("_EL.dh$", string1);
      assertNotNull(string1);
      
      StringWriter stringWriter0 = new StringWriter(136);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string2 = "org.apache.wicket.util.string.Entities$MapIntMap";
      entities0.HTML32.unescape((Writer) stringWriter0, "org.apache.wicket.util.string.Entities$MapIntMap");
      assertEquals("org.apache.wicket.util.string.Entities$MapIntMap", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        entities0.addEntities((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(218);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add("*g]<Dt?4+])", 218);
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = entities_LookupEntityMap0.value("932");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int int0 = entities0.entityValue("forall");
      assertEquals(8704, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String[][] stringArray0 = new String[1][9];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "eU<]A]w_o/|";
      stringArray1[1] = "cup";
      // Undeclared exception!
      try { 
        entities0.addEntities(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      int int0 = 1698;
      String[][] stringArray0 = new String[2][2];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "_;GZ, ((";
      stringArray1[3] = "Illegal initial capacity: ";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "_;GZ, ((";
      stringArray2[1] = "_;GZ, ((";
      stringArray2[2] = "Illegal initial capacity: ";
      stringArray2[3] = "";
      stringArray2[4] = "Illegal initial capacity: ";
      stringArray2[5] = "";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray0[1] = stringArray2;
      // Undeclared exception!
      try { 
        entities0.HTML32.addEntities(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Entities entities0 = null;
      // Undeclared exception!
      try { 
        Entities.fillWithHtml40Entities((Entities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      int int0 = entities0.entityValue("sim");
      assertEquals(8764, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      assertNotNull(entities_PrimitiveEntityMap0);
      
      entities_PrimitiveEntityMap0.add("Illegal initial capacity: ", 424);
      entities_PrimitiveEntityMap0.add("", 1867);
      entities_PrimitiveEntityMap0.add(">As.B-|2Jelhs6", 112);
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      entities_TreeEntityMap0.add("Gc<i;}T!?%)", 1867);
      entities_TreeEntityMap0.add("", 424);
      int int0 = (-1581);
      entities_TreeEntityMap0.add("", (-1581));
      int int1 = 150;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(150);
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int2 = entities_PrimitiveEntityMap0.value("");
      assertEquals(1867, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Entities.LookupEntityMap entities_LookupEntityMap1 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap1);
      assertFalse(entities_LookupEntityMap1.equals((Object)entities_LookupEntityMap0));
      
      // Undeclared exception!
      try { 
        Entities.fillWithHtml40Entities((Entities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = entities_LookupEntityMap0.name(132);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        entities_LookupEntityMap0.name((-2638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2638
         //
         verifyException("org.apache.wicket.util.string.Entities$LookupEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.size = 1737;
      int[] intArray0 = new int[8];
      intArray0[0] = 18;
      intArray0[1] = 1737;
      intArray0[2] = 1737;
      intArray0[3] = 1737;
      intArray0[4] = 1737;
      intArray0[5] = 132;
      intArray0[6] = (-635);
      intArray0[7] = 1737;
      entities_BinaryEntityMap0.values = intArray0;
      // Undeclared exception!
      try { 
        entities_BinaryEntityMap0.ensureCapacity(1737);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities$ArrayEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      assertNotNull(entities_PrimitiveEntityMap0);
      
      String string0 = entities0.HTML40.entityName(216);
      assertEquals("Oslash", string0);
      assertNotNull(string0);
      
      String string1 = entities_PrimitiveEntityMap0.name(415);
      assertNull(string1);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", stringWriter1.toString());
      
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) null, 415, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      String string0 = entities0.escape(";zhko] L-Ng~T");
      assertEquals(";zhko] L-Ng~T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      int[] intArray0 = new int[3];
      entities_ArrayEntityMap0.ensureCapacity(108);
      intArray0[0] = 1708;
      intArray0[1] = 92;
      intArray0[2] = (-1624);
      entities_ArrayEntityMap0.values = intArray0;
      Entities entities0 = new Entities(entities_ArrayEntityMap0);
      assertNotNull(entities0);
      
      String string0 = entities0.HTML40.unescape("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringWriter stringWriter0 = new StringWriter(133);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      String string1 = entities_BinaryEntityMap0.name((-1624));
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 97, 133);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(2);
      assertNotNull(entities_ArrayEntityMap0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MNT#n\"";
      stringArray0[1] = "";
      stringArray0[2] = "?_sNUhcP_yT";
      stringArray0[3] = "j$!tJ)t";
      entities_ArrayEntityMap0.names = stringArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      entities_ArrayEntityMap0.size = 2;
      entities_ArrayEntityMap0.values = intArray0;
      // Undeclared exception!
      try { 
        entities_ArrayEntityMap0.value("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.wicket.util.string.Entities$ArrayEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(118);
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int int0 = entities_BinaryEntityMap0.value("MNT#n\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = entities0.entityName(262);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = entities_LookupEntityMap0.name(144);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      int int0 = 5430;
      String string0 = entities_LookupEntityMap0.name(5430);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        entities_LookupEntityMap0.name((-948));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -948
         //
         verifyException("org.apache.wicket.util.string.Entities$LookupEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      // Undeclared exception!
      try { 
        entities0.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      int int0 = entities_BinaryEntityMap0.value("kzM");
      assertEquals((-1), int0);
      
      String string0 = entities0.entityName(4841);
      assertNull(string0);
      
      int int1 = entities_BinaryEntityMap0.value("L15|");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        entities0.unescape((Writer) null, "&#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      entities_HashEntityMap0.add("vnmbT5B2$a,mfd", 125);
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('Z');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("Z", stringWriter0.toString());
      assertEquals("Z", stringWriter1.toString());
      
      entities0.escape((Writer) stringWriter1, "hTpV)M6X~:rdm{ZN3z\"");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("ZhTpV)M6X~:rdm{ZN3z&quot;", stringWriter0.toString());
      assertEquals("ZhTpV)M6X~:rdm{ZN3z&quot;", stringWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      entities0.unescape((Writer) stringWriter0, "C()bg; a^+K8Zzd|5X");
      assertEquals("C()bg; a^+K8Zzd|5X", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(118);
      assertNotNull(entities_ArrayEntityMap0);
      
      Entities entities0 = new Entities(entities_ArrayEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = entities0.escape("prime");
      assertEquals("prime", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      String string0 = "uQZ1yc=?";
      entities_ArrayEntityMap0.ensureCapacity(124);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "uQZ1yc=?";
      entities_ArrayEntityMap0.names = stringArray0;
      entities_ArrayEntityMap0.add("", (-2070));
      entities_ArrayEntityMap0.add("uQZ1yc=?", (-1924));
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
      
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter(1281);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      entities0.HTML32.escape((Writer) stringWriter0, "");
      assertEquals("", stringWriter0.toString());
      
      entities0.HTML32.unescape((Writer) stringWriter0, "uQZ1yc=?");
      assertEquals("uQZ1yc=?", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        entities0.HTML40.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = entities0.unescape("S>PE+Xi|'BPFE:%D9-f");
      assertEquals("S>PE+Xi|'BPFE:%D9-f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      Entities entities1 = Entities.HTML40;
      assertNotNull(entities1);
      assertSame(entities1, entities0);
      
      String string0 = entities1.XML.unescape("p$xn_F&|r\"4uh>");
      assertEquals("p$xn_F&|r\"4uh>", string0);
      assertNotNull(string0);
      assertSame(entities1, entities0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = ";@iiS},'ur)j n r";
      String string1 = entities0.unescape(";@iiS},'ur)j n r");
      assertEquals(";@iiS},'ur)j n r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = 56;
      int int1 = 4450;
      // Undeclared exception!
      try { 
        stringWriter0.write(";@iiS},'ur)j n r", 56, 4450);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
      // Undeclared exception!
      try { 
        Entities.fillWithHtml40Entities(entities0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities$BinaryEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(1869);
      assertNotNull(entities_BinaryEntityMap0);
      
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      int int0 = entities0.entityValue("QnyR/yyL<pp");
      assertEquals((-1), int0);
      
      Entities.fillWithHtml40Entities(entities0);
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = "8707";
      entities0.unescape((Writer) stringWriter0, "8707");
      assertEquals("8707", stringWriter0.toString());
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string1 = entities_LookupEntityMap0.name(Integer.MAX_VALUE);
      assertNull(string1);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "QnyR/yyL<pp");
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("8707QnyR/yyL<pp", stringWriter0.toString());
      assertEquals("8707QnyR/yyL<pp", stringWriter1.toString());
      
      entities0.escape((Writer) stringWriter0, "8707");
      assertSame(stringWriter0, stringWriter1);
      assertEquals("8707QnyR/yyL<pp8707", stringWriter0.toString());
      
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      int int1 = entities_HashEntityMap0.value("QnyR/yyL<pp");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        Entities.fillWithHtml40Entities(entities0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities$BinaryEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      assertNotNull(entities_PrimitiveEntityMap0);
      
      entities_PrimitiveEntityMap0.add("YPZ:{", 1670);
      entities_PrimitiveEntityMap0.add((String) null, 3344);
      entities_PrimitiveEntityMap0.add((String) null, 14);
      entities_PrimitiveEntityMap0.add("-ONRt`IY ,[;o", (-345));
      entities_PrimitiveEntityMap0.add("", 14);
      entities_PrimitiveEntityMap0.add("-ONRt`IY ,[;o", 1665);
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(14);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.add("-ONRt`IY ,[;o", 1549);
      int int0 = entities_BinaryEntityMap0.value("");
      assertEquals((-1), int0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      String string0 = entities_LookupEntityMap0.name(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      int int0 = entities0.entityValue("#W}>.~BP:/jn");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      int int0 = entities_ArrayEntityMap0.value("hellip");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 91;
      intArray0[2] = (-2772);
      int int0 = 168;
      intArray0[3] = 168;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 16;
      intArray0[6] = 1869;
      entities_BinaryEntityMap0.values = intArray0;
      Entities entities0 = new Entities(entities_BinaryEntityMap0);
      assertNotNull(entities0);
      
      String string0 = "QnyR/yyL<pp";
      int int1 = entities0.entityValue("QnyR/yyL<pp");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Entities.fillWithHtml40Entities(entities0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities$BinaryEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = null;
      try {
        entities_BinaryEntityMap0 = new Entities.BinaryEntityMap((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities$ArrayEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = null;
      try {
        entities_ArrayEntityMap0 = new Entities.ArrayEntityMap((-957));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Entities$ArrayEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("5*D", 121);
      int int0 = (-437);
      entities_TreeEntityMap0.add("8801", (-437));
      entities_BinaryEntityMap0.add("8801", (-437));
      String[] stringArray0 = null;
      entities_BinaryEntityMap0.names = null;
      // Undeclared exception!
      try { 
        entities_BinaryEntityMap0.add("8801", 131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
