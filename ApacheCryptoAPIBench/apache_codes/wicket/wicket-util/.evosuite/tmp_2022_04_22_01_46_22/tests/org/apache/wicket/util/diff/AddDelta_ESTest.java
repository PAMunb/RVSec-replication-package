/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:12:20 GMT 2022
 */

package org.apache.wicket.util.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.wicket.util.diff.AddDelta;
import org.apache.wicket.util.diff.Chunk;
import org.apache.wicket.util.diff.RevisionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AddDelta_ESTest extends AddDelta_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Chunk chunk0 = new Chunk(objectArray0, (-1668), (-1668), 352);
      List<Object> list0 = chunk0.chunk();
      AddDelta addDelta0 = new AddDelta((-431), chunk0);
      addDelta0.verify(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-1), (-1), (-1));
      AddDelta addDelta0 = new AddDelta((-3383), chunk0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      addDelta0.toRCSString(stringBuilder0, " o+`Jrm?r/L/f]bsy");
      assertEquals("a-3383 0 o+`Jrm?r/L/f]bsy", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-1), (-1), (-1));
      AddDelta addDelta0 = new AddDelta((-3383), chunk0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      addDelta0.toString(stringBuilder0);
      assertEquals("-3383a0\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-1), (-1), (-1));
      AddDelta addDelta0 = new AddDelta((-3383), chunk0);
      addDelta0.applyTo(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-1), (-1), (-1));
      AddDelta addDelta0 = new AddDelta((-3383), chunk0);
      RevisionVisitor revisionVisitor0 = mock(RevisionVisitor.class, new ViolatedAssumptionAnswer());
      addDelta0.accept(revisionVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AddDelta addDelta0 = new AddDelta();
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, 531, (-794));
      List<Object> list0 = chunk0.chunk();
      // Undeclared exception!
      try { 
        addDelta0.verify(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AddDelta addDelta0 = new AddDelta();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      // Undeclared exception!
      try { 
        addDelta0.toRCSString(stringBuilder0, "8P-|fGxoSDBq1I5{J\"Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AddDelta addDelta0 = new AddDelta();
      Object[] objectArray0 = new Object[9];
      Chunk chunk0 = new Chunk(objectArray0, 2, 2, 0);
      List<Object> list0 = chunk0.chunk;
      // Undeclared exception!
      try { 
        addDelta0.applyTo(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Chunk chunk0 = new Chunk(objectArray0, (-1668), (-1668), 352);
      AddDelta addDelta0 = new AddDelta(1, chunk0);
      List<Object> list0 = chunk0.chunk();
      try { 
        addDelta0.verify(list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // original.first() > target.size()
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, (-1405));
      AddDelta addDelta0 = new AddDelta(1, chunk0);
      List<Object> list0 = chunk0.chunk();
      addDelta0.verify(list0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1668), 2072);
      AddDelta addDelta0 = new AddDelta((-1668), chunk0);
      // Undeclared exception!
      try { 
        addDelta0.accept((RevisionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, (-1405));
      AddDelta addDelta0 = new AddDelta(1, chunk0);
      List<Object> list0 = chunk0.chunk();
      // Undeclared exception!
      try { 
        addDelta0.applyTo(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
}
