/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:04:13 GMT 2022
 */

package org.apache.wicket.util.license;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.apache.wicket.util.license.XmlLicenseHeaderHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlLicenseHeaderHandler_ESTest extends XmlLicenseHeaderHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler(linkedList0);
      String string0 = xmlLicenseHeaderHandler0.getLicenseHeaderFilename();
      assertEquals("xmlLicense.txt", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      File file0 = MockFile.createTempFile("+<0)QF:Lxdb;{(f", "+<0)QF:Lxdb;{(f");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        xmlLicenseHeaderHandler0.checkLicenseHeader(file0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Simulated IOException
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      // Undeclared exception!
      try { 
        xmlLicenseHeaderHandler0.checkLicenseHeader((File) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull0<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull");
      File file0 = MockFile.createTempFile("<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull", "<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull");
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      // Undeclared exception!
      try { 
        xmlLicenseHeaderHandler0.addLicenseHeader(file0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // No match found
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull0<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull");
      File file0 = MockFile.createTempFile("<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull", "<?xmlnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull");
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      boolean boolean0 = xmlLicenseHeaderHandler0.checkLicenseHeader(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      File file0 = MockFile.createTempFile("+<0)&F:Lxdb;{(f", "+<0)&F:Lxdb;{(f");
      boolean boolean0 = xmlLicenseHeaderHandler0.checkLicenseHeader(file0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      List<String> list0 = xmlLicenseHeaderHandler0.getSuffixes();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XmlLicenseHeaderHandler xmlLicenseHeaderHandler0 = new XmlLicenseHeaderHandler((List<String>) null);
      File file0 = MockFile.createTempFile("+<0)&F:Lxdb;{(f", "+<0)&F:Lxdb;{(f");
      xmlLicenseHeaderHandler0.addLicenseHeader(file0);
      boolean boolean0 = xmlLicenseHeaderHandler0.checkLicenseHeader(file0);
      assertEquals(801L, file0.length());
      assertTrue(boolean0);
  }
}
