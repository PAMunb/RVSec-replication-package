/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:06:23 GMT 2022
 */

package org.apache.wicket.util.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.wicket.util.diff.AddDelta;
import org.apache.wicket.util.diff.ChangeDelta;
import org.apache.wicket.util.diff.Chunk;
import org.apache.wicket.util.diff.DeleteDelta;
import org.apache.wicket.util.diff.Delta;
import org.apache.wicket.util.diff.Revision;
import org.apache.wicket.util.diff.RevisionVisitor;
import org.apache.wicket.util.diff.ToString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Revision_ESTest extends Revision_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Revision revision0 = new Revision();
      Object[] objectArray0 = new Object[9];
      Chunk chunk0 = new Chunk((-1175), (-1));
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk0);
      revision0.insertDelta(changeDelta0);
      objectArray0[0] = (Object) revision0;
      String string0 = ToString.arrayToString(objectArray0);
      assertEquals("-1174c-1174\n---\n\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Revision revision0 = new Revision();
      Object[] objectArray0 = new Object[1];
      Chunk chunk0 = new Chunk(objectArray0, (-276), 0, 0);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk0);
      revision0.insertDelta(changeDelta0);
      Object[] objectArray1 = revision0.patch(objectArray0);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Revision revision0 = new Revision();
      Chunk chunk0 = new Chunk(10, 435);
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      revision0.addDelta(deleteDelta0);
      String string0 = revision0.toRCSString("");
      assertEquals("d11 435", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Revision revision0 = new Revision();
      Chunk chunk0 = new Chunk(0, 0);
      Delta delta0 = Delta.newDelta(chunk0, chunk0);
      revision0.insertDelta(delta0);
      String string0 = revision0.toRCSString();
      assertEquals("d1 0\na0 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Revision revision0 = new Revision();
      AddDelta addDelta0 = new AddDelta();
      revision0.insertDelta(addDelta0);
      int int0 = revision0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Revision revision0 = new Revision();
      AddDelta addDelta0 = new AddDelta();
      revision0.insertDelta(addDelta0);
      Delta delta0 = revision0.getDelta(0);
      assertSame(delta0, addDelta0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Revision revision0 = new Revision();
      DeleteDelta deleteDelta0 = new DeleteDelta();
      revision0.insertDelta(deleteDelta0);
      // Undeclared exception!
      try { 
        revision0.toRCSString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.DeleteDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Revision revision0 = new Revision();
      revision0.deltas_ = null;
      // Undeclared exception!
      try { 
        revision0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Revision", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Revision revision0 = new Revision();
      AddDelta addDelta0 = new AddDelta(0, (Chunk) null);
      revision0.insertDelta(addDelta0);
      Object[] objectArray0 = new Object[0];
      try { 
        revision0.patch(objectArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Delta", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Revision revision0 = new Revision();
      revision0.deltas_ = null;
      AddDelta addDelta0 = new AddDelta();
      // Undeclared exception!
      try { 
        revision0.insertDelta(addDelta0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Revision", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Revision revision0 = new Revision();
      revision0.deltas_ = null;
      // Undeclared exception!
      try { 
        revision0.getDelta(289);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Revision", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Revision revision0 = new Revision();
      LinkedList<Delta> linkedList0 = new LinkedList<Delta>();
      List<Delta> list0 = Chunk.slice((List<Delta>) linkedList0, (-1453), (-1592));
      revision0.deltas_ = list0;
      // Undeclared exception!
      try { 
        revision0.getDelta((-562));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Revision revision0 = new Revision();
      // Undeclared exception!
      try { 
        revision0.accept((RevisionVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Revision", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Revision revision0 = new Revision();
      StringBuilder stringBuilder0 = new StringBuilder();
      revision0.toRCSString(stringBuilder0, "7OQ-o");
      assertEquals(0, revision0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Revision revision0 = new Revision();
      AddDelta addDelta0 = new AddDelta();
      revision0.addDelta(addDelta0);
      StringBuilder stringBuilder0 = new StringBuilder("1[hE%GEkhDB#)-");
      // Undeclared exception!
      try { 
        revision0.toRCSString(stringBuilder0, "1[hE%GEkhDB#)-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Revision revision0 = new Revision();
      revision0.applyTo((List<Object>) null);
      assertEquals(0, revision0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Revision revision0 = new Revision();
      Chunk chunk0 = new Chunk((-1), (-1));
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk0);
      revision0.insertDelta(changeDelta0);
      // Undeclared exception!
      try { 
        revision0.applyTo((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Revision revision0 = new Revision();
      String string0 = revision0.toRCSString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Revision revision0 = new Revision();
      RevisionVisitor revisionVisitor0 = mock(RevisionVisitor.class, new ViolatedAssumptionAnswer());
      Chunk chunk0 = new Chunk(1, 1);
      DeleteDelta deleteDelta0 = new DeleteDelta(chunk0);
      revision0.insertDelta(deleteDelta0);
      revision0.accept(revisionVisitor0);
      assertEquals(1, revision0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Revision revision0 = new Revision();
      AddDelta addDelta0 = new AddDelta();
      revision0.addDelta(addDelta0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        revision0.toString(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Revision revision0 = new Revision();
      revision0.toString((StringBuilder) null);
      assertEquals(0, revision0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Revision revision0 = new Revision();
      DeleteDelta deleteDelta0 = new DeleteDelta();
      revision0.addDelta(deleteDelta0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        revision0.patch(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.DeleteDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Revision revision0 = new Revision();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = revision0.patch(objectArray0);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Revision revision0 = new Revision();
      // Undeclared exception!
      try { 
        revision0.insertDelta((Delta) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new delta is null
         //
         verifyException("org.apache.wicket.util.diff.Revision", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Revision revision0 = new Revision();
      AddDelta addDelta0 = new AddDelta();
      revision0.insertDelta(addDelta0);
      // Undeclared exception!
      try { 
        revision0.toRCSString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.AddDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Revision revision0 = new Revision();
      // Undeclared exception!
      try { 
        revision0.addDelta((Delta) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new delta is null
         //
         verifyException("org.apache.wicket.util.diff.Revision", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Revision revision0 = new Revision();
      String string0 = revision0.toRCSString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Revision revision0 = new Revision();
      revision0.toRCSString((StringBuilder) null);
      assertEquals(0, revision0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Revision revision0 = new Revision();
      int int0 = revision0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Revision revision0 = new Revision();
      // Undeclared exception!
      try { 
        revision0.getDelta(289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 289, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
