/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:50:54 GMT 2022
 */

package org.apache.wicket.util.value;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.chrono.ThaiBuddhistEra;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.apache.commons.io.IOCase;
import org.apache.wicket.util.parse.metapattern.MetaPattern;
import org.apache.wicket.util.string.StringValue;
import org.apache.wicket.util.time.Duration;
import org.apache.wicket.util.time.Time;
import org.apache.wicket.util.value.AttributeMap;
import org.apache.wicket.util.value.IValueMap;
import org.apache.wicket.util.value.ValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.slf4j.event.Level;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValueMap_ESTest extends ValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("/%", "/%");
      valueMap0.add("/%", (String) null);
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("#S9|[");
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      valueMap0.putAll(hashMap0);
      assertTrue(valueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.clear();
      assertTrue(valueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      Object object0 = valueMap0.remove((Object) "valueOf");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("XqIm-)]$&;=AS5C0@x", "");
      valueMap0.add("XqIm-)]$&;=AS5C0@x", "bet");
      valueMap0.remove((Object) "XqIm-)]$&;=AS5C0@x");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.putIfAbsent("The array of suffixes must not be null", valueMap0);
      Object object0 = valueMap0.put("The array of suffixes must not be null", (Object) "The array of suffixes must not be null");
      assertSame(valueMap0, object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.putIfAbsent("The array of suffixes must not be null", valueMap0);
      IValueMap iValueMap0 = valueMap0.makeImmutable();
      assertTrue(iValueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      boolean boolean0 = valueMap0.isImmutable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2);
      hashMap0.put("Map is immutable", "In");
      ValueMap valueMap0 = new ValueMap(hashMap0);
      StringValue stringValue0 = valueMap0.getStringValue("Map is immutable");
      assertFalse(stringValue0.isNull());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      String string0 = valueMap0.getString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("4OG,NnPct.$\"hFm", "4OG,NnPct.$\"hFm");
      valueMap0.getLong("4OG,NnPct.$\"hFm", 0L);
      assertEquals(0, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("4OG,NnPct.$\"hFm", "4OG,NnPct.$\"hFm");
      long long0 = valueMap0.getLong("&amp;", 1551L);
      assertTrue(valueMap0.isEmpty());
      assertEquals(1551L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      valueMap0.putIfAbsent("", (Object) null);
      String string0 = valueMap0.getKey("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      int int0 = valueMap0.getInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      int int0 = valueMap0.getInt("2c=\".", (-200));
      assertEquals((-200), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("4OG,NnPct.$\"hFm", "4OG,NnPct.$\"hFm");
      double double0 = valueMap0.getDouble("", 60.0);
      assertEquals(60.0, double0, 0.01);
      assertEquals(0, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      double double0 = valueMap0.getDouble(":T(@+KkU0JX5-", (-799.7309764));
      assertEquals((-799.7309764), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("", "");
      CharSequence charSequence0 = valueMap0.getCharSequence("");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      Time time0 = valueMap0.getAsTime("OXV/Wr(!qX50#", (Time) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2);
      ValueMap valueMap0 = new ValueMap(hashMap0);
      Time time0 = Time.START_OF_UNIX_TIME;
      Time time1 = valueMap0.getAsTime("The size must be non-negative", time0);
      assertSame(time0, time1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      ValueMap valueMap0 = new ValueMap(hashMap0);
      long long0 = valueMap0.getAsLong("Fri", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      long long0 = valueMap0.getAsLong("null", (-1207L));
      assertEquals((-1207L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      int int0 = valueMap0.getAsInteger("UU2&", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2);
      ValueMap valueMap0 = new ValueMap(hashMap0);
      int int0 = valueMap0.getAsInteger("0X,;`", (-2499));
      assertEquals((-2499), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5mE.=");
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      valueMap0.getAsEnum("F=:,MAN5mE.=", class0, thaiBuddhistEra0);
      assertEquals(2, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      Duration duration0 = Duration.seconds(0.0);
      Duration duration1 = valueMap0.getAsDuration("8LE}/+_M&c[ A5a/;", duration0);
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      ValueMap valueMap0 = new ValueMap(hashMap0);
      Duration duration0 = Duration.valueOf((-402L));
      Duration duration1 = valueMap0.getAsDuration((String) null, duration0);
      assertEquals((-0.0067), duration1.minutes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap(" ");
      double double0 = valueMap0.getAsDouble("p", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(valueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      double double0 = valueMap0.getAsDouble("ACT", 114.824809642662);
      assertEquals(114.824809642662, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      valueMap0.add("=:,MAN5mE.", (String) null);
      Boolean boolean0 = valueMap0.getAsBoolean("=:,MAN5mE.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      // Undeclared exception!
      try { 
        valueMap0.putAll((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5E=");
      // Undeclared exception!
      try { 
        valueMap0.EMPTY_MAP.put("F=:,MAN5E=", (Object) "F=:,MAN5E=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map is immutable
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("((n0vp[=QoK^", "((n0vp[=QoK^");
      valueMap0.add("((n0vp[=QoK^", "((n0vp[=QoK^");
      try { 
        valueMap0.getTime("((n0vp[=QoK^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to convert 'java.lang.String@0000000002' to a Time value
         //
         verifyException("org.apache.wicket.util.string.StringValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      // Undeclared exception!
      try { 
        valueMap0.getDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("/%", "/%");
      try { 
        valueMap0.getBoolean("/%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Boolean value \"java.lang.String@0000000002\" not recognized
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      valueMap0.add((String) null, (String) null);
      // Undeclared exception!
      try { 
        valueMap0.getAsTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("F=D,-", "F=D,-");
      valueMap0.replace("F=D,-", (Object) null);
      // Undeclared exception!
      try { 
        valueMap0.getAsDuration("F=D,-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      // Undeclared exception!
      try { 
        valueMap0.add("tI&g+tYh", "tI&g+tYh");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map is immutable
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ValueMap valueMap0 = null;
      try {
        valueMap0 = new ValueMap((Map<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.DOUBLE_QUOTED_STRING;
      ValueMap valueMap0 = null;
      try {
        valueMap0 = new ValueMap((String) null, (String) null, metaPattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ValueMap valueMap0 = null;
      try {
        valueMap0 = new ValueMap("=pu Cd!W=h=S", "=pu Cd!W=h=S");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ValueMap valueMap0 = null;
      try {
        valueMap0 = new ValueMap((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ValueMap valueMap0 = null;
      try {
        valueMap0 = new ValueMap((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      Time time0 = Time.millis((-3094L));
      Time time1 = valueMap0.getAsTime("ast", time0);
      assertSame(time0, time1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "XqIm-)]$&;=?R5C0@x");
      ValueMap valueMap0 = new ValueMap(hashMap0);
      Time time0 = Time.now();
      Time time1 = valueMap0.getAsTime((String) null, time0);
      assertEquals(1392409281320L, time1.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5mE.=", "F=:,MAN5mE.=");
      valueMap0.getAsDuration(".1(=]", (Duration) null);
      assertFalse(valueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2);
      hashMap0.put("Map is immutable", "In");
      ValueMap valueMap0 = new ValueMap(hashMap0);
      Duration duration0 = Duration.valueOf(84L);
      Duration duration1 = valueMap0.getAsDuration("Map is immutable", duration0);
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("f", "f");
      Object object0 = valueMap0.add("f", "f");
      String string0 = valueMap0.getString("f");
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("f", "f");
      String string0 = valueMap0.getString("f");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("#S9|[");
      valueMap0.getString("#S9|[");
      assertEquals(0, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5mE.=", "F=:,MAN5mE.=");
      int int0 = valueMap0.getInt("F=:,MAN5mE.=", 8);
      assertEquals(8, int0);
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("T2ODo:zi");
      try { 
        valueMap0.getInt("T2ODo:zi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to convert 'null' to an int value
         //
         verifyException("org.apache.wicket.util.string.StringValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(2);
      ValueMap valueMap0 = new ValueMap(hashMap0);
      StringValue stringValue0 = valueMap0.getStringValue("Map is immutable");
      assertNull(stringValue0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("f");
      try { 
        valueMap0.getLong("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to convert 'null' to a long value
         //
         verifyException("org.apache.wicket.util.string.StringValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      long long0 = valueMap0.getLong("/%", (-1106L));
      assertEquals((-1106L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      // Undeclared exception!
      try { 
        valueMap0.getDuration(".-lG7C{rI3CUb-N',%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      double double0 = valueMap0.getDouble("org.apache.wicket.util.value.LongValue", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      boolean boolean0 = valueMap0.getBoolean("iet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("f", "f");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = valueMap0.getAsEnum("f", locale_FilteringMode0);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ValueMap valueMap0 = new ValueMap(map0);
      // Undeclared exception!
      try { 
        valueMap0.getAsEnum("]", (Class<Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // eClass value cannot be null
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("f=:,man5e=");
      // Undeclared exception!
      try { 
        valueMap0.getAsEnum("f=:,man5e=", (Level) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default value cannot be null
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("uj FgN$1|v@^i*|l");
      valueMap0.add("uj FgN$1|v@^i*|l", "uj FgN$1|v@^i*|l");
      valueMap0.getAsTime("uj FgN$1|v@^i*|l");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      Double double0 = valueMap0.getAsDouble("pst");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      String string0 = "u-io\\uTrYhO~";
      Long long0 = valueMap0.getAsLong(string0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      String string0 = "u-io\\uTrYhO~";
      boolean boolean0 = valueMap0.getAsBoolean(string0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      Boolean boolean0 = valueMap0.getAsBoolean("(9oJ84%0RFZ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap(" is not a time of day value");
      valueMap0.add(" is not a time of day value", " is not a time of day value");
      valueMap0.getAsBoolean(" is not a time of day value");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("F", "F");
      Object object0 = valueMap0.add("F", "F");
      String string0 = valueMap0.toString();
      assertFalse(string0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("/%");
      valueMap0.add("/%", "/%");
      valueMap0.add((String) null, (String) null);
      valueMap0.toString();
      assertEquals(2, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.AT_SIGN;
      ValueMap valueMap0 = new ValueMap("zNwqW@.CC4", "zNwqW@.CC4", metaPattern0);
      valueMap0.toString();
      assertFalse(valueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.AT_SIGN;
      ValueMap valueMap0 = new ValueMap("zNwqW@.CC4", "zNwqW@.CC4", metaPattern0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      valueMap0.computeIfAbsent("pst", unaryOperator0);
      String string0 = valueMap0.getKey("pst");
      assertNotNull(string0);
      assertFalse(valueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5E=");
      String string0 = valueMap0.getKey("F=:,MAN5E=");
      assertEquals(2, valueMap0.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      valueMap0.add((String) null, "+{]/$?4s");
      valueMap0.add((String) null, (String) null);
      valueMap0.add((String) null, (String) null);
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("", "");
      valueMap0.add("", "");
      valueMap0.add("", "the wildcard list must not be null");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap(" is not a time of day value", " is not a time of day value");
      valueMap0.add(" is not a time of day value", " is not a time of day value");
      valueMap0.add(" is not a time of day value", " is not a time of day value");
      valueMap0.getStringArray(" is not a time of day value");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5E=");
      valueMap0.getStringArray("F=:,MAN5E=");
      assertEquals(2, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("O,k<fNP?;");
      valueMap0.add("O,k<fNP?;", "O,k<fNP?;");
      valueMap0.getStringArray("O,k<fNP?;");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("art");
      valueMap0.putIfAbsent("art", valueMap0);
      valueMap0.getCharSequence("art");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add(",I", ",I");
      Object object0 = valueMap0.add(",I", ",I");
      CharSequence charSequence0 = valueMap0.getCharSequence(",I");
      assertFalse(charSequence0.equals((Object)object0));
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      CharSequence charSequence0 = valueMap0.getCharSequence("the wildcard list must not be null");
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap(" is not a time of day value");
      valueMap0.add(" is not a time of day value", " is not a time of day value");
      valueMap0.add(" is not a time of day value", " is not a time of day value");
      try { 
        valueMap0.getDouble(" is not a time of day value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to convert 'java.lang.String@0000000003' to a double value
         //
         verifyException("org.apache.wicket.util.string.StringValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap(" is not a time of day value");
      valueMap0.add(" is not a time of day value", " is not a time of day value");
      valueMap0.getString(" is not a time of day value", " is not a time of day value");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("#S9|[");
      String string0 = valueMap0.EMPTY_MAP.getString("valueOf", "");
      assertNotNull(string0);
      assertEquals(0, valueMap0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.LEFT_CURLY;
      ValueMap valueMap0 = null;
      try {
        valueMap0 = new ValueMap("Gm5;|gXNR@:nG'72_", "F=:,MAN5E=", metaPattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid key value list: 'Gm5;|gXNR@:nG'72_'
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("F=:,MAN5mE.=", "");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("hVeUv=V*,/y");
      valueMap0.getAsInteger("hVeUv=V*,/y");
      assertFalse(valueMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.AT_SIGN;
      ValueMap valueMap0 = new ValueMap("zNwqW@.CC4", "zNwqW@.CC4", metaPattern0);
      assertFalse(valueMap0.isImmutable());
      
      valueMap0.makeImmutable();
      assertTrue(valueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      valueMap0.add("F=D,-", "F=D,-");
      Duration duration0 = valueMap0.getAsDuration("F=D,-");
      assertNull(duration0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("f=:,man5e=");
      Class<Level> class0 = Level.class;
      valueMap0.getAsEnum("C-$R<y$l~wuz8s[", class0);
      assertEquals(2, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      assertFalse(valueMap0.isImmutable());
      
      valueMap0.add(",I", ",I");
      boolean boolean0 = valueMap0.getAsBoolean(",I", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      boolean boolean0 = valueMap0.isImmutable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("((n0vp[=QoK^", "((n0vp[=QoK^");
      // Undeclared exception!
      try { 
        valueMap0.getTime("((n0vp[=QoK^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("O,k<fNP?;");
      valueMap0.add("O,k<fNP?;", "O,k<fNP?;");
      valueMap0.getAsDouble("O,k<fNP?;");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("/%", "/%");
      valueMap0.add("/%", "/%");
      valueMap0.getAsLong("/%");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MetaPattern metaPattern0 = MetaPattern.AT_SIGN;
      ValueMap valueMap0 = new ValueMap("zNwqW@.CC4", "zNwqW@.CC4", metaPattern0);
      Class<IOCase> class0 = IOCase.class;
      valueMap0.getAsEnum("Could not invoke method valueOf(String s) on ", class0, (IOCase) null);
      assertFalse(valueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("An error occurred while converting '%s' to a %s: %s");
      valueMap0.put("An error occurred while converting '%s' to a %s: %s", (Object) "An error occurred while converting '%s' to a %s: %s");
      valueMap0.getAsInteger("An error occurred while converting '%s' to a %s: %s");
      assertEquals(1, valueMap0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      // Undeclared exception!
      try { 
        valueMap0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map is immutable
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap("-", "-");
      // Undeclared exception!
      try { 
        valueMap0.EMPTY_MAP.remove((Object) "-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map is immutable
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      ValueMap valueMap0 = new ValueMap(hashMap0);
      double double0 = valueMap0.getAsDouble("H4ukuFO-RKZNh", (-2145.12831287));
      assertEquals((-2145.12831287), double0, 0.01);
      assertFalse(valueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ValueMap valueMap0 = ValueMap.EMPTY_MAP;
      HashMap<String, AttributeMap> hashMap0 = new HashMap<String, AttributeMap>();
      // Undeclared exception!
      try { 
        valueMap0.EMPTY_MAP.putAll(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Map is immutable
         //
         verifyException("org.apache.wicket.util.value.ValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap();
      long long0 = valueMap0.getAsLong("=,-", 698L);
      assertEquals(698L, long0);
      assertFalse(valueMap0.isImmutable());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ValueMap valueMap0 = new ValueMap(" is not a time of day value");
      int int0 = valueMap0.getAsInteger(" is not a time of day value", 1);
      assertEquals(1, int0);
      assertFalse(valueMap0.isImmutable());
      assertEquals(0, valueMap0.size());
  }
}
