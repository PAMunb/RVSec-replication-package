/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:08:47 GMT 2022
 */

package org.apache.wicket.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.stream.Stream;
import org.apache.wicket.util.collections.ConcurrentHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConcurrentHashSet_ESTest extends ConcurrentHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      concurrentHashSet1.add(concurrentHashSet0);
      int int0 = concurrentHashSet1.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Iterator<Object> iterator0 = concurrentHashSet0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.add(concurrentHashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = concurrentHashSet1.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.add(concurrentHashSet0);
      assertTrue(boolean0);
      
      Object object0 = concurrentHashSet0.clone();
      boolean boolean1 = concurrentHashSet1.contains(object0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = null;
      try {
        concurrentHashSet0 = new ConcurrentHashSet<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.ConcurrentHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = null;
      try {
        concurrentHashSet0 = new ConcurrentHashSet<Object>((-3908), (-3908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = null;
      try {
        concurrentHashSet0 = new ConcurrentHashSet<Object>((-1876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      int int0 = concurrentHashSet1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.add(concurrentHashSet0);
      boolean boolean1 = concurrentHashSet1.remove(concurrentHashSet0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      Stream<Object> stream0 = concurrentHashSet1.stream();
      boolean boolean0 = concurrentHashSet1.remove(stream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashSet<ConcurrentHashSet<Integer>> concurrentHashSet0 = new ConcurrentHashSet<ConcurrentHashSet<Integer>>();
      ConcurrentHashSet<Integer> concurrentHashSet1 = new ConcurrentHashSet<Integer>(1196, 1196);
      boolean boolean0 = concurrentHashSet0.add(concurrentHashSet1);
      assertTrue(boolean0);
      
      ConcurrentHashSet<ConcurrentHashSet<Object>> concurrentHashSet2 = new ConcurrentHashSet<ConcurrentHashSet<Object>>(1196);
      ConcurrentHashSet<Object> concurrentHashSet3 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      boolean boolean1 = concurrentHashSet3.add(concurrentHashSet2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      concurrentHashSet1.clear();
      assertTrue(concurrentHashSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      Object object0 = concurrentHashSet0.clone();
      boolean boolean0 = concurrentHashSet1.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>(0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Object object0 = concurrentHashSet0.clone();
      concurrentHashSet0.add(object0);
      // Undeclared exception!
      try { 
        concurrentHashSet0.clone();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
