/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:58:28 GMT 2022
 */

package org.apache.wicket.util.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.apache.wicket.util.encoding.UrlDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UrlDecoder_ESTest extends UrlDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlDecoder0.decode("YZ1'e%21$$>z>Ee", charset0);
      assertEquals("YZ1'e!$$>z>Ee", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlDecoder0.PATH_INSTANCE.decode((String) null, charset0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlDecoder0.PATH_INSTANCE.decode("n%AX!", charset0);
      assertEquals("nAX!", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      String string0 = urlDecoder0.decode((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.QUERY_INSTANCE;
      // Undeclared exception!
      try { 
        urlDecoder0.decode((String) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.encoding.UrlDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.QUERY_INSTANCE;
      // Undeclared exception!
      try { 
        urlDecoder0.decode("&nbsp;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.encoding.UrlDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      String string0 = urlDecoder0.decode("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.QUERY_INSTANCE;
      // Undeclared exception!
      try { 
        urlDecoder0.decode("A1(XMs%1b", "A1(XMs%1b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: A1(XMs%1b
         //
         verifyException("org.apache.wicket.util.encoding.UrlDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      String string0 = urlDecoder0.decode("^L(CL%e", "^L(CL%e");
      assertEquals("^L(CLe", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      String string0 = urlDecoder0.decode("`w)Br^t+jmvCY", "`w)Br^t+jmvCY");
      assertEquals("`w)Br^t+jmvCY", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      String string0 = urlDecoder0.decode("Illegal hex characters in escape (%) pattern in '{}'. The escape character (%) will be ignored. NumbeXFormatException: {} ", "Illegal hex characters in escape (%) pattern in '{}'. The escape character (%) will be ignored. NumbeXFormatException: {} ");
      assertEquals("Illegal hex characters in escape () pattern in '{}'. The escape character () will be ignored. NumbeXFormatException: {} ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      // Undeclared exception!
      try { 
        urlDecoder0.decode("org.apache.wicket.util.encoding.UrlDecoder", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: URLDecoder: empty string enc parameter
         //
         verifyException("org.apache.wicket.util.encoding.UrlDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.QUERY_INSTANCE;
      // Undeclared exception!
      try { 
        urlDecoder0.decode("+GWdEG%Fe?{-DJy", "+GWdEG%Fe?{-DJy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: +GWdEG%Fe?{-DJy
         //
         verifyException("org.apache.wicket.util.encoding.UrlDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UrlDecoder urlDecoder0 = UrlDecoder.PATH_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlDecoder0.decode("", charset0);
      assertEquals("", string0);
  }
}
