/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:55:36 GMT 2022
 */

package org.apache.wicket.util.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.string.AppendingStringBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AppendingStringBuffer_ESTest extends AppendingStringBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("^XLGtkS16^");
      AppendingStringBuffer appendingStringBuffer1 = new AppendingStringBuffer("^XLGtkS16^");
      assertTrue(appendingStringBuffer1.equals((Object)appendingStringBuffer0));
      
      appendingStringBuffer1.setCharAt(0, 'r');
      boolean boolean0 = appendingStringBuffer1.equals(appendingStringBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      AppendingStringBuffer appendingStringBuffer1 = new AppendingStringBuffer();
      assertTrue(appendingStringBuffer1.equals((Object)appendingStringBuffer0));
      
      AppendingStringBuffer appendingStringBuffer2 = appendingStringBuffer1.append('f');
      boolean boolean0 = appendingStringBuffer2.equals(appendingStringBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 'k');
      appendingStringBuffer0.insert(0, stringBuilder1);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(1, "NzoA[\"{L&Zf*X#G");
      boolean boolean0 = appendingStringBuffer1.startsWith((CharSequence) stringBuilder0, 1);
      assertEquals(16, appendingStringBuffer0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(false);
      appendingStringBuffer0.append("srcBegin > srcEnd");
      int int0 = appendingStringBuffer1.lastIndexOf("SxHB*6U|yNeLf<!{E", 2236);
      assertEquals(34, appendingStringBuffer1.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(4);
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuffer0);
      int int0 = appendingStringBuffer0.lastIndexOf("hJOm)X?P_S", 4);
      assertEquals((-1), int0);
      assertEquals(34, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[10];
      int int0 = AppendingStringBuffer.lastIndexOf(charArray0, 4, (-1), charArray0, 4, (-1), 479);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("G]ese}%a)e\",WNRs");
      int int0 = appendingStringBuffer0.indexOf("G]ese}%a)e\",WNRs");
      assertEquals(0, int0);
      assertEquals(32, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = AppendingStringBuffer.indexOf(charArray0, 0, 4, charArray0, 0, (-334), (-1246));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = AppendingStringBuffer.indexOf(charArray0, (-600), (-1199), charArray0, (-600), (-1329), 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(77, 'f');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append(false);
      char[] charArray0 = new char[11];
      appendingStringBuffer0.insert(4, charArray0);
      assertEquals(16, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((-1275.7084F));
      StringBuffer stringBuffer0 = new StringBuffer(4);
      appendingStringBuffer1.insert(4, stringBuffer0);
      assertEquals(10, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append('f');
      StringBuilder stringBuilder0 = new StringBuilder("t&5*%Q^=KXk;T");
      appendingStringBuffer1.insert(1, (Object) stringBuilder0);
      assertEquals(14, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.append((float) 4);
      appendingStringBuffer0.replace(1, 4, "");
      assertEquals(1, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 4);
      appendingStringBuffer1.deleteCharAt(1);
      assertEquals(2, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.deleteCharAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.append(false);
      appendingStringBuffer0.append(false);
      assertEquals(10, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.append((float) 4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 0);
      appendingStringBuffer1.append(true);
      assertEquals(10, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.setCharAt(1, '1');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 4);
      AppendingStringBuffer appendingStringBuffer2 = appendingStringBuffer1.insert(1, 1L);
      char[] charArray0 = new char[4];
      appendingStringBuffer2.getChars(1, 4, charArray0, 1);
      assertEquals(4, appendingStringBuffer1.length());
      assertEquals(4, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      char[] charArray0 = new char[8];
      appendingStringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.getChars(13, 1, charArray0, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // srcBegin > srcEnd
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.charAt(4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append((-1275.7084F));
      appendingStringBuffer0.setLength(4);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.setLength(0);
      assertEquals(16, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      appendingStringBuffer0.append('f');
      appendingStringBuffer0.append(0.0F);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1308);
      appendingStringBuffer0.ensureCapacity(1308);
      assertEquals(1308, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = new char[8];
      appendingStringBuffer0.getChars(0, 0, charArray0, 0);
      assertEquals(0, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, '0');
      String string0 = appendingStringBuffer1.toString();
      assertEquals(1, appendingStringBuffer0.length());
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 3826);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, stringBuilder1);
      String string0 = appendingStringBuffer1.substring(0, 2);
      assertEquals(4, appendingStringBuffer0.length());
      assertEquals("38", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((-1245.6204F));
      String string0 = appendingStringBuffer1.substring(4);
      assertEquals(10, appendingStringBuffer0.length());
      assertEquals("5.6204", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.subSequence(0, 0);
      assertEquals(16, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.setLength(5478);
      appendingStringBuffer0.subSequence(1855, 5478);
      assertEquals(5478, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append('E');
      AppendingStringBuffer appendingStringBuffer2 = new AppendingStringBuffer();
      boolean boolean0 = appendingStringBuffer2.startsWith((CharSequence) appendingStringBuffer1);
      assertFalse(boolean0);
      assertEquals(4, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.replace(0, 0, "");
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.length();
      assertEquals(16, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append('j');
      appendingStringBuffer1.length();
      assertEquals(2, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = AppendingStringBuffer.lastIndexOf((char[]) null, 1, 4, charArray0, 117, 0, 117);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      int int0 = appendingStringBuffer0.lastIndexOf("", 0);
      assertEquals(0, int0);
      assertEquals(16, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.insert(0, 's');
      int int0 = appendingStringBuffer0.lastIndexOf("", 236);
      assertEquals(1, appendingStringBuffer0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(31);
      appendingStringBuffer0.setLength(31);
      int int0 = appendingStringBuffer0.lastIndexOf("");
      assertEquals(31, appendingStringBuffer0.length());
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      int int0 = appendingStringBuffer0.lastIndexOf("org.apache.wicket.util.string.AppendingStringBuffer");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = new char[9];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, charArray0, 0, 0);
      assertEquals(0, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = new char[0];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, charArray0);
      assertEquals(0, appendingStringBuffer1.capacity());
      assertEquals(0, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append('f');
      appendingStringBuffer1.insert(1, false);
      assertEquals(6, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, stringBuilder0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, stringBuffer0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, (Object) stringBuilder0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.insert(0, (float) 0);
      assertEquals(3, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.append((float) 4);
      int int0 = appendingStringBuffer0.indexOf("", 4456);
      assertEquals(3, appendingStringBuffer0.length());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1062);
      int int0 = appendingStringBuffer0.indexOf("z,~d:aYPl~G1dpY*", 1062);
      assertEquals((-1), int0);
      assertEquals(1062, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 4);
      appendingStringBuffer0.append("@0");
      int int0 = appendingStringBuffer1.indexOf("@0");
      assertEquals(5, appendingStringBuffer1.length());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = appendingStringBuffer0.getValue();
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append('f');
      AppendingStringBuffer appendingStringBuffer2 = new AppendingStringBuffer();
      boolean boolean0 = appendingStringBuffer2.endsWith(appendingStringBuffer1);
      assertEquals(1, appendingStringBuffer1.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.insert(0, '0');
      appendingStringBuffer0.deleteCharAt(0);
      assertEquals(2, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.delete(0, 0);
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.setLength(265);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(265, (-764));
      char char0 = appendingStringBuffer1.charAt(265);
      assertEquals(269, appendingStringBuffer0.length());
      assertEquals('-', char0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 4);
      AppendingStringBuffer appendingStringBuffer2 = appendingStringBuffer1.append(true);
      AppendingStringBuffer appendingStringBuffer3 = appendingStringBuffer0.insert(4, (Object) appendingStringBuffer2);
      char char0 = appendingStringBuffer3.charAt(4);
      assertEquals(14, appendingStringBuffer1.length());
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.append('G');
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 4);
      AppendingStringBuffer appendingStringBuffer2 = appendingStringBuffer1.append('I');
      char char0 = appendingStringBuffer2.charAt(4);
      assertEquals(5, appendingStringBuffer1.length());
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      int int0 = appendingStringBuffer0.capacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = new char[0];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(charArray0, 0, 0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      char[] charArray0 = new char[4];
      appendingStringBuffer0.append(charArray0, 1, 1);
      assertEquals(1, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = new char[0];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(charArray0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(appendingStringBuffer0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      StringBuilder stringBuilder0 = new StringBuilder(appendingStringBuffer0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(stringBuilder0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append("");
      assertEquals(0, appendingStringBuffer1.capacity());
      assertEquals(0, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.startsWith((CharSequence) null, 2608);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("<]r#L\"cE@+-p.w@fNH");
      // Undeclared exception!
      try { 
        appendingStringBuffer0.replace(0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        AppendingStringBuffer.lastIndexOf((char[]) null, 117, 117, (char[]) null, 117, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.lastIndexOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(0, (char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(0, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(83, (long) 83);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(19, (double) 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(103);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(103, '[');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.indexOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.getChars(0, 0, charArray0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = null;
      try {
        appendingStringBuffer0 = new AppendingStringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = null;
      try {
        appendingStringBuffer0 = new AppendingStringBuffer((-27));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      // Undeclared exception!
      try { 
        AppendingStringBuffer.indexOf(charArray0, 4, 1430, charArray0, 4, 114, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        AppendingStringBuffer.indexOf(charArray0, 4, 1430, charArray0, 4, 114, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = AppendingStringBuffer.indexOf(charArray0, 1, 40, charArray0, 1, 40, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = AppendingStringBuffer.indexOf(charArray0, 0, (int) 'C', charArray0, 0, 0, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = AppendingStringBuffer.indexOf(charArray0, (-1), 0, charArray0, 0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuffer stringBuffer0 = new StringBuffer(appendingStringBuffer0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(92, stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.insert(0, (StringBuilder) null);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(1155, stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(appendingStringBuffer0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-304), stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, "");
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(0, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(2716, "s_&+sEUl7Z2lV2N3@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1818);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-27), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 4);
      char[] charArray0 = new char[8];
      appendingStringBuffer1.insert(1, charArray0, 4, 4);
      assertEquals(10, appendingStringBuffer0.capacity());
      assertEquals(7, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[9];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, charArray0, 0, 0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(16, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-1180), charArray0, (-1180), 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.substring(1802, (-1413));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3215
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append('f');
      assertEquals(1, appendingStringBuffer0.length());
      
      appendingStringBuffer1.substring(1, 1);
      assertEquals(1, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.substring((-364), (-364));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -364
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(false);
      AppendingStringBuffer appendingStringBuffer2 = appendingStringBuffer0.append("srcBegin > srcEnd");
      appendingStringBuffer2.append(appendingStringBuffer1);
      assertEquals(44, appendingStringBuffer2.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(appendingStringBuffer0);
      assertEquals(16, appendingStringBuffer1.capacity());
      assertEquals(0, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuffer0);
      appendingStringBuffer0.append((Object) stringBuffer0);
      assertEquals(66, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((Object) stringBuilder0);
      assertEquals(0, appendingStringBuffer1.capacity());
      assertEquals(0, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(361);
      Object object0 = new Object();
      appendingStringBuffer0.append(object0);
      assertEquals(25, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      int int0 = appendingStringBuffer0.indexOf("", (-1404));
      assertEquals(0, int0);
      assertEquals(16, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.lastIndexOf((String) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.append((long) 0);
      assertEquals(1, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("9t:zS>zq=L iN");
      appendingStringBuffer0.hashCode();
      assertEquals(29, appendingStringBuffer0.capacity());
      assertEquals(13, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("9t:zS>zq=L iN");
      boolean boolean0 = appendingStringBuffer0.equals("9t:zS>zq=L iN");
      assertEquals(29, appendingStringBuffer0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuffer0);
      boolean boolean0 = appendingStringBuffer0.equals(stringBuffer0);
      assertEquals(34, appendingStringBuffer0.capacity());
      assertEquals(33, appendingStringBuffer0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      Object object0 = new Object();
      boolean boolean0 = appendingStringBuffer0.equals(object0);
      assertEquals(16, appendingStringBuffer0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuffer1);
      AppendingStringBuffer appendingStringBuffer1 = new AppendingStringBuffer(stringBuffer0);
      boolean boolean0 = appendingStringBuffer0.equals(appendingStringBuffer1);
      assertEquals(34, appendingStringBuffer1.capacity());
      assertFalse(boolean0);
      assertFalse(appendingStringBuffer1.equals((Object)appendingStringBuffer0));
      assertEquals(33, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("9t:zS>zq=L iN");
      AppendingStringBuffer appendingStringBuffer1 = new AppendingStringBuffer();
      boolean boolean0 = appendingStringBuffer1.equals(appendingStringBuffer0);
      assertFalse(boolean0);
      assertEquals(13, appendingStringBuffer0.length());
      assertEquals(29, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuffer0);
      AppendingStringBuffer appendingStringBuffer1 = new AppendingStringBuffer(stringBuffer0);
      boolean boolean0 = appendingStringBuffer0.equals(appendingStringBuffer1);
      assertTrue(boolean0);
      assertEquals(33, appendingStringBuffer1.length());
      assertEquals(34, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      boolean boolean0 = appendingStringBuffer0.equals(appendingStringBuffer0);
      assertTrue(boolean0);
      assertEquals(16, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 3826);
      appendingStringBuffer0.insert(0, stringBuilder1);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(1, "NzoA[\"{L&Zf*X#G");
      boolean boolean0 = appendingStringBuffer1.startsWith((CharSequence) stringBuilder1, 1);
      assertEquals(34, appendingStringBuffer0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      boolean boolean0 = appendingStringBuffer0.startsWith((CharSequence) appendingStringBuffer0, 15);
      assertEquals(0, appendingStringBuffer0.length());
      assertEquals(16, appendingStringBuffer0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      boolean boolean0 = appendingStringBuffer0.startsWith((CharSequence) appendingStringBuffer0, (-1));
      assertEquals(16, appendingStringBuffer0.capacity());
      assertFalse(boolean0);
      assertEquals(0, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[17];
      int int0 = AppendingStringBuffer.lastIndexOf(charArray0, 6, 6, charArray0, 6, 6, (int) '\u0000');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      int int0 = AppendingStringBuffer.lastIndexOf(charArray0, 1, 1, charArray0, 0, 1, 759);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[28];
      char[] charArray1 = new char[6];
      charArray1[0] = 'W';
      int int0 = AppendingStringBuffer.lastIndexOf(charArray1, (-1), 6, charArray0, 7, 6, 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[28];
      // Undeclared exception!
      try { 
        AppendingStringBuffer.lastIndexOf(charArray0, (-1), 6, charArray0, 7, 6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = AppendingStringBuffer.lastIndexOf(charArray0, (-40), (-40), charArray0, (-40), (-40), (-40));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("G]ese}%a)e\",WNRs");
      appendingStringBuffer0.insert(12, (-217));
      int int0 = appendingStringBuffer0.indexOf("G]ese}%a)e\",WNRs");
      assertEquals(20, appendingStringBuffer0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        AppendingStringBuffer.indexOf((char[]) null, 116, 116, (char[]) null, 116, (-6057), (-6057));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.insert(0, charArray0);
      assertEquals(16, appendingStringBuffer1.capacity());
      assertEquals(0, appendingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(845, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[17];
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.insert(0, charArray0);
      assertEquals(17, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-510), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("<]r#L\"cE@+-pw@lNH");
      StringBuffer stringBuffer0 = new StringBuffer(appendingStringBuffer0);
      appendingStringBuffer0.insert(0, stringBuffer0);
      assertEquals(34, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.insert(0, (StringBuffer) null);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-15), stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(592, (Object) stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.insert(0, (String) null);
      assertEquals(4, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-758), object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(956, (Object) stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("sqcBeginw> srcEnd");
      StringBuilder stringBuilder0 = new StringBuilder(appendingStringBuffer0);
      appendingStringBuffer0.insert(0, (Object) stringBuilder0);
      assertEquals(34, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.setLength(5371);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(1, charArray0, 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(0, (char[]) null, (-1276), (-1276));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1276
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(102, charArray0, 102, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.substring(1737);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1737
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.substring(1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.replace(0, 0, "zvz\"J]2,>KDjQw75O`");
      assertEquals(18, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.replace(31, 31, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.replace((-2042), (-2042), "TE!;ec");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2042
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.deleteCharAt(4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.deleteCharAt((-942));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.delete(3431, 3431);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.delete(0, 0);
      assertEquals(16, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.delete((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("Lc9");
      appendingStringBuffer0.delete(1, 611);
      assertEquals(1, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.append(false);
      appendingStringBuffer0.delete(0, 2);
      assertEquals(5, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append(true);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(false);
      boolean boolean0 = appendingStringBuffer0.startsWith((CharSequence) appendingStringBuffer1, 0);
      assertEquals(5, appendingStringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.append(charArray0, 1140, 1140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.append((char[]) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(charArray0);
      assertEquals(0, appendingStringBuffer1.length());
      assertEquals(16, appendingStringBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("srcBegin > .rcEnd");
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append(stringBuilder0);
      assertEquals(34, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append((StringBuilder) null);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append((float) 0);
      appendingStringBuffer1.append((Object) appendingStringBuffer0);
      assertEquals(8, appendingStringBuffer0.capacity());
      assertEquals(6, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append((AppendingStringBuffer) null);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append((String) null);
      assertEquals(4, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuffer0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(31, charArray0, 31, (-1313));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 31
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 1197.6626285997381);
      boolean boolean0 = appendingStringBuffer0.equals(stringBuilder1);
      assertEquals(16, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.setCharAt(0, '?');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("<]r#L\"cE@+-pw@fNH");
      appendingStringBuffer0.setCharAt(0, '#');
      boolean boolean0 = appendingStringBuffer0.equals("<]r#L\"cE@+-pw@fNH");
      assertEquals(33, appendingStringBuffer0.capacity());
      assertEquals(17, appendingStringBuffer0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.setCharAt((-123), 't');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -123
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.getChars(4, 4, charArray0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      // Undeclared exception!
      try { 
        appendingStringBuffer0.getChars(30, (-2936), (char[]) null, 30);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2936
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.getChars((-2347), (-2347), charArray0, (-2347));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2347
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.getChars(0, 0, (char[]) null, 5465);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.charAt((-1508));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1508
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.setLength((-1268));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1268
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.setLength(102);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(102, charArray0, 102, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 102
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.ensureCapacity(1994);
      assertEquals(1994, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.ensureCapacity((-18));
      assertEquals(16, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.subSequence((-2254), (-2254));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2254
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.insert(0, (double) 0);
      assertEquals(3, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      String string0 = appendingStringBuffer0.toString();
      assertEquals(16, appendingStringBuffer0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      boolean boolean0 = appendingStringBuffer0.startsWith((CharSequence) appendingStringBuffer0);
      assertEquals(4, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(4);
      appendingStringBuffer0.clear();
      assertEquals(4, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(1);
      boolean boolean0 = appendingStringBuffer0.endsWith(appendingStringBuffer0);
      assertEquals(0, appendingStringBuffer0.length());
      assertTrue(boolean0);
      assertEquals(1, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      int int0 = appendingStringBuffer0.capacity();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert((-1060), (-1060));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      appendingStringBuffer0.append((-2498));
      assertEquals(5, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      int int0 = appendingStringBuffer0.lastIndexOf("");
      assertEquals(16, appendingStringBuffer0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(3804, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      // Undeclared exception!
      try { 
        appendingStringBuffer0.insert(3342, (float) 3342);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.AppendingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer();
      char[] charArray0 = appendingStringBuffer0.getValue();
      assertEquals(16, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.append((double) 0);
      assertEquals(3, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer(0);
      appendingStringBuffer0.substring(0);
      assertEquals(0, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = new AppendingStringBuffer("^XLGbkB1{v^");
      boolean boolean0 = appendingStringBuffer0.equals("^XLGbkB1{6^");
      assertFalse(boolean0);
      assertEquals(11, appendingStringBuffer0.length());
      assertEquals(27, appendingStringBuffer0.capacity());
  }
}
