/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:16:33 GMT 2022
 */

package org.apache.wicket.util.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import org.apache.wicket.util.time.AbstractTime;
import org.apache.wicket.util.time.AbstractTimeValue;
import org.apache.wicket.util.time.Duration;
import org.apache.wicket.util.time.Time;
import org.apache.wicket.util.time.TimeOfDay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractTime_ESTest extends AbstractTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      String string0 = timeOfDay0.toString();
      assertEquals("12:0", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TimeOfDay.Meridian timeOfDay_Meridian0 = TimeOfDay.AM;
      TimeOfDay timeOfDay0 = TimeOfDay.time(0, 0, timeOfDay_Meridian0);
      Time time0 = timeOfDay0.next();
      boolean boolean0 = timeOfDay0.before(time0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Time time0 = Time.now();
      boolean boolean0 = time0.before(time0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = mock(Duration.class, new ViolatedAssumptionAnswer());
      doReturn(2662L).when(duration0).getMilliseconds();
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      Time time0 = Time.now();
      boolean boolean0 = timeOfDay0.after(time0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      // Undeclared exception!
      try { 
        timeOfDay0.toTimeString((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.AbstractTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      // Undeclared exception!
      try { 
        timeOfDay0.before((AbstractTimeValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      // Undeclared exception!
      try { 
        timeOfDay0.after((AbstractTimeValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      TimeOfDay timeOfDay0 = TimeOfDay.now((Calendar) mockGregorianCalendar0);
      String string0 = timeOfDay0.toTimeString((Calendar) mockGregorianCalendar0);
      assertEquals("8.21pm", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      Time time0 = timeOfDay0.next((Calendar) mockGregorianCalendar0);
      boolean boolean0 = time0.after(timeOfDay0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      String string0 = timeOfDay0.toTimeString();
      assertEquals("12.00pm", string0);
  }
}
