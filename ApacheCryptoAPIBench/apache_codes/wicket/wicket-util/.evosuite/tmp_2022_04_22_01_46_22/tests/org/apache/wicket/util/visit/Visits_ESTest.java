/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:01:07 GMT 2022
 */

package org.apache.wicket.util.visit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.time.format.FormatStyle;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import org.apache.commons.io.IOCase;
import org.apache.wicket.util.visit.ClassVisitFilter;
import org.apache.wicket.util.visit.IVisitFilter;
import org.apache.wicket.util.visit.IVisitor;
import org.apache.wicket.util.visit.Visits;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Visits_ESTest extends Visits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      hashSet0.add(sQLNonTransientConnectionException0);
      IVisitor<SQLNonTransientConnectionException, FormatStyle> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, FormatStyle>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visitChildren((Iterable<? super SQLNonTransientConnectionException>) hashSet0, iVisitor0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("r", "KO", 417, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/NEF9d@5yh?", "iE(`}N?))ic<FQV\"_", 417, sQLTransientException0);
      IVisitor<IOCase, IOCase> iVisitor0 = (IVisitor<IOCase, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      // Undeclared exception!
      try { 
        Visits.visitPostOrder((Object) sQLNonTransientConnectionException0, iVisitor0, (IVisitFilter) classVisitFilter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOCase iOCase0 = IOCase.SENSITIVE;
      IOCase iOCase1 = IOCase.SENSITIVE;
      IOCase iOCase2 = IOCase.SENSITIVE;
      IOCase iOCase3 = IOCase.SYSTEM;
      EnumSet<IOCase> enumSet0 = EnumSet.of(iOCase0, iOCase1, iOCase2, iOCase3);
      enumSet0.add(iOCase1);
      enumSet0.remove((Object) null);
      EnumSet<IOCase> enumSet1 = EnumSet.copyOf(enumSet0);
      IOCase iOCase4 = IOCase.SYSTEM;
      enumSet1.add(iOCase4);
      IVisitor<IOCase, IOCase> iVisitor0 = (IVisitor<IOCase, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visit((Iterable<? super IOCase>) enumSet1, iVisitor0);
      IVisitor<IOCase, SQLNonTransientConnectionException> iVisitor1 = (IVisitor<IOCase, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visitChildren((Iterable<? super IOCase>) enumSet1, iVisitor1, (IVisitFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.Visits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader.load(class0, classLoader0);
      IVisitFilter iVisitFilter0 = null;
      IVisitor<SQLNonTransientConnectionException, FormatStyle> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, FormatStyle>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visitPostOrder((Object) class0, iVisitor0, (IVisitFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.Visits", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVisitor<IOCase, ArrayDeque<SQLNonTransientConnectionException>> iVisitor0 = (IVisitor<IOCase, ArrayDeque<SQLNonTransientConnectionException>>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visit((Iterable<? super IOCase>) null, iVisitor0);
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor1 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visitChildren((Iterable<? super SQLNonTransientConnectionException>) null, iVisitor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.Visits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "clazz");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("clazz", "org.apache.wicket.util.visit.Visits$SingletonIterable", (-669), sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.wicket.util.visit.Visits$SingletonIterable", "clazz", sQLTransientConnectionException0);
      IVisitor<SQLNonTransientConnectionException, Object> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, Object>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visitPostOrder(sQLNonTransientConnectionException0, iVisitor0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<IOCase> treeSet0 = new TreeSet<IOCase>();
      IOCase iOCase0 = IOCase.INSENSITIVE;
      SortedSet<IOCase> sortedSet0 = treeSet0.subSet(iOCase0, iOCase0);
      PriorityQueue<IOCase> priorityQueue0 = new PriorityQueue<IOCase>(sortedSet0);
      IVisitor<IOCase, IOCase> iVisitor0 = (IVisitor<IOCase, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      IVisitFilter iVisitFilter0 = IVisitFilter.ANY;
      Visits.visit((Iterable<? super IOCase>) priorityQueue0, iVisitor0, iVisitFilter0);
      IVisitor<IOCase, SQLNonTransientConnectionException> iVisitor1 = null;
      IVisitFilter iVisitFilter1 = IVisitFilter.ANY;
      // Undeclared exception!
      try { 
        Visits.visitPostOrder((Object) null, (IVisitor<IOCase, SQLNonTransientConnectionException>) null, iVisitFilter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'visitor' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOCase iOCase0 = IOCase.INSENSITIVE;
      IVisitor<IOCase, ArrayDeque<SQLNonTransientConnectionException>> iVisitor0 = (IVisitor<IOCase, ArrayDeque<SQLNonTransientConnectionException>>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visitPostOrder(iOCase0, iVisitor0);
      Vector<ArrayDeque<IOCase>> vector0 = new Vector<ArrayDeque<IOCase>>();
      IVisitor<ArrayDeque<IOCase>, IOCase> iVisitor1 = (IVisitor<ArrayDeque<IOCase>, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      Visits.visit((Iterable<? super ArrayDeque<IOCase>>) vector0, iVisitor1, (IVisitFilter) classVisitFilter0);
      IVisitor<SQLNonTransientConnectionException, ArrayDeque<IOCase>> iVisitor2 = (IVisitor<SQLNonTransientConnectionException, ArrayDeque<IOCase>>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visit((Iterable<? super SQLNonTransientConnectionException>) null, iVisitor2, (IVisitFilter) classVisitFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.ClassVisitFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<IOCase> stack0 = new Stack<IOCase>();
      ArrayList<IOCase> arrayList0 = new ArrayList<IOCase>(stack0);
      IOCase iOCase0 = IOCase.SENSITIVE;
      arrayList0.add(iOCase0);
      IVisitor<IOCase, SQLNonTransientConnectionException> iVisitor0 = (IVisitor<IOCase, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      IVisitFilter iVisitFilter0 = IVisitFilter.ANY;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = Visits.visit((Iterable<? super IOCase>) arrayList0, iVisitor0, iVisitFilter0);
      assertNull(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IVisitor<Object, SQLNonTransientConnectionException> iVisitor0 = null;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      // Undeclared exception!
      try { 
        Visits.visitChildren((Iterable<? super Object>) linkedList0, (IVisitor<Object, SQLNonTransientConnectionException>) null, (IVisitFilter) classVisitFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'visitor' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IVisitor<SQLNonTransientConnectionException, Object> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, Object>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visitChildren((Iterable<? super SQLNonTransientConnectionException>) linkedHashSet0, iVisitor0);
      IVisitor<Object, Object> iVisitor1 = null;
      // Undeclared exception!
      try { 
        Visits.visitPostOrder((Object) linkedHashSet0, (IVisitor<Object, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'visitor' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IVisitor<ArrayDeque<IOCase>, IOCase> iVisitor0 = (IVisitor<ArrayDeque<IOCase>, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visitPostOrder((ArrayDeque<IOCase>) null, iVisitor0);
      SQLDataException sQLDataException0 = new SQLDataException("iTpJ`NVV", "iTpJ`NVV", (-778));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iTpJ`NVV", "iTpJ`NVV", sQLDataException0);
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor1 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      Visits.visitPostOrder((Object) sQLNonTransientConnectionException0, iVisitor1, (IVisitFilter) classVisitFilter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(0, 0);
      IVisitor<SQLNonTransientConnectionException, Object> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, Object>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visit((Iterable<? super SQLNonTransientConnectionException>) vector0, iVisitor0);
      IVisitor<Object, Object> iVisitor1 = (IVisitor<Object, Object>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visitPostOrder((Object) null, iVisitor1);
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor2 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      vector0.listIterator(0);
      Visits.visit((Iterable<? super SQLNonTransientConnectionException>) vector0, iVisitor2);
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor3 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visit((Iterable<? super SQLNonTransientConnectionException>) null, iVisitor3, (IVisitFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.Visits", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedList0);
      IVisitor<ArrayDeque<SQLNonTransientConnectionException>, SQLNonTransientConnectionException> iVisitor0 = (IVisitor<ArrayDeque<SQLNonTransientConnectionException>, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      Visits.visitChildren((Iterable<? super ArrayDeque<SQLNonTransientConnectionException>>) treeSet0, iVisitor0, (IVisitFilter) classVisitFilter0);
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor1 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visit((Iterable<? super SQLNonTransientConnectionException>) treeSet0, iVisitor1);
      IVisitor<SQLNonTransientConnectionException, Object> iVisitor2 = (IVisitor<SQLNonTransientConnectionException, Object>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Object object0 = Visits.visit((Iterable<? super SQLNonTransientConnectionException>) linkedList0, iVisitor2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      // Undeclared exception!
      try { 
        Visits.visitPostOrder(sQLNonTransientConnectionException0, (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'visitor' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      IVisitor<Object, Object> iVisitor0 = (IVisitor<Object, Object>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visitPostOrder((Object) null, iVisitor0);
      // Undeclared exception!
      try { 
        Visits.visitPostOrder((Object) null, (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null, (IVisitFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'visitor' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>(priorityQueue0);
      IVisitor<SQLNonTransientConnectionException, ArrayDeque<IOCase>> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, ArrayDeque<IOCase>>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visitChildren((Iterable<? super SQLNonTransientConnectionException>) priorityQueue1, iVisitor0);
      IVisitor<IOCase, IOCase> iVisitor1 = (IVisitor<IOCase, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Visits.visit((Iterable<? super IOCase>) null, iVisitor1, (IVisitFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.Visits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<IOCase> class0 = IOCase.class;
      EnumSet<IOCase> enumSet0 = EnumSet.noneOf(class0);
      IOCase iOCase0 = IOCase.SYSTEM;
      enumSet0.add(iOCase0);
      enumSet0.add(iOCase0);
      IVisitor<IOCase, IOCase> iVisitor0 = (IVisitor<IOCase, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Visits.visit((Iterable<? super IOCase>) enumSet0, iVisitor0);
      Vector<ArrayDeque<SQLNonTransientConnectionException>> vector0 = null;
      try {
        vector0 = new Vector<ArrayDeque<SQLNonTransientConnectionException>>((-629), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -629
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = null;
      vector0.add((SQLNonTransientConnectionException) null);
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      // Undeclared exception!
      try { 
        Visits.visit((Iterable<? super SQLNonTransientConnectionException>) vector0, iVisitor0, (IVisitFilter) classVisitFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.visit.ClassVisitFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashSet0);
      hashSet0.removeIf(predicate0);
      IVisitor<ArrayDeque<Object>, SQLNonTransientConnectionException> iVisitor0 = (IVisitor<ArrayDeque<Object>, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = Visits.visit((Iterable<? super ArrayDeque<Object>>) hashSet0, iVisitor0, (IVisitFilter) classVisitFilter0);
      assertNull(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      Class<FormatStyle> class0 = FormatStyle.class;
      ClassVisitFilter classVisitFilter0 = new ClassVisitFilter(class0);
      Visits.visitChildren((Iterable<? super SQLNonTransientConnectionException>) priorityQueue0, iVisitor0, (IVisitFilter) classVisitFilter0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        stack0.subList(457, 457);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 457
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLNonTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      IVisitor<SQLNonTransientConnectionException, IOCase> iVisitor0 = (IVisitor<SQLNonTransientConnectionException, IOCase>) mock(IVisitor.class, new ViolatedAssumptionAnswer());
      IVisitFilter iVisitFilter0 = IVisitFilter.ANY;
      Visits.visit((Iterable<? super SQLNonTransientConnectionException>) serviceLoader0, iVisitor0, iVisitFilter0);
  }
}
