/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:00:12 GMT 2022
 */

package org.apache.wicket.util.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.apache.wicket.util.time.Duration;
import org.apache.wicket.util.time.ITimeFrameSource;
import org.apache.wicket.util.time.Time;
import org.apache.wicket.util.time.TimeFrame;
import org.apache.wicket.util.time.TimeOfDay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeFrame_ESTest extends TimeFrame_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      Time time0 = Time.valueOf(timeOfDay0);
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf(time0);
      ITimeFrameSource iTimeFrameSource0 = TimeFrame.eachDay(timeOfDay1, timeOfDay0);
      assertNotNull(iTimeFrameSource0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Time time1 = timeFrame0.getStart();
      assertEquals(0L, time1.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Time time0 = Time.millis(600L);
      Duration duration0 = Duration.seconds(633.5991929);
      Time time1 = time0.subtract(duration0);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time1, duration0);
      Time time2 = timeFrame0.getStart();
      assertEquals((-632999L), time2.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Time time1 = timeFrame0.getEnd();
      assertSame(time0, time1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Time time0 = Time.millis((-395L));
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Time time1 = timeFrame0.getEnd();
      assertEquals((-395L), time1.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Time time0 = Time.millis(0L);
      Duration duration0 = Duration.MAXIMUM;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, duration0);
      Duration duration1 = timeFrame0.getDuration();
      assertEquals(1.0675199116730066E11, duration1.days(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeFrame.valueOf((Time) null, (Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Time time0 = Time.now();
      Time time1 = Time.START_OF_UNIX_TIME;
      // Undeclared exception!
      try { 
        TimeFrame.valueOf(time0, time1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start time of time frame 2014.02.14-8.21pm was after end time 1970.01.01-12.00am
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.ONE_HOUR;
      // Undeclared exception!
      try { 
        TimeFrame.valueOf((Time) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      // Undeclared exception!
      try { 
        timeFrame0.overlaps((TimeFrame) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeFrame.eachDay((TimeOfDay) null, (TimeOfDay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.now(calendar0);
      TimeOfDay timeOfDay1 = TimeOfDay.MIDNIGHT;
      // Undeclared exception!
      try { 
        TimeFrame.eachDay(timeOfDay0, timeOfDay1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start time of time frame 20:21:21 was after end time 0:0
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      // Undeclared exception!
      try { 
        timeFrame0.contains((Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Time time0 = Time.millis(0L);
      Duration duration0 = Duration.MAXIMUM;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, duration0);
      boolean boolean0 = timeFrame0.contains(time0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Time time0 = Time.now();
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      boolean boolean0 = timeFrame0.contains(time0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      Time time1 = Time.valueOf(timeOfDay0);
      boolean boolean0 = timeFrame0.contains(time1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      Time time0 = Time.valueOf(timeOfDay0);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf(time0);
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Time time1 = Time.valueOf((Calendar) mockGregorianCalendar0, timeOfDay1);
      boolean boolean0 = timeFrame0.contains(time1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Time time0 = Time.now();
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      TimeFrame timeFrame1 = TimeFrame.valueOf(time0, time0);
      boolean boolean0 = timeFrame0.equals(timeFrame1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Duration duration0 = Duration.seconds(633.5991929);
      Time time1 = time0.subtract(duration0);
      TimeFrame timeFrame1 = TimeFrame.valueOf(time1, time1);
      boolean boolean0 = timeFrame0.equals(timeFrame1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Duration duration0 = Duration.seconds(633.5991929);
      TimeFrame timeFrame1 = TimeFrame.valueOf(time0, duration0);
      boolean boolean0 = timeFrame0.equals(timeFrame1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Time time0 = Time.millis(0L);
      Duration duration0 = Duration.MAXIMUM;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, duration0);
      boolean boolean0 = timeFrame0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Time time0 = Time.START_OF_UNIX_TIME;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      boolean boolean0 = timeFrame0.equals(timeFrame0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Object object0 = new Object();
      boolean boolean0 = timeFrame0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Time time0 = Time.now();
      Time time1 = Time.millis((-2697L));
      TimeFrame timeFrame0 = TimeFrame.valueOf(time1, time0);
      Duration duration0 = Duration.ONE_MINUTE;
      TimeFrame timeFrame1 = TimeFrame.valueOf(time0, duration0);
      boolean boolean0 = timeFrame0.overlaps(timeFrame1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Time time0 = Time.now();
      Duration duration0 = Duration.ONE_MINUTE;
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, duration0);
      boolean boolean0 = timeFrame0.overlaps(timeFrame0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Duration duration0 = Duration.seconds(633.5991929);
      Time time1 = time0.subtract(duration0);
      TimeFrame timeFrame1 = TimeFrame.valueOf(time1, time0);
      boolean boolean0 = timeFrame0.overlaps(timeFrame1);
      assertFalse(boolean0);
      assertFalse(timeFrame1.equals((Object)timeFrame0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Duration duration0 = Duration.seconds(633.5991929);
      TimeFrame timeFrame1 = TimeFrame.valueOf(time0, duration0);
      boolean boolean0 = timeFrame0.overlaps(timeFrame1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Time time0 = Time.now();
      Duration duration0 = Duration.days((-21.52502));
      // Undeclared exception!
      try { 
        TimeFrame.valueOf(time0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start time of time frame 2014.02.14-8.21pm was after end time 2014.01.24-7.45am
         //
         verifyException("org.apache.wicket.util.time.TimeFrame", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Time time0 = Time.millis(600L);
      Duration duration0 = Duration.seconds(633.5991929);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, duration0);
      Time time1 = time0.subtract(duration0);
      TimeFrame timeFrame1 = TimeFrame.valueOf(time1, time0);
      boolean boolean0 = timeFrame0.overlaps(timeFrame1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      TimeFrame timeFrame1 = timeFrame0.getTimeFrame();
      assertSame(timeFrame0, timeFrame1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      String string0 = timeFrame0.toString();
      assertEquals("[start=1970.01.01-12.00am, end=1970.01.01-12.00am]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Time time1 = timeFrame0.getStart();
      assertSame(time1, time0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Time time1 = timeFrame0.getEnd();
      assertSame(time0, time1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      Duration duration0 = timeFrame0.getDuration();
      assertEquals(0L, duration0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Time time0 = Time.millis(600L);
      TimeFrame timeFrame0 = TimeFrame.valueOf(time0, time0);
      timeFrame0.hashCode();
  }
}
