/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:13:35 GMT 2022
 */

package org.apache.wicket.util.crypt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.crypt.CryptFactoryCachingDecorator;
import org.apache.wicket.util.crypt.ICrypt;
import org.apache.wicket.util.crypt.ICryptFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CryptFactoryCachingDecorator_ESTest extends CryptFactoryCachingDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ICryptFactory iCryptFactory0 = mock(ICryptFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ICrypt) null).when(iCryptFactory0).newCrypt();
      CryptFactoryCachingDecorator cryptFactoryCachingDecorator0 = new CryptFactoryCachingDecorator(iCryptFactory0);
      ICrypt iCrypt0 = cryptFactoryCachingDecorator0.newCrypt();
      assertNull(iCrypt0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CryptFactoryCachingDecorator cryptFactoryCachingDecorator0 = null;
      try {
        cryptFactoryCachingDecorator0 = new CryptFactoryCachingDecorator((ICryptFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'delegate' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ICrypt iCrypt0 = mock(ICrypt.class, new ViolatedAssumptionAnswer());
      ICryptFactory iCryptFactory0 = mock(ICryptFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ICrypt) null, (ICrypt) null).when(iCryptFactory0).newCrypt();
      CryptFactoryCachingDecorator cryptFactoryCachingDecorator0 = new CryptFactoryCachingDecorator(iCryptFactory0);
      ICrypt iCrypt1 = cryptFactoryCachingDecorator0.newCrypt();
      ICrypt iCrypt2 = cryptFactoryCachingDecorator0.newCrypt();
      assertSame(iCrypt2, iCrypt1);
  }
}
