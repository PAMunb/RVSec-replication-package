/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:08:46 GMT 2022
 */

package org.apache.wicket.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.apache.wicket.util.io.ByteArrayOutputStream;
import org.apache.wicket.util.io.DeferredFileOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeferredFileOutputStream_ESTest extends DeferredFileOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(4, file0);
      ByteArrayOutputStream byteArrayOutputStream0 = (ByteArrayOutputStream)deferredFileOutputStream0.getStream();
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(362, file0);
      deferredFileOutputStream0.write(1024);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("+WA'4S/#D").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(0, file0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1024, file0);
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream(93, (DeferredFileOutputStream.FileFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'fileFactory' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeferredFileOutputStream deferredFileOutputStream0 = null;
      try {
        deferredFileOutputStream0 = new DeferredFileOutputStream((-1), (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'outputFile' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      doReturn((File) null).when(deferredFileOutputStream_FileFactory0).createFile();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-1), deferredFileOutputStream_FileFactory0);
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(566, file0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream((-4121), file0);
      boolean boolean0 = deferredFileOutputStream0.isInMemory();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(362, file0);
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("nBnK/Or~e)").when(file0).getAbsolutePath();
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(4, file0);
      deferredFileOutputStream0.write(2096);
      deferredFileOutputStream0.thresholdReached();
      byte[] byteArray0 = deferredFileOutputStream0.getData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeferredFileOutputStream.FileFactory deferredFileOutputStream_FileFactory0 = mock(DeferredFileOutputStream.FileFactory.class, new ViolatedAssumptionAnswer());
      DeferredFileOutputStream deferredFileOutputStream0 = new DeferredFileOutputStream(1588, deferredFileOutputStream_FileFactory0);
      File file0 = deferredFileOutputStream0.getFile();
      assertNull(file0);
  }
}
