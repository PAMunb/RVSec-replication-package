/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:17:36 GMT 2022
 */

package org.apache.wicket.util.license;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.List;
import org.apache.wicket.util.license.JavaScriptLicenseHeaderHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaScriptLicenseHeaderHandler_ESTest extends JavaScriptLicenseHeaderHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JavaScriptLicenseHeaderHandler javaScriptLicenseHeaderHandler0 = new JavaScriptLicenseHeaderHandler((List<String>) null);
      String string0 = javaScriptLicenseHeaderHandler0.getLicenseHeaderFilename();
      assertEquals("javaScriptLicense.txt", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("_GFw,1<Ce]1P");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      JavaScriptLicenseHeaderHandler javaScriptLicenseHeaderHandler0 = new JavaScriptLicenseHeaderHandler((List<String>) null);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("_GFw,1<Ce]1P").when(file0).getAbsolutePath();
      javaScriptLicenseHeaderHandler0.checkLicenseHeader(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("_GFw,1<Ce]1P", (String) null).when(file1).getAbsolutePath();
      // Undeclared exception!
      try { 
        javaScriptLicenseHeaderHandler0.addLicenseHeader(file1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JavaScriptLicenseHeaderHandler javaScriptLicenseHeaderHandler0 = new JavaScriptLicenseHeaderHandler((List<String>) null);
      List<String> list0 = javaScriptLicenseHeaderHandler0.getSuffixes();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JavaScriptLicenseHeaderHandler javaScriptLicenseHeaderHandler0 = new JavaScriptLicenseHeaderHandler((List<String>) null);
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("_GFw,1<Ce]1P").when(file0).getAbsolutePath();
      // Undeclared exception!
      try { 
        javaScriptLicenseHeaderHandler0.checkLicenseHeader(file0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
