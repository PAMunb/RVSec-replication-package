/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:05:52 GMT 2022
 */

package org.apache.wicket.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.wicket.util.collections.MultiMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiMap_ESTest extends MultiMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiMap<Object, List<Object>> multiMap0 = new MultiMap<Object, List<Object>>();
      MultiMap<Object, LinkedList<Object>> multiMap1 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<LinkedList<Object>, Object> multiMap2 = new MultiMap<LinkedList<Object>, Object>(2147483645, 1.0F);
      LinkedList<Object> linkedList0 = null;
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap3 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(multiMap2);
      int int0 = 1224;
      MultiMap<Object, LinkedList<Object>> multiMap4 = new MultiMap<Object, LinkedList<Object>>(1224);
      Function<Object, List<Object>> function0 = (Function<Object, List<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(function0).apply(any());
      multiMap3.clear();
      multiMap4.computeIfAbsent((Object) null, function0);
      multiMap3.remove((Object) null);
      // Undeclared exception!
      multiMap2.replaceValues((LinkedList<Object>) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiMap<Object, List<Object>> multiMap0 = new MultiMap<Object, List<Object>>();
      MultiMap<Object, LinkedList<Object>> multiMap1 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<LinkedList<Object>, Object> multiMap2 = new MultiMap<LinkedList<Object>, Object>(0, 1.0F);
      LinkedList<Object> linkedList0 = null;
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap3 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(multiMap2);
      MultiMap<Object, LinkedList<Object>> multiMap4 = new MultiMap<Object, LinkedList<Object>>(1224);
      Function<Object, List<Object>> function0 = (Function<Object, List<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(function0).apply(any());
      multiMap3.clear();
      multiMap4.computeIfAbsent((Object) null, function0);
      multiMap3.remove((Object) null);
      multiMap2.replaceValues((LinkedList<Object>) null, (Object) null);
      MultiMap<Object, List<Object>> multiMap5 = new MultiMap<Object, List<Object>>(1224);
      MultiMap<Object, Object> multiMap6 = new MultiMap<Object, Object>();
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap6.computeIfPresent((Object) null, biFunction0);
      multiMap5.remove((Object) null);
      multiMap4.replaceValues((Object) null, (LinkedList<Object>) null);
      MultiMap<Object, Object> multiMap7 = new MultiMap<Object, Object>(multiMap6);
      multiMap7.replace((Object) null, (List) null);
      multiMap1.addValue((Object) null, (LinkedList<Object>) null);
      MultiMap<LinkedList<Object>, List<Object>> multiMap8 = new MultiMap<LinkedList<Object>, List<Object>>(multiMap2);
      LinkedList<Object> linkedList1 = null;
      multiMap2.replaceValues((LinkedList<Object>) null, multiMap3);
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap9 = null;
      try {
        multiMap9 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(216, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiMap<Object, LinkedList<Object>> multiMap0 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<Object, Object> multiMap1 = new MultiMap<Object, Object>();
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap1.computeIfPresent((Object) null, biFunction0);
      multiMap0.replaceValues((Object) null, (LinkedList<Object>) null);
      multiMap0.replaceValues((Object) null, (LinkedList<Object>) null);
      MultiMap<Object, Object> multiMap2 = new MultiMap<Object, Object>();
      multiMap2.getFirstValue((Object) null);
      multiMap0.getFirstValue((Object) null);
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap3 = new MultiMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = multiMap3.getFirstValue((LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiMap<Object, List<Object>> multiMap0 = new MultiMap<Object, List<Object>>();
      MultiMap<Object, LinkedList<Object>> multiMap1 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<LinkedList<Object>, Object> multiMap2 = new MultiMap<LinkedList<Object>, Object>(0, 1.0F);
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap3 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(multiMap2);
      MultiMap<Object, LinkedList<Object>> multiMap4 = new MultiMap<Object, LinkedList<Object>>(1224);
      Function<Object, List<Object>> function0 = (Function<Object, List<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((LinkedList<Object>) null).when(function0).apply(any());
      multiMap3.clear();
      multiMap4.computeIfAbsent((Object) null, function0);
      multiMap3.remove((Object) null);
      multiMap2.replaceValues((LinkedList<Object>) null, (Object) null);
      MultiMap<Object, List<Object>> multiMap5 = new MultiMap<Object, List<Object>>(1224);
      MultiMap<Object, Object> multiMap6 = new MultiMap<Object, Object>();
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap6.computeIfPresent((Object) null, biFunction0);
      multiMap5.remove((Object) null);
      multiMap4.replaceValues((Object) null, (LinkedList<Object>) null);
      MultiMap<Object, Object> multiMap7 = new MultiMap<Object, Object>(multiMap6);
      multiMap7.replace((Object) null, (List) null);
      multiMap1.addValue((Object) null, (LinkedList<Object>) null);
      multiMap1.getFirstValue((Object) null);
      MultiMap<LinkedList<Object>, List<Object>> multiMap8 = new MultiMap<LinkedList<Object>, List<Object>>(1224, 1224);
      multiMap8.removeValue((LinkedList<Object>) null, (List<Object>) null);
      MultiMap<List<Object>, List<Object>> multiMap9 = new MultiMap<List<Object>, List<Object>>();
      multiMap9.getFirstValue((List<Object>) null);
      MultiMap<Object, Object> multiMap10 = new MultiMap<Object, Object>();
      Object object0 = multiMap10.clone();
      multiMap4.replaceValues(object0, (LinkedList<Object>) null);
      multiMap4.getFirstValue((Object) null);
      MultiMap<List<Object>, LinkedList<Object>> multiMap11 = new MultiMap<List<Object>, LinkedList<Object>>(multiMap2);
      multiMap11.addValue((List<Object>) null, (LinkedList<Object>) null);
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap12 = null;
      try {
        multiMap12 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(1224, (-451.88F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -451.88
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiMap<Object, LinkedList<Object>> multiMap0 = new MultiMap<Object, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = null;
      MultiMap<Object, Object> multiMap1 = new MultiMap<Object, Object>();
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap1.computeIfPresent((Object) null, biFunction0);
      multiMap0.replaceValues((Object) null, (LinkedList<Object>) null);
      multiMap0.addValue((Object) null, (LinkedList<Object>) null);
      int int0 = (-947);
      MultiMap<Object, LinkedList<Object>> multiMap2 = null;
      try {
        multiMap2 = new MultiMap<Object, LinkedList<Object>>((-947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -947
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiMap<Object, List<Object>> multiMap0 = new MultiMap<Object, List<Object>>();
      MultiMap<Object, LinkedList<Object>> multiMap1 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<LinkedList<Object>, Object> multiMap2 = new MultiMap<LinkedList<Object>, Object>(0, 1.0F);
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap3 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(multiMap2);
      MultiMap<Object, LinkedList<Object>> multiMap4 = new MultiMap<Object, LinkedList<Object>>(1224);
      Function<Object, List<Object>> function0 = (Function<Object, List<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(function0).apply(any());
      multiMap3.clear();
      multiMap4.computeIfAbsent((Object) null, function0);
      multiMap3.remove((Object) null);
      multiMap2.replaceValues((LinkedList<Object>) null, (Object) null);
      MultiMap<Object, List<Object>> multiMap5 = new MultiMap<Object, List<Object>>(1224);
      MultiMap<Object, Object> multiMap6 = new MultiMap<Object, Object>();
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap6.computeIfPresent((Object) null, biFunction0);
      multiMap5.remove((Object) null);
      multiMap4.replaceValues((Object) null, (LinkedList<Object>) null);
      MultiMap<Object, Object> multiMap7 = new MultiMap<Object, Object>(multiMap6);
      multiMap7.replace((Object) null, (List) null);
      multiMap1.addValue((Object) null, (LinkedList<Object>) null);
      multiMap1.getFirstValue((Object) null);
      MultiMap<LinkedList<Object>, List<Object>> multiMap8 = new MultiMap<LinkedList<Object>, List<Object>>(1224, 1224);
      multiMap8.removeValue((LinkedList<Object>) null, (List<Object>) null);
      MultiMap<List<Object>, List<Object>> multiMap9 = new MultiMap<List<Object>, List<Object>>(1224);
      MultiMap<Object, List<Object>> multiMap10 = new MultiMap<Object, List<Object>>(1224, 916.1762F);
      Function<Object, List<Object>> function1 = (Function<Object, List<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiMap<LinkedList<Object>, Object> multiMap0 = new MultiMap<LinkedList<Object>, Object>();
      MultiMap<LinkedList<Object>, List<Object>> multiMap1 = new MultiMap<LinkedList<Object>, List<Object>>(multiMap0);
      MultiMap<Object, LinkedList<Object>> multiMap2 = new MultiMap<Object, LinkedList<Object>>(multiMap1);
      Object object0 = multiMap2.clone();
      multiMap0.replaceValues((LinkedList<Object>) null, object0);
      multiMap0.removeValue((LinkedList<Object>) null, object0);
      assertEquals(1, multiMap0.size());
      
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap3 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(multiMap0);
      multiMap3.getFirstValue((LinkedList<Object>) null);
      Object object1 = multiMap0.getFirstValue((LinkedList<Object>) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiMap<Object, LinkedList<Object>> multiMap0 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<Object, Object> multiMap1 = new MultiMap<Object, Object>();
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap1.computeIfPresent((Object) null, biFunction0);
      multiMap0.replaceValues((Object) null, (LinkedList<Object>) null);
      LinkedList<Object> linkedList0 = multiMap0.getFirstValue((Object) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiMap<Object, LinkedList<Object>> multiMap0 = new MultiMap<Object, LinkedList<Object>>();
      MultiMap<Object, Object> multiMap1 = new MultiMap<Object, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      multiMap1.forEach(biConsumer0);
      BiFunction<Object, Object, List<Object>> biFunction0 = (BiFunction<Object, Object, List<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiMap1.computeIfPresent((Object) null, biFunction0);
      multiMap0.replaceValues((Object) null, (LinkedList<Object>) null);
      multiMap0.getFirstValue(multiMap1);
      MultiMap<LinkedList<Object>, Object> multiMap2 = null;
      try {
        multiMap2 = new MultiMap<LinkedList<Object>, Object>((Map<? extends LinkedList<Object>, ? extends List<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiMap<Object, Object> multiMap0 = new MultiMap<Object, Object>();
      MultiMap<Object, LinkedList<Object>> multiMap1 = new MultiMap<Object, LinkedList<Object>>();
      multiMap1.clear();
      multiMap1.getFirstValue(multiMap0);
      MultiMap<Object, LinkedList<Object>> multiMap2 = new MultiMap<Object, LinkedList<Object>>();
      Object object0 = multiMap2.clone();
      multiMap1.removeValue(object0, (LinkedList<Object>) null);
      MultiMap<List<Object>, Object> multiMap3 = null;
      try {
        multiMap3 = new MultiMap<List<Object>, Object>((-2408));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2408
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap0 = new MultiMap<LinkedList<Object>, LinkedList<Object>>();
      assertTrue(multiMap0.isEmpty());
      
      multiMap0.removeValue((LinkedList<Object>) null, (LinkedList<Object>) null);
      MultiMap<LinkedList<Object>, List<Object>> multiMap1 = new MultiMap<LinkedList<Object>, List<Object>>();
      MultiMap<Object, LinkedList<Object>> multiMap2 = new MultiMap<Object, LinkedList<Object>>(multiMap1);
      LinkedList<Object> linkedList0 = multiMap2.getFirstValue(multiMap1);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiMap<Object, Object> multiMap0 = new MultiMap<Object, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      multiMap0.forEach(biConsumer0);
      multiMap0.addValue((Object) null, (Object) null);
      MultiMap<LinkedList<Object>, List<Object>> multiMap1 = null;
      try {
        multiMap1 = new MultiMap<LinkedList<Object>, List<Object>>((-2197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2197
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap0 = new MultiMap<LinkedList<Object>, LinkedList<Object>>();
      LinkedList<Object> linkedList0 = multiMap0.getFirstValue((LinkedList<Object>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiMap<LinkedList<Object>, Object> multiMap0 = new MultiMap<LinkedList<Object>, Object>();
      MultiMap<List<Object>, List<Object>> multiMap1 = new MultiMap<List<Object>, List<Object>>(2936);
      multiMap1.entrySet();
      MultiMap<LinkedList<Object>, List<Object>> multiMap2 = new MultiMap<LinkedList<Object>, List<Object>>(multiMap0);
      MultiMap<Object, LinkedList<Object>> multiMap3 = new MultiMap<Object, LinkedList<Object>>(multiMap2);
      Object object0 = multiMap3.clone();
      multiMap0.replaceValues((LinkedList<Object>) null, object0);
      multiMap0.removeValue((LinkedList<Object>) null, object0);
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap4 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(multiMap0);
      multiMap4.getFirstValue((LinkedList<Object>) null);
      Object object1 = multiMap0.getFirstValue((LinkedList<Object>) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap0 = new MultiMap<LinkedList<Object>, LinkedList<Object>>(0);
      int int1 = 1726;
      MultiMap<Object, Object> multiMap1 = new MultiMap<Object, Object>(1726);
      Function<Object, List<Object>> function0 = (Function<Object, List<Object>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      multiMap1.computeIfAbsent(multiMap0, function0);
      multiMap1.getFirstValue((Object) null);
      MultiMap<LinkedList<Object>, Object> multiMap2 = null;
      try {
        multiMap2 = new MultiMap<LinkedList<Object>, Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap0 = new MultiMap<LinkedList<Object>, LinkedList<Object>>();
      MultiMap<List<Object>, LinkedList<Object>> multiMap1 = new MultiMap<List<Object>, LinkedList<Object>>(multiMap0);
      assertTrue(multiMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiMap<LinkedList<Object>, Object> multiMap0 = new MultiMap<LinkedList<Object>, Object>();
      Set<LinkedList<Object>> set0 = multiMap0.keySet();
      MultiMap<Object, Object> multiMap1 = new MultiMap<Object, Object>();
      MultiMap<List<Object>, List<Object>> multiMap2 = new MultiMap<List<Object>, List<Object>>(256);
      multiMap2.entrySet();
      MultiMap<LinkedList<Object>, List<Object>> multiMap3 = new MultiMap<LinkedList<Object>, List<Object>>(multiMap0);
      multiMap0.replaceValues((LinkedList<Object>) null, set0);
      multiMap0.removeValue((LinkedList<Object>) null, multiMap1);
      assertEquals(1, multiMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiMap<LinkedList<Object>, List<Object>> multiMap0 = new MultiMap<LinkedList<Object>, List<Object>>();
      multiMap0.replaceValues((LinkedList<Object>) null, (List<Object>) null);
      MultiMap<List<Object>, LinkedList<Object>> multiMap1 = new MultiMap<List<Object>, LinkedList<Object>>();
      assertEquals(0, multiMap1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiMap<LinkedList<Object>, Object> multiMap0 = new MultiMap<LinkedList<Object>, Object>();
      MultiMap<List<Object>, LinkedList<Object>> multiMap1 = null;
      try {
        multiMap1 = new MultiMap<List<Object>, LinkedList<Object>>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiMap<LinkedList<Object>, List<Object>> multiMap0 = new MultiMap<LinkedList<Object>, List<Object>>();
      MultiMap<List<Object>, Object> multiMap1 = null;
      try {
        multiMap1 = new MultiMap<List<Object>, Object>((-1522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1522
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiMap<LinkedList<Object>, Object> multiMap0 = new MultiMap<LinkedList<Object>, Object>(0);
      assertTrue(multiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiMap<LinkedList<Object>, LinkedList<Object>> multiMap0 = new MultiMap<LinkedList<Object>, LinkedList<Object>>();
      int int0 = (-1823);
      MultiMap<Object, List<Object>> multiMap1 = null;
      try {
        multiMap1 = new MultiMap<Object, List<Object>>((-1823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1823
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiMap<List<Object>, LinkedList<Object>> multiMap0 = new MultiMap<List<Object>, LinkedList<Object>>(1, 1);
      assertTrue(multiMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiMap<Object, Object> multiMap0 = new MultiMap<Object, Object>(0, 1850.6514F);
      assertTrue(multiMap0.isEmpty());
  }
}
