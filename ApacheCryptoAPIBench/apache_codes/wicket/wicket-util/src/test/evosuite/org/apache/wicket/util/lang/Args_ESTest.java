/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:02:51 GMT 2022
 */

package org.apache.wicket.util.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.MissingFormatArgumentException;
import java.util.UnknownFormatConversionException;
import org.apache.wicket.util.lang.Args;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Args_ESTest extends Args_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      Integer integer2 = Args.withinRange(integer0, integer1, integer0, "JcKm<");
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(3);
      Integer integer2 = Args.withinRange(integer0, integer1, integer1, "JcKm<");
      assertEquals(3, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList linkedList1 = (LinkedList)Args.notNull((Object) linkedList0, "");
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharSequence charSequence0 = Args.notEmpty((CharSequence) "\"a;hiwrFXP:)", "\"a;hiwrFXP:)");
      assertEquals("\"a;hiwrFXP:)", charSequence0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = Args.format("Kir={p$X", objectArray0);
      assertEquals("Kir={p$X", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = Args.format("", objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-2863));
      // Undeclared exception!
      try { 
        Args.withinRange(integer0, integer0, (Integer) null, "eX?mJo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Args.notEmpty(linkedList0, "%s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Args.notEmpty(linkedList0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Args.isTrue(false, "mjJ8)WS|1I% [;tM", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ' '
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Args.isTrue(false, "8%tp_dJ7SDKVAD", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%tp'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "k%o_aa.M9li";
      // Undeclared exception!
      try { 
        Args.isTrue(false, "k%o_aa.M9li", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // o != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Args.isTrue(false, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Args.isFalse(true, "r%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Args.isFalse(true, "RWo_L%GYD'YD+QAh", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Args.isFalse(true, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Args.isFalse(true, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Args.format("%45 4 w1bW8L@) I ", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '4'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Args.format("%s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Args.format((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Args.notEmpty((LinkedList<Object>) null, "qJ`9aH8+`", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qJ`9aH8+`
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Object[] objectArray0 = new Object[0];
      LinkedList<Object> linkedList1 = Args.notEmpty(linkedList0, (String) null, objectArray0);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Args.notEmpty(linkedList0, "r%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Args.isFalse(true, "Cannot convert '%s' to enum constant of type '%s'.", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = Args.isFalse(false, "", objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Args.isTrue(false, "Argument '%s' must have a value within [%s,%s], but was %s", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'null' must have a value within [null,null], but was null
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = Args.isTrue(true, "%s", objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(92);
      Integer integer1 = new Integer(815);
      // Undeclared exception!
      try { 
        Args.withinRange(integer0, integer0, integer1, "ClG8!x<C6s4_*(Ju!}!Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'ClG8!x<C6s4_*(Ju!}!Q' must have a value within [92,92], but was 815
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "TBZ>z{)c1*");
      CharBuffer charBuffer1 = Args.withinRange(charBuffer0, charBuffer0, charBuffer0, "TBZ>z{)c1*");
      assertEquals(10, charBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2655));
      // Undeclared exception!
      try { 
        Args.withinRange(integer0, integer1, integer1, "&DVf*>Fy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument '&DVf*>Fy' must have a value within [1,-2655], but was -2655
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "ClG8!?<C6s4_*(Ju!}!Q");
      LinkedList<Object> linkedList1 = Args.notEmpty(linkedList0, "ClG8!?<C6s4_*(Ju!}!Q");
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Args.notEmpty((LinkedList<CharBuffer>) null, "ClG8!?<C6s4_*(Ju!}!Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection 'ClG8!?<C6s4_*(Ju!}!Q' may not be null or empty.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Args.notEmpty((CharBuffer) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'null' may not be null or empty.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Args.notNull((Object) null, "m\"_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'm\"_' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Args args0 = new Args();
  }
}
