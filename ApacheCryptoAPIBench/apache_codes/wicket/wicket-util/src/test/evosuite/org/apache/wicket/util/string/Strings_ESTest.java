/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:07:51 GMT 2022
 */

package org.apache.wicket.util.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.wicket.util.string.AppendingStringBuffer;
import org.apache.wicket.util.string.Strings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Strings_ESTest extends Strings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      String string0 = Strings.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("D60000000000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = Strings.getLevenshteinDistance("]", "2,RP8*(41DJq95?y");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = Strings.indexOf("off", '}');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Strings.startsWith("yen", "yen", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode("og\u5C07fi.");
      assertEquals("og\\u5C07fi.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Strings.fromEscapedUnicode("og\u507Fi.");
      assertEquals("og\u507Fi.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharSequence charSequence0 = Strings.unescapeMarkup((String) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharSequence charSequence0 = Strings.unescapeMarkup("");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Strings.toString((Object) "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Strings.toHexString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char char0 = Strings.toChar("]");
      assertEquals(']', char0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char char0 = Strings.toChar("n");
      assertEquals('n', char0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = Strings.stripJSessionId(stringArray0[4]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Strings.stripJSessionId("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = Strings.startsWith("8839", "Bl8", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Strings.replaceHtmlEscapeNumber("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = Strings.lengthInBytes("", (Charset) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Strings.lastPathComponent("", '^');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = Strings.join("j5)m[#GEc9,+e+?", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string0 = Strings.join("oline", (List<String>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("oline"));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("&nbsp;&nbsp;&nbsp;&nbsp;");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("&nbsp;&nbsp;&nbsp;&nbsp;"));
      assertTrue(boolean0);
      
      String string0 = Strings.join("", (List<String>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains(string0));
      assertEquals("&nbsp;&nbsp;&nbsp;&nbsp;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = Strings.indexOf("g", 'g');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Strings.fromEscapedUnicode("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Strings.firstPathComponent("", '`');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "", true, true);
      assertEquals(0, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharSequence charSequence0 = Strings.escapeMarkup((CharSequence) null, true);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "", false);
      assertEquals(0, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "");
      assertEquals(0, appendingStringBuffer0.capacity());
      assertEquals(0, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Strings.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Strings.beforeLastPathComponent((String) null, '`');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Strings.afterFirstPathComponent("K\"'BFB$.Tv", 'B');
      assertEquals("FB$.Tv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Strings.afterFirstPathComponent("a:FR`M4%'#t'yDv~_Ba", '*');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockRuntimeException0.initCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.getMessage());
      assertNull(throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNotSame(mockThrowable0, throwable0);
      assertNotSame(throwable0, mockThrowable0);
      assertFalse(throwable0.equals((Object)mockThrowable0));
      assertNotNull(throwable0);
      
      // Undeclared exception!
      Strings.toString((Throwable) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("3}l,Q*$!Xu5=fxdv0");
      assertNotNull(mockThrowable0);
      
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      assertEquals("3}l,Q*$!Xu5=fxdv0", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 3}l,Q*$!Xu5=fxdv0", mockThrowable0.toString());
      
      // Undeclared exception!
      try { 
        Strings.toString((Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strings.toHexString((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'bytes' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      // Undeclared exception!
      try { 
        Strings.toEnum((CharSequence) "r", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert 'r' to enum constant of type 'class java.time.chrono.HijrahEra'.
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Strings.lengthInBytes((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'string' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        Strings.join((String) null, (List<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strings.fromEscapedUnicode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1362);
      assertEquals(1362, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1362, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1362, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1362, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) charBuffer0);
      assertEquals(1362, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1362, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1362, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1362, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5998, appendingStringBuffer0.capacity());
      assertEquals(5448, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
      
      StringBuffer stringBuffer0 = new StringBuffer(appendingStringBuffer0);
      assertEquals(1362, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1362, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1362, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1362, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5998, appendingStringBuffer0.capacity());
      assertEquals(5448, appendingStringBuffer0.length());
      assertEquals(5448, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      Strings.escapeMarkup((CharSequence) appendingStringBuffer0, false, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Strings.getLevenshteinDistance("&#039;", "'");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      //  // Unstable assertion: assertNotNull(mockThrowable0);
      
      String string0 = Strings.toString((Throwable) mockThrowable0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      //  // Unstable assertion: assertNull(mockThrowable0.getMessage());
      //  // Unstable assertion: assertEquals("Root cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode(" =y^)H=sF ?");
      assertEquals("\\ \\=y^)H\\=sF ?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharSequence charSequence0 = Strings.replaceAll("jsessionid", "/", "jsessionid");
      assertEquals("jsessionid", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Strings.join("j5)m[#GEc9,+e+?", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Strings.isTrue(";u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Boolean value \";u\" not recognized
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = Strings.isTrue((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = Strings.isEmpty("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = Strings.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = Strings.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = Strings.isEmpty("og\u5C07fi.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "Message: ", true, true);
      assertEquals(20, appendingStringBuffer0.capacity());
      assertEquals(14, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "#rt]_I\"%0", true, true);
      assertEquals(24, appendingStringBuffer0.capacity());
      assertEquals(15, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "E3[q?'G(%m{kqmP]Hmh", false, false);
      assertEquals(24, appendingStringBuffer0.length());
      assertEquals(42, appendingStringBuffer0.capacity());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharSequence charSequence0 = Strings.escapeMarkup((CharSequence) null, false, true);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Strings.beforeLast("}tFVYNq9WTzp ?i{6~M", 'q');
      assertEquals("}tFVYN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Strings.beforeLast("4bhw", 'J');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Strings.afterFirst((String) null, '+');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Strings.defaultIfEmpty("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Strings.defaultIfEmpty("lang", "lang");
      assertEquals("lang", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = Strings.getLevenshteinDistance("     at ", "     at ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = Strings.getLevenshteinDistance("uvkk", stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = Strings.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strings.getLevenshteinDistance("uvkk", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      Strings.getLevenshteinDistance("ZetaRoot cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: 3}l,Q*$!Xu5=fxdv0\n     at sun.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n\nComplete stack:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: 3}l,Q*$!Xu5=fxdv0\n     at sun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n", "ZetaRoot cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: 3}l,Q*$!Xu5=fxdv0\n     at sun.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n\nComplete stack:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: 3}l,Q*$!Xu5=fxdv0\n     at sun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strings.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = Strings.indexOf("uVKK", 'K');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = Strings.indexOf((CharSequence) null, '[');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strings.startsWith((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      int int0 = Strings.lengthInBytes("1", charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)14);
      assertEquals(14, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(14, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.replaceAll(charBuffer0, charBuffer0, charBuffer0);
      assertEquals(14, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(14, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(14, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(30, appendingStringBuffer0.capacity());
      assertEquals(14, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      // Undeclared exception!
      Strings.replaceAll(stringBuilder0, stringBuilder0, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      Strings.replaceAll(stringBuffer0, stringBuffer0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.wicket.protocol.http.WicketFilter", "org.apache.wicket.protocol.http.WicketFilter", "org.apache.wicket.protocol.http.WicketFilter", 119);
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketFilter", stackTraceElement0.getMethodName());
      //  // Unstable assertion: assertFalse(stackTraceElement0.isNativeMethod());
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketFilter", stackTraceElement0.getFileName());
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketFilter", stackTraceElement0.getClassName());
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketFilter.org.apache.wicket.protocol.http.WicketFilter(org.apache.wicket.protocol.http.WicketFilter:119)", stackTraceElement0.toString());
      //  // Unstable assertion: assertEquals(119, stackTraceElement0.getLineNumber());
      //  // Unstable assertion: assertNotNull(stackTraceElement0);
      
      MockThrowable mockThrowable0 = new MockThrowable("org.apache.wicket.protocol.http.WicketFilter");
      //  // Unstable assertion: assertNotNull(mockThrowable0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      //  // Unstable assertion: assertNotNull(mockRuntimeException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      stackTraceElementArray0[0] = stackTraceElement0;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketFilter", mockThrowable0.getMessage());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketFilter", mockThrowable0.toString());
      //  // Unstable assertion: assertEquals(1, stackTraceElementArray0.length);
      
      String string0 = Strings.toString((Throwable) mockRuntimeException0);
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketFilter", mockThrowable0.getMessage());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketFilter", mockThrowable0.toString());
      //  // Unstable assertion: assertEquals("Message: org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketFilter\n\nRoot cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketFilter\n     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n\nComplete stack:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketFilter\n     at org.apache.wicket.protocol.http.WicketFilter.org.apache.wicket.protocol.http.WicketFilter(org.apache.wicket.protocol.http.WicketFilter:119)\n\n", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)", "", "org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)", (-14));
      //  // Unstable assertion: assertEquals((-14), stackTraceElement0.getLineNumber());
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source).(org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source))", stackTraceElement0.toString());
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)", stackTraceElement0.getFileName());
      //  // Unstable assertion: assertEquals("", stackTraceElement0.getMethodName());
      //  // Unstable assertion: assertEquals("org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)", stackTraceElement0.getClassName());
      //  // Unstable assertion: assertFalse(stackTraceElement0.isNativeMethod());
      //  // Unstable assertion: assertNotNull(stackTraceElement0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)");
      //  // Unstable assertion: assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("@^E1hVIV| ", mockRuntimeException0);
      //  // Unstable assertion: assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      //  // Unstable assertion: assertNotNull(mockRuntimeException1);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      stackTraceElementArray0[0] = stackTraceElement0;
      mockRuntimeException1.setStackTrace(stackTraceElementArray0);
      //  // Unstable assertion: assertNotSame(mockRuntimeException0, mockRuntimeException1);
      //  // Unstable assertion: assertNotSame(mockRuntimeException1, mockRuntimeException0);
      //  // Unstable assertion: assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      //  // Unstable assertion: assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      //  // Unstable assertion: assertEquals(1, stackTraceElementArray0.length);
      
      String string0 = Strings.toString((Throwable) mockRuntimeException1);
      //  // Unstable assertion: assertNotSame(mockRuntimeException0, mockRuntimeException1);
      //  // Unstable assertion: assertNotSame(mockRuntimeException1, mockRuntimeException0);
      //  // Unstable assertion: assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      //  // Unstable assertion: assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      //  // Unstable assertion: assertEquals("Message: @^E1hVIV| \n\nRoot cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)\n     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n\nComplete stack:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: @^E1hVIV| \n     at org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source).(org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source))\n\n", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("sun.reflect.", "tHH>sh@{au% =", "DDe^*k,,s =mS[5#Fs", (-1046));
      assertEquals((-1046), stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("sun.reflect..tHH>sh@{au% =(DDe^*k,,s =mS[5#Fs)", stackTraceElement0.toString());
      assertEquals("DDe^*k,,s =mS[5#Fs", stackTraceElement0.getFileName());
      assertEquals("tHH>sh@{au% =", stackTraceElement0.getMethodName());
      assertEquals("sun.reflect.", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      assertEquals(4, stackTraceElementArray0.length);
      
      String string0 = Strings.toString((Throwable) mockRuntimeException0);
      assertEquals("Message: null\n\nRoot cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect..tHH>sh@{au% =(DDe^*k,,s =mS[5#Fs)\n     at sun.reflect..tHH>sh@{au% =(DDe^*k,,s =mS[5#Fs)\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)");
      //  // Unstable assertion: assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("@^E1hVIV| ", mockRuntimeException0);
      //  // Unstable assertion: assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      //  // Unstable assertion: assertNotNull(mockRuntimeException1);
      
      String string0 = Strings.toString((Throwable) mockRuntimeException1);
      //  // Unstable assertion: assertNotSame(mockRuntimeException0, mockRuntimeException1);
      //  // Unstable assertion: assertNotSame(mockRuntimeException1, mockRuntimeException0);
      //  // Unstable assertion: assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      //  // Unstable assertion: assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      //  // Unstable assertion: assertEquals("Message: @^E1hVIV| \n\nRoot cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: org.apache.wicket.protocol.http.WicketServletsun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)\n     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n\nComplete stack:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable: @^E1hVIV| \n     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n\n", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Strings.toString((Throwable) null);
      assertEquals("<Null Throwable>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Strings.toString((Object) "tC3jx-:7GM");
      assertEquals("tC3jx-:7GM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      //  // Unstable assertion: assertNotNull(mockThrowable0);
      
      String string0 = Strings.toString((Object) mockThrowable0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      //  // Unstable assertion: assertNull(mockThrowable0.getMessage());
      //  // Unstable assertion: assertEquals("Root cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Strings.toString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Strings.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.toMultilineMarkup("Root cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n");
      assertEquals(286, appendingStringBuffer0.capacity());
      assertEquals(254, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)13;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(charBuffer0);
      
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.toMultilineMarkup(charBuffer0);
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(14, appendingStringBuffer0.length());
      assertEquals(16, appendingStringBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.toMultilineMarkup("\n\n");
      assertEquals(16, appendingStringBuffer0.capacity());
      assertEquals(14, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CharSequence charSequence0 = Strings.toMultilineMarkup((CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode("RQcJ&B5>=3:0wi[.cA");
      assertEquals("RQcJ&B5>\\=3\\:0wi[.cA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode("WW$H[\"2#52&Pr");
      assertEquals("\\u007FWW$H[\"2\\#52&Pr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode("3}l,Q*$!Xu5=fIdv0");
      assertEquals("3}\\u007Fl,Q*$\\!Xu5\\=fIdv0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode("md\n");
      assertEquals("md\\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Strings.toEscapedUnicode((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char char0 = Strings.toChar("0");
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Strings.toChar("#rt]_I\"%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected single character, not \"#rt]_I\"%0\"
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Strings.toChar((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Character value was null
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Strings.stripJSessionId("C71D04");
      assertEquals("C71D04", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Strings.stripEnding("sun.reflect.sun.reflect.GeneratedConstructorAccessor42.newInstance(Unknown Source)", "\n");
      assertEquals("sun.reflect.sun.reflect.GeneratedConstructorAccessor42.newInstance(Unknown Source)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Strings.stripEnding("3H.{P", "3H.{P");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Strings.stripEnding("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Strings.stripEnding("\n", (String) null);
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Strings.stripEnding((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Strings.stripEnding("e^", "8756");
      assertEquals("e^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = Strings.split("E3[q?'G(%m{kqmP]Hmh", 'P');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = Strings.split("", 'B');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = Strings.split((String) null, '\"');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Strings.replaceHtmlEscapeNumber("&#039;");
      assertEquals("'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Strings.replaceHtmlEscapeNumber((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.replaceAll("gr", "gr", "gr");
      assertEquals(2, appendingStringBuffer0.length());
      assertEquals(18, appendingStringBuffer0.capacity());
      assertNotNull(appendingStringBuffer0);
      
      AppendingStringBuffer appendingStringBuffer1 = appendingStringBuffer0.append(appendingStringBuffer0);
      assertEquals(18, appendingStringBuffer0.capacity());
      assertEquals(4, appendingStringBuffer0.length());
      assertEquals(4, appendingStringBuffer1.length());
      assertEquals(18, appendingStringBuffer1.capacity());
      assertSame(appendingStringBuffer0, appendingStringBuffer1);
      assertSame(appendingStringBuffer1, appendingStringBuffer0);
      assertNotNull(appendingStringBuffer1);
      
      AppendingStringBuffer appendingStringBuffer2 = (AppendingStringBuffer)Strings.replaceAll(appendingStringBuffer0, "gr", "gr");
      assertEquals(18, appendingStringBuffer0.capacity());
      assertEquals(4, appendingStringBuffer0.length());
      assertEquals(4, appendingStringBuffer2.length());
      assertEquals(20, appendingStringBuffer2.capacity());
      assertNotSame(appendingStringBuffer0, appendingStringBuffer2);
      assertSame(appendingStringBuffer0, appendingStringBuffer1);
      assertNotSame(appendingStringBuffer2, appendingStringBuffer1);
      assertNotSame(appendingStringBuffer2, appendingStringBuffer0);
      assertTrue(appendingStringBuffer2.equals((Object)appendingStringBuffer0));
      assertTrue(appendingStringBuffer2.equals((Object)appendingStringBuffer1));
      assertNotNull(appendingStringBuffer2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.replaceAll("/", "/", "jsessionid");
      assertEquals(10, appendingStringBuffer0.length());
      assertNotNull(appendingStringBuffer0);
      assertEquals(26, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.replaceAll("<4-\\F*", "<4-\\F*", (CharSequence) null);
      assertNotNull(appendingStringBuffer0);
      assertEquals(0, appendingStringBuffer0.length());
      assertEquals(22, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharSequence charSequence0 = Strings.replaceAll("", "", "");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharSequence charSequence0 = Strings.replaceAll("J#}*pUE'&Z", (CharSequence) null, (CharSequence) null);
      assertEquals("J#}*pUE'&Z", charSequence0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharSequence charSequence0 = Strings.replaceAll((CharSequence) null, (CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Strings.lastPathComponent("C;7.^*SW-D&5]Fo}", '5');
      assertEquals("]Fo}", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Strings.lastPathComponent((String) null, 'Z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = Strings.join("\n", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      Strings.join("C", stringArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        Strings.join((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = Strings.join((String) null, stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Strings.join("Wx]|", (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Strings.join("0", (List<String>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Strings.toBoolean("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("no");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Strings.toBoolean("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = Strings.isTrue("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = Strings.isEqual("VySuVySu", "VySuVySu");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Strings.isEqual("\n", "\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Strings.isEqual((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Strings.isEqual("xzY]ZH", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Strings.isEqual((String) null, "The wildcard must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "sun.reflect.Malformed \\uxxxx encoding..M>x(h^lT==3l-I!*&9tA)";
      // Undeclared exception!
      try { 
        Strings.fromEscapedUnicode(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed \\uxxxx encoding.
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Strings.firstPathComponent("o6}8QhV", 'Q');
      assertEquals("o6}8", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Strings.firstPathComponent((String) null, '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "og\u507Fi.}S;rkRk^Z.C", true, true);
      assertEquals(23, appendingStringBuffer0.length());
      assertEquals(36, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)13;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) charBuffer0, true, true);
      assertEquals(42, appendingStringBuffer0.capacity());
      assertEquals(33, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) " =y^)H=sF ?", true);
      assertEquals(21, appendingStringBuffer0.length());
      assertEquals(26, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) charBuffer0, false, false);
      assertEquals(21, appendingStringBuffer0.length());
      assertEquals(30, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) "7<V'vL|M");
      assertEquals(18, appendingStringBuffer0.capacity());
      assertEquals(16, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1362);
      CharSequence charSequence0 = Strings.escapeMarkup((CharSequence) charBuffer0);
      CharSequence charSequence1 = Strings.escapeMarkup(charSequence0, false, false);
      // Undeclared exception!
      Strings.toMultilineMarkup(charSequence1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.replaceAll("Root cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n", "Root cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n", "Root cause:\n\norg.evosuite.runtime.mock.java.lang.MockThrowable\n     at sun.reflect.GeneratedConstructorAccessor40.newInstance(Unknown Source)\n     at <evosuite>.<evosuite>(<evosuite>)\n     at <evosuite>.<evosuite>(<evosuite>)\n");
      AppendingStringBuffer appendingStringBuffer1 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) appendingStringBuffer0, false, true);
      assertEquals(498, appendingStringBuffer1.capacity());
      assertEquals(262, appendingStringBuffer1.length());
      assertEquals(242, appendingStringBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      AppendingStringBuffer appendingStringBuffer0 = (AppendingStringBuffer)Strings.escapeMarkup((CharSequence) charBuffer0, true, false);
      assertEquals(50, appendingStringBuffer0.capacity());
      assertEquals(44, appendingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = Strings.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Strings.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Strings.capitalize("org.apache.wicket.util.string.StringEscapeUtils");
      assertEquals("Org.apache.wicket.util.string.StringEscapeUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Strings.beforeLastPathComponent("psqghjr,kv~wluwq", 'W');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Strings.beforeLast((String) null, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Strings.beforeFirst("`6`,JOls}3&!|\"fN#,", '3');
      assertEquals("`6`,JOls}", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Strings.beforeFirst((String) null, 'D');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Strings.beforeFirst("5/.", 'p');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Strings.afterLast("sun.reflect.sun.reflect.GeneratedConstructorAccessor50.newInstance(Unknown Source)", 'f');
      assertEquals("lect.GeneratedConstructorAccessor50.newInstance(Unknown Source)", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Strings.afterLast((String) null, '`');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Strings.afterLast("VySuVySu", '2');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Strings.afterFirst("3}l,Q*$!Xu5=fxdv0", 'f');
      assertEquals("xdv0", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Strings.afterFirst("b=", 'l');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Strings.beforeLastPathComponent("%(mS\"$]TS~282'2dq-!", 'q');
      assertNotNull(string0);
      assertEquals("%(mS\"$]TS~282'2d", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharSequence charSequence0 = Strings.escapeMarkup((CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CharSequence charSequence0 = Strings.unescapeMarkup("Message: ");
      assertEquals("Message: ", charSequence0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Strings.toBoolean("}X8U`i8)BS|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Boolean value \"}X8U`i8)BS|\" not recognized
         //
         verifyException("org.apache.wicket.util.string.Strings", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Strings.afterFirstPathComponent((String) null, '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<IsoEra> class0 = IsoEra.class;
      // Undeclared exception!
      try { 
        Strings.toEnum((CharSequence) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'value' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }
}
