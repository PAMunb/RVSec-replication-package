/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:11:55 GMT 2022
 */

package org.apache.wicket.util.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.wicket.util.diff.ChangeDelta;
import org.apache.wicket.util.diff.Chunk;
import org.apache.wicket.util.diff.RevisionVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangeDelta_ESTest extends ChangeDelta_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 23, 0);
      StringBuilder stringBuilder0 = new StringBuilder("i`%:~L;O-k");
      Chunk chunk1 = new Chunk(23, 1);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk1);
      changeDelta0.toRCSString(stringBuilder0, "i`%:~L;O-k");
      assertEquals("i`%:~L;O-kd24 0i`%:~L;O-ka23 1i`%:~L;O-k", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 23, 0);
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.wicket.util.diff.ChangeDelta");
      Chunk chunk1 = new Chunk(0, 0);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk1, chunk0);
      changeDelta0.toString(stringBuilder0);
      assertEquals("org.apache.wicket.util.diff.ChangeDelta1c24\n---\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Chunk chunk0 = new Chunk(objectArray0, (-4514), (-4514));
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk0);
      List<Object> list0 = chunk0.chunk();
      changeDelta0.verify(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Chunk chunk0 = new Chunk(607, (-1));
      Chunk chunk1 = new Chunk(objectArray0, (-1), (-2132), 950);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk1);
      changeDelta0.applyTo((List<Object>) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Chunk chunk0 = new Chunk(607, (-1));
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk0);
      // Undeclared exception!
      try { 
        changeDelta0.applyTo((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ChangeDelta changeDelta0 = new ChangeDelta();
      // Undeclared exception!
      try { 
        changeDelta0.verify(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        changeDelta0.toString(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChangeDelta changeDelta0 = new ChangeDelta();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        changeDelta0.toRCSString(stringBuilder0, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 23, 0);
      Chunk chunk1 = new Chunk(23, 0);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk1, chunk0);
      try { 
        changeDelta0.verify(linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // original.first() > target.size()
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Chunk chunk0 = new Chunk(787, 2207);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk1 = new Chunk(linkedList0, 787, 0);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk1, chunk0);
      try { 
        changeDelta0.verify(linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.ChangeDelta", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 23, 0);
      Chunk chunk1 = new Chunk(0, 0);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk1, chunk0);
      changeDelta0.verify(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Chunk chunk0 = new Chunk(787, 2207);
      ChangeDelta changeDelta0 = new ChangeDelta(chunk0, chunk0);
      RevisionVisitor revisionVisitor0 = mock(RevisionVisitor.class, new ViolatedAssumptionAnswer());
      changeDelta0.accept(revisionVisitor0);
  }
}
