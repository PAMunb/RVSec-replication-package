/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:20:11 GMT 2022
 */

package org.apache.wicket.util.convert.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.LocalTime;
import java.time.chrono.HijrahDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import org.apache.wicket.util.convert.converter.LocalTimeConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalTimeConverter_ESTest extends LocalTimeConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalTimeConverter localTimeConverter0 = new LocalTimeConverter();
      LocalTime localTime0 = MockLocalTime.now();
      LocalTime localTime1 = localTimeConverter0.createTemporal(localTime0);
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalTimeConverter localTimeConverter0 = new LocalTimeConverter();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        localTimeConverter0.createTemporal(hijrahDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalTime from TemporalAccessor: Hijrah-umalqura AH 1435-04-14 of type java.time.chrono.HijrahDate
         //
         verifyException("java.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocalTimeConverter localTimeConverter0 = new LocalTimeConverter();
      DateTimeFormatter dateTimeFormatter0 = localTimeConverter0.getDateTimeFormatter();
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocalTimeConverter localTimeConverter0 = new LocalTimeConverter();
      Class<LocalTime> class0 = localTimeConverter0.getTargetType();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocalTimeConverter localTimeConverter0 = new LocalTimeConverter();
      // Undeclared exception!
      try { 
        localTimeConverter0.createTemporal((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }
}
