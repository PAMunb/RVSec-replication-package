/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:03:33 GMT 2022
 */

package org.apache.wicket.util.value;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.value.IntValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntValue_ESTest extends IntValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      IntValue intValue1 = new IntValue((-752));
      boolean boolean0 = intValue0.lessThan(intValue1);
      assertEquals("-752", intValue1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.lessThan(0);
      assertEquals("0", intValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      IntValue intValue1 = new IntValue((-752));
      boolean boolean0 = intValue1.greaterThan(intValue0);
      assertFalse(boolean0);
      assertEquals("-752", intValue1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.greaterThan(2534);
      assertFalse(boolean0);
      assertEquals("0", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntValue intValue0 = new IntValue((-1));
      IntValue intValue1 = new IntValue(1);
      boolean boolean0 = intValue0.equals(intValue1);
      assertFalse(boolean0);
      assertFalse(intValue1.equals((Object)intValue0));
      assertEquals("1", intValue1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntValue intValue0 = new IntValue((-1699));
      // Undeclared exception!
      try { 
        intValue0.lessThan((IntValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.IntValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntValue intValue0 = new IntValue((-1018));
      // Undeclared exception!
      try { 
        intValue0.greaterThan((IntValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.IntValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntValue intValue0 = new IntValue(3393);
      // Undeclared exception!
      try { 
        intValue0.compareTo((IntValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.value.IntValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntValue intValue0 = new IntValue(455);
      IntValue intValue1 = new IntValue(477);
      boolean boolean0 = intValue0.lessThan(intValue1);
      assertTrue(boolean0);
      assertEquals("477", intValue1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.lessThan(intValue0);
      assertEquals("0", intValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.lessThan(104);
      assertTrue(boolean0);
      assertEquals("0", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.lessThan((-1699));
      assertEquals("0", intValue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      IntValue intValue1 = new IntValue((-752));
      boolean boolean0 = intValue0.greaterThan(intValue1);
      assertEquals("-752", intValue1.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.greaterThan(intValue0);
      assertFalse(boolean0);
      assertEquals("0", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.greaterThan((-1));
      assertTrue(boolean0);
      assertEquals("0", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.greaterThan(0);
      assertFalse(boolean0);
      assertEquals("0", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      IntValue intValue1 = new IntValue((-752));
      boolean boolean0 = intValue0.equals(intValue1);
      assertEquals("-752", intValue1.toString());
      assertFalse(intValue1.equals((Object)intValue0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      boolean boolean0 = intValue0.equals(intValue0);
      assertEquals("0", intValue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      Object object0 = new Object();
      boolean boolean0 = intValue0.equals(object0);
      assertFalse(boolean0);
      assertEquals("0", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntValue intValue0 = new IntValue(1794);
      IntValue intValue1 = new IntValue(0);
      int int0 = intValue0.compareTo(intValue1);
      assertEquals("0", intValue1.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      IntValue intValue1 = new IntValue((-752));
      int int0 = intValue1.compareTo(intValue0);
      assertEquals("0", intValue0.toString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntValue intValue0 = new IntValue(279);
      int int0 = intValue0.compareTo(intValue0);
      assertEquals(0, int0);
      assertEquals("279", intValue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      String string0 = intValue0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntValue intValue0 = new IntValue(0);
      intValue0.hashCode();
      assertEquals("0", intValue0.toString());
  }
}
