/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:55:13 GMT 2022
 */

package org.apache.wicket.util.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.apache.wicket.util.encoding.UrlEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UrlEncoder_ESTest extends UrlEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.HEADER_INSTANCE;
      // Undeclared exception!
      try { 
        urlEncoder0.encode("NULL", "\u0000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: \u0000
         //
         verifyException("org.apache.wicket.util.encoding.UrlEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.HEADER_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlEncoder0.encode("\u0000", charset0);
      assertEquals("NULL", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.HEADER_INSTANCE;
      // Undeclared exception!
      try { 
        urlEncoder0.encode((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.encoding.UrlEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.PATH_INSTANCE;
      // Undeclared exception!
      try { 
        urlEncoder0.encode("org.apache.wicket.util.encoding.UrlEncoder$1", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'charsetName' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.PATH_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlEncoder0.encode("Argument '%s' must have a value within [%s,%s], but was %s", charset0);
      assertEquals("Argument%20%27%25s%27%20must%20have%20a%20value%20within%20%5B%25s,%25s%5D,%20but%20was%20%25s", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.QUERY_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlEncoder0.encode("aoSU DYZ5%c6bkQe(Ep", charset0);
      assertEquals("aoSU+DYZ5%25c6bkQe%28Ep", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UrlEncoder urlEncoder0 = UrlEncoder.HEADER_INSTANCE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlEncoder0.encode("r-Unqx,_!t=", charset0);
      assertEquals("r-Unqx%2C_!t%3D", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UrlEncoder.Type urlEncoder_Type0 = UrlEncoder.Type.PATH;
      UrlEncoder urlEncoder0 = new UrlEncoder(urlEncoder_Type0);
      Charset charset0 = Charset.defaultCharset();
      String string0 = urlEncoder0.encode("", charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UrlEncoder.Type urlEncoder_Type0 = UrlEncoder.Type.HEADER;
      UrlEncoder urlEncoder0 = new UrlEncoder(urlEncoder_Type0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UrlEncoder.Type urlEncoder_Type0 = UrlEncoder.Type.QUERY;
      UrlEncoder urlEncoder0 = new UrlEncoder(urlEncoder_Type0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UrlEncoder urlEncoder0 = null;
      try {
        urlEncoder0 = new UrlEncoder((UrlEncoder.Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UrlEncoder urlEncoder0 = UrlEncoder.QUERY_INSTANCE;
      // Undeclared exception!
      try { 
        urlEncoder0.encode((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.encoding.UrlEncoder", e);
      }
  }
}
