/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:14:39 GMT 2022
 */

package org.apache.wicket.util.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.text.DateFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayDeque;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;
import org.apache.wicket.util.convert.ConversionException;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.convert.MaskConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversionException_ESTest extends ConversionException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gU\"nK|yN;";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = null;
      stringArray0[8] = "";
      stack0.toArray(stringArray0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Vector<String> vector0 = new Vector<String>(set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) vector0, locale_FilteringMode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The list of suffixes must not be null", "htkNu3ykY;mb*`Q");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(stringArray0[7], "", 2109, sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      ConversionException conversionException0 = new ConversionException(sQLClientInfoException0);
      Class<String> class0 = String.class;
      ConversionException conversionException1 = conversionException0.setTargetType(class0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      ConversionException conversionException2 = conversionException1.setFormat(dateFormat0);
      ConversionException conversionException3 = conversionException2.setResourceKey("");
      Locale locale0 = Locale.FRANCE;
      conversionException3.setLocale(locale0);
      conversionException1.getResourceKey();
      ConversionException conversionException4 = conversionException1.setResourceKey("htkNu3ykY;mb*`Q");
      assertSame(conversionException4, conversionException1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException((Throwable) null);
      conversionException0.getCause();
      ConversionException conversionException1 = conversionException0.setVariable("c(> 'OU.IA+(>Kv", "c(> 'OU.IA+(>Kv");
      conversionException0.setLocale((Locale) null);
      conversionException1.getLocalizedMessage();
      MockPrintStream mockPrintStream0 = new MockPrintStream("aH3*&Wp");
      conversionException1.printStackTrace((PrintStream) mockPrintStream0);
      ConversionException conversionException2 = conversionException1.setLocale((Locale) null);
      conversionException2.getCause();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      ConversionException conversionException3 = conversionException0.setSourceValue("aH3*&Wp");
      conversionException2.printStackTrace((PrintWriter) mockPrintWriter0);
      conversionException2.getCause();
      ConversionException conversionException4 = conversionException2.setSourceValue(object0);
      IConverter<String> iConverter0 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iConverter0).toString();
      ConversionException conversionException5 = conversionException4.setConverter(iConverter0);
      IConverter<?> iConverter1 = conversionException2.getConverter();
      conversionException5.setResourceKey("aH3*&Wp");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1));
      MockLocalDate.now((ZoneId) zoneOffset0);
      conversionException1.setSourceValue("&quot;");
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      ConversionException conversionException6 = conversionException3.setFormat(dateFormat0);
      conversionException6.setConverter(iConverter1);
      Locale locale0 = conversionException0.getLocale();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("]O`@\"Vh=#");
      IConverter<String> iConverter0 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      ConversionException conversionException1 = conversionException0.setConverter(iConverter0);
      ConversionException conversionException2 = conversionException1.setSourceValue("_l7*A'kg4Z7k>BZ");
      Locale locale0 = new Locale("", "_l7*A'kg4Z7k>BZ", "]O`@\"Vh=#");
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberFormatter numberFormatter0 = new NumberFormatter(numberFormat0);
      Format format0 = numberFormatter0.getFormat();
      ConversionException conversionException3 = conversionException2.setFormat(format0);
      ConversionException conversionException4 = conversionException3.setVariable("_l7*A'kg4Z7k>BZ", "");
      conversionException4.getTargetType();
      conversionException0.getFormat();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ConversionException conversionException5 = conversionException0.setTargetType(class0);
      assertSame(conversionException5, conversionException2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("/!eoAZg");
      Object object0 = new Object();
      ConversionException conversionException1 = conversionException0.setVariable("/!eoAZg", object0);
      conversionException1.toString();
      conversionException1.printStackTrace();
      conversionException0.getLocalizedMessage();
      ConversionException conversionException2 = conversionException1.setResourceKey((String) null);
      Class<String> class0 = String.class;
      ConversionException conversionException3 = conversionException2.setTargetType(class0);
      conversionException3.getFormat();
      conversionException0.setConverter((IConverter<?>) null);
      conversionException1.setFormat((Format) null);
      conversionException1.getVariables();
      ConversionException conversionException4 = conversionException2.setResourceKey("W{cGJ");
      conversionException4.getResourceKey();
      Object object1 = conversionException3.getSourceValue();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLException sQLException0 = new SQLException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      Throwable throwable0 = sQLNonTransientConnectionException0.initCause(sQLException0);
      sQLException0.initCause(throwable0);
      ConversionException conversionException0 = new ConversionException(sQLException0);
      sQLException0.spliterator();
      ConversionException conversionException1 = conversionException0.setVariable("m!8==}hPte(q%<~", "");
      sQLException0.fillInStackTrace();
      conversionException1.setResourceKey("q<tdL-A:t%k'+");
      Map<String, Object> map0 = conversionException1.getVariables();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("value");
      ConversionException conversionException1 = conversionException0.setVariable("value", "value");
      assertNull(conversionException1.getResourceKey());
      
      ConversionException conversionException2 = conversionException0.setVariable("value", conversionException1);
      assertSame(conversionException1, conversionException2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      ConversionException conversionException0 = new ConversionException("", sQLTransientConnectionException0);
      ConversionException conversionException1 = conversionException0.setResourceKey("");
      conversionException1.getSourceValue();
      conversionException0.getSourceValue();
      Locale locale0 = Locale.US;
      conversionException0.setLocale(locale0);
      Object object0 = new Object();
      ConversionException conversionException2 = conversionException1.setSourceValue(object0);
      conversionException0.getSourceValue();
      String string0 = null;
      MaskConverter<Month> maskConverter0 = new MaskConverter<Month>((String) null);
      conversionException2.setConverter(maskConverter0);
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance((-2345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2345
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration");
      sQLDataException0.spliterator();
      ConversionException conversionException0 = new ConversionException("net.bytebuddy.dynamic.loading.ByteArrayClassLoader$EmptyEnumeration", sQLDataException0);
      IConverter<String> iConverter0 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      ConversionException conversionException1 = conversionException0.setConverter(iConverter0);
      String string0 = "e^uiBhpp?i|,AH]";
      Object object0 = new Object();
      ConversionException conversionException2 = conversionException1.setVariable("e^uiBhpp?i|,AH]", object0);
      conversionException1.addSuppressed(sQLDataException0);
      conversionException2.setResourceKey("hQBykj0P:izFt");
      conversionException1.getFormat();
      conversionException0.getTargetType();
      String string1 = "org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$SuffixAndIgnoreFileFilter";
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$SuffixAndIgnoreFileFilter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 2, sQLNonTransientConnectionException0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('$');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ConversionException conversionException0 = new ConversionException(sQLInvalidAuthorizationSpecException0);
      DateFormat dateFormat0 = DateFormat.getDateInstance(2);
      conversionException0.setFormat(dateFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      IConverter<String> iConverter0 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      ConversionException conversionException1 = conversionException0.setConverter(iConverter0);
      assertSame(conversionException0, conversionException1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("1");
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      ConversionException conversionException1 = conversionException0.setFormat(dateFormat0);
      assertSame(conversionException0, conversionException1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException((String) null);
      // Undeclared exception!
      try { 
        conversionException0.setVariable((String) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'name' may not be null or empty.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("C");
      Class<String> class0 = String.class;
      IConverter<String> iConverter0 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      conversionException0.setConverter(iConverter0);
      ConversionException conversionException1 = conversionException0.setTargetType(class0);
      conversionException1.getSuppressed();
      IConverter<String> iConverter1 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      ConversionException conversionException2 = conversionException0.setConverter(iConverter1);
      conversionException2.setVariable("C", "org.apache.wicket.util.convert.ConversionException");
      Locale locale0 = new Locale("C", "org.apache.wicket.util.convert.ConversionException");
      ConversionException conversionException3 = conversionException0.setLocale(locale0);
      conversionException0.setTargetType(class0);
      Class<?> class1 = conversionException3.getTargetType();
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("");
      Class<?> class0 = conversionException0.getTargetType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/Oc%~H&xKPnI", "org.apache.wicket.util.convert.ConversionException");
      ConversionException conversionException0 = new ConversionException("/Oc%~H&xKPnI", sQLTimeoutException0);
      conversionException0.addSuppressed(sQLTimeoutException0);
      conversionException0.getVariables();
      Object object0 = new Object();
      ConversionException conversionException1 = conversionException0.setVariable("PDI*;vI=^?i[<u", object0);
      conversionException1.fillInStackTrace();
      Class<String> class0 = String.class;
      conversionException1.setTargetType(class0);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = locale0.stripExtensions();
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance((-3333), (-3333), locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3333
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("PPR{T9{L*\f<Z#5");
      Map<String, Object> map0 = conversionException0.getVariables();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("");
      ConversionException conversionException1 = conversionException0.setSourceValue("");
      assertSame(conversionException1, conversionException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "oQ6");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      ConversionException conversionException0 = new ConversionException("oQ6", batchUpdateException0);
      conversionException0.getStackTrace();
      ConversionException conversionException1 = conversionException0.setSourceValue((Object) null);
      conversionException1.addSuppressed(batchUpdateException0);
      batchUpdateException0.getStackTrace();
      conversionException1.getSourceValue();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLRecoverableException0);
      sQLRecoverableException0.addSuppressed(sQLDataException0);
      batchUpdateException0.getSuppressed();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      conversionException1.setTargetType(class0);
      ConversionException conversionException2 = conversionException0.setSourceValue((Object) null);
      assertNull(conversionException2.getResourceKey());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("f");
      String string0 = conversionException0.getResourceKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("gQN", "", sQLNonTransientConnectionException0);
      ConversionException conversionException0 = new ConversionException("", sQLNonTransientException0);
      String string0 = conversionException0.getResourceKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("f");
      IConverter<?> iConverter0 = conversionException0.getConverter();
      assertNull(iConverter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      ConversionException conversionException0 = new ConversionException("", sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(conversionException0);
      ConversionException conversionException1 = new ConversionException(sQLTransientConnectionException0);
      Locale locale0 = Locale.CANADA;
      ConversionException conversionException2 = conversionException1.setLocale(locale0);
      Class<String> class0 = String.class;
      ConversionException conversionException3 = conversionException2.setTargetType(class0);
      Object object0 = conversionException3.getSourceValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException((Throwable) null);
      conversionException0.getConverter();
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleAttributes();
      ConversionException conversionException1 = conversionException0.setLocale(locale0);
      conversionException1.getSuppressed();
      conversionException1.getSourceValue();
      conversionException0.getConverter();
      conversionException0.getLocale();
      String string0 = "";
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("^2M;y", fileSystemView0);
      File file0 = mockJFileChooser0.getCurrentDirectory();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("");
      conversionException0.getResourceKey();
      Format format0 = conversionException0.getFormat();
      assertNull(format0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.putIfAbsent("B>", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("B>", hashMap0);
      ConversionException conversionException0 = new ConversionException(sQLClientInfoException0);
      sQLClientInfoException0.getLocalizedMessage();
      sQLClientInfoException0.initCause(conversionException0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("c", clientInfoStatus1);
      conversionException0.getFormat();
      conversionException0.getLocale();
      MaskFormatter maskFormatter0 = new MaskFormatter("B>");
      maskFormatter0.getValidCharacters();
      MaskConverter<ChronoLocalDate> maskConverter0 = new MaskConverter<ChronoLocalDate>(maskFormatter0);
      ConversionException conversionException1 = conversionException0.setConverter(maskConverter0);
      assertSame(conversionException1, conversionException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException((Throwable) null);
      conversionException0.getConverter();
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleAttributes();
      ConversionException conversionException1 = conversionException0.setLocale(locale0);
      conversionException1.getSuppressed();
      conversionException0.getConverter();
      conversionException0.getLocale();
      ConversionException conversionException2 = new ConversionException((String) null);
      assertFalse(conversionException2.equals((Object)conversionException0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("PPR{T9{L*\f<Z#5");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ConversionException conversionException1 = conversionException0.setTargetType(class0);
      assertSame(conversionException1, conversionException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("5");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) conversionException0;
      objectArray0[4] = (Object) charArrayWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "$VALUES", objectArray0);
      conversionException0.printStackTrace(printWriter0);
      Class<String> class0 = String.class;
      ConversionException conversionException1 = conversionException0.setTargetType(class0);
      assertSame(conversionException1, conversionException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("/!eoAZg");
      Object object0 = new Object();
      ConversionException conversionException1 = conversionException0.setVariable("/!eoAZg", object0);
      conversionException1.toString();
      conversionException1.printStackTrace();
      conversionException0.getLocalizedMessage();
      Locale locale0 = Locale.ROOT;
      ConversionException conversionException2 = conversionException1.setLocale(locale0);
      IConverter<String> iConverter0 = (IConverter<String>) mock(IConverter.class, new ViolatedAssumptionAnswer());
      ConversionException conversionException3 = conversionException0.setConverter(iConverter0);
      String string0 = "The wildcard list must not be null";
      locale0.getUnicodeLocaleAttributes();
      conversionException1.getLocalizedMessage();
      conversionException1.setVariable("/!eoAZg", object0);
      String string1 = "te2G[Pe6";
      conversionException3.setResourceKey("te2G[Pe6");
      Class<String> class0 = String.class;
      ConversionException conversionException4 = conversionException2.setTargetType(class0);
      ConversionException conversionException5 = conversionException4.setVariable("te2G[Pe6", "/!eoAZg");
      // Undeclared exception!
      try { 
        conversionException5.addSuppressed(conversionException2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException((Throwable) null);
      conversionException0.getCause();
      ConversionException conversionException1 = conversionException0.setVariable("c(> 'OU.IA+(>Kv", "c(> 'OU.IA+(>Kv");
      conversionException0.setLocale((Locale) null);
      conversionException1.getLocalizedMessage();
      String string0 = "aH3*&Wp";
      MockPrintStream mockPrintStream0 = new MockPrintStream("aH3*&Wp");
      conversionException1.printStackTrace((PrintStream) mockPrintStream0);
      ConversionException conversionException2 = conversionException1.setLocale((Locale) null);
      conversionException2.getCause();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        ThaiBuddhistEra.of((-245));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: -245
         //
         verifyException("java.time.chrono.ThaiBuddhistEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      ConversionException conversionException0 = new ConversionException("", sQLTimeoutException0);
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("name");
      ConversionException conversionException1 = conversionException0.setResourceKey("name");
      assertEquals("name", conversionException1.getResourceKey());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";nQ>.]?N\"%?t", "", (-2198));
      ConversionException conversionException0 = new ConversionException("", sQLFeatureNotSupportedException0);
      Locale locale0 = Locale.US;
      locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SortedSet<String> sortedSet0 = treeSet0.headSet("");
      Locale.lookupTag(linkedList0, sortedSet0);
      ConversionException conversionException1 = conversionException0.setLocale(locale0);
      ConversionException conversionException2 = conversionException1.setResourceKey("");
      MockFile mockFile0 = new MockFile("So6.%FEsK");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFileOutputStream0.write(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      conversionException2.printStackTrace((PrintStream) mockPrintStream0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: value
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("PPR{|9{L*\f<Z#5");
      Locale locale0 = new Locale("PPR{|9{L*\f<Z#5");
      ConversionException conversionException1 = conversionException0.setLocale(locale0);
      assertSame(conversionException1, conversionException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("M)");
      MaskConverter<ClientInfoStatus> maskConverter0 = new MaskConverter<ClientInfoStatus>("M)");
      ConversionException conversionException1 = conversionException0.setConverter(maskConverter0);
      assertNull(conversionException1.getResourceKey());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "yes";
      ConversionException conversionException0 = new ConversionException("yes");
      ConversionException conversionException1 = new ConversionException(conversionException0);
      ConversionException conversionException2 = conversionException1.setConverter((IConverter<?>) null);
      conversionException2.toString();
      // Undeclared exception!
      try { 
        MockDateFormat.getTimeInstance(51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 51
         //
         verifyException("java.text.DateFormat", e);
      }
  }
}
