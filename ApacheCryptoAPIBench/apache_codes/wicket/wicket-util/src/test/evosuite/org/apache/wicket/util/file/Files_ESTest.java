/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 01:54:12 GMT 2022
 */

package org.apache.wicket.util.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;
import org.apache.commons.io.FileDeleteStrategy;
import org.apache.wicket.util.file.FileCleaner;
import org.apache.wicket.util.file.Files;
import org.apache.wicket.util.file.IFileCleaner;
import org.apache.wicket.util.time.Time;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Files_ESTest extends Files_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Xq\",");
      java.io.File file0 = MockFile.createTempFile("Xq\",", "Xq\",", (java.io.File) mockFile0);
      Files.copy(file0, file0);
      FileCleaner fileCleaner0 = new FileCleaner();
      // Undeclared exception!
      try { 
        Files.removeAsync(file0, (IFileCleaner) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'fileCleaner' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/some/fake/but/wellformed/url");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-60);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URL uRL0 = MockURL.getFileExample();
      java.io.File file0 = Files.getLocalFileFromUrl(uRL0);
      Files.getLastModified(file0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      java.io.File file0 = Files.getLocalFileFromUrl(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/some/fake/but/wellformed", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("url", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Files.mkdirs(file0);
      assertFalse(boolean1 == boolean0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/some/fake/but/wellformed", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("url", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(boolean1);
      
      boolean boolean2 = Files.remove(file0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/some/fake/but/wellformed", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("url", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        Files.writeTo(file0, (InputStream) byteArrayInputStream0, (int) (byte)2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Files.cleanupFilename("jar:file:ftp://ftp.someFakeButWellFormedURL.org/fooExample");
      assertNotNull(string0);
      assertEquals("jar_file_ftp___ftp.someFakeButWellFormedURL.org_fooExample", string0);
      
      MockFile mockFile0 = new MockFile("jar:file:ftp://ftp.someFakeButWellFormedURL.org/fooExample");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) mockFile0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("t`EgZE]y3Z+KQDW");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "Nra|gL~p2");
      assertTrue(boolean0);
      
      java.io.File file0 = Files.getLocalFileFromUrl("file:t`EgZE]y3Z+KQDW");
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertNull(file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isAbsolute());
      assertEquals("t`EgZE]y3Z+KQDW", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("t`EgZE]y3Z+KQDW", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals(10L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vc:)X6q0_R({\"tIj,,3");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "vc:)X6q0_R({\"tIj,,3");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) mockFile1, (InputStream) pipedInputStream0, (-1932735280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'bufSize' must not be <= 0
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.filename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      java.io.File file0 = Files.getLocalFileFromUrl(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("/some/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/some/fake/but/wellformed/url", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      Time time0 = Files.getLastModified(file0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("/some/fake/but/wellformed", file0.getParent());
      assertFalse(file0.isHidden());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/some/fake/but/wellformed/url", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("url", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertNull(time0);
      
      // Undeclared exception!
      try { 
        Files.writeTo(file0, (InputStream) null, 873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.io.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("file:");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertEquals("", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      boolean boolean0 = Files.remove(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertEquals("", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(boolean0);
      
      String string0 = Files.cleanupFilename("file:");
      assertNotNull(string0);
      assertEquals("file_", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5836, 1008);
      assertEquals((-5835), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        Files.writeTo(file0, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.normalize(uRI0);
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertNotNull(uRI1);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      
      MockFile mockFile0 = new MockFile(uRI1);
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-34), (byte)23, (byte) (-125), (byte)47, (byte) (-78), (byte) (-125), (byte) (-75), (byte)17}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-34), (byte)23, (byte) (-125), (byte)47, (byte) (-78), (byte) (-125), (byte) (-75), (byte)17}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-34), (byte)23, (byte) (-125), (byte)47, (byte) (-78), (byte) (-125), (byte) (-75), (byte)17}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      boolean boolean0 = sequenceInputStream0.markSupported();
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-34), (byte)23, (byte) (-125), (byte)47, (byte) (-78), (byte) (-125), (byte) (-75), (byte)17}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (byte)47);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-34), (byte)23, (byte) (-125), (byte)47, (byte) (-78), (byte) (-125), (byte) (-75), (byte)17}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      int int0 = Files.writeTo((java.io.File) mockFile0, (InputStream) pushbackInputStream0);
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertFalse(uRI1.isOpaque());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI1.getRawPath());
      assertNull(uRI1.getHost());
      assertEquals("file", uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI1.toString());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(8L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-34), (byte)23, (byte) (-125), (byte)47, (byte) (-78), (byte) (-125), (byte) (-75), (byte)17}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("file:");
      assertTrue(file0.exists());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      try { 
        Files.readBytes(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("milliseco");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "file:t`EgZE]y3Z+KDW");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = mockFile1.mkdirs();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("milliseco", mockFile0.toString());
      assertEquals("milliseco", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/milliseco", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("file:t`EgZE]y3Z+KDW", mockFile1.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/milliseco/file:t`EgZE]y3Z+KDW", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertTrue(boolean0);
      
      try { 
        Files.writeTo((java.io.File) mockFile1, (InputStream) null, (-179012333));
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("b9:3CGn}vum!tMNFK)", "b9:3CGn}vum!tMNFK)");
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      try { 
        Files.readBytes(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file:#K\"lOr@W");
      assertNotNull(mockFile0);
      
      java.io.File file0 = Files.getLocalFileFromUrl("file:#K\"lOr@W");
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("#K\"lOr@W", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals("#K\"lOr@W", file0.toString());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      assertNotSame(file0, mockFile0);
      
      URL uRL0 = MockURL.URL("file:");
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file:", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file:", uRL0.toExternalForm());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file:", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file:", uRL0.toExternalForm());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertFalse(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertEquals("", file1.getName());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertFalse(file1.isFile());
      assertNotNull(file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      
      String string0 = Files.basePath("z)moCR53P2DF'|$6ZR1", "e=WT.^uGnOr8^'");
      assertNotNull(string0);
      assertEquals("z)mo", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("oqjX", "The magic");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals("oqjX0The magic", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/oqjX0The magic", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      String string0 = Files.cleanupFilename("fil[:");
      assertNotNull(string0);
      assertEquals("fil[_", string0);
      
      java.io.File file1 = Files.getLocalFileFromUrl("fileCleaner");
      assertNull(file1);
      
      URL uRL0 = file0.toURL();
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals("oqjX0The magic", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/oqjX0The magic", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      java.io.File file2 = Files.getLocalFileFromUrl(uRL0);
      assertTrue(file2.equals((Object)file0));
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals("oqjX0The magic", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/oqjX0The magic", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.isAbsolute());
      assertTrue(file2.canRead());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals("oqjX0The magic", file2.getName());
      assertTrue(file2.isFile());
      assertTrue(file2.canWrite());
      assertFalse(file2.isHidden());
      assertEquals("/tmp", file2.getParent());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/tmp/oqjX0The magic", file2.toString());
      assertFalse(file2.isDirectory());
      assertTrue(file2.exists());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getTotalSpace());
      assertTrue(file2.canExecute());
      assertNotNull(file2);
      assertNotSame(file0, file2);
      assertNotSame(file2, file0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("jar:file:ftp://ftp.someFakeButWellFormedURL.org/fooExample");
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.extension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = Files.basePath((String) null, (String) null);
      assertNull(string0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("fileCleaer");
      assertNull(file0);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) null, (InputStream) null, 930);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K`F\"d%>@Q", "K`F\"d%>@Q");
      assertNotNull(mockFile0);
      
      boolean boolean0 = Files.remove(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      assertFalse(boolean0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      fileCleaner0.track((java.io.File) mockFile0, (Object) "K`F\"d%>@Q");
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      
      boolean boolean1 = mockFile0.delete();
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      assertFalse(boolean1);
      
      boolean boolean2 = Files.removeFolderAsync(mockFile0, fileCleaner0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      assertFalse(boolean2);
      
      boolean boolean3 = Files.mkdirs(mockFile0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(boolean3);
      
      boolean boolean4 = Files.mkdirs(mockFile0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(boolean4);
      
      boolean boolean5 = Files.removeFolder(mockFile0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q/K`F\"d%>@Q", mockFile0.toString());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/K`F\"d%>@Q", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("K`F\"d%>@Q", mockFile0.getName());
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("fileCleaner");
      assertNull(file0);
      
      String string0 = Files.basePath("fileCleaner", "SYSTEM");
      assertNotNull(string0);
      assertEquals("file", string0);
      
      String string1 = "Failed to create directory: ";
      String string2 = Files.filename("Failed to create directory: ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Failed to create directory: ", string2);
      
      String string3 = Files.cleanupFilename("file");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("file", string3);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      String string4 = Files.basePath("Failed to create directory: ", "url");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Failed to create directo", string4);
      
      boolean boolean0 = Files.remove((java.io.File) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile((java.io.File) null, "FcjW6 {?Lf3`Daxi,");
      assertNotNull(mockFile0);
      
      boolean boolean1 = Files.removeFolder(mockFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("FcjW6 {?Lf3`Daxi,", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("FcjW6 {?Lf3`Daxi,", mockFile0.getName());
      assertFalse(boolean1);
      
      String string5 = Files.extension("}auVd7WK[eB?V.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      try { 
        Files.readBytes(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      java.io.File file0 = Files.getLocalFileFromUrl("");
      assertNull(file0);
      
      MockFile mockFile0 = new MockFile((java.io.File) null, "file:fileCleaner");
      assertNotNull(mockFile0);
      
      int int0 = Files.writeTo((java.io.File) mockFile0, (InputStream) sequenceInputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("file:fileCleaner", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("file:fileCleaner", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0, int0);
      
      boolean boolean0 = Files.mkdirs(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("file:fileCleaner", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("file:fileCleaner", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(file1);
      
      java.io.File file2 = Files.getLocalFileFromUrl("file:fileCleaner");
      assertFalse(file2.equals((Object)mockFile0));
      assertEquals(0L, file2.getFreeSpace());
      assertNull(file2.getParent());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.isAbsolute());
      assertEquals(0L, file2.length());
      assertFalse(file2.isDirectory());
      assertFalse(file2.canExecute());
      assertEquals("fileCleaner", file2.getName());
      assertFalse(file2.canWrite());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.lastModified());
      assertTrue(file2.isFile());
      assertFalse(file2.canRead());
      assertFalse(file2.exists());
      assertEquals("fileCleaner", file2.toString());
      assertNotNull(file2);
      assertNotSame(file2, mockFile0);
      
      int int1 = Files.writeTo((java.io.File) mockFile0, (InputStream) sequenceInputStream0);
      assertFalse(mockFile0.equals((Object)file2));
      assertTrue(int1 == int0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("file:fileCleaner", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("file:fileCleaner", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotSame(mockFile0, file2);
      assertEquals(0, int1);
      
      java.io.File file3 = Files.getLocalFileFromUrl(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(file3);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) null, (InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("bh:3CGn}vum!tNFK)", "bh:3CGn}vum!tNFK)");
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      byte[] byteArray0 = Files.readBytes(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertFalse(file0.isHidden());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = "";
      java.io.File file1 = Files.getLocalFileFromUrl("org.apache.commons.io.filefilter.WildcardFilter");
      assertNull(file1);
      
      boolean boolean0 = Files.remove((java.io.File) null);
      assertFalse(boolean0);
      
      String string1 = Files.filename("The Filen");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The Filen", string1);
      
      // Undeclared exception!
      try { 
        Files.copy((java.io.File) null, (java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.wicket.util.file.Files");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(boolean0);
      
      boolean boolean1 = mockFile0.setWritable(false);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(boolean1);
      
      java.io.File file0 = MockFile.createTempFile("org.apache.wicket.util.file.Files", "org.apache.wicket.util.file.Files", (java.io.File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Files", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("org.apache.wicket.util.file.Files0org.apache.wicket.util.file.Files", file0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Files/org.apache.wicket.util.file.Files0org.apache.wicket.util.file.Files", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, time0.getMilliseconds());
      assertNotNull(time0);
      assertNotSame(mockFile0, file0);
      
      String string0 = Files.extension("org.apache.wicket.util.file.Files");
      assertNotNull(string0);
      assertEquals("Files", string0);
      
      boolean boolean3 = Files.removeFolder(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.apache.wicket.util.file.Files", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean3);
      
      String string1 = Files.filename("org.apache.wicket.util.file.Files");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.wicket.util.file.Files", string1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(file1);
      
      boolean boolean4 = Files.remove((java.io.File) null);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string2 = Files.extension("Feb");
      assertNull(string2);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 1788;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1788);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.WildcardFilter");
      assertNotNull(mockFile0);
      
      java.io.File file0 = MockFile.createTempFile("org.apache.commons.io.filefilter.WildcardFilter", "DUPkB~n4i$;IgX#c", (java.io.File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.io.filefilter.WildcardFilter", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.io.filefilter.WildcardFilter", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.commons.io.filefilter.WildcardFilter/org.apache.commons.io.filefilter.WildcardFilter0DUPkB~n4i$;IgX#c", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertEquals("org.apache.commons.io.filefilter.WildcardFilter0DUPkB~n4i$;IgX#c", file0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.commons.io.filefilter.WildcardFilter", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Files.removeFolder(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.io.filefilter.WildcardFilter", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.io.filefilter.WildcardFilter", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertNotSame(mockFile0, file0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        Files.removeFolder(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.FSObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = Files.extension("jar:file:$J5");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Files.basePath((String) null, "jar:file:$J5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("", "file:");
      assertNotNull(mockFile0);
      
      java.io.File file0 = mockFile0.getAbsoluteFile();
      assertTrue(file0.equals((Object)mockFile0));
      assertEquals("/file:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/file:", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("file:", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals("/file:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(time0);
      assertNotSame(mockFile0, file0);
      
      URL uRL0 = mockFile0.toURL();
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals("/file:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      assertNotSame(mockFile0, file0);
      
      boolean boolean1 = mockFile0.renameTo(file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertEquals("/file:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/file:", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("file:", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean1);
      
      String string0 = "(RClPe$0I\\x-]";
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file1.equals((Object)file0));
      assertTrue(file1.equals((Object)mockFile0));
      assertEquals("/file:", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/", file1.getParent());
      assertEquals("/file:", file1.toString());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertEquals("file:", file1.getName());
      assertFalse(file1.exists());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertNotNull(file1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      
      String string1 = Files.basePath("", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "file:", (java.io.File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fileCleaner");
      assertNotNull(mockFile0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 5);
      assertNotNull(pushbackInputStream0);
      
      int int0 = Files.writeTo((java.io.File) mockFile0, (InputStream) pushbackInputStream0, 5);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("fileCleaner", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("fileCleaner", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Files.extension("org.apache.commons.io.filefilter.WildcardFilter");
      assertNotNull(string0);
      assertEquals("WildcardFilter", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b]}\"h%AXx4jQF:u", "b]}\"h%AXx4jQF:u");
      assertNotNull(mockFile0);
      
      try { 
        Files.readBytes(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = Files.remove(mockFile0);
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fileCleaner");
      assertNotNull(mockFile0);
      
      java.io.File file0 = MockFile.createTempFile("Xq\",", "fileCleaner", (java.io.File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("fileCleaner", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fileCleaner", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("Xq\",0fileCleaner", file0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner/Xq\",0fileCleaner", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Files.copy(file0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("fileCleaner", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fileCleaner", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("Xq\",0fileCleaner", file0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner/Xq\",0fileCleaner", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      assertNotNull(fileDeleteStrategy0);
      
      fileCleaner0.track(file0, (Object) "fileCleaner", fileDeleteStrategy0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("fileCleaner", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("fileCleaner", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals("Xq\",0fileCleaner", file0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner/Xq\",0fileCleaner", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      fileCleaner0.destroy();
      // Undeclared exception!
      try { 
        Files.removeAsync(file0, fileCleaner0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      java.nio.file.Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNotNull(path0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean0 = mockFile0.delete();
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(boolean0);
      
      boolean boolean1 = Files.removeFolderAsync(mockFile0, fileCleaner0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(boolean1);
      
      boolean boolean2 = Files.mkdirs(mockFile0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(boolean2);
      
      boolean boolean3 = Files.mkdirs(mockFile0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Files.removeFolder(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.FSObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = Files.removeFolder((java.io.File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.cleanupFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file:t`EgZE]y3Z+KQDW");
      assertNotNull(mockFile0);
      
      boolean boolean0 = Files.mkdirs(mockFile0);
      assertEquals("file:t`EgZE]y3Z+KQDW", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("file:t`EgZE]y3Z+KQDW", mockFile0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("Mon", "Mon");
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/Mon0Mon", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Mon0Mon", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "Mon");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/Mon0Mon", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Mon0Mon", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/Mon0Mon", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Mon", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/tmp/Mon0Mon/Mon", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.mkdir();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/Mon0Mon", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Mon0Mon", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/Mon0Mon", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Mon", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/tmp/Mon0Mon/Mon", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(boolean1);
      
      try { 
        Files.copy(file0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      String string1 = Files.cleanupFilename("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      java.io.File file0 = Files.getLocalFileFromUrl("");
      assertNull(file0);
      
      String string2 = Files.filename("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        Files.getLastModified((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = Files.cleanupFilename("objXZ`'h6],.1P.DAT");
      assertNotNull(string0);
      assertEquals("objXZ`'h6]_.1P.DAT", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "{TdU!{nkx9(0^OmPH&g";
      java.io.File file0 = MockFile.createTempFile("{TdU!{nkx9(0^OmPH&g", "{TdU!{nkx9(0^OmPH&g");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.getName());
      assertEquals("/tmp/{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      Time time0 = Files.getLastModified(file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.getName());
      assertEquals("/tmp/{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, time0.getMilliseconds());
      assertNotNull(time0);
      
      byte[] byteArray0 = Files.readBytes(file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.getName());
      assertEquals("/tmp/{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      fileCleaner0.destroy();
      boolean boolean0 = Files.removeFolderAsync(file0, fileCleaner0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.getName());
      assertEquals("/tmp/{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(boolean0);
      
      Files.copy(file0, file0);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.getName());
      assertEquals("/tmp/{TdU!{nkx9(0^OmPH&g0{TdU!{nkx9(0^OmPH&g", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        fileCleaner0.track(file0, object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No new trackers can be added once exitWhenFinished() is called
         //
         verifyException("org.apache.commons.io.FileCleaningTracker", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("bh:3CGn}vum!tNFK)", "bh:3CGn}vum!tNFK)");
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean0 = Files.removeFolderAsync(file0, fileCleaner0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(boolean0);
      
      boolean boolean1 = Files.mkdirs(file0);
      assertFalse(boolean1 == boolean0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("m)P*RDB*yilJOqS%7y,");
      assertNull(file0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean0 = Files.removeAsync((java.io.File) null, fileCleaner0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)37, (byte)19, (byte)105, (byte)112, (byte)0, (byte)27, (byte)46, (byte)119}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) null, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("Qc$IhJ(Mt*.n\"Gf");
      assertNull(file0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      fileCleaner0.destroy();
      boolean boolean0 = Files.removeAsync((java.io.File) null, fileCleaner0);
      assertFalse(boolean0);
      
      String string0 = Files.basePath("Qc$IhJ(Mt*.n\"Gf", "P-z");
      assertNotNull(string0);
      assertEquals("Qc$IhJ(Mt*", string0);
      
      java.io.File file1 = Files.getLocalFileFromUrl("Qc$IhJ(Mt*.n\"Gf");
      assertNull(file1);
      
      boolean boolean1 = Files.removeFolder((java.io.File) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Files.getLastModified((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The magic number must contain at least one byte");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setExecutable(false);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("The magic number must contain at least one byte", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("The magic number must contain at least one byte", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(boolean0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "992QY/GP}~n");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean1 = mockFile0.delete();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("The magic number must contain at least one byte", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("The magic number must contain at least one byte", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertNotSame(mockFile0, mockFile1);
      assertFalse(boolean1);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      fileCleaner0.track((java.io.File) mockFile0, (Object) mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("The magic number must contain at least one byte", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("The magic number must contain at least one byte", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("GP}~n", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The magic number must contain at least one byte/992QY/GP}~n", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The magic number must contain at least one byte/992QY", mockFile1.getParent());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean2 = Files.removeFolderAsync(mockFile1, fileCleaner0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("The magic number must contain at least one byte", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("The magic number must contain at least one byte", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("GP}~n", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The magic number must contain at least one byte/992QY/GP}~n", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The magic number must contain at least one byte/992QY", mockFile1.getParent());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(boolean2);
      
      String string0 = Files.cleanupFilename("992QY/GP}~n");
      assertNotNull(string0);
      assertEquals("992QY_GP}~n", string0);
      
      boolean boolean3 = Files.removeFolder(mockFile0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("The magic number must contain at least one byte", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("The magic number must contain at least one byte", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertNotSame(mockFile0, mockFile1);
      assertFalse(boolean3);
      
      java.io.File file0 = Files.getLocalFileFromUrl("992QY/GP}~n");
      assertNull(file0);
      
      boolean boolean4 = mockFile1.setExecutable(false, true);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("The magic number must contain at least one byte", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("The magic number must contain at least one byte", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("GP}~n", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The magic number must contain at least one byte/992QY/GP}~n", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/The magic number must contain at least one byte/992QY", mockFile1.getParent());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(boolean4);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.FORCE;
      assertNotNull(fileDeleteStrategy0);
      
      try { 
        pushbackInputStream0.unread((byte[]) null, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = Files.removeFolder(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("b9:3CGn}vum!tMNFK)", "b9:3CGn}vum!tMNFK)");
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.toString());
      assertNotNull(file0);
      
      boolean boolean0 = Files.removeFolder(file0);
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("bh:3CGn}vum!tNFK)", "bh:3CGn}vum!tNFK)");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      byte[] byteArray0 = Files.readBytes(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = Files.remove(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.setWritable(false);
      assertFalse(boolean1 == boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertTrue(boolean1);
      
      java.io.File file0 = MockFile.createTempFile("org.apache.wicket.util.file.Files", "org.apache.wicket.util.file.Files", (java.io.File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("org.apache.wicket.util.file.Files0org.apache.wicket.util.file.Files", file0.getName());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Files0org.apache.wicket.util.file.Files", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean2 = Files.remove(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertEquals("org.apache.wicket.util.file.Files0org.apache.wicket.util.file.Files", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/org.apache.wicket.util.file.Files0org.apache.wicket.util.file.Files", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(boolean2);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, time0.getMilliseconds());
      assertNotNull(time0);
      assertNotSame(mockFile0, file0);
      
      String string0 = mockFile0.getAbsolutePath();
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertNotNull(string0);
      assertNotSame(mockFile0, file0);
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", string0);
      
      boolean boolean3 = Files.removeFolder(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean3);
      
      String string1 = Files.filename("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(file1);
      
      boolean boolean4 = Files.remove((java.io.File) null);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string2 = "Feb";
      String string3 = Files.extension("Feb");
      assertNull(string3);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 1788;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1788);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = Files.filename("\"r PiU)XG");
      assertNotNull(string0);
      assertEquals("\"r PiU)XG", string0);
      
      java.io.File file0 = null;
      java.io.File file1 = MockFile.createTempFile("\"r PiU)XG", "Failed to create directory: ", (java.io.File) null);
      assertEquals("\"r PiU)XG0Failed to create directory: ", file1.getName());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp", file1.getParent());
      assertEquals("/tmp/\"r PiU)XG0Failed to create directory: ", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertNotNull(file1);
      
      boolean boolean0 = Files.removeFolderAsync(file1, (IFileCleaner) null);
      assertEquals("\"r PiU)XG0Failed to create directory: ", file1.getName());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp", file1.getParent());
      assertEquals("/tmp/\"r PiU)XG0Failed to create directory: ", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertFalse(boolean0);
      
      boolean boolean1 = Files.removeFolder((java.io.File) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Files.remove(file1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("\"r PiU)XG0Failed to create directory: ", file1.getName());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("/tmp", file1.getParent());
      assertEquals("/tmp/\"r PiU)XG0Failed to create directory: ", file1.toString());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canWrite());
      assertTrue(boolean2);
      
      String string1 = Files.extension("~hF@D&@~G#Bu=}8DZ");
      assertNull(string1);
      
      String string2 = Files.cleanupFilename("\"*/:<>?|,");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("_________", string2);
      
      String string3 = Files.basePath("+us>", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("+us", string3);
      
      boolean boolean3 = Files.removeAsync((java.io.File) null, (IFileCleaner) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      java.io.File file2 = Files.getLocalFileFromUrl("~hF@D&@~G#Bu=}8DZ");
      assertNull(file2);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      java.io.File file3 = Files.getLocalFileFromUrl(uRL0);
      assertFalse(file3.equals((Object)file1));
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("/some/fake/but/wellformed/url", file3.toString());
      assertFalse(file3.exists());
      assertFalse(file3.isDirectory());
      assertFalse(file3.isHidden());
      assertEquals("url", file3.getName());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canWrite());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals("/some/fake/but/wellformed", file3.getParent());
      assertTrue(file3.isAbsolute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertNotNull(file3);
      assertNotSame(file3, file1);
      
      try { 
        Files.copy(file3, file1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Files.remove((java.io.File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("+Q3;Fdz)PHLs0Vps7En");
      assertNull(file0);
      
      MockFile mockFile0 = new MockFile("9$QE Y~om%,#mE<_4");
      assertNotNull(mockFile0);
      
      boolean boolean0 = Files.removeFolder(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("9$QE Y~om%,#mE<_4", mockFile0.getName());
      assertEquals("9$QE Y~om%,#mE<_4", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.getFileExample();
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(file1.equals((Object)mockFile0));
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertTrue(file1.isFile());
      assertEquals("/some/fake/but/wellformed", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals("url", file1.getName());
      assertEquals(0L, file1.length());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", file1.toString());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(file1, mockFile0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+Q3;Fdz)PHLs0Vps7En");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = Files.mkdirs(file1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertTrue(file1.isFile());
      assertEquals("/some/fake/but/wellformed", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals("url", file1.getName());
      assertEquals(0L, file1.length());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals("/some/fake/but/wellformed/url", file1.toString());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertNotSame(uRL1, uRL0);
      assertNotSame(file1, mockFile0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Files.readBytes((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("b9:3CGn}vum!tMNFK)", "b9:3CGn}vum!tMNFK)");
      assertEquals("/tmp/b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      boolean boolean0 = Files.mkdirs(file0);
      assertEquals("/tmp/b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("b9:3CGn}vum!tMNFK)0b9:3CGn}vum!tMNFK)", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = Files.cleanupFilename("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.delete();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(boolean0);
      
      boolean boolean1 = mockFile0.setReadable(false);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean1);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      boolean boolean2 = mockFile0.setWritable(true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(boolean2);
      
      boolean boolean3 = Files.mkdirs(mockFile0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean3);
      
      boolean boolean4 = mockFile0.setReadable(false, true);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean4);
      
      boolean boolean5 = mockFile0.setReadable(false, false);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean5);
      
      boolean boolean6 = mockFile0.setLastModified(663L);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(boolean6);
      
      java.nio.file.Path path0 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertNotNull(path0);
      
      java.nio.file.Path path1 = mockFile0.toPath();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertNotNull(path1);
      assertSame(path1, path0);
      
      boolean boolean7 = mockFile0.setReadOnly();
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(boolean7);
      
      String string1 = Files.extension("");
      assertNull(string1);
      
      URI uRI0 = mockFile0.toURI();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/", uRI0.getRawPath());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      boolean boolean8 = mockFile0.setExecutable(true);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean3);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(boolean8);
      
      boolean boolean9 = Files.removeFolder(mockFile0);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean0);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean2);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean3);
      assertFalse(boolean9 == boolean8);
      assertFalse(boolean9 == boolean7);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(boolean9);
      
      boolean boolean10 = Files.mkdirs(mockFile0);
      assertTrue(boolean10 == boolean0);
      assertTrue(boolean10 == boolean5);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean2);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean4);
      assertFalse(boolean10 == boolean9);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean8);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(boolean10);
      
      boolean boolean11 = mockFile0.setLastModified(2536L);
      assertTrue(boolean11 == boolean2);
      assertFalse(boolean11 == boolean5);
      assertTrue(boolean11 == boolean1);
      assertFalse(boolean11 == boolean7);
      assertFalse(boolean11 == boolean10);
      assertFalse(boolean11 == boolean0);
      assertFalse(boolean11 == boolean8);
      assertFalse(boolean11 == boolean4);
      assertTrue(boolean11 == boolean9);
      assertFalse(boolean11 == boolean6);
      assertFalse(boolean11 == boolean3);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(boolean11);
      
      boolean boolean12 = Files.removeFolder(mockFile0);
      assertTrue(boolean12 == boolean11);
      assertFalse(boolean12 == boolean3);
      assertFalse(boolean12 == boolean4);
      assertFalse(boolean12 == boolean6);
      assertTrue(boolean12 == boolean9);
      assertFalse(boolean12 == boolean5);
      assertTrue(boolean12 == boolean1);
      assertFalse(boolean12 == boolean0);
      assertTrue(boolean12 == boolean2);
      assertFalse(boolean12 == boolean7);
      assertFalse(boolean12 == boolean10);
      assertFalse(boolean12 == boolean8);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(663L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(boolean12);
      
      // Undeclared exception!
      try { 
        Files.cleanupFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.mkdirs((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("The FilenameFilter must not be null", "The FilenameFilter must not be null");
      assertFalse(file0.isDirectory());
      assertEquals("The FilenameFilter must not be null0The FilenameFilter must not be null", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/The FilenameFilter must not be null0The FilenameFilter must not be null", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = Files.writeTo(file0, (InputStream) sequenceInputStream0);
      assertFalse(file0.isDirectory());
      assertEquals("The FilenameFilter must not be null0The FilenameFilter must not be null", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/The FilenameFilter must not be null0The FilenameFilter must not be null", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, int0);
      
      boolean boolean0 = Files.mkdirs(file0);
      assertFalse(file0.isDirectory());
      assertEquals("The FilenameFilter must not be null0The FilenameFilter must not be null", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/The FilenameFilter must not be null0The FilenameFilter must not be null", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(file1);
      
      java.io.File file2 = Files.getLocalFileFromUrl("The FilenameFilter must not be null");
      assertNull(file2);
      
      int int1 = Files.writeTo(file0, (InputStream) sequenceInputStream0);
      assertTrue(int1 == int0);
      assertFalse(file0.isDirectory());
      assertEquals("The FilenameFilter must not be null0The FilenameFilter must not be null", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/The FilenameFilter must not be null0The FilenameFilter must not be null", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, int1);
      
      java.io.File file3 = Files.getLocalFileFromUrl(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(file3);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) null, (InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://ww");
      assertNotNull(mockFile0);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("http:/ww", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("ww", mockFile0.getName());
      assertEquals("http:", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertNull(time0);
      
      MockFile mockFile1 = new MockFile("http://ww");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        Files.writeTo((java.io.File) mockFile1, (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "url";
      String string1 = "";
      java.io.File file0 = MockFile.createTempFile("url", "");
      assertFalse(file0.isDirectory());
      assertEquals("url0", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/url0", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      long long0 = pipedInputStream0.skip((-2648L));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, long0);
      
      try { 
        Files.writeTo(file0, (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "Feb";
      String string1 = Files.filename("Feb");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Feb", string1);
      
      int int0 = 0;
      String string2 = "p=,lzNGa\\#I4^";
      try { 
        MockURI.URI("Feb", "Feb", "Feb", 0, "Feb", "", "p=,lzNGa#I4^");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Feb://Feb@Feb:0Feb?#p=,lzNGa%23I4%5E
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.getLocalFileFromUrl((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'url' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("XRMxYegqTb:GJ>G");
      assertNull(file0);
      
      String string0 = Files.cleanupFilename("XRMxYegqTb:GJ>G");
      assertNotNull(string0);
      assertEquals("XRMxYegqTb_GJ_G", string0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        Files.writeTo((java.io.File) null, (InputStream) pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.basePath("!)&2x", "!)&2x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("t`EgZE]y3Z+KDW", "t`EgZE]y3Z+KDW");
      assertNotNull(mockFile0);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("t`EgZE]y3Z+KDW", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/t`EgZE]y3Z+KDW", mockFile0.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/t`EgZE]y3Z+KDW/t`EgZE]y3Z+KDW", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("b]\"h%AXx4jQF:u", "b]\"h%AXx4jQF:u");
      assertEquals("b]\"h%AXx4jQF:u0b]\"h%AXx4jQF:u", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/b]\"h%AXx4jQF:u0b]\"h%AXx4jQF:u", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      Time time0 = Files.getLastModified(file0);
      assertEquals("b]\"h%AXx4jQF:u0b]\"h%AXx4jQF:u", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/b]\"h%AXx4jQF:u0b]\"h%AXx4jQF:u", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, time0.getMilliseconds());
      assertNotNull(time0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      java.io.File file0 = Files.getLocalFileFromUrl(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/some/fake/but/wellformed", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("url", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("/some/fake/but/wellformed/url", file0.toString());
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = Files.filename("jar:file:b]}\"h%AXx4jQF:u");
      assertNotNull(string0);
      assertEquals("jar:file:b]}\"h%AXx4jQF:u", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+Q3;Fdz)PHLs0Vps7En", "");
      assertNotNull(mockFile0);
      
      java.io.File file0 = mockFile0.getAbsoluteFile();
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file0.getName());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertNull(time0);
      assertNotSame(mockFile0, file0);
      
      URL uRL0 = mockFile0.toURL();
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      assertNotSame(mockFile0, file0);
      
      boolean boolean0 = mockFile0.renameTo(file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.delete();
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean1);
      
      URL uRL1 = MockURL.URL(uRL0, "(RClPe$0Ix-]");
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertNotNull(uRL1);
      assertNotSame(mockFile0, file0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file1.getParent());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/(RClPe$0Ix-]", file1.toString());
      assertFalse(file1.canRead());
      assertEquals("(RClPe$0Ix-]", file1.getName());
      assertTrue(file1.isFile());
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      
      String string0 = Files.basePath("+Q3;Fdz)PHLs0Vps7En", "");
      assertNotNull(string0);
      assertEquals("+Q3;Fdz)PHLs0Vps7E", string0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean2 = Files.removeAsync(file1, fileCleaner0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.length());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file1.getParent());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/(RClPe$0Ix-]", file1.toString());
      assertFalse(file1.canRead());
      assertEquals("(RClPe$0Ix-]", file1.getName());
      assertTrue(file1.isFile());
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertTrue(boolean2);
      
      String string1 = Files.filename("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      java.io.File file2 = Files.getLocalFileFromUrl(uRL0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(file2.equals((Object)mockFile0));
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file2.toString());
      assertFalse(file2.exists());
      assertFalse(file2.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file2.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isHidden());
      assertFalse(file2.canWrite());
      assertTrue(file2.isAbsolute());
      assertTrue(file2.isFile());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertNotNull(file2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(file2, file1);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file0);
      
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.mark((-1473));
      int int0 = Files.writeTo(file0, (InputStream) sequenceInputStream0);
      assertTrue(mockFile0.equals((Object)file2));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, mockFile0);
      assertEquals(0, int0);
      
      Time time1 = Files.getLastModified(file2);
      assertTrue(mockFile0.equals((Object)file2));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(file2.equals((Object)mockFile0));
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, time1.getMilliseconds());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file2.toString());
      assertFalse(file2.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file2.getParent());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.canWrite());
      assertFalse(file2.isHidden());
      assertTrue(file2.canExecute());
      assertTrue(file2.isAbsolute());
      assertTrue(file2.canRead());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.length());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.exists());
      assertEquals(0L, file2.getTotalSpace());
      assertNotNull(time1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(file2, file1);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file0);
      
      // Undeclared exception!
      try { 
        Files.basePath("", "4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = null;
      String string1 = Files.basePath("org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$SuffixAndIgnoreFileFilter", (String) null);
      assertNotNull(string1);
      assertEquals("org.apache.wicket.util.license.ApacheLicenseHeaderTestCase$SuffixAndIgnoreFileFilter", string1);
      
      java.io.File file0 = Files.getLocalFileFromUrl("Jnl;");
      assertNull(file0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.getLastModified((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      java.io.File file0 = null;
      MockFile mockFile0 = new MockFile((java.io.File) null, "K`F\"d%@Q");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.delete();
      assertEquals("K`F\"d%@Q", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("K`F\"d%@Q", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
      
      boolean boolean1 = Files.removeFolderAsync((java.io.File) null, fileCleaner0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Files.mkdirs((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      java.io.File file0 = Files.getLocalFileFromUrl(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(file0);
      
      IFileCleaner iFileCleaner0 = null;
      boolean boolean0 = Files.removeFolderAsync((java.io.File) null, (IFileCleaner) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Files.getLastModified((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fileCleaner");
      assertNotNull(mockFile0);
      
      try { 
        Files.copy(mockFile0, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fileCleaner");
      assertNotNull(mockFile0);
      
      java.io.File file0 = MockFile.createTempFile("Xq\",", "fileCleaner", (java.io.File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("fileCleaner", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals("fileCleaner", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner/Xq\",0fileCleaner", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Xq\",0fileCleaner", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Files.copy(file0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("fileCleaner", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals("fileCleaner", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner/Xq\",0fileCleaner", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Xq\",0fileCleaner", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean0 = Files.removeAsync(file0, fileCleaner0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("fileCleaner", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals("fileCleaner", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner/Xq\",0fileCleaner", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("Xq\",0fileCleaner", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/fileCleaner", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.getLocalFileFromUrl((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'url' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("+Q3;Fdz)PHLs0Vps7En", "");
      assertNotNull(mockFile0);
      
      java.io.File file0 = mockFile0.getAbsoluteFile();
      assertTrue(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file0.toString());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Time time0 = Files.getLastModified(mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(time0);
      assertNotSame(mockFile0, file0);
      
      URL uRL0 = mockFile0.toURL();
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      assertNotSame(mockFile0, file0);
      
      boolean boolean1 = mockFile0.renameTo(file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file0.toString());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean1);
      
      String string0 = "(RClPe$0I\\x-]";
      boolean boolean2 = mockFile0.delete();
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean2);
      
      java.io.File file1 = Files.getLocalFileFromUrl(uRL0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file1.equals((Object)file0));
      assertTrue(file1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file1.getName());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertFalse(file1.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file1.toString());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertNotNull(file1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      
      String string1 = Files.basePath("+Q3;Fdz)PHLs0Vps7En", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("+Q3;Fdz)PHLs0Vps7E", string1);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      String string2 = Files.basePath("+Q3;Fdz)PHLs0Vps7En", "");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("+Q3;Fdz)PHLs0Vps7E", string2);
      
      boolean boolean3 = Files.remove(file1);
      assertTrue(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file1.equals((Object)file0));
      assertTrue(file1.equals((Object)mockFile0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file1.getName());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertFalse(file1.canWrite());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.canExecute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file1.toString());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertFalse(boolean3);
      
      MockFile mockFile1 = new MockFile(file0, ":`osrA");
      assertTrue(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file1));
      assertNotNull(mockFile1);
      
      boolean boolean4 = Files.removeFolder(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(mockFile0.equals((Object)file1));
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile1));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals("+Q3;Fdz)PHLs0Vps7En", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", file0.toString());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En", mockFile1.getParent());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/+Q3;Fdz)PHLs0Vps7En/:`osrA", mockFile1.toString());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertEquals(":`osrA", mockFile1.getName());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file1);
      assertFalse(boolean4);
      
      String string3 = Files.extension("jar:file:ftp://ftp.someFakeButWellFormedURL.org/fooExample");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org/fooExample", string3);
      
      try { 
        Files.readBytes(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = Files.extension("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "Yq]\\m996%ho$k{";
      String string1 = Files.extension("Yq]m996%ho$k{");
      assertNull(string1);
      
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        Files.getLocalFileFromUrl((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'url' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      java.nio.file.Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(path0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean0 = mockFile0.delete();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(boolean0);
      
      boolean boolean1 = Files.removeFolderAsync(mockFile0, fileCleaner0);
      assertFalse(boolean1 == boolean0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean1);
      
      boolean boolean2 = Files.removeFolderAsync(mockFile0, fileCleaner0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean2);
      
      boolean boolean3 = Files.mkdirs(mockFile0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean3);
      
      FileCleaner fileCleaner1 = new FileCleaner();
      assertFalse(fileCleaner1.equals((Object)fileCleaner0));
      assertNotNull(fileCleaner1);
      
      MockFile mockFile1 = new MockFile("", "");
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      assertNotNull(fileDeleteStrategy0);
      
      fileCleaner1.track((java.io.File) mockFile1, (Object) null, fileDeleteStrategy0);
      assertFalse(fileCleaner1.equals((Object)fileCleaner0));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.isFile());
      assertEquals("", mockFile1.getName());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isAbsolute());
      assertNull(mockFile1.getParent());
      assertTrue(mockFile1.canRead());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/", mockFile1.toString());
      assertNotSame(fileCleaner1, fileCleaner0);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean4 = Files.removeAsync(mockFile0, fileCleaner1);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(fileCleaner1.equals((Object)fileCleaner0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(fileCleaner1, fileCleaner0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("bh:3CGn}vum!tNFK)", "bh:3CGn}vum!tNFK)");
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.NORMAL;
      assertNotNull(fileDeleteStrategy0);
      
      boolean boolean0 = fileDeleteStrategy0.deleteQuietly(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean0);
      
      fileCleaner0.track((java.io.File) mockFile0, (Object) file0, fileDeleteStrategy0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.toString());
      assertEquals("bh:3CGn}vum!tNFK)0bh:3CGn}vum!tNFK)", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      boolean boolean1 = Files.removeAsync(mockFile0, fileCleaner0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean1);
      
      boolean boolean2 = Files.remove(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        Files.readBytes((java.io.File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Xq\",");
      assertNotNull(mockFile0);
      
      java.io.File file0 = MockFile.createTempFile("Xq\",", "Xq\",", (java.io.File) mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Xq\",", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("Xq\",", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Xq\",0Xq\",", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/Xq\",", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/Xq\",/Xq\",0Xq\",", file0.toString());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Files.copy(file0, file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Xq\",", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("Xq\",", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Xq\",0Xq\",", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/Xq\",", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/Xq\",/Xq\",0Xq\",", file0.toString());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      FileCleaner fileCleaner0 = new FileCleaner();
      assertNotNull(fileCleaner0);
      
      boolean boolean0 = Files.removeAsync(file0, fileCleaner0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Xq\",", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("Xq\",", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Xq\",0Xq\",", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/Xq\",", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/wicket/wicket-util/Xq\",/Xq\",0Xq\",", file0.toString());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file:#K\"lOr@W");
      assertNotNull(mockFile0);
      
      boolean boolean0 = Files.remove(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("file:#K\"lOr@W", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:#K\"lOr@W", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      java.io.File file0 = MockFile.createTempFile("?<#XiXw`!]0S", "?<#XiXw`!]0S");
      Files.readBytes(file0);
      FileCleaner fileCleaner0 = new FileCleaner();
      FileDeleteStrategy fileDeleteStrategy0 = FileDeleteStrategy.FORCE;
      fileDeleteStrategy0.delete(file0);
      fileCleaner0.track(file0, (Object) fileDeleteStrategy0, fileDeleteStrategy0);
      fileCleaner0.track(file0, (Object) file0, fileDeleteStrategy0);
      Object object0 = new Object();
      fileCleaner0.track(file0, object0);
      Object object1 = new Object();
      fileCleaner0.track(file0, object1);
      fileCleaner0.track(file0, (Object) file0);
      Files.removeAsync(file0, fileCleaner0);
      Files.remove(file0);
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "";
      Files.getLocalFileFromUrl("8%JQ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (java.io.File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Files.getLocalFileFromUrl("+Q3;Fdz)PHLs0Vps7En");
      Files.getLocalFileFromUrl("jar:file:The FilenameFilter must not be null");
      String string0 = Files.cleanupFilename("+Q3;Fdz)PHLs0Vps7En");
      assertEquals("+Q3;Fdz)PHLs0Vps7En", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      java.io.File file0 = Files.getLocalFileFromUrl("\n\n");
      assertNull(file0);
  }
}
