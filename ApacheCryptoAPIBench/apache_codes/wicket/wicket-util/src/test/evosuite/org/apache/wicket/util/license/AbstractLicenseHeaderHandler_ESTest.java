/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:09:55 GMT 2022
 */

package org.apache.wicket.util.license;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.List;
import org.apache.wicket.util.license.CssLicenseHeaderHandler;
import org.apache.wicket.util.license.HtmlLicenseHeaderHandler;
import org.apache.wicket.util.license.PropertiesLicenseHeaderHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLicenseHeaderHandler_ESTest extends AbstractLicenseHeaderHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CssLicenseHeaderHandler cssLicenseHeaderHandler0 = new CssLicenseHeaderHandler((List<String>) null);
      // Undeclared exception!
      try { 
        cssLicenseHeaderHandler0.prependLicenseHeader((File) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PropertiesLicenseHeaderHandler propertiesLicenseHeaderHandler0 = new PropertiesLicenseHeaderHandler((List<String>) null);
      // Undeclared exception!
      try { 
        propertiesLicenseHeaderHandler0.extractLicenseHeader((File) null, (-2021), (-2021));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HtmlLicenseHeaderHandler htmlLicenseHeaderHandler0 = new HtmlLicenseHeaderHandler((List<String>) null);
      // Undeclared exception!
      try { 
        htmlLicenseHeaderHandler0.addLicenseHeader((File) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CssLicenseHeaderHandler cssLicenseHeaderHandler0 = new CssLicenseHeaderHandler((List<String>) null);
      cssLicenseHeaderHandler0.getLicenseHeader();
      String string0 = cssLicenseHeaderHandler0.getLicenseHeader();
      assertEquals("/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CssLicenseHeaderHandler cssLicenseHeaderHandler0 = new CssLicenseHeaderHandler((List<String>) null);
      List<String> list0 = cssLicenseHeaderHandler0.getIgnoreFiles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CssLicenseHeaderHandler cssLicenseHeaderHandler0 = new CssLicenseHeaderHandler((List<String>) null);
      String string0 = cssLicenseHeaderHandler0.getLicenseType((File) null);
      assertNull(string0);
  }
}
