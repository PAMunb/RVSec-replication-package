/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:01:13 GMT 2022
 */

package org.apache.wicket.util.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Locale;
import org.apache.wicket.util.time.AbstractTime;
import org.apache.wicket.util.time.Duration;
import org.apache.wicket.util.time.Time;
import org.apache.wicket.util.time.TimeOfDay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time(12, (-1659), timeOfDay0.AM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minute -1659 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      assertEquals(43200000L, timeOfDay0.getMilliseconds());
      assertEquals(12, timeOfDay0.hour());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time(12, (-1493), timeOfDay0.PM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minute -1493 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-1053L));
      TimeOfDay.Meridian timeOfDay_Meridian0 = TimeOfDay.PM;
      assertNotNull(timeOfDay_Meridian0);
      assertEquals("PM", timeOfDay_Meridian0.toOptionalString());
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("PM", timeOfDay_Meridian0.toString());
      
      TimeOfDay timeOfDay0 = TimeOfDay.time(1, 1, 1, timeOfDay_Meridian0);
      assertNotNull(timeOfDay0);
      assertEquals("PM", timeOfDay_Meridian0.toOptionalString());
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("PM", timeOfDay_Meridian0.toString());
      assertEquals(1, timeOfDay0.minute());
      assertEquals(13, timeOfDay0.hour());
      assertEquals(1, timeOfDay0.second());
      assertEquals(46861000L, timeOfDay0.getMilliseconds());
      
      Time time0 = timeOfDay0.next();
      assertNotNull(time0);
      assertEquals("PM", timeOfDay_Meridian0.toOptionalString());
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("PM", timeOfDay_Meridian0.toString());
      assertEquals(1, timeOfDay0.minute());
      assertEquals(13, timeOfDay0.hour());
      assertEquals(1, timeOfDay0.second());
      assertEquals(46861000L, timeOfDay0.getMilliseconds());
      assertEquals(46859947L, time0.getMilliseconds());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(183, 597, 1, 183, 369);
      assertNotNull(mockGregorianCalendar0);
      
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf((Calendar) mockGregorianCalendar0, time0);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals("PM", timeOfDay_Meridian0.toOptionalString());
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("PM", timeOfDay_Meridian0.toString());
      assertEquals(1, timeOfDay0.minute());
      assertEquals(13, timeOfDay0.hour());
      assertEquals(1, timeOfDay0.second());
      assertEquals(46861000L, timeOfDay0.getMilliseconds());
      assertEquals(46859947L, time0.getMilliseconds());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=46859947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=0,SECOND=59,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(59, timeOfDay1.second());
      assertEquals(46859000L, timeOfDay1.getMilliseconds());
      assertEquals(13, timeOfDay1.hour());
      assertEquals(0, timeOfDay1.minute());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(957L);
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf((-511L));
      assertNotNull(timeOfDay0);
      assertEquals((-511L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      
      Time time0 = Time.valueOf(timeOfDay0);
      assertNotNull(time0);
      assertEquals((-511L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(446L, time0.getMilliseconds());
      
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf(time0);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals((-511L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(446L, time0.getMilliseconds());
      assertEquals(0, timeOfDay1.hour());
      assertEquals(0, timeOfDay1.minute());
      assertEquals(0, timeOfDay1.second());
      assertEquals(0L, timeOfDay1.getMilliseconds());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.milliseconds(1000L);
      assertNotNull(duration0);
      assertEquals(1.0, duration0.seconds(), 0.01);
      assertEquals(2.777777777777778E-4, duration0.hours(), 0.01);
      assertEquals(1000L, duration0.getMilliseconds());
      assertEquals(1.1574074074074073E-5, duration0.days(), 0.01);
      assertEquals(0.016666666666666666, duration0.minutes(), 0.01);
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      assertNotNull(timeOfDay0);
      assertEquals(1.0, duration0.seconds(), 0.01);
      assertEquals(2.777777777777778E-4, duration0.hours(), 0.01);
      assertEquals(1000L, duration0.getMilliseconds());
      assertEquals(1.1574074074074073E-5, duration0.days(), 0.01);
      assertEquals(0.016666666666666666, duration0.minutes(), 0.01);
      assertEquals(0, timeOfDay0.minute());
      assertEquals(1000L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(1, timeOfDay0.second());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ONE_MINUTE;
      assertNotNull(duration0);
      assertEquals(60.0, duration0.seconds(), 0.01);
      assertEquals(60000L, duration0.getMilliseconds());
      assertEquals(0.016666666666666666, duration0.hours(), 0.01);
      assertEquals(1.0, duration0.minutes(), 0.01);
      assertEquals(6.944444444444445E-4, duration0.days(), 0.01);
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      assertNotNull(timeOfDay0);
      assertEquals(60.0, duration0.seconds(), 0.01);
      assertEquals(60000L, duration0.getMilliseconds());
      assertEquals(0.016666666666666666, duration0.hours(), 0.01);
      assertEquals(1.0, duration0.minutes(), 0.01);
      assertEquals(6.944444444444445E-4, duration0.days(), 0.01);
      assertEquals(1, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      assertEquals(60000L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Time time0 = Time.valueOf(timeOfDay0);
      assertNotNull(time0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(1392482562320L, time0.getMilliseconds());
      
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf((Calendar) mockGregorianCalendar0, time0);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392482562320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=42,SECOND=42,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392482562320L, time0.getMilliseconds());
      assertEquals(42, timeOfDay1.minute());
      assertEquals(16, timeOfDay1.hour());
      assertEquals(42, timeOfDay1.second());
      assertEquals(60162000L, timeOfDay1.getMilliseconds());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf((-4859L));
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-4859L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals((-4), timeOfDay0.second());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(0L);
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0L, timeOfDay0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      
      TimeOfDay timeOfDay1 = TimeOfDay.time(0, 0, timeOfDay0.AM);
      assertNotNull(timeOfDay1);
      assertTrue(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0L, timeOfDay1.getMilliseconds());
      assertEquals(0, timeOfDay1.hour());
      assertEquals(0, timeOfDay1.minute());
      assertEquals(0, timeOfDay1.second());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      
      TimeOfDay timeOfDay1 = TimeOfDay.time(4, 0, 0, timeOfDay0.AM);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(0, timeOfDay1.second());
      assertEquals(4, timeOfDay1.hour());
      assertEquals(14400000L, timeOfDay1.getMilliseconds());
      assertEquals(0, timeOfDay1.minute());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      
      TimeOfDay timeOfDay1 = TimeOfDay.time(10, 3, 10, timeOfDay0.AM);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(10, timeOfDay1.hour());
      assertEquals(3, timeOfDay1.minute());
      assertEquals(10, timeOfDay1.second());
      assertEquals(36190000L, timeOfDay1.getMilliseconds());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      
      int int0 = timeOfDay0.second();
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2599, 2599, 2599, 2599, 2599, 207);
      assertNotNull(mockGregorianCalendar0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.now((Calendar) mockGregorianCalendar0);
      assertNotNull(timeOfDay0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0L, timeOfDay0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1053L));
      MockThread mockThread0 = new MockThread("");
      assertNotNull(mockThread0);
      
      Duration duration0 = Duration.benchmark((Runnable) mockThread0);
      assertNotNull(duration0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0L, duration0.getMilliseconds());
      assertEquals(0.0, duration0.days(), 0.01);
      assertEquals(0.0, duration0.hours(), 0.01);
      assertEquals(0.0, duration0.seconds(), 0.01);
      assertEquals(0.0, duration0.minutes(), 0.01);
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      assertNotNull(timeOfDay0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0L, duration0.getMilliseconds());
      assertEquals(0.0, duration0.days(), 0.01);
      assertEquals(0.0, duration0.hours(), 0.01);
      assertEquals(0.0, duration0.seconds(), 0.01);
      assertEquals(0.0, duration0.minutes(), 0.01);
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      
      Time time0 = timeOfDay0.next();
      assertNotNull(time0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0L, duration0.getMilliseconds());
      assertEquals(0.0, duration0.days(), 0.01);
      assertEquals(0.0, duration0.hours(), 0.01);
      assertEquals(0.0, duration0.seconds(), 0.01);
      assertEquals(0.0, duration0.minutes(), 0.01);
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-1053L), time0.getMilliseconds());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(596, 183, 369, 60, 65534);
      assertNotNull(mockGregorianCalendar0);
      
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf((Calendar) mockGregorianCalendar0, time0);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0L, duration0.getMilliseconds());
      assertEquals(0.0, duration0.days(), 0.01);
      assertEquals(0.0, duration0.hours(), 0.01);
      assertEquals(0.0, duration0.seconds(), 0.01);
      assertEquals(0.0, duration0.minutes(), 0.01);
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-1053L), time0.getMilliseconds());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-1053,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(23, timeOfDay1.hour());
      assertEquals(86398000L, timeOfDay1.getMilliseconds());
      assertEquals(59, timeOfDay1.minute());
      assertEquals(58, timeOfDay1.second());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.hours(23);
      assertNotNull(duration0);
      assertEquals(82800.0, duration0.seconds(), 0.01);
      assertEquals(1380.0, duration0.minutes(), 0.01);
      assertEquals(23.0, duration0.hours(), 0.01);
      assertEquals(82800000L, duration0.getMilliseconds());
      assertEquals(0.9583333333333334, duration0.days(), 0.01);
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      assertNotNull(timeOfDay0);
      assertEquals(82800.0, duration0.seconds(), 0.01);
      assertEquals(1380.0, duration0.minutes(), 0.01);
      assertEquals(23.0, duration0.hours(), 0.01);
      assertEquals(82800000L, duration0.getMilliseconds());
      assertEquals(0.9583333333333334, duration0.days(), 0.01);
      assertEquals(82800000L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(23, timeOfDay0.hour());
      
      int int0 = timeOfDay0.minute();
      assertEquals(82800.0, duration0.seconds(), 0.01);
      assertEquals(1380.0, duration0.minutes(), 0.01);
      assertEquals(23.0, duration0.hours(), 0.01);
      assertEquals(82800000L, duration0.getMilliseconds());
      assertEquals(0.9583333333333334, duration0.days(), 0.01);
      assertEquals(82800000L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(23, timeOfDay0.hour());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.seconds((-1382));
      assertNotNull(duration0);
      assertEquals((-0.3838888888888889), duration0.hours(), 0.01);
      assertEquals((-1382000L), duration0.getMilliseconds());
      assertEquals((-23.033333333333335), duration0.minutes(), 0.01);
      assertEquals((-0.01599537037037037), duration0.days(), 0.01);
      assertEquals((-1382.0), duration0.seconds(), 0.01);
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      assertNotNull(timeOfDay0);
      assertEquals((-0.3838888888888889), duration0.hours(), 0.01);
      assertEquals((-1382000L), duration0.getMilliseconds());
      assertEquals((-23.033333333333335), duration0.minutes(), 0.01);
      assertEquals((-0.01599537037037037), duration0.days(), 0.01);
      assertEquals((-1382.0), duration0.seconds(), 0.01);
      assertEquals((-23), timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-1382000L), timeOfDay0.getMilliseconds());
      assertEquals((-2), timeOfDay0.second());
      
      int int0 = timeOfDay0.minute();
      assertEquals((-0.3838888888888889), duration0.hours(), 0.01);
      assertEquals((-1382000L), duration0.getMilliseconds());
      assertEquals((-23.033333333333335), duration0.minutes(), 0.01);
      assertEquals((-0.01599537037037037), duration0.days(), 0.01);
      assertEquals((-1382.0), duration0.seconds(), 0.01);
      assertEquals((-23), timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-1382000L), timeOfDay0.getMilliseconds());
      assertEquals((-2), timeOfDay0.second());
      assertEquals((-23), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.militaryTime(0, 0, 0);
      assertNotNull(timeOfDay0);
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(3071L);
      assertNotNull(timeOfDay0);
      assertEquals(3, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(3071L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      
      int int0 = timeOfDay0.hour();
      assertEquals(3, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(3071L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.hours((-1382));
      assertNotNull(duration0);
      assertEquals((-4975200.0), duration0.seconds(), 0.01);
      assertEquals((-82920.0), duration0.minutes(), 0.01);
      assertEquals((-57.583333333333336), duration0.days(), 0.01);
      assertEquals((-4975200000L), duration0.getMilliseconds());
      assertEquals((-1382.0), duration0.hours(), 0.01);
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf(duration0);
      assertNotNull(timeOfDay0);
      assertEquals((-4975200.0), duration0.seconds(), 0.01);
      assertEquals((-82920.0), duration0.minutes(), 0.01);
      assertEquals((-57.583333333333336), duration0.days(), 0.01);
      assertEquals((-4975200000L), duration0.getMilliseconds());
      assertEquals((-1382.0), duration0.hours(), 0.01);
      assertEquals(0, timeOfDay0.minute());
      assertEquals((-4975200000L), timeOfDay0.getMilliseconds());
      assertEquals((-1382), timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      
      int int0 = timeOfDay0.hour();
      assertEquals((-4975200.0), duration0.seconds(), 0.01);
      assertEquals((-82920.0), duration0.minutes(), 0.01);
      assertEquals((-57.583333333333336), duration0.days(), 0.01);
      assertEquals((-4975200000L), duration0.getMilliseconds());
      assertEquals((-1382.0), duration0.hours(), 0.01);
      assertEquals(0, timeOfDay0.minute());
      assertEquals((-4975200000L), timeOfDay0.getMilliseconds());
      assertEquals((-1382), timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals((-1382), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf((Calendar) null, (Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      try { 
        TimeOfDay.valueOf(calendar0, "");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      try { 
        TimeOfDay.valueOf("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.now((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(20, timeOfDay0.hour());
      
      // Undeclared exception!
      try { 
        timeOfDay0.next((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      assertNotNull(timeOfDay0);
      assertEquals(12, timeOfDay0.hour());
      assertEquals(43200000L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      
      String string0 = timeOfDay0.toString();
      assertNotNull(string0);
      assertEquals(12, timeOfDay0.hour());
      assertEquals(43200000L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      assertEquals("12:0", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.second());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(20, timeOfDay0.hour());
      
      String string0 = timeOfDay0.toString();
      assertNotNull(string0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.second());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(20, timeOfDay0.hour());
      assertEquals("20:21:21", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf((-295L));
      assertNotNull(timeOfDay0);
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-295L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(662, 1, 1, 1992, (-702), 177);
      assertNotNull(mockGregorianCalendar0);
      
      Time time0 = timeOfDay0.next((Calendar) mockGregorianCalendar0);
      assertNotNull(time0);
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-295L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1392495681025L, time0.getMilliseconds());
      
      TimeOfDay timeOfDay1 = TimeOfDay.valueOf(time0);
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertEquals(0, timeOfDay0.hour());
      assertEquals((-295L), timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.second());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1392495681025L, time0.getMilliseconds());
      assertEquals(73281000L, timeOfDay1.getMilliseconds());
      assertEquals(20, timeOfDay1.hour());
      assertEquals(21, timeOfDay1.minute());
      assertEquals(21, timeOfDay1.second());
      assertNotSame(timeOfDay0, timeOfDay1);
      assertNotSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      
      Locale locale0 = new Locale("Cannot convert '", "Cannot convert '", "S&lNg_%-T");
      assertNotNull(locale0);
      assertEquals("CANNOT CONVERT '", locale0.getCountry());
      assertEquals("cannot convert '_CANNOT CONVERT '_S&lNg_%-T", locale0.toString());
      assertEquals("S&lNg_%-T", locale0.getVariant());
      assertEquals("cannot convert '", locale0.getLanguage());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("CANNOT CONVERT '", locale0.getCountry());
      assertEquals("cannot convert '_CANNOT CONVERT '_S&lNg_%-T", locale0.toString());
      assertEquals("S&lNg_%-T", locale0.getVariant());
      assertEquals("cannot convert '", locale0.getLanguage());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      Time time0 = timeOfDay0.next(calendar0);
      assertNotNull(time0);
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals("CANNOT CONVERT '", locale0.getCountry());
      assertEquals("cannot convert '_CANNOT CONVERT '_S&lNg_%-T", locale0.toString());
      assertEquals("S&lNg_%-T", locale0.getVariant());
      assertEquals("cannot convert '", locale0.getLanguage());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1392482562320L, time0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeOfDay.Meridian timeOfDay_Meridian0 = TimeOfDay.AM;
      assertNotNull(timeOfDay_Meridian0);
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("AM", timeOfDay_Meridian0.toString());
      assertEquals("AM", timeOfDay_Meridian0.toOptionalString());
      
      TimeOfDay timeOfDay0 = TimeOfDay.time(12, 12, 25, timeOfDay_Meridian0);
      assertNotNull(timeOfDay0);
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("AM", timeOfDay_Meridian0.toString());
      assertEquals("AM", timeOfDay_Meridian0.toOptionalString());
      assertEquals(25, timeOfDay0.second());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(12, timeOfDay0.minute());
      assertEquals(745000L, timeOfDay0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(20, timeOfDay0.hour());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time(50, 50, 50, timeOfDay0.PM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour 62 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(20, timeOfDay0.hour());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time(946, 946, 946, timeOfDay0.AM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour 946 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.militaryTime(10, 10, 10);
      assertNotNull(timeOfDay0);
      assertEquals(10, timeOfDay0.hour());
      assertEquals(36610000L, timeOfDay0.getMilliseconds());
      assertEquals(10, timeOfDay0.second());
      assertEquals(10, timeOfDay0.minute());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.militaryTime(21, 21, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Second -1 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.militaryTime(20, (-274), (-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minute -274 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.militaryTime(2857, 2857, 2857);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour 2857 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.NOON;
      assertNotNull(timeOfDay0);
      assertEquals(43200000L, timeOfDay0.getMilliseconds());
      assertEquals(12, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      
      int int0 = timeOfDay0.hour();
      assertEquals(43200000L, timeOfDay0.getMilliseconds());
      assertEquals(12, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf((Calendar) null, "N@_+}:.;QUyXs+3 ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(20, timeOfDay0.hour());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      
      int int0 = timeOfDay0.minute();
      assertEquals(20, timeOfDay0.hour());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Time time0 = Time.START_OF_UNIX_TIME;
      assertNotNull(time0);
      assertEquals(0L, time0.getMilliseconds());
      
      TimeOfDay timeOfDay0 = TimeOfDay.valueOf((Calendar) mockGregorianCalendar0, time0);
      assertNotNull(timeOfDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, time0.getMilliseconds());
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      
      int int0 = timeOfDay0.second();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(0L, time0.getMilliseconds());
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.ONE_WEEK;
      assertNotNull(duration0);
      assertEquals(10080.0, duration0.minutes(), 0.01);
      assertEquals(7.0, duration0.days(), 0.01);
      assertEquals(604800.0, duration0.seconds(), 0.01);
      assertEquals(604800000L, duration0.getMilliseconds());
      assertEquals(168.0, duration0.hours(), 0.01);
      
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time 168:0 is not a time of day value
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeOfDay.Meridian timeOfDay_Meridian0 = TimeOfDay.AM;
      assertNotNull(timeOfDay_Meridian0);
      assertEquals("AM", timeOfDay_Meridian0.toOptionalString());
      assertEquals("AM", timeOfDay_Meridian0.toString());
      assertFalse(timeOfDay_Meridian0.isNull());
      
      TimeOfDay timeOfDay0 = TimeOfDay.time(23, 12, timeOfDay_Meridian0);
      assertNotNull(timeOfDay0);
      assertEquals("AM", timeOfDay_Meridian0.toOptionalString());
      assertEquals("AM", timeOfDay_Meridian0.toString());
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals(83520000L, timeOfDay0.getMilliseconds());
      assertEquals(12, timeOfDay0.minute());
      assertEquals(23, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time(12, 12, (-2507), timeOfDay0.PM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Second -2507 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.militaryTime(12, 12, 2172);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Second 2172 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.now();
      assertNotNull(timeOfDay0);
      assertEquals(20, timeOfDay0.hour());
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
      assertEquals(21, timeOfDay0.minute());
      assertEquals(21, timeOfDay0.second());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time((-1), (-1), timeOfDay0.PM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minute -1 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.militaryTime(1, 1182, 1182);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minute 1182 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.militaryTime((-4757), (-4757), (-4757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour -4757 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertNotNull(timeOfDay0);
      assertEquals(0L, timeOfDay0.getMilliseconds());
      assertEquals(0, timeOfDay0.hour());
      assertEquals(0, timeOfDay0.second());
      assertEquals(0, timeOfDay0.minute());
      
      // Undeclared exception!
      try { 
        TimeOfDay.time(3466, 11, timeOfDay0.PM);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hour 3478 is not valid
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeOfDay.Meridian timeOfDay_Meridian0 = new TimeOfDay.Meridian("12.00am");
      assertNotNull(timeOfDay_Meridian0);
      assertFalse(timeOfDay_Meridian0.isNull());
      assertEquals("12.00am", timeOfDay_Meridian0.toString());
      assertEquals("12.00am", timeOfDay_Meridian0.toOptionalString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)AbstractTime.localtime;
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=?,MINUTE=0,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      TimeOfDay timeOfDay0 = TimeOfDay.now((Calendar) mockGregorianCalendar0);
      assertEquals(73281000L, timeOfDay0.getMilliseconds());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf("12.00am");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time 386780:21:21 is not a time of day value
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time -419952:-21:-29 is not a time of day value
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.valueOf((Time) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.time.TimeOfDay", e);
      }
  }
}
