/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:04:54 GMT 2022
 */

package org.apache.wicket.util.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import org.apache.wicket.util.file.File;
import org.apache.wicket.util.lang.Bytes;
import org.apache.wicket.util.resource.ZipResourceStream;
import org.apache.wicket.util.time.Time;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipResourceStream_ESTest extends ZipResourceStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = new File("/");
      MockFile.createTempFile("vA}I?<[1lC", "Not a directory: '{}'");
      ZipResourceStream zipResourceStream0 = null;
      try {
        zipResourceStream0 = new ZipResourceStream(file0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.zip.ZipException: duplicate entry: tmp/vA}I?<[1lC0Not a directory: '{}'
         //
         verifyException("org.apache.wicket.util.resource.ZipResourceStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipResourceStream zipResourceStream0 = null;
      try {
        zipResourceStream0 = new ZipResourceStream((File) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'dir' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZipResourceStream zipResourceStream0 = null;
      try {
        zipResourceStream0 = new ZipResourceStream((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'dir' may not be null.
         //
         verifyException("org.apache.wicket.util.lang.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = new File("O>)6Ukx|FMT{))ouL");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O>)6Ukx|FMT{))ouL/O>)6Ukx|FMT{))ouL0org.apache.commons.io.filefilter.PrefixFileFilter");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "GU@lrA.'uzdWmVec");
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = new File("/");
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0, true);
      assertNull(zipResourceStream0.getStyle());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = new File("O>)6Ukx|FMT{))ouL");
      MockFile.createTempFile("O>)6Ukx|FMT{))ouL", "org.apache.commons.io.filefilter.PrefixFileFilter", (java.io.File) file0);
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
      zipResourceStream0.close();
      assertNull(zipResourceStream0.getStyle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = new File("");
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
      Time time0 = zipResourceStream0.lastModifiedTime();
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = new File("");
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
      InputStream inputStream0 = zipResourceStream0.getInputStream();
      assertEquals(22, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = new File("");
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
      Bytes bytes0 = zipResourceStream0.length();
      assertEquals(0.021484375, bytes0.kilobytes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = new File("?S}$8TQBPn*n", "?S}$8TQBPn*n");
      MockFile.createTempFile("613!3Db})u3xCao[", "613!3Db})u3xCao[", (java.io.File) file0);
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
      String string0 = zipResourceStream0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = new File("/");
      ZipResourceStream zipResourceStream0 = new ZipResourceStream(file0);
      assertNull(zipResourceStream0.getStyle());
  }
}
