/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:06:17 GMT 2022
 */

package org.apache.wicket.util.string;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.wicket.util.string.PrependingStringBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrependingStringBuffer_ESTest extends PrependingStringBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer(0);
      PrependingStringBuffer prependingStringBuffer1 = prependingStringBuffer0.prepend('>');
      String string0 = prependingStringBuffer1.toString();
      assertEquals(1, prependingStringBuffer0.length());
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer(0);
      PrependingStringBuffer prependingStringBuffer1 = prependingStringBuffer0.prepend("");
      assertEquals(0, prependingStringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer(0);
      prependingStringBuffer0.prepend('>');
      int int0 = prependingStringBuffer0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      // Undeclared exception!
      try { 
        prependingStringBuffer0.prepend((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.PrependingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = null;
      try {
        prependingStringBuffer0 = new PrependingStringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.PrependingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer("");
      assertEquals(0, prependingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      String string0 = prependingStringBuffer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      boolean boolean0 = prependingStringBuffer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      boolean boolean0 = prependingStringBuffer0.equals(prependingStringBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      Object object0 = new Object();
      boolean boolean0 = prependingStringBuffer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      prependingStringBuffer0.prepend("H&F(%I>XX#h{k");
      assertEquals(13, prependingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer(0);
      PrependingStringBuffer prependingStringBuffer1 = prependingStringBuffer0.prepend("')Q]=cy5XRQ");
      prependingStringBuffer1.prepend("\nx-,>V9/-/}<");
      prependingStringBuffer1.prepend('p');
      assertEquals(24, prependingStringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = null;
      try {
        prependingStringBuffer0 = new PrependingStringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.string.PrependingStringBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer();
      int int0 = prependingStringBuffer0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrependingStringBuffer prependingStringBuffer0 = new PrependingStringBuffer(0);
      prependingStringBuffer0.hashCode();
  }
}
