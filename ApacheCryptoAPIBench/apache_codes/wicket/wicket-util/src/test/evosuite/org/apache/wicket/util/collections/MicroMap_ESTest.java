/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:03:25 GMT 2022
 */

package org.apache.wicket.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.wicket.util.collections.MicroMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MicroMap_ESTest extends MicroMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap1 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      BiFunction<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction0 = (BiFunction<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyInt() , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(abstractMap_SimpleImmutableEntry0).toString();
      microMap1.putIfAbsent((Integer) microMap0.MAX_ENTRIES, abstractMap_SimpleImmutableEntry0);
      microMap1.replaceAll(biFunction0);
      assertTrue(microMap1.isFull());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Set<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> set0 = (Set<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)microMap0.entrySet();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>((Integer) 1, (Integer) 1);
      microMap0.putAll(microMap0);
      assertFalse(microMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      microMap0.put((Integer) microMap0.MAX_ENTRIES, (Integer) microMap0.MAX_ENTRIES);
      assertFalse(microMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1936));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractMap_SimpleImmutableEntry0).toString();
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = microMap0.put(integer0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(microMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      Integer integer0 = microMap0.get(microMap0.MAX_ENTRIES);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(566);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractMap_SimpleImmutableEntry0).toString();
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      Integer integer1 = new Integer(566);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = microMap0.get(integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(microMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> microMap0 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>((Integer) microMap0.MAX_ENTRIES, (Integer) microMap0.MAX_ENTRIES);
      microMap1.containsValue(microMap0.MAX_ENTRIES);
      assertTrue(microMap1.isFull());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>(integer0, (Integer) microMap0.MAX_ENTRIES);
      boolean boolean0 = microMap1.containsKey(microMap1.MAX_ENTRIES);
      assertFalse(boolean0);
      assertTrue(microMap1.isFull());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        microMap0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      // Undeclared exception!
      try { 
        microMap0.putAll((Map<? extends Integer, ? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>((Integer) 1, (Integer) null);
      // Undeclared exception!
      try { 
        microMap0.put((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        microMap0.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = null;
      try {
        microMap0 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>((Integer) 1, (Integer) 1);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        microMap1.put(integer0, (Integer) microMap0.MAX_ENTRIES);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      int int0 = microMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>((Integer) 1, (Integer) 1);
      int int0 = microMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>(integer0, integer0);
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        microMap0.putAll(microMap1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.collections.MicroMap$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      doReturn("8HB@E$8ia]C0C").when(abstractMap_SimpleImmutableEntry0).toString();
      BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> biFunction0 = (BiFunction<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = microMap0.merge(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0, biFunction0);
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap1 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((Integer) 1, abstractMap_SimpleImmutableEntry1);
      microMap1.remove((Object) microMap0.MAX_ENTRIES);
      assertFalse(microMap0.isEmpty());
      assertTrue(microMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      Integer integer0 = new Integer(3744);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap1 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      microMap1.remove((Object) microMap0.MAX_ENTRIES);
      assertFalse(microMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(1995);
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>(integer0, integer0);
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>((Integer) 1, (Integer) null);
      // Undeclared exception!
      try { 
        microMap0.putAll(microMap1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Map full
         //
         verifyException("org.apache.wicket.util.collections.MicroMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      boolean boolean0 = microMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> microMap0 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(abstractMap_SimpleImmutableEntry0, (Integer) 1);
      boolean boolean0 = microMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = microMap0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>();
      boolean boolean0 = microMap0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> microMap0 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>((Integer) microMap0.MAX_ENTRIES, integer0);
      Set<Integer> set0 = microMap1.keySet();
      assertEquals(1, microMap1.size());
      assertFalse(set0.contains(0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-1816));
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>(integer0, integer0);
      Collection<Integer> collection0 = microMap0.values();
      assertTrue(collection0.contains((-1816)));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> microMap0 = new MicroMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(integer0, abstractMap_SimpleImmutableEntry0);
      microMap0.clear();
      assertEquals(1, MicroMap.MAX_ENTRIES);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1816));
      MicroMap<Integer, Integer> microMap0 = new MicroMap<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>) mock(AbstractMap.SimpleImmutableEntry.class, new ViolatedAssumptionAnswer());
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> microMap1 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>(abstractMap_SimpleImmutableEntry0, integer0);
      microMap1.containsValue(microMap0.MAX_ENTRIES);
      assertEquals(1, microMap1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer> microMap0 = new MicroMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>();
      assertFalse(microMap0.isFull());
      
      MicroMap<Integer, Integer> microMap1 = new MicroMap<Integer, Integer>((Integer) microMap0.MAX_ENTRIES, (Integer) 1);
      boolean boolean0 = microMap1.containsKey(microMap0.MAX_ENTRIES);
      assertTrue(boolean0);
  }
}
