/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 02:02:10 GMT 2022
 */

package org.apache.wicket.util.diff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.wicket.util.diff.Chunk;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Chunk_ESTest extends Chunk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      StringBuilder stringBuilder0 = new StringBuilder("line.separator");
      chunk0.toString(stringBuilder0, "line.separator", "");
      assertEquals("line.separatorline.separatornull", stringBuilder0.toString());
      assertEquals(2, chunk0.rcsfrom());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      chunk0.count = (-921);
      List<Object> list0 = chunk0.chunk();
      boolean boolean0 = chunk0.verify(list0);
      assertEquals((-921), chunk0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Chunk chunk0 = new Chunk((List<Object>) null, (-6), (-6), (-6));
      assertEquals((-7), chunk0.last());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      StringBuilder stringBuilder0 = new StringBuilder("line.separator");
      chunk0.toString(stringBuilder0);
      assertEquals("line.separatornull", stringBuilder0.toString());
      assertEquals(1, chunk0.first());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      StringBuilder stringBuilder0 = new StringBuilder("line.separator");
      chunk0.rangeString(stringBuilder0);
      assertEquals("line.separator2", stringBuilder0.toString());
      assertEquals(1, chunk0.first());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      List<Object> list0 = Chunk.slice(objectArray0, 0, 1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer((-1729));
      linkedList0.add(integer0);
      List<Integer> list0 = Chunk.slice((List<Integer>) linkedList0, 1, 1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), 322);
      int int0 = chunk0.size();
      assertEquals(320, chunk0.last());
      assertEquals(322, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Chunk chunk0 = new Chunk(objectArray0, 0, (-1));
      chunk0.count = (-3432);
      int int0 = chunk0.size();
      assertEquals((-3432), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 0, 0);
      int int0 = chunk0.rcsto();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      int int0 = chunk0.rcsto();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, (-1), (-794));
      int int0 = chunk0.rcsfrom();
      assertEquals(0, int0);
      assertEquals((-2), chunk0.last());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, (-1155), (-1155));
      int int0 = chunk0.rcsfrom();
      assertEquals(0, chunk0.size());
      assertEquals((-1154), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 1, (-253));
      int int0 = chunk0.last();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Chunk chunk0 = new Chunk(0, 2052);
      int int0 = chunk0.last();
      assertEquals(2051, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Chunk chunk0 = new Chunk(0, 2052);
      chunk0.first();
      assertEquals(2052, chunk0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Chunk chunk0 = new Chunk(objectArray0, 0, 0, (-2552));
      int int0 = chunk0.first();
      assertEquals((-2553), chunk0.last());
      assertEquals((-2552), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Chunk chunk0 = new Chunk((-321), (-321));
      chunk0.chunk();
      assertEquals((-322), chunk0.last());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-1796), (-1));
      chunk0.chunk();
      assertEquals((-1797), chunk0.last());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Chunk chunk0 = new Chunk(objectArray0, 0, (-1));
      chunk0.anchor();
      assertEquals(0, chunk0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Chunk chunk0 = new Chunk(objectArray0, 1, (-2723), (-698));
      chunk0.anchor = 1;
      int int0 = chunk0.anchor();
      assertEquals(1, chunk0.rcsto());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      List<Object> list0 = chunk0.chunk();
      // Undeclared exception!
      try { 
        chunk0.verify(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, (-3942));
      List<Object> list0 = chunk0.chunk();
      // Undeclared exception!
      try { 
        chunk0.verify(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      // Undeclared exception!
      try { 
        chunk0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Chunk.slice((Object[]) null, 3325, 3325);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Chunk.slice(objectArray0, (-2327), 2100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2327
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        Chunk.slice((List<Integer>) linkedList0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Chunk chunk0 = new Chunk((-3906), (-3906));
      // Undeclared exception!
      try { 
        chunk0.rangeString((StringBuilder) null, "\"/+^Q8}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      // Undeclared exception!
      try { 
        chunk0.applyDelete((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(14, 14);
      // Undeclared exception!
      try { 
        chunk0.applyDelete(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[16];
      Chunk chunk0 = new Chunk((-170), 1);
      List<Object> list0 = Chunk.slice(objectArray0, 1, (-439));
      // Undeclared exception!
      try { 
        chunk0.applyDelete(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Chunk chunk0 = new Chunk((-8), (-8));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        chunk0.applyAdd((-8), linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        chunk0.applyAdd((-1360), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1360, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk((Object[]) null, 3672, 3672, 3672);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk(objectArray0, 1, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk((Object[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk(objectArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk((List<Object>) null, 709, 709, 709);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk(linkedList0, 811, 811, 811);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1622
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk((List<Object>) null, 25, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = null;
      try {
        chunk0 = new Chunk(linkedList0, 1529, 1529);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3058
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Chunk chunk0 = new Chunk((-1), 293);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\n\n\njava.lang.Object@4842eea1\n\n\n\n");
      chunk0.rangeString(stringBuilder0, "$%ZjhT2?NXa=4+.#zJ");
      assertEquals(293, chunk0.size());
      assertEquals(292, chunk0.rcsto());
      assertEquals(0, chunk0.rcsfrom());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Chunk.slice((List<Integer>) null, 2760, 2760);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-1796), (-1));
      chunk0.toString((StringBuilder) null, "0n}epk>}Jp.>bIS$", "q,rs3imPJ%Ba=Ix?0");
      assertEquals((-1797), chunk0.last());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 1);
      // Undeclared exception!
      try { 
        chunk0.toString((StringBuilder) null, "", ",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, 0, (-1602));
      int int0 = chunk0.rcsfrom();
      assertEquals(1, int0);
      assertEquals(0, chunk0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, (-1155), (-1155));
      int int0 = chunk0.anchor();
      assertEquals((-1156), chunk0.last());
      assertEquals((-1155), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, (-574), (-574));
      int int0 = chunk0.last();
      assertEquals((-575), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk(linkedList0, 0, 0, 0);
      int int0 = chunk0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, 1524, (-153), 1524);
      int int0 = chunk0.first();
      assertEquals(1523, chunk0.last());
      assertEquals(1524, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Chunk chunk0 = new Chunk(17, 17);
      String string0 = chunk0.rangeString();
      assertEquals(33, chunk0.last());
      assertEquals("18,34", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Chunk chunk0 = new Chunk((-660), (-660));
      StringBuilder stringBuilder0 = new StringBuilder(0);
      chunk0.toString(stringBuilder0, "", "");
      assertEquals((-660), chunk0.rcsto());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Chunk chunk0 = new Chunk(objectArray0, 1, (-2723), (-698));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      chunk0.applyAdd((-2723), linkedList0);
      assertEquals((-698), chunk0.rcsto());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = object0;
      Chunk chunk0 = new Chunk(objectArray0, 1, 1);
      List<Object> list0 = chunk0.chunk();
      Chunk chunk1 = new Chunk(objectArray0, 0, 1);
      boolean boolean0 = chunk1.verify(list0);
      assertEquals(1, chunk0.first());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = objectArray0[0];
      objectArray0[4] = objectArray0[0];
      Chunk chunk0 = new Chunk(objectArray0, 0, 5);
      List<Object> list0 = chunk0.chunk();
      boolean boolean0 = chunk0.verify(list0);
      assertTrue(boolean0);
      assertEquals(5, chunk0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, 0, 5);
      List<Object> list0 = chunk0.chunk();
      List<Object> list1 = Chunk.slice(list0, 33, (-375));
      boolean boolean0 = chunk0.verify(list1);
      assertEquals(4, chunk0.last());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Chunk chunk0 = new Chunk((-660), (-660));
      boolean boolean0 = chunk0.verify(linkedList0);
      assertTrue(boolean0);
      assertEquals((-660), chunk0.rcsto());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, 0, 5);
      List<Object> list0 = chunk0.chunk();
      // Undeclared exception!
      try { 
        chunk0.verify(list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Chunk chunk0 = new Chunk(objectArray0, 1, (-2723), (-698));
      int int0 = chunk0.rcsto();
      assertEquals((-698), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Chunk chunk0 = new Chunk((-2275), (-2275));
      // Undeclared exception!
      try { 
        chunk0.rangeString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.wicket.util.diff.Chunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Chunk chunk0 = new Chunk(objectArray0, 0, 5);
      List<Object> list0 = chunk0.chunk();
      assertEquals(5, list0.size());
      
      chunk0.applyDelete(list0);
      assertEquals(0, list0.size());
      assertEquals(5, chunk0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Chunk chunk0 = new Chunk(objectArray0, 1, 1, 0);
      List<Object> list0 = chunk0.chunk();
      // Undeclared exception!
      try { 
        chunk0.applyAdd(1, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      List<Object> list0 = Chunk.slice(objectArray0, 1, (-3128));
      Chunk chunk0 = new Chunk(list0, (-1), 0, 1);
      assertEquals(0, list0.size());
      assertEquals(1, chunk0.rcsto());
  }
}
