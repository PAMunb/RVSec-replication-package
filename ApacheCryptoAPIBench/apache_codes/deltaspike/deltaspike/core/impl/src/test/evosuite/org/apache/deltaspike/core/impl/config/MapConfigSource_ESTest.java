/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 17:16:15 GMT 2022
 */

package org.apache.deltaspike.core.impl.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.apache.deltaspike.core.impl.config.EnvironmentPropertyConfigSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapConfigSource_ESTest extends MapConfigSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EnvironmentPropertyConfigSource environmentPropertyConfigSource0 = new EnvironmentPropertyConfigSource();
      boolean boolean0 = environmentPropertyConfigSource0.isScannable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EnvironmentPropertyConfigSource environmentPropertyConfigSource0 = new EnvironmentPropertyConfigSource();
      String string0 = environmentPropertyConfigSource0.getPropertyValue("environment-properties");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EnvironmentPropertyConfigSource environmentPropertyConfigSource0 = new EnvironmentPropertyConfigSource();
      // Undeclared exception!
      try { 
        environmentPropertyConfigSource0.getPropertyValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ProcessEnvironment$Variable", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EnvironmentPropertyConfigSource environmentPropertyConfigSource0 = new EnvironmentPropertyConfigSource();
      Map<String, String> map0 = environmentPropertyConfigSource0.getProperties();
      assertFalse(map0.isEmpty());
  }
}
