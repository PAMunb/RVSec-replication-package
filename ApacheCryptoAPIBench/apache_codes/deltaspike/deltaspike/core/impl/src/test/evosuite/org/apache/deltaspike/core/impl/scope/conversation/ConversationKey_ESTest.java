/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 17:08:20 GMT 2022
 */

package org.apache.deltaspike.core.impl.scope.conversation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.util.Set;
import org.apache.deltaspike.core.impl.scope.conversation.ConversationKey;
import org.apache.webbeans.annotation.AnyLiteral;
import org.apache.webbeans.annotation.ApplicationScopeLiteral;
import org.apache.webbeans.annotation.DefaultLiteral;
import org.apache.webbeans.annotation.DependentScopeLiteral;
import org.apache.webbeans.annotation.NamedLiteral;
import org.apache.webbeans.annotation.NewLiteral;
import org.apache.webbeans.annotation.RequestedScopeLiteral;
import org.apache.webbeans.annotation.SessionScopeLiteral;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversationKey_ESTest extends ConversationKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = new Annotation[6];
      AnyLiteral anyLiteral0 = new AnyLiteral();
      annotationArray0[0] = (Annotation) anyLiteral0;
      ApplicationScopeLiteral applicationScopeLiteral0 = new ApplicationScopeLiteral();
      annotationArray0[1] = (Annotation) applicationScopeLiteral0;
      SessionScopeLiteral sessionScopeLiteral0 = new SessionScopeLiteral();
      annotationArray0[2] = (Annotation) sessionScopeLiteral0;
      DependentScopeLiteral dependentScopeLiteral0 = new DependentScopeLiteral();
      annotationArray0[3] = (Annotation) dependentScopeLiteral0;
      NewLiteral newLiteral0 = new NewLiteral();
      annotationArray0[4] = (Annotation) newLiteral0;
      DefaultLiteral defaultLiteral0 = DefaultLiteral.INSTANCE;
      annotationArray0[5] = (Annotation) defaultLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      conversationKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey((Class<?>) null, annotationArray0);
      Class<?> class0 = conversationKey0.getConversationGroup();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      Class<? extends Annotation> class0 = anyLiteral0.annotationType();
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      Class<?> class1 = conversationKey0.getConversationGroup();
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey((Class<?>) null, annotationArray0);
      // Undeclared exception!
      try { 
        conversationKey0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.deltaspike.core.impl.scope.conversation.ConversationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<NamedLiteral> class0 = NamedLiteral.class;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      annotationArray0[1] = (Annotation) requestedScopeLiteral0;
      annotationArray0[2] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      ConversationKey conversationKey1 = new ConversationKey((Class<?>) null, annotationArray0);
      // Undeclared exception!
      try { 
        conversationKey1.equals(conversationKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.deltaspike.core.impl.scope.conversation.ConversationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = new Annotation[6];
      AnyLiteral anyLiteral0 = new AnyLiteral();
      annotationArray0[0] = (Annotation) anyLiteral0;
      ApplicationScopeLiteral applicationScopeLiteral0 = new ApplicationScopeLiteral();
      annotationArray0[1] = (Annotation) applicationScopeLiteral0;
      SessionScopeLiteral sessionScopeLiteral0 = new SessionScopeLiteral();
      annotationArray0[2] = (Annotation) sessionScopeLiteral0;
      DependentScopeLiteral dependentScopeLiteral0 = new DependentScopeLiteral();
      annotationArray0[3] = (Annotation) dependentScopeLiteral0;
      NewLiteral newLiteral0 = new NewLiteral();
      annotationArray0[4] = (Annotation) newLiteral0;
      DefaultLiteral defaultLiteral0 = DefaultLiteral.INSTANCE;
      annotationArray0[5] = (Annotation) defaultLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      String string0 = conversationKey0.toString();
      assertEquals("conversation-key\n\n\tgroup:\t\tjava.lang.Object\n\tqualifiers:\tjavax.enterprise.context.ApplicationScoped javax.enterprise.context.SessionScoped javax.enterprise.context.Dependent javax.enterprise.inject.New ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      String string0 = conversationKey0.toString();
      assertEquals("conversation-key\n\n\tgroup:\t\tjava.lang.Object\n\tqualifiers:\t---", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      conversationKey0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<Object> class0 = Object.class;
      Annotation[] annotationArray0 = new Annotation[1];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      Annotation[] annotationArray1 = new Annotation[0];
      ConversationKey conversationKey1 = new ConversationKey(class0, annotationArray1);
      boolean boolean0 = conversationKey0.equals(conversationKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      Class<Object> class0 = Object.class;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      Annotation[] annotationArray0 = new Annotation[6];
      SessionScopeLiteral sessionScopeLiteral0 = new SessionScopeLiteral();
      annotationArray0[0] = (Annotation) sessionScopeLiteral0;
      NamedLiteral namedLiteral0 = new NamedLiteral();
      annotationArray0[1] = (Annotation) namedLiteral0;
      annotationArray0[2] = (Annotation) anyLiteral0;
      annotationArray0[3] = (Annotation) anyLiteral0;
      annotationArray0[4] = (Annotation) anyLiteral0;
      DefaultLiteral defaultLiteral0 = DefaultLiteral.INSTANCE;
      annotationArray0[5] = (Annotation) defaultLiteral0;
      ConversationKey conversationKey1 = new ConversationKey(class0, annotationArray0);
      boolean boolean0 = conversationKey0.equals(conversationKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      Class<Object> class0 = Object.class;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      ConversationKey conversationKey1 = new ConversationKey(class0, anyLiteral0.ARRAY);
      boolean boolean0 = conversationKey0.equals(conversationKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<NamedLiteral> class0 = NamedLiteral.class;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      annotationArray0[1] = (Annotation) requestedScopeLiteral0;
      annotationArray0[2] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      Class<Object> class1 = Object.class;
      ConversationKey conversationKey1 = new ConversationKey(class1, annotationArray0);
      boolean boolean0 = conversationKey1.equals(conversationKey0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<NamedLiteral> class0 = NamedLiteral.class;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      annotationArray0[1] = (Annotation) requestedScopeLiteral0;
      annotationArray0[2] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      ConversationKey conversationKey1 = new ConversationKey(class0, annotationArray0);
      boolean boolean0 = conversationKey1.equals(conversationKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnyLiteral anyLiteral0 = new AnyLiteral();
      Class<Object> class0 = Object.class;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      boolean boolean0 = conversationKey0.equals(conversationKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<NamedLiteral> class0 = NamedLiteral.class;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      annotationArray0[1] = (Annotation) requestedScopeLiteral0;
      annotationArray0[2] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      boolean boolean0 = conversationKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      Set<Annotation> set0 = conversationKey0.getQualifiers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<NamedLiteral> class0 = NamedLiteral.class;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      annotationArray0[1] = (Annotation) requestedScopeLiteral0;
      annotationArray0[2] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = new ConversationKey(class0, annotationArray0);
      Set<Annotation> set0 = conversationKey0.getQualifiers();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestedScopeLiteral requestedScopeLiteral0 = new RequestedScopeLiteral();
      Class<NamedLiteral> class0 = NamedLiteral.class;
      Annotation[] annotationArray0 = new Annotation[3];
      annotationArray0[0] = (Annotation) requestedScopeLiteral0;
      annotationArray0[1] = (Annotation) requestedScopeLiteral0;
      ConversationKey conversationKey0 = null;
      try {
        conversationKey0 = new ConversationKey(class0, annotationArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.deltaspike.core.impl.scope.conversation.ConversationKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      AnyLiteral anyLiteral0 = AnyLiteral.INSTANCE;
      ConversationKey conversationKey0 = new ConversationKey(class0, anyLiteral0.ARRAY);
      Class<?> class1 = conversationKey0.getConversationGroup();
      assertEquals("class java.lang.Object", class1.toString());
  }
}
