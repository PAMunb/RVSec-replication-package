/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:16:09 GMT 2022
 */

package org.apache.deltaspike.core.impl.jmx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.apache.deltaspike.core.impl.jmx.AttributeAccessor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AttributeAccessor_ESTest extends AttributeAccessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AttributeAccessor attributeAccessor0 = new AttributeAccessor((Method) null, (Method) null, false);
      boolean boolean0 = attributeAccessor0.isPresentAsTabularIfPossible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AttributeAccessor attributeAccessor0 = new AttributeAccessor((Method) null, (Method) null, false);
      try { 
        attributeAccessor0.set((Object) null, (Object) null);
        fail("Expecting exception: IllegalAccessException");
      
      } catch(IllegalAccessException e) {
         //
         // This attribute has no setter
         //
         verifyException("org.apache.deltaspike.core.impl.jmx.AttributeAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AttributeAccessor attributeAccessor0 = new AttributeAccessor((Method) null, (Method) null, false);
      try { 
        attributeAccessor0.get((Object) null);
        fail("Expecting exception: IllegalAccessException");
      
      } catch(IllegalAccessException e) {
         //
         // This attribute has no getter
         //
         verifyException("org.apache.deltaspike.core.impl.jmx.AttributeAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AttributeAccessor attributeAccessor0 = new AttributeAccessor((Method) null, (Method) null, true);
      boolean boolean0 = attributeAccessor0.isPresentAsTabularIfPossible();
      assertTrue(boolean0);
  }
}
