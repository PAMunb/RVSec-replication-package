/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 21 17:10:24 GMT 2022
 */

package org.apache.deltaspike.core.impl.throttling;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class InvokerStorage_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.deltaspike.core.impl.throttling.InvokerStorage"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/deltaspike/deltaspike/core/impl"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(InvokerStorage_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.deltaspike.core.api.throttling.Throttling$SemaphoreFactory",
      "org.apache.deltaspike.core.impl.throttling.InvokerStorage",
      "org.apache.deltaspike.core.impl.throttling.Invoker"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(InvokerStorage_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.deltaspike.core.impl.throttling.InvokerStorage",
      "org.apache.webbeans.component.InterceptorBean$MultiMethodInvocationContext",
      "org.apache.webbeans.annotation.NewLiteral",
      "org.apache.webbeans.config.WebBeansContext",
      "org.apache.webbeans.corespi.DefaultSingletonService",
      "org.apache.webbeans.config.WebBeansFinder",
      "org.apache.webbeans.util.WebBeansUtil",
      "org.apache.webbeans.logger.JULLoggerFactory",
      "org.apache.webbeans.logger.WebBeansLoggerFacade",
      "org.apache.webbeans.config.OpenWebBeansConfiguration",
      "org.apache.webbeans.config.PropertyLoader",
      "org.apache.webbeans.config.OpenWebBeansConfiguration$1",
      "org.apache.webbeans.context.ContextFactory",
      "org.apache.webbeans.inject.AlternativesManager",
      "org.apache.webbeans.portable.AnnotatedElementFactory",
      "org.apache.webbeans.container.AbstractBeanManager",
      "org.apache.webbeans.container.BeanManagerImpl",
      "org.apache.webbeans.portable.events.discovery.ErrorStack",
      "org.apache.webbeans.container.InjectionResolver",
      "org.apache.webbeans.event.NotificationManager",
      "org.apache.webbeans.conversation.ConversationManager",
      "org.apache.webbeans.context.creational.CreationalContextFactory",
      "org.apache.webbeans.decorator.DecoratorsManager",
      "org.apache.webbeans.portable.events.ExtensionLoader",
      "org.apache.webbeans.intercept.InterceptorsManager",
      "org.apache.webbeans.proxy.AbstractProxyFactory",
      "org.apache.webbeans.proxy.InterceptorDecoratorProxyFactory",
      "org.apache.webbeans.proxy.AbstractProxyFactory$1",
      "org.apache.webbeans.proxy.AbstractProxyFactory$2",
      "org.apache.webbeans.proxy.AbstractProxyFactory$3",
      "org.apache.webbeans.proxy.NormalScopeProxyFactory",
      "org.apache.webbeans.proxy.SubclassProxyFactory",
      "org.apache.webbeans.plugins.PluginLoader",
      "org.apache.webbeans.container.SerializableBeanVault",
      "org.apache.webbeans.deployment.StereoTypeManager",
      "org.apache.webbeans.annotation.EmptyAnnotationLiteral",
      "org.apache.webbeans.annotation.DefaultLiteral",
      "org.apache.webbeans.annotation.AnnotationManager",
      "org.apache.webbeans.inject.impl.InjectionPointFactory",
      "org.apache.webbeans.intercept.InterceptorUtil",
      "org.apache.webbeans.intercept.InterceptorResolutionService",
      "org.apache.webbeans.config.DeploymentValidationService",
      "org.apache.webbeans.util.ClassUtil",
      "org.apache.webbeans.service.DefaultLoaderService",
      "org.apache.webbeans.corespi.security.SimpleSecurityService",
      "org.apache.webbeans.corespi.se.DefaultApplicationBoundaryService",
      "org.apache.webbeans.component.BeanAttributesImpl",
      "org.apache.webbeans.component.AbstractOwbBean",
      "org.apache.webbeans.component.AbstractProducerBean",
      "org.apache.webbeans.component.ProducerMethodBean",
      "org.apache.webbeans.component.InjectionTargetBean",
      "org.apache.webbeans.component.InterceptorBean",
      "org.apache.webbeans.component.SelfInterceptorBean",
      "org.apache.webbeans.container.InjectionTargetFactoryImpl",
      "org.apache.webbeans.util.Asserts",
      "org.apache.webbeans.component.BuiltInOwbBean",
      "org.apache.webbeans.component.ExtensionBean",
      "org.apache.webbeans.annotation.AnyLiteral",
      "org.apache.webbeans.corespi.scanner.AbstractMetaDataDiscovery",
      "org.apache.webbeans.corespi.se.DefaultScannerService",
      "org.apache.webbeans.util.UrlSet",
      "org.apache.webbeans.component.EjbInterceptorBean",
      "org.apache.webbeans.container.InterceptorInjectionTargetFactory"
    );
  }
}
