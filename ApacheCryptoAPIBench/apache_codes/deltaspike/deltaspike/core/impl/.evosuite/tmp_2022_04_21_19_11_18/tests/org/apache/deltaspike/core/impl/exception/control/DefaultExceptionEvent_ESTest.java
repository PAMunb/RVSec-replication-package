/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:18:18 GMT 2022
 */

package org.apache.deltaspike.core.impl.exception.control;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.deltaspike.core.api.exception.control.event.ExceptionStackEvent;
import org.apache.deltaspike.core.impl.exception.control.DefaultExceptionEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultExceptionEvent_ESTest extends DefaultExceptionEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, false);
      defaultExceptionEvent0.unmute();
      boolean boolean0 = defaultExceptionEvent0.isUnmute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, false);
      boolean boolean0 = defaultExceptionEvent0.isMarkedHandled();
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, false, false);
      boolean boolean0 = defaultExceptionEvent0.isBeforeTraversal();
      assertFalse(boolean0);
      assertFalse(defaultExceptionEvent0.isMarkedHandled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn(throwable0).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, false, true);
      Throwable throwable1 = defaultExceptionEvent0.getException();
      defaultExceptionEvent0.rethrow(throwable1);
      defaultExceptionEvent0.getThrowNewException();
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
      assertFalse(defaultExceptionEvent0.isBeforeTraversal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      defaultExceptionEvent0.getException();
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = null;
      try {
        defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>((ExceptionStackEvent) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not valid for stackEvent
         //
         verifyException("org.apache.deltaspike.core.impl.exception.control.DefaultExceptionEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      defaultExceptionEvent0.abort();
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      defaultExceptionEvent0.handledAndContinue();
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      boolean boolean0 = defaultExceptionEvent0.isMarkedHandled();
      assertTrue(boolean0);
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      boolean boolean0 = defaultExceptionEvent0.isBeforeTraversal();
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn(throwable0).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, false, true);
      defaultExceptionEvent0.handled();
      assertFalse(defaultExceptionEvent0.isBeforeTraversal());
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      defaultExceptionEvent0.throwOriginal();
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn(throwable0).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, false, true);
      defaultExceptionEvent0.getThrowNewException();
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
      assertFalse(defaultExceptionEvent0.isBeforeTraversal());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, false, false);
      defaultExceptionEvent0.getCurrentExceptionHandlingFlow();
      assertFalse(defaultExceptionEvent0.isMarkedHandled());
      assertFalse(defaultExceptionEvent0.isBeforeTraversal());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, true, true);
      defaultExceptionEvent0.isUnmute();
      assertTrue(defaultExceptionEvent0.isBeforeTraversal());
      assertTrue(defaultExceptionEvent0.isMarkedHandled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExceptionStackEvent exceptionStackEvent0 = mock(ExceptionStackEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(exceptionStackEvent0).getCurrent();
      DefaultExceptionEvent<Throwable> defaultExceptionEvent0 = new DefaultExceptionEvent<Throwable>(exceptionStackEvent0, false, false);
      defaultExceptionEvent0.skipCause();
      assertFalse(defaultExceptionEvent0.isBeforeTraversal());
      assertFalse(defaultExceptionEvent0.isMarkedHandled());
  }
}
