/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:27:24 GMT 2022
 */

package org.apache.spark.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.memory.MemoryConsumer;
import org.apache.spark.memory.MemoryManager;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.memory.TaskMemoryManager;
import org.apache.spark.unsafe.memory.MemoryAllocator;
import org.apache.spark.unsafe.memory.MemoryBlock;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskMemoryManager_ESTest extends TaskMemoryManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((long)2).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(4503599627370498L).when(memoryManager0).releaseAllExecutionMemoryForTask(anyLong());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 4503599627370498L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryConsumer0).getMode();
      doReturn((-2358L)).when(memoryConsumer0).getUsed();
      long long0 = taskMemoryManager0.acquireExecutionMemory(2, memoryConsumer0);
      long long1 = taskMemoryManager0.cleanUpAllAllocatedMemory();
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-1249L));
      // Undeclared exception!
      try { 
        taskMemoryManager0.getOffsetInPage((-1L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 3598L);
      long long0 = taskMemoryManager0.getOffsetInPage((-2));
      assertEquals(2251799813685246L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-1187L));
      // Undeclared exception!
      try { 
        taskMemoryManager0.getPage((-1187L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-31L)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn((-31L)).when(memoryManager0).executionMemoryUsed();
      doReturn((-31L)).when(memoryManager0).getExecutionMemoryUsageForTask(anyLong());
      doReturn((-31L)).when(memoryManager0).storageMemoryUsed();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-31L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn("scala.math.Ordered$").when(memoryConsumer0).toString();
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(1152921504606846976L).when(memoryConsumer0).getUsed();
      doReturn((-1378L)).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(17179869176L, memoryConsumer0);
      taskMemoryManager0.showMemoryUsage();
      assertEquals(17179869176L, TaskMemoryManager.MAXIMUM_PAGE_SIZE_BYTES);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(")fjPY2_rbe-ta,mi<$").when(memoryBlock0).toString();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1024L, 1024L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(0L).when(memoryManager0).executionMemoryUsed();
      doReturn(0L).when(memoryManager0).getExecutionMemoryUsageForTask(anyLong());
      doReturn(0L).when(memoryManager0).storageMemoryUsed();
      doReturn(memoryAllocator0).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 3598L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn((long)(-1)).when(memoryConsumer0).getUsed();
      doReturn(3598L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(3598L, memoryConsumer0);
      taskMemoryManager0.showMemoryUsage();
      assertEquals(0L, taskMemoryManager0.pageSizeBytes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn("hY5hhh'HGjg").when(memoryBlock0).toString();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1024L, 1024L, (-985L)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 3598L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn((long)(-2)).when(memoryConsumer0).getUsed();
      doReturn(3598L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(3598L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer1).getMode();
      doReturn((-7046033566014671411L)).when(memoryConsumer1).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryBlock memoryBlock1 = taskMemoryManager0.allocatePage(1261L, memoryConsumer1);
      assertNull(memoryBlock1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1000L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 4503599627370498L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryConsumer0).getMode();
      long long0 = taskMemoryManager0.acquireExecutionMemory(2, memoryConsumer0);
      assertEquals(1000L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-2330L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryConsumer0).getMode();
      long long0 = taskMemoryManager0.acquireExecutionMemory(0L, memoryConsumer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 0L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryConsumer0).getMode();
      taskMemoryManager0.releaseExecutionMemory((-2325L), memoryConsumer0);
      assertEquals(0L, taskMemoryManager0.pageSizeBytes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((long)8191).when(memoryManager0).pageSizeBytes();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 2975L);
      long long0 = taskMemoryManager0.pageSizeBytes();
      assertEquals(8191L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-1972L)).when(memoryManager0).pageSizeBytes();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 2975L);
      long long0 = taskMemoryManager0.pageSizeBytes();
      assertEquals((-1972L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-1337L));
      MemoryMode memoryMode1 = taskMemoryManager0.getTungstenMemoryMode();
      assertEquals(MemoryMode.OFF_HEAP, memoryMode1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 3598L);
      long long0 = taskMemoryManager0.getOffsetInPage(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn("hY5hhh'HGjg").when(memoryBlock0).toString();
      doReturn(1024L, (-7046033566014671411L)).when(memoryBlock0).getBaseOffset();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1024L, (long)(-1)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1261L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(1024L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryBlock memoryBlock1 = taskMemoryManager0.allocatePage(1261L, memoryConsumer0);
      long long0 = taskMemoryManager0.encodePageNumberAndOffset(memoryBlock1, (long) (-2));
      assertEquals(151948993530417L, long0);
      
      long long1 = taskMemoryManager0.getOffsetInPage(1261L);
      assertEquals((-7046033566014670150L), long1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(memoryManager0).getExecutionMemoryUsageForTask(anyLong());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 263L);
      long long0 = taskMemoryManager0.getMemoryConsumptionForThisTask();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-2287L)).when(memoryManager0).getExecutionMemoryUsageForTask(anyLong());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 2975L);
      long long0 = taskMemoryManager0.getMemoryConsumptionForThisTask();
      assertEquals((-2287L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = TaskMemoryManager.encodePageNumberAndOffset(0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = TaskMemoryManager.encodePageNumberAndOffset(8191, (-931L));
      assertEquals((-931L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = TaskMemoryManager.decodePageNumber((-2287L));
      assertEquals(8191, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-1337L)).when(memoryManager0).releaseAllExecutionMemoryForTask(anyLong());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-1337L));
      long long0 = taskMemoryManager0.cleanUpAllAllocatedMemory();
      assertEquals((-1337L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-3562L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        taskMemoryManager0.freePage((MemoryBlock) null, memoryConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 186L);
      // Undeclared exception!
      try { 
        taskMemoryManager0.encodePageNumberAndOffset((MemoryBlock) null, (long) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(memoryManager0).releaseAllExecutionMemoryForTask(anyLong());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 306L);
      taskMemoryManager0.cleanUpAllAllocatedMemory();
      // Undeclared exception!
      taskMemoryManager0.cleanUpAllAllocatedMemory();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = null;
      try {
        taskMemoryManager0 = new TaskMemoryManager((MemoryManager) null, 8L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaskMemoryManager.encodePageNumberAndOffset((-2147104232), (long) (-2147104232));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // encodePageNumberAndOffset called with invalid page
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((long)2, (-1941L), (-296L), 0L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 4503599627370498L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(17179869176L, 4503599627370498L).when(memoryConsumer0).getUsed();
      doReturn((-549L), 1540L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      long long0 = taskMemoryManager0.acquireExecutionMemory(4448L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryConsumer1).getMode();
      doReturn(2304L).when(memoryConsumer1).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      long long1 = taskMemoryManager0.acquireExecutionMemory(2, memoryConsumer1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-6L), 3999L, (-6L)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-6L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(3999L, 3999L).when(memoryConsumer0).getUsed();
      doReturn((-6L), (-6L)).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(17179869176L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryConsumer1).getMode();
      doReturn(3999L).when(memoryConsumer1).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      long long0 = taskMemoryManager0.acquireExecutionMemory(17179869176L, memoryConsumer1);
      assertEquals(3993L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 0L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null, (MemoryMode) null).when(memoryConsumer0).getMode();
      doReturn(0L).when(memoryConsumer0).getUsed();
      doReturn(0L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(3598L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryConsumer1).getMode();
      doReturn(0L).when(memoryConsumer1).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      long long0 = taskMemoryManager0.acquireExecutionMemory(2056L, memoryConsumer1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-4568L), (-4568L), 0L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-4568L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0, (MemoryMode) null).when(memoryConsumer0).getMode();
      doReturn(17179869176L, 0L).when(memoryConsumer0).getUsed();
      doReturn(17179869176L, 0L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(17179869176L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryConsumer1).getMode();
      doReturn(0L).when(memoryConsumer1).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      long long0 = taskMemoryManager0.acquireExecutionMemory(1L, memoryConsumer1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 620L);
      // Undeclared exception!
      try { 
        taskMemoryManager0.acquireExecutionMemory((-2), (MemoryConsumer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1031L);
      // Undeclared exception!
      try { 
        taskMemoryManager0.releaseExecutionMemory(776L, (MemoryConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = TaskMemoryManager.decodePageNumber(966L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-4537L), (-4537L)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(0L).when(memoryManager0).releaseAllExecutionMemoryForTask(anyLong());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-4537L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn("*?P52}!$;").when(memoryConsumer0).toString();
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(17179869176L, 0L).when(memoryConsumer0).getUsed();
      doReturn(17179869176L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(17179869176L, memoryConsumer0);
      long long0 = taskMemoryManager0.cleanUpAllAllocatedMemory();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn("hY5hhh'HGjg", (String) null).when(memoryBlock0).toString();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1001L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0, (MemoryAllocator) null).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1001L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(0L).when(memoryConsumer0).getUsed();
      taskMemoryManager0.allocatePage(1001L, memoryConsumer0);
      // Undeclared exception!
      try { 
        taskMemoryManager0.cleanUpAllAllocatedMemory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(")fjPY2_rbe-t0Ga,mi<$").when(memoryBlock0).toString();
      doReturn((Object) null).when(memoryBlock0).getBaseObject();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1024L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1024L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, (MemoryMode) null).when(memoryConsumer0).getMode();
      taskMemoryManager0.allocatePage(1024L, memoryConsumer0);
      // Undeclared exception!
      try { 
        taskMemoryManager0.getPage(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn("hY5hhh'HGjg").when(memoryBlock0).toString();
      doReturn(memoryMode0, memoryMode0).when(memoryBlock0).getBaseObject();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1024L, (long)(-1)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1261L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(1024L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(1261L, memoryConsumer0);
      Object object0 = taskMemoryManager0.getPage(1136L);
      assertSame(object0, memoryMode0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1261L);
      Object object0 = taskMemoryManager0.getPage(1261L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn("hY5hhh'HGjg").when(memoryBlock0).toString();
      doReturn(1001L).when(memoryBlock0).size();
      doReturn(0L).when(memoryBlock0).getBaseOffset();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryAllocator memoryAllocator1 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1001L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0, memoryAllocator1).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1001L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      MemoryBlock memoryBlock1 = taskMemoryManager0.allocatePage(1001L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryConsumer1).getMode();
      taskMemoryManager0.freePage(memoryBlock1, memoryConsumer1);
      // Undeclared exception!
      try { 
        taskMemoryManager0.encodePageNumberAndOffset(memoryBlock1, (long) (-2));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // encodePageNumberAndOffset called with invalid page
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn("hY5hhh'HGjg").when(memoryBlock0).toString();
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(memoryAllocator0).allocate(anyLong());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1024L, (long)(-1)).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryAllocator0).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1261L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(1024L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryBlock memoryBlock1 = taskMemoryManager0.allocatePage(1261L, memoryConsumer0);
      assertNotNull(memoryBlock1);
      
      long long0 = taskMemoryManager0.encodePageNumberAndOffset(memoryBlock1, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 77L);
      // Undeclared exception!
      try { 
        taskMemoryManager0.freePage(memoryBlock0, (MemoryConsumer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      MemoryAllocator memoryAllocator0 = mock(MemoryAllocator.class, new ViolatedAssumptionAnswer());
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1001L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn((MemoryAllocator) null).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1001L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      // Undeclared exception!
      try { 
        taskMemoryManager0.allocatePage(1001L, memoryConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, (-4568L));
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryConsumer0).getMode();
      // Undeclared exception!
      try { 
        taskMemoryManager0.allocatePage(2251799813685247L, memoryConsumer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot allocate a page of 2251799813685247 bytes.
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 4503599627370498L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryConsumer0).getMode();
      // Undeclared exception!
      try { 
        taskMemoryManager0.allocatePage(1650L, memoryConsumer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1099511627776L);
      // Undeclared exception!
      try { 
        taskMemoryManager0.allocatePage(1099511627776L, (MemoryConsumer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(0L).when(memoryManager0).executionMemoryUsed();
      doReturn(0L).when(memoryManager0).getExecutionMemoryUsageForTask(anyLong());
      doReturn(0L).when(memoryManager0).storageMemoryUsed();
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 17179869176L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null, (MemoryMode) null).when(memoryConsumer0).getMode();
      doReturn(0L).when(memoryConsumer0).getUsed();
      doReturn(0L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.allocatePage(17179869176L, memoryConsumer0);
      taskMemoryManager0.showMemoryUsage();
      assertNull(taskMemoryManager0.getTungstenMemoryMode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((long)2, (-1941L), 17179869176L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 17179869176L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer0).getMode();
      doReturn(17179869176L, 17179869176L).when(memoryConsumer0).getUsed();
      doReturn((-3022L), 6603450447525313L).when(memoryConsumer0).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      taskMemoryManager0.acquireExecutionMemory(4448L, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0).when(memoryConsumer1).getMode();
      long long0 = taskMemoryManager0.acquireExecutionMemory(2, memoryConsumer1);
      assertEquals(17179867235L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TaskMemoryManager.encodePageNumberAndOffset(8192, (long) 8192);
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((long)8192, 844L).when(memoryManager0).acquireExecutionMemory(anyLong() , anyLong() , any(org.apache.spark.memory.MemoryMode.class));
      doReturn((MemoryAllocator) null).when(memoryManager0).tungstenMemoryAllocator();
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 8192L);
      MemoryConsumer memoryConsumer0 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, (MemoryMode) null).when(memoryConsumer0).getMode();
      doReturn(418L).when(memoryConsumer0).getUsed();
      taskMemoryManager0.acquireExecutionMemory(8192, memoryConsumer0);
      MemoryConsumer memoryConsumer1 = mock(MemoryConsumer.class, new ViolatedAssumptionAnswer());
      doReturn(memoryMode0, memoryMode0).when(memoryConsumer1).getMode();
      doReturn((-870L)).when(memoryConsumer1).spill(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      // Undeclared exception!
      try { 
        taskMemoryManager0.allocatePage(8192L, memoryConsumer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TaskMemoryManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1840L);
      // Undeclared exception!
      try { 
        taskMemoryManager0.acquireExecutionMemory(1840L, (MemoryConsumer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(1261L).when(memoryManager0).getExecutionMemoryUsageForTask(anyLong());
      doReturn(memoryMode0).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 1261L);
      long long0 = taskMemoryManager0.getMemoryConsumptionForThisTask();
      assertEquals(1261L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(memoryManager0).pageSizeBytes();
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 2975L);
      long long0 = taskMemoryManager0.pageSizeBytes();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MemoryManager memoryManager0 = mock(MemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryMode) null).when(memoryManager0).tungstenMemoryMode();
      TaskMemoryManager taskMemoryManager0 = new TaskMemoryManager(memoryManager0, 4503599627370498L);
      taskMemoryManager0.getTungstenMemoryMode();
  }
}
