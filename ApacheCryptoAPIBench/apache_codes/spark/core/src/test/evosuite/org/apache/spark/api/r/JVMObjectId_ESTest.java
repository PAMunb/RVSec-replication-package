/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:45:41 GMT 2022
 */

package org.apache.spark.api.r;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.api.r.JVMObjectId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JVMObjectId_ESTest extends JVMObjectId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("Object ID cannot be null.");
      String string0 = jVMObjectId0.id();
      assertEquals("Object ID cannot be null.", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("])");
      JVMObjectId jVMObjectId1 = jVMObjectId0.copy("");
      String string0 = jVMObjectId1.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("*");
      boolean boolean0 = jVMObjectId0.canEqual(jVMObjectId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        JVMObjectId.apply((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Object ID cannot be null.
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JVMObjectId jVMObjectId0 = null;
      try {
        jVMObjectId0 = new JVMObjectId((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Object ID cannot be null.
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("5dF9&g10u*b@']#m");
      Object object0 = jVMObjectId0.productElement(0);
      assertEquals("5dF9&g10u*b@']#m", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("");
      boolean boolean0 = jVMObjectId0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("");
      jVMObjectId0.productIterator();
      assertEquals(1, jVMObjectId0.productArity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("org.apache.spark.api.r.JVMObjectId$");
      int int0 = jVMObjectId0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("])");
      String string0 = jVMObjectId0.productPrefix();
      assertEquals("JVMObjectId", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("");
      String string0 = jVMObjectId0.id();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("H>[");
      JVMObjectId jVMObjectId1 = JVMObjectId.apply("4 }#3");
      boolean boolean0 = jVMObjectId0.equals(jVMObjectId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("");
      boolean boolean0 = jVMObjectId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("");
      boolean boolean0 = jVMObjectId0.equals(jVMObjectId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("org.apache.spark.api.r.JVMObjectId$");
      // Undeclared exception!
      try { 
        jVMObjectId0.productElement(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000013
         //
         verifyException("org.apache.spark.api.r.JVMObjectId", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("Lq2$3pStk");
      Option<String> option0 = JVMObjectId.unapply(jVMObjectId0);
      assertEquals("Some", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JVMObjectId jVMObjectId0 = new JVMObjectId("H>[");
      JVMObjectId jVMObjectId1 = JVMObjectId.apply("H>[");
      boolean boolean0 = jVMObjectId0.equals(jVMObjectId1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("ux8Y");
      String string0 = jVMObjectId0.copy$default$1();
      assertEquals("ux8Y", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Function1<String, JVMObjectId> function1_0 = JVMObjectId.andThen((Function1<JVMObjectId, JVMObjectId>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("");
      String string0 = jVMObjectId0.toString();
      assertEquals("JVMObjectId()", string0);
      assertEquals(1, jVMObjectId0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<JVMObjectId, JVMObjectId> function1_0 = JVMObjectId.compose((Function1<JVMObjectId, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("u-'w8o\"K-=!27Q^c");
      // Undeclared exception!
      try { 
        jVMObjectId0.copy((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Object ID cannot be null.
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option<String> option0 = JVMObjectId.unapply((JVMObjectId) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JVMObjectId jVMObjectId0 = JVMObjectId.apply("");
      jVMObjectId0.hashCode();
      assertEquals(1, jVMObjectId0.productArity());
  }
}
