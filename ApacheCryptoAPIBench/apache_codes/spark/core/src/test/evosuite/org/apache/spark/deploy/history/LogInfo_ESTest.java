/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:01:49 GMT 2022
 */

package org.apache.spark.deploy.history;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.deploy.history.LogInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogInfo_ESTest extends LogInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("LogInfo", 0L, (Option<String>) null, (Option<String>) null, 0L);
      LogInfo logInfo1 = LogInfo.apply("LogInfo", 0L, (Option<String>) null, (Option<String>) null, 3005L);
      boolean boolean0 = logInfo0.equals(logInfo1);
      assertFalse(boolean0);
      assertEquals(3005L, logInfo1.copy$default$5());
      assertFalse(logInfo1.equals((Object)logInfo0));
      assertEquals(0L, logInfo1.lastProcessed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("r:@WM;zo", 1413L, (Option<String>) null, (Option<String>) null, (-1L));
      LogInfo logInfo1 = LogInfo.apply("r:@WM;zo", 0L, (Option<String>) null, (Option<String>) null, (-28L));
      boolean boolean0 = logInfo1.equals(logInfo0);
      assertFalse(boolean0);
      assertEquals((-28L), logInfo1.fileSize());
      assertEquals(0L, logInfo1.copy$default$2());
      assertEquals(1413L, logInfo0.lastProcessed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply((String) null, (-2351L), (Option<String>) null, (Option<String>) null, 0L);
      logInfo0.logPath();
      assertEquals((-2351L), logInfo0.lastProcessed());
      assertEquals(0L, logInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 0L, (Option<String>) null, (Option<String>) null, 0L);
      String string0 = logInfo0.logPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("", 0L, (Option<String>) null, (Option<String>) null, 0L);
      long long0 = logInfo0.lastProcessed();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("3z~iM2~jFqI$@w+)", (-1163L), (Option<String>) null, (Option<String>) null, 0L);
      long long0 = logInfo0.lastProcessed();
      assertEquals(0L, logInfo0.copy$default$5());
      assertEquals((-1163L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 0L, (Option<String>) null, (Option<String>) null, 0L);
      long long0 = logInfo0.fileSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("XH*I=+#U))ZvkUQ4d", 3696L, (Option<String>) null, (Option<String>) null, 3696L);
      long long0 = logInfo0.fileSize();
      assertEquals(3696L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", (-460L), (Option<String>) null, (Option<String>) null, (-460L));
      LogInfo logInfo1 = logInfo0.copy(":z;+Ss%P'w9%5", 645L, (Option<String>) null, (Option<String>) null, 0L);
      assertEquals((-460L), logInfo0.copy$default$5());
      assertEquals(645L, logInfo1.lastProcessed());
      assertEquals((-460L), logInfo0.lastProcessed());
      assertEquals(0L, logInfo1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("org.apache.spark.deploy.history.LogInfo$", 2616L, (Option<String>) null, (Option<String>) null, 2616L);
      LogInfo logInfo1 = logInfo0.copy("org.apache.spark.deploy.history.LogInfo$", 1L, (Option<String>) null, (Option<String>) null, (-1775L));
      assertEquals(1L, logInfo1.lastProcessed());
      assertEquals((-1775L), logInfo1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", (-460L), (Option<String>) null, (Option<String>) null, (-460L));
      LogInfo logInfo1 = logInfo0.copy(".&", (-460L), (Option<String>) null, (Option<String>) null, 645L);
      assertEquals(645L, logInfo1.fileSize());
      assertEquals((-460L), logInfo0.fileSize());
      assertEquals((-460L), logInfo1.lastProcessed());
      assertEquals((-460L), logInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("NC6 <#CmG5pdX", 0L, (Option<String>) null, (Option<String>) null, 0L);
      long long0 = logInfo0.copy$default$5();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("?%6*~/ P\"m }p{>&n+q", 176L, (Option<String>) null, (Option<String>) null, (-95L));
      long long0 = logInfo0.copy$default$5();
      assertEquals(176L, logInfo0.lastProcessed());
      assertEquals((-95L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("LogInfo", 0L, (Option<String>) null, (Option<String>) null, 0L);
      long long0 = logInfo0.copy$default$2();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("8 Itwu.-==d", (-1L), (Option<String>) null, (Option<String>) null, 1388L);
      long long0 = logInfo0.copy$default$2();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("scala.Function1$class", 1119L, (Option<String>) null, (Option<String>) null, 2601L);
      LogInfo logInfo1 = logInfo0.copy((String) null, 0L, (Option<String>) null, (Option<String>) null, 1413L);
      logInfo1.copy$default$1();
      assertEquals(0L, logInfo1.lastProcessed());
      assertEquals(1413L, logInfo1.fileSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("LogItnfo", (-14L), (Option<String>) null, (Option<String>) null, (-14L));
      logInfo0.copy$default$1();
      assertEquals((-14L), logInfo0.copy$default$5());
      assertEquals((-14L), logInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("r:@WM;zo", 1413L, (Option<String>) null, (Option<String>) null, (-1L));
      boolean boolean0 = logInfo0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo((String) null, 1741L, (Option<String>) null, (Option<String>) null, 1223L);
      Object object0 = logInfo0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("scala.PartialFunction$OrElse", 1152L, (Option<String>) null, (Option<String>) null, (-1998L));
      Object object0 = logInfo0.productElement(1);
      assertEquals((-1998L), logInfo0.copy$default$5());
      assertEquals(1152L, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("LogItnfo", (-14L), (Option<String>) null, (Option<String>) null, (-14L));
      logInfo0.productElement(0);
      assertEquals((-14L), logInfo0.lastProcessed());
      assertEquals((-14L), logInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("LogInfo", (-141L), (Option<String>) null, (Option<String>) null, (-2939L));
      Object object0 = logInfo0.productElement(4);
      assertEquals((-141L), logInfo0.copy$default$2());
      assertEquals((-2939L), object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("r:@WM;zo", 1413L, (Option<String>) null, (Option<String>) null, (-1L));
      Object object0 = logInfo0.productElement(3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("XH*I=+#U))ZvkUQ4d", 3696L, (Option<String>) null, (Option<String>) null, 3696L);
      int int0 = logInfo0.productArity();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(" Th_d$d(SCj#^@", 4833L, (Option<String>) null, (Option<String>) null, 4833L);
      String string0 = logInfo0.productPrefix();
      assertEquals(4833L, logInfo0.lastProcessed());
      assertEquals("LogInfo", string0);
      assertEquals(4833L, logInfo0.fileSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(",ds$Ndz", 4841L, (Option<String>) null, (Option<String>) null, 4841L);
      logInfo0.appId();
      assertEquals(4841L, logInfo0.lastProcessed());
      assertEquals(4841L, logInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("org.apache.spark.deploy.history.LogInfo$", 2616L, (Option<String>) null, (Option<String>) null, 2616L);
      long long0 = logInfo0.lastProcessed();
      assertEquals(2616L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(",ds$Ndz", 4841L, (Option<String>) null, (Option<String>) null, 4841L);
      logInfo0.attemptId();
      assertEquals(4841L, logInfo0.lastProcessed());
      assertEquals(4841L, logInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 0L, (Option<String>) null, (Option<String>) null, 0L);
      boolean boolean0 = logInfo0.canEqual(logInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", (-460L), (Option<String>) null, (Option<String>) null, (-460L));
      long long0 = logInfo0.fileSize();
      assertEquals((-460L), logInfo0.lastProcessed());
      assertEquals((-460L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("NC6 <#CmG5pdX", 0L, (Option<String>) null, (Option<String>) null, 0L);
      String string0 = logInfo0.logPath();
      assertEquals("NC6 <#CmG5pdX", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("V;J,A^lt,@|pCQV5,H", 934L, (Option<String>) null, (Option<String>) null, 934L);
      LogInfo logInfo1 = logInfo0.copy("V;J,A^lt,@|pCQV5,H", 461L, (Option<String>) null, (Option<String>) null, 934L);
      boolean boolean0 = logInfo0.equals(logInfo1);
      assertEquals(934L, logInfo0.lastProcessed());
      assertFalse(boolean0);
      assertEquals(461L, logInfo1.copy$default$2());
      assertFalse(logInfo1.equals((Object)logInfo0));
      assertEquals(934L, logInfo0.copy$default$5());
      assertEquals(934L, logInfo1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(",ds$Ndz", 4795L, (Option<String>) null, (Option<String>) null, 4795L);
      LogInfo logInfo1 = logInfo0.copy((String) null, 4795L, (Option<String>) null, (Option<String>) null, 4795L);
      boolean boolean0 = logInfo0.equals(logInfo1);
      assertEquals(4795L, logInfo1.copy$default$5());
      assertFalse(boolean0);
      assertEquals(4795L, logInfo1.lastProcessed());
      assertEquals(4795L, logInfo0.copy$default$5());
      assertEquals(4795L, logInfo0.lastProcessed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("XdNrYu&MG4fiG", 4826L, (Option<String>) null, (Option<String>) null, 4826L);
      LogInfo logInfo1 = logInfo0.copy((String) null, 4826L, (Option<String>) null, (Option<String>) null, 4826L);
      boolean boolean0 = logInfo1.equals(logInfo0);
      assertEquals(4826L, logInfo0.copy$default$5());
      assertEquals(4826L, logInfo1.copy$default$5());
      assertEquals(4826L, logInfo0.lastProcessed());
      assertEquals(4826L, logInfo1.lastProcessed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(",dH$Ndz", 4832L, (Option<String>) null, (Option<String>) null, 4832L);
      LogInfo logInfo1 = logInfo0.copy(",dH$Ndz", 4832L, (Option<String>) null, (Option<String>) null, 1139L);
      boolean boolean0 = logInfo0.equals(logInfo1);
      assertFalse(logInfo1.equals((Object)logInfo0));
      assertFalse(boolean0);
      assertEquals(1139L, logInfo1.fileSize());
      assertEquals(4832L, logInfo0.copy$default$5());
      assertEquals(4832L, logInfo1.lastProcessed());
      assertEquals(4832L, logInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("scala.Predef", 358L, (Option<String>) null, (Option<String>) null, 358L);
      boolean boolean0 = logInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(",ds$Ndz", 4828L, (Option<String>) null, (Option<String>) null, 4828L);
      boolean boolean0 = logInfo0.equals(logInfo0);
      assertEquals(4828L, logInfo0.copy$default$5());
      assertTrue(boolean0);
      assertEquals(4828L, logInfo0.lastProcessed());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("scala.Enumeration$Val", 903L, (Option<String>) null, (Option<String>) null, 903L);
      // Undeclared exception!
      try { 
        logInfo0.productElement(1749);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.deploy.history.LogInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply(",ds$Ndz", 4851L, (Option<String>) null, (Option<String>) null, 4851L);
      LogInfo.unapply(logInfo0);
      assertEquals(4851L, logInfo0.lastProcessed());
      assertEquals(4851L, logInfo0.copy$default$5());
      assertEquals(4851L, logInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LogInfo logInfo0 = new LogInfo("LogInfo", 0L, (Option<String>) null, (Option<String>) null, 0L);
      logInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Function1<String, Function1<Object, Function1<Option<String>, Function1<Option<String>, Function1<Object, LogInfo>>>>> function1_0 = LogInfo.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply((String) null, 3158L, (Option<String>) null, (Option<String>) null, 3158L);
      LogInfo logInfo1 = logInfo0.copy((String) null, 3158L, (Option<String>) null, (Option<String>) null, 3158L);
      boolean boolean0 = logInfo0.equals(logInfo1);
      assertTrue(boolean0);
      assertEquals(3158L, logInfo0.fileSize());
      assertEquals(3158L, logInfo1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 4841L, (Option<String>) null, (Option<String>) null, 4841L);
      logInfo0.copy$default$3();
      assertEquals(4841L, logInfo0.lastProcessed());
      assertEquals(4841L, logInfo0.fileSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Function1<Tuple5<String, Object, Option<String>, Option<String>, Object>, LogInfo> function1_0 = LogInfo.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option<Tuple5<String, Object, Option<String>, Option<String>, Object>> option0 = LogInfo.unapply((LogInfo) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply((String) null, 2177L, (Option<String>) null, (Option<String>) null, 2177L);
      String string0 = logInfo0.toString();
      assertEquals(5, logInfo0.productArity());
      assertEquals("LogInfo(null,2177,null,null,2177)", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 0L, (Option<String>) null, (Option<String>) null, 1372L);
      long long0 = logInfo0.copy$default$5();
      assertEquals(1372L, long0);
      assertEquals(0L, logInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("\"6DYbi?{o", 138L, (Option<String>) null, (Option<String>) null, 1665L);
      long long0 = logInfo0.copy$default$2();
      assertEquals(138L, long0);
      assertEquals(1665L, logInfo0.fileSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("scala.Predef", 903L, (Option<String>) null, (Option<String>) null, 903L);
      logInfo0.productIterator();
      assertEquals(903L, logInfo0.copy$default$5());
      assertEquals(5, logInfo0.productArity());
      assertEquals(903L, logInfo0.lastProcessed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 0L, (Option<String>) null, (Option<String>) null, 0L);
      String string0 = logInfo0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LogInfo logInfo0 = LogInfo.apply("", 4841L, (Option<String>) null, (Option<String>) null, 4841L);
      logInfo0.copy$default$4();
      assertEquals(4841L, logInfo0.copy$default$5());
      assertEquals(4841L, logInfo0.copy$default$2());
  }
}
