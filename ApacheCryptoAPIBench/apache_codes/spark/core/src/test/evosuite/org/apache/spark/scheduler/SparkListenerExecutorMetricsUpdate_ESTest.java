/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:27:41 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.AccumulableInfo;
import org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;
import scala.Tuple4;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerExecutorMetricsUpdate_ESTest extends SparkListenerExecutorMetricsUpdate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      String string0 = sparkListenerExecutorMetricsUpdate0.execId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>> seq0 = (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("Some", seq0);
      Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>> seq1 = sparkListenerExecutorMetricsUpdate0.copy$default$2();
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate1 = new SparkListenerExecutorMetricsUpdate((String) null, seq1);
      String string0 = sparkListenerExecutorMetricsUpdate1.execId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>> seq0 = (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("4/@x>", seq0);
      Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>> seq1 = sparkListenerExecutorMetricsUpdate0.accumUpdates();
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate1 = sparkListenerExecutorMetricsUpdate0.copy((String) null, seq1);
      String string0 = sparkListenerExecutorMetricsUpdate1.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      String string0 = sparkListenerExecutorMetricsUpdate0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply((String) null, (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      boolean boolean0 = sparkListenerExecutorMetricsUpdate0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      Object object0 = sparkListenerExecutorMetricsUpdate0.productElement(0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply((String) null, (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      Object object0 = sparkListenerExecutorMetricsUpdate0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply(">wy&j( .t&B11DQ:", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      String string0 = sparkListenerExecutorMetricsUpdate0.productPrefix();
      assertEquals("SparkListenerExecutorMetricsUpdate", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("b=_ >8T,%Myme]n\"FqU", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      String string0 = sparkListenerExecutorMetricsUpdate0.execId();
      assertEquals("b=_ >8T,%Myme]n\"FqU", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      int int0 = sparkListenerExecutorMetricsUpdate0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("?=_ >8T,%dMyme]n\"FqU", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>> seq0 = sparkListenerExecutorMetricsUpdate0.accumUpdates();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("SparkListenerExecutorMetricsUpdate", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      sparkListenerExecutorMetricsUpdate0.productIterator();
      assertEquals(2, sparkListenerExecutorMetricsUpdate0.productArity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option<Tuple2<String, Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>>> option0 = SparkListenerExecutorMetricsUpdate.unapply((SparkListenerExecutorMetricsUpdate) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply((String) null, (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      boolean boolean0 = sparkListenerExecutorMetricsUpdate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply((String) null, (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      boolean boolean0 = sparkListenerExecutorMetricsUpdate0.equals(sparkListenerExecutorMetricsUpdate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("ut", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      // Undeclared exception!
      try { 
        sparkListenerExecutorMetricsUpdate0.productElement(1997);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("%c|zL)OB/hH7Eir0E", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      boolean boolean0 = sparkListenerExecutorMetricsUpdate0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<Tuple2<String, Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>>, SparkListenerExecutorMetricsUpdate> function1_0 = SparkListenerExecutorMetricsUpdate.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("scala.collection.mutable.LinkedList", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      String string0 = sparkListenerExecutorMetricsUpdate0.copy$default$1();
      assertEquals("scala.collection.mutable.LinkedList", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("-", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      String string0 = sparkListenerExecutorMetricsUpdate0.toString();
      assertEquals("SparkListenerExecutorMetricsUpdate(-,null)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      sparkListenerExecutorMetricsUpdate0.hashCode();
      assertEquals(2, sparkListenerExecutorMetricsUpdate0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<String, Function1<Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>, SparkListenerExecutorMetricsUpdate>> function1_0 = SparkListenerExecutorMetricsUpdate.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("M-)iC>^z{]sYpp-$-G", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      boolean boolean0 = sparkListenerExecutorMetricsUpdate0.canEqual(sparkListenerExecutorMetricsUpdate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = new SparkListenerExecutorMetricsUpdate("'?'", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>> seq0 = sparkListenerExecutorMetricsUpdate0.copy$default$2();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerExecutorMetricsUpdate sparkListenerExecutorMetricsUpdate0 = SparkListenerExecutorMetricsUpdate.apply("", (Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>) null);
      Option<Tuple2<String, Seq<Tuple4<Object, Object, Object, Seq<AccumulableInfo>>>>> option0 = SparkListenerExecutorMetricsUpdate.unapply(sparkListenerExecutorMetricsUpdate0);
      assertNotNull(option0);
  }
}
