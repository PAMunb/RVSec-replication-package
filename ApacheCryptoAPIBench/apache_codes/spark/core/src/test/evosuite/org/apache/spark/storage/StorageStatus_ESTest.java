/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:19:15 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.BlockId;
import org.apache.spark.storage.BlockManagerId;
import org.apache.spark.storage.BlockStatus;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.storage.StorageStatus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple3;
import scala.collection.Iterator;
import scala.collection.Map;
import scala.collection.mutable.HashMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StorageStatus_ESTest extends StorageStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo1 = storageStatus_NonRddStorageInfo0.copy(136L, 0L, (-7046033566014671411L));
      assertFalse(storageStatus_NonRddStorageInfo1.equals((Object)storageStatus_NonRddStorageInfo0));
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(136L, storageStatus_NonRddStorageInfo1.onHeapUsage());
      assertEquals((-7046033566014671411L), storageStatus_NonRddStorageInfo1.copy$default$3());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo1.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo1.copy$default$2());
      assertEquals(136L, storageStatus_NonRddStorageInfo1.copy$default$1());
      assertEquals((-7046033566014671411L), storageStatus_NonRddStorageInfo1.diskUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo1.productArity());
      assertEquals(0L, storageStatus_NonRddStorageInfo1.offHeapUsage());
      assertNotNull(storageStatus_NonRddStorageInfo1);
      assertNotSame(storageStatus_NonRddStorageInfo0, storageStatus_NonRddStorageInfo1);
      assertNotSame(storageStatus_NonRddStorageInfo1, storageStatus_NonRddStorageInfo0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 707L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(707L, storageStatus0.maxMemory());
      assertEquals(707L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(storageLevel0).useOffHeap();
      BlockStatus blockStatus0 = mock(BlockStatus.class, new ViolatedAssumptionAnswer());
      doReturn(1641L).when(blockStatus0).diskSize();
      doReturn(707L).when(blockStatus0).memSize();
      doReturn(storageLevel0).when(blockStatus0).storageLevel();
      storageStatus0.updateBlock(blockId0, blockStatus0);
      assertEquals(707L, storageStatus0.maxMemory());
      assertEquals(707L, storageStatus0.maxMem());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 595L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(595L, storageStatus0.maxMem());
      assertEquals(595L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals(595L, storageStatus0.maxMem());
      assertEquals(595L, storageStatus0.maxMemory());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn("N2!z(r:-1y").when(storageLevel0).toString();
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply((long) 0, 595L, storageLevel0);
      assertEquals(595L, storageStatus0.maxMem());
      assertEquals(595L, storageStatus0.maxMemory());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(595L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(595L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$1());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      Iterator<Object> iterator0 = storageStatus_RddStorageInfo0.productIterator();
      assertEquals(595L, storageStatus0.maxMem());
      assertEquals(595L, storageStatus0.maxMemory());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(595L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(595L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$1());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-478L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals((-478L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.storage.StorageStatus$NonRddStorageInfo").when(blockId0).toString();
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(storageLevel0).useOffHeap();
      BlockStatus blockStatus0 = mock(BlockStatus.class, new ViolatedAssumptionAnswer());
      doReturn((-478L)).when(blockStatus0).diskSize();
      doReturn((-478L)).when(blockStatus0).memSize();
      doReturn(storageLevel0).when(blockStatus0).storageLevel();
      doReturn("org.apache.spark.storage.StorageStatus$$anonfun$rddBlocksById$1").when(blockStatus0).toString();
      storageStatus0.addBlock(blockId0, blockStatus0);
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals((-478L), storageStatus0.maxMemory());
      
      int int0 = storageStatus0.numBlocks();
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals((-478L), storageStatus0.maxMemory());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      long long0 = storageStatus0.maxMemory();
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals((-1L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      long long0 = storageStatus0.maxMemory();
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 2L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(2L, storageStatus0.maxMem());
      assertEquals(2L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      long long0 = storageStatus0.maxMem();
      assertEquals(2L, storageStatus0.maxMem());
      assertEquals(2L, storageStatus0.maxMemory());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      BlockManagerId blockManagerId1 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId1, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      Map<BlockId, BlockStatus> map0 = storageStatus0.blocks();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(map0);
      
      StorageStatus storageStatus1 = new StorageStatus(blockManagerId0, (-2348L), (Option<Object>) null, (Option<Object>) null, map0);
      assertFalse(storageStatus1.equals((Object)storageStatus0));
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals((-2348L), storageStatus1.maxMem());
      assertEquals((-2348L), storageStatus1.maxMemory());
      assertNotNull(storageStatus1);
      
      long long0 = storageStatus1.maxMem();
      assertFalse(storageStatus0.equals((Object)storageStatus1));
      assertFalse(storageStatus1.equals((Object)storageStatus0));
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals((-2348L), storageStatus1.maxMem());
      assertEquals((-2348L), storageStatus1.maxMemory());
      assertEquals((-2348L), long0);
      assertNotSame(storageStatus0, storageStatus1);
      assertNotSame(storageStatus1, storageStatus0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      storageStatus_NonRddStorageInfo0.diskUsage_$eq(993L);
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(993L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(993L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      
      long long0 = storageStatus0.diskUsed();
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals(993L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 321L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(321L, storageStatus0.maxMem());
      assertEquals(321L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      // Undeclared exception!
      try { 
        storageStatus0.addBlock((BlockId) null, (BlockStatus) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 2L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(2L, storageStatus0.maxMem());
      assertEquals(2L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      Option<BlockStatus> option0 = storageStatus0.getBlock(blockId0);
      assertEquals(2L, storageStatus0.maxMem());
      assertEquals(2L, storageStatus0.maxMemory());
      assertEquals("None", option0.productPrefix());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-5071L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-5071L), storageStatus0.maxMemory());
      assertEquals((-5071L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.new NonRddStorageInfo((-5071L), 9223372036854775807L, 0L);
      assertEquals((-5071L), storageStatus0.maxMemory());
      assertEquals((-5071L), storageStatus0.maxMem());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      storageStatus_NonRddStorageInfo0.offHeapUsage_$eq(2124);
      assertEquals((-5071L), storageStatus0.maxMemory());
      assertEquals((-5071L), storageStatus0.maxMem());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(2124L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(2124L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-33L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-33L), storageStatus0.maxMem());
      assertEquals((-33L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      // Undeclared exception!
      try { 
        storageStatus0.onHeapCacheSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo. storageStatus_NonRddStorageInfo_0 = storageStatus0.new StorageStatus.NonRddStorageInfo.();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertNotNull(storageStatus_NonRddStorageInfo_0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus_NonRddStorageInfo_0.apply((-1016L), (-1694L), 377L);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals((-1694L), storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-1016L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(377L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(377L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-1694L), storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals((-1016L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      storageStatus_NonRddStorageInfo0.diskUsage_$eq(9223372036854775807L);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals((-1694L), storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-1016L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-1694L), storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals((-1016L), storageStatus_NonRddStorageInfo0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 3255L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(3255L, storageStatus0.maxMemory());
      assertEquals(3255L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      HashMap<Object, StorageStatus.RddStorageInfo> hashMap0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_rddStorageInfo();
      assertEquals(3255L, storageStatus0.maxMemory());
      assertEquals(3255L, storageStatus0.maxMem());
      assertEquals(4, hashMap0.seedvalue());
      assertEquals(750, hashMap0._loadFactor());
      assertEquals(12, hashMap0.threshold());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap0.tableSize());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-4237L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-4237L), storageStatus0.maxMemory());
      assertEquals((-4237L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals((-4237L), storageStatus0.maxMemory());
      assertEquals((-4237L), storageStatus0.maxMem());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      long long0 = storageStatus_NonRddStorageInfo0.diskUsage();
      assertEquals((-4237L), storageStatus0.maxMemory());
      assertEquals((-4237L), storageStatus0.maxMem());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      storageStatus_NonRddStorageInfo0.onHeapUsage_$eq(0L);
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 500L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(500L, storageStatus0.maxMem());
      assertEquals(500L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      long long0 = storageStatus0.maxMemory();
      assertEquals(500L, storageStatus0.maxMem());
      assertEquals(500L, storageStatus0.maxMemory());
      assertEquals(500L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      long long0 = storageStatus_NonRddStorageInfo0.offHeapUsage();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      Map<BlockId, BlockStatus> map0 = storageStatus0.rddBlocks();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 5564L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(5564L, storageStatus0.maxMem());
      assertEquals(5564L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      Option<Object> option0 = storageStatus0.maxOffHeapMem();
      assertEquals(5564L, storageStatus0.maxMem());
      assertEquals(5564L, storageStatus0.maxMemory());
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      Option<Object> option0 = storageStatus0.maxOnHeapMem();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 500L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(500L, storageStatus0.maxMem());
      assertEquals(500L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      int int0 = storageStatus0.numRddBlocks();
      assertEquals(500L, storageStatus0.maxMem());
      assertEquals(500L, storageStatus0.maxMemory());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      long long0 = storageStatus0.maxMem();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-5053L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-5053L), storageStatus0.maxMemory());
      assertEquals((-5053L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      // Undeclared exception!
      try { 
        storageStatus0.memUsed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.new NonRddStorageInfo(0L, 0L, 9223372036854775807L);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      long long0 = storageStatus_NonRddStorageInfo0.onHeapUsage();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-478L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals((-478L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      // Undeclared exception!
      try { 
        storageStatus0.onHeapMemUsed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-1L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals((-1L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      boolean boolean0 = storageStatus0.containsBlock((BlockId) null);
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals((-1L), storageStatus0.maxMemory());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 3519L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(3519L, storageStatus0.maxMemory());
      assertEquals(3519L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.new NonRddStorageInfo(3519L, 3519L, (-1275L));
      assertEquals(3519L, storageStatus0.maxMemory());
      assertEquals(3519L, storageStatus0.maxMem());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-1275L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-1275L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      Object object0 = storageStatus_NonRddStorageInfo0.productElement(0);
      assertEquals(3519L, storageStatus0.maxMemory());
      assertEquals(3519L, storageStatus0.maxMem());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-1275L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-1275L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertNotNull(object0);
      assertEquals(3519L, object0);
      
      boolean boolean0 = storageStatus_NonRddStorageInfo0.equals(object0);
      assertEquals(3519L, storageStatus0.maxMemory());
      assertEquals(3519L, storageStatus0.maxMem());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3519L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-1275L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-1275L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      // Undeclared exception!
      try { 
        storageStatus_NonRddStorageInfo0.productElement(1853);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000017
         //
         verifyException("org.apache.spark.storage.StorageStatus$NonRddStorageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo. storageStatus_NonRddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$NonRddStorageInfo();
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertNotNull(storageStatus_NonRddStorageInfo_0);
      
      Option<Tuple3<Object, Object, Object>> option0 = storageStatus_NonRddStorageInfo_0.unapply((StorageStatus.NonRddStorageInfo) null);
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals("None", option0.productPrefix());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-67L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-67L), storageStatus0.maxMem());
      assertEquals((-67L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo. storageStatus_NonRddStorageInfo_0 = storageStatus0.new StorageStatus.NonRddStorageInfo.();
      assertEquals((-67L), storageStatus0.maxMem());
      assertEquals((-67L), storageStatus0.maxMemory());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertNotNull(storageStatus_NonRddStorageInfo_0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus_NonRddStorageInfo_0.apply((-67L), 1L, (-67L));
      assertEquals((-67L), storageStatus0.maxMem());
      assertEquals((-67L), storageStatus0.maxMemory());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(1L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      Option<Tuple3<Object, Object, Object>> option0 = storageStatus_NonRddStorageInfo_0.unapply(storageStatus_NonRddStorageInfo0);
      assertEquals((-67L), storageStatus0.maxMem());
      assertEquals((-67L), storageStatus0.maxMemory());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(1L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-67L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals("Some", option0.productPrefix());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 779L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(779L, storageStatus0.maxMemory());
      assertEquals(779L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus0.new RddStorageInfo(779L, 779L, storageLevel0);
      assertEquals(779L, storageStatus0.maxMemory());
      assertEquals(779L, storageStatus0.maxMem());
      assertEquals(779L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(779L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(779L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(779L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      boolean boolean0 = storageStatus_RddStorageInfo0.equals((Object) null);
      assertEquals(779L, storageStatus0.maxMemory());
      assertEquals(779L, storageStatus0.maxMem());
      assertEquals(779L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(779L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(779L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(779L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-1L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus0.new RddStorageInfo(1L, 2L, (StorageLevel) null);
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(2L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(2L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      // Undeclared exception!
      try { 
        storageStatus_RddStorageInfo0.productElement((-889275714));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000013
         //
         verifyException("org.apache.spark.storage.StorageStatus$RddStorageInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-1L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_1 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals((-1L), storageStatus0.maxMemory());
      assertEquals((-1L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_1.toString());
      assertNotNull(storageStatus_RddStorageInfo_1);
      assertSame(storageStatus_RddStorageInfo_1, storageStatus_RddStorageInfo_0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-4L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-4L), storageStatus0.maxMemory());
      assertEquals((-4L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.new StorageStatus.RddStorageInfo.();
      assertEquals((-4L), storageStatus0.maxMemory());
      assertEquals((-4L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      Option<Tuple3<Object, Object, StorageLevel>> option0 = storageStatus_RddStorageInfo_0.unapply((StorageStatus.RddStorageInfo) null);
      assertEquals((-4L), storageStatus0.maxMemory());
      assertEquals((-4L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals("None", option0.productPrefix());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply(1L, 1L, (StorageLevel) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      Option<Tuple3<Object, Object, StorageLevel>> option0 = storageStatus_RddStorageInfo_0.unapply(storageStatus_RddStorageInfo0);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("Some", option0.productPrefix());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 3201L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(3201L, storageStatus0.maxMem());
      assertEquals(3201L, storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(storageLevel0).toString();
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus0.new RddStorageInfo(1L, 0L, storageLevel0);
      assertEquals(3201L, storageStatus0.maxMem());
      assertEquals(3201L, storageStatus0.maxMemory());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      StorageLevel storageLevel1 = storageStatus_RddStorageInfo0.copy$default$3();
      assertEquals(3201L, storageStatus0.maxMem());
      assertEquals(3201L, storageStatus0.maxMemory());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertNull(storageLevel1.memoryMode());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(0, storageLevel1.replication());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertNotNull(storageLevel1);
      assertSame(storageLevel1, storageLevel0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply(1L, 1L, (StorageLevel) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo1 = storageStatus_RddStorageInfo0.copy(0L, 377L, (StorageLevel) null);
      assertFalse(storageStatus_RddStorageInfo1.equals((Object)storageStatus_RddStorageInfo0));
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(3, storageStatus_RddStorageInfo1.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo1.productPrefix());
      assertEquals(377L, storageStatus_RddStorageInfo1.copy$default$2());
      assertEquals(0L, storageStatus_RddStorageInfo1.copy$default$1());
      assertEquals(377L, storageStatus_RddStorageInfo1.diskUsage());
      assertEquals(0L, storageStatus_RddStorageInfo1.memoryUsage());
      assertNotNull(storageStatus_RddStorageInfo1);
      assertNotSame(storageStatus_RddStorageInfo0, storageStatus_RddStorageInfo1);
      assertNotSame(storageStatus_RddStorageInfo1, storageStatus_RddStorageInfo0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-478L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-478L), storageStatus0.maxMemory());
      assertEquals((-478L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.new StorageStatus.RddStorageInfo.();
      assertEquals((-478L), storageStatus0.maxMemory());
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(storageLevel0).toString();
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply((-215L), (long) 0, storageLevel0);
      assertEquals((-478L), storageStatus0.maxMemory());
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals((-215L), storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals((-215L), storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      boolean boolean0 = storageStatus_RddStorageInfo0.canEqual(blockManagerId0);
      assertEquals((-478L), storageStatus0.maxMemory());
      assertEquals((-478L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals((-215L), storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals((-215L), storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply(1L, 1L, (StorageLevel) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      long long0 = storageStatus_RddStorageInfo0.copy$default$2();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$RddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply(1L, 1L, (StorageLevel) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      String string0 = storageStatus_RddStorageInfo0.toString();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(1L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(1L, storageStatus_RddStorageInfo0.memoryUsage());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(1L, storageStatus_RddStorageInfo0.copy$default$1());
      assertNotNull(string0);
      assertEquals("RddStorageInfo(1,1,null)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-414L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-414L), storageStatus0.maxMem());
      assertEquals((-414L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo. storageStatus_NonRddStorageInfo_0 = storageStatus0.org$apache$spark$storage$StorageStatus$$NonRddStorageInfo();
      assertEquals((-414L), storageStatus0.maxMem());
      assertEquals((-414L), storageStatus0.maxMemory());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertNotNull(storageStatus_NonRddStorageInfo_0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus_NonRddStorageInfo_0.apply((-414L), (-419L), (-414L));
      assertEquals((-414L), storageStatus0.maxMem());
      assertEquals((-414L), storageStatus0.maxMemory());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals((-419L), storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals((-419L), storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      long long0 = storageStatus_NonRddStorageInfo0.copy$default$3();
      assertEquals((-414L), storageStatus0.maxMem());
      assertEquals((-414L), storageStatus0.maxMemory());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo_0.toString());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals((-419L), storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals((-419L), storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-414L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals((-414L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      StorageStatus.RddStorageInfo. storageStatus_RddStorageInfo_0 = storageStatus0.new StorageStatus.RddStorageInfo.();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertNotNull(storageStatus_RddStorageInfo_0);
      
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(storageLevel0).toString();
      StorageStatus.RddStorageInfo storageStatus_RddStorageInfo0 = storageStatus_RddStorageInfo_0.apply((long) 0, (long) 0, storageLevel0);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_RddStorageInfo0.memoryUsage());
      assertNotNull(storageStatus_RddStorageInfo0);
      
      Object object0 = storageStatus_RddStorageInfo0.productElement(0);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_RddStorageInfo0.memoryUsage());
      assertNotNull(object0);
      assertEquals(0L, object0);
      
      boolean boolean0 = storageStatus_NonRddStorageInfo0.canEqual(object0);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo_0.toString());
      assertEquals("RddStorageInfo", storageStatus_RddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_RddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_RddStorageInfo0.copy$default$2());
      assertEquals(3, storageStatus_RddStorageInfo0.productArity());
      assertEquals(0L, storageStatus_RddStorageInfo0.memoryUsage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-5071L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-5071L), storageStatus0.maxMemory());
      assertEquals((-5071L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.new NonRddStorageInfo((-5071L), 9223372036854775807L, 0L);
      assertEquals((-5071L), storageStatus0.maxMemory());
      assertEquals((-5071L), storageStatus0.maxMem());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      String string0 = storageStatus_NonRddStorageInfo0.toString();
      assertEquals((-5071L), storageStatus0.maxMemory());
      assertEquals((-5071L), storageStatus0.maxMem());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals((-5071L), storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(9223372036854775807L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertNotNull(string0);
      assertEquals("NonRddStorageInfo(-5071,9223372036854775807,0)", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 743L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(743L, storageStatus0.maxMemory());
      assertEquals(743L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      Option<BlockStatus> option0 = storageStatus0.removeBlock((BlockId) null);
      assertEquals(743L, storageStatus0.maxMemory());
      assertEquals(743L, storageStatus0.maxMem());
      assertEquals("None", option0.productPrefix());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      long long0 = storageStatus_NonRddStorageInfo0.copy$default$2();
      assertEquals(0L, storageStatus0.maxMemory());
      assertEquals(0L, storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      StorageStatus storageStatus0 = new StorageStatus(blockManagerId0, (-1016L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      StorageStatus.NonRddStorageInfo storageStatus_NonRddStorageInfo0 = storageStatus0.org$apache$spark$storage$StorageStatus$$_nonRddStorageInfo();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertNotNull(storageStatus_NonRddStorageInfo0);
      
      long long0 = storageStatus_NonRddStorageInfo0.copy$default$1();
      assertEquals((-1016L), storageStatus0.maxMemory());
      assertEquals((-1016L), storageStatus0.maxMem());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.diskUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$2());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.onHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.offHeapUsage());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$3());
      assertEquals("NonRddStorageInfo", storageStatus_NonRddStorageInfo0.productPrefix());
      assertEquals(0L, storageStatus_NonRddStorageInfo0.copy$default$1());
      assertEquals(3, storageStatus_NonRddStorageInfo0.productArity());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 311L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(311L, storageStatus0.maxMemory());
      assertEquals(311L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      Map<BlockId, BlockStatus> map0 = storageStatus0.rddBlocksById((-1073741824));
      assertEquals(311L, storageStatus0.maxMemory());
      assertEquals(311L, storageStatus0.maxMem());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StorageStatus storageStatus0 = null;
      try {
        storageStatus0 = new StorageStatus((BlockManagerId) null, (-369L), (Option<Object>) null, (Option<Object>) null, (Map<BlockId, BlockStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 311L, (Option<Object>) null, (Option<Object>) null);
      assertEquals(311L, storageStatus0.maxMemory());
      assertEquals(311L, storageStatus0.maxMem());
      assertNotNull(storageStatus0);
      
      long long0 = storageStatus0.diskUsedByRdd((-2002));
      assertEquals(311L, storageStatus0.maxMemory());
      assertEquals(311L, storageStatus0.maxMem());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-33L), (Option<Object>) null, (Option<Object>) null);
      assertEquals((-33L), storageStatus0.maxMem());
      assertEquals((-33L), storageStatus0.maxMemory());
      assertNotNull(storageStatus0);
      
      BlockManagerId blockManagerId0 = storageStatus0.blockManagerId();
      assertEquals((-33L), storageStatus0.maxMem());
      assertEquals((-33L), storageStatus0.maxMemory());
      assertNull(blockManagerId0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-5053L), (Option<Object>) null, (Option<Object>) null);
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      BlockStatus blockStatus0 = mock(BlockStatus.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(blockStatus0).diskSize();
      doReturn(0L).when(blockStatus0).memSize();
      doReturn((StorageLevel) null).when(blockStatus0).storageLevel();
      // Undeclared exception!
      try { 
        storageStatus0.updateBlock(blockId0, blockStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-1L), (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        storageStatus0.offHeapMemRemaining();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-463L), (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        storageStatus0.offHeapMemUsed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 1L, (Option<Object>) null, (Option<Object>) null);
      long long0 = storageStatus0.diskUsed();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 2963L, (Option<Object>) null, (Option<Object>) null);
      int int0 = storageStatus0.numRddBlocksById((-3052));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 1L, (Option<Object>) null, (Option<Object>) null);
      Option<StorageLevel> option0 = storageStatus0.rddStorageLevel((-3054));
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-419L), (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        storageStatus0.onHeapMemRemaining();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 368L, (Option<Object>) null, (Option<Object>) null);
      long long0 = storageStatus0.memUsedByRdd((-889275714));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-5053L), (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        storageStatus0.memRemaining();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 3588L, (Option<Object>) null, (Option<Object>) null);
      int int0 = storageStatus0.numBlocks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, (-1119L), (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        storageStatus0.offHeapCacheSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StorageStatus storageStatus0 = new StorageStatus((BlockManagerId) null, 1651L, (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        storageStatus0.cacheSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.StorageStatus", e);
      }
  }
}
