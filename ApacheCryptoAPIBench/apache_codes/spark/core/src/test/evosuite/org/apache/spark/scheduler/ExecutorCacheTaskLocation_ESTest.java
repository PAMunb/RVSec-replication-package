/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:33:22 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.ExecutorCacheTaskLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorCacheTaskLocation_ESTest extends ExecutorCacheTaskLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation((String) null, (String) null);
      Object object0 = executorCacheTaskLocation0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("scala.runtime.AbstractPartialFunction", "");
      String string0 = executorCacheTaskLocation0.host();
      assertEquals("", executorCacheTaskLocation0.executorId());
      assertEquals("scala.runtime.AbstractPartialFunction", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("", "2g/$");
      String string0 = executorCacheTaskLocation0.host();
      assertEquals("", string0);
      assertEquals("2g/$", executorCacheTaskLocation0.executorId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("", (String) null);
      String string0 = executorCacheTaskLocation0.executorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("", ">DO!pt4N");
      String string0 = executorCacheTaskLocation0.executorId();
      assertEquals(">DO!pt4N", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("3WjjSOA#+p", (String) null);
      String string0 = executorCacheTaskLocation0.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("", "");
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = executorCacheTaskLocation0.copy("o}E1Jrkp*9x={D8o|`", "eY%NojdUC]$:");
      String string0 = executorCacheTaskLocation1.copy$default$2();
      assertEquals("o}E1Jrkp*9x={D8o|`", executorCacheTaskLocation1.host());
      assertEquals("eY%NojdUC]$:", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("R", "R");
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = executorCacheTaskLocation0.copy((String) null, "scala.collection.Iterable$class");
      String string0 = executorCacheTaskLocation1.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("", "2g/$");
      String string0 = executorCacheTaskLocation0.copy$default$1();
      assertEquals("2g/$", executorCacheTaskLocation0.executorId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      boolean boolean0 = executorCacheTaskLocation0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("scala.Predef$StringFormat", "scala.Predef$StringFormat");
      Object object0 = executorCacheTaskLocation0.productElement(1);
      assertEquals("scala.Predef$StringFormat", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("G&?&@6HeGt+_*Y2T", "");
      String string0 = executorCacheTaskLocation0.executorId();
      assertEquals("", string0);
      assertEquals("G&?&@6HeGt+_*Y2T", executorCacheTaskLocation0.host());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("4", "j4&ZDh'<SNJHBFT@{");
      boolean boolean0 = executorCacheTaskLocation0.canEqual(executorCacheTaskLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      String string0 = executorCacheTaskLocation0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("D7L2=S_&^)(buk", "D7L2=S_&^)(buk");
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = ExecutorCacheTaskLocation.apply("D7L2=S_&^)(buk", "");
      boolean boolean0 = executorCacheTaskLocation1.equals(executorCacheTaskLocation0);
      assertFalse(boolean0);
      assertEquals("D7L2=S_&^)(buk", executorCacheTaskLocation1.host());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("ts=<{}H,4]?", (String) null);
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = executorCacheTaskLocation0.copy("ts=<{}H,4]?", "ts=<{}H,4]?");
      boolean boolean0 = executorCacheTaskLocation0.equals(executorCacheTaskLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("", "");
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = ExecutorCacheTaskLocation.apply("`-.{3SJ>.*:T+PZ\"", "`-.{3SJ>.*:T+PZ\"");
      boolean boolean0 = executorCacheTaskLocation0.equals(executorCacheTaskLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = executorCacheTaskLocation0.copy("", (String) null);
      boolean boolean0 = executorCacheTaskLocation0.equals(executorCacheTaskLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      boolean boolean0 = executorCacheTaskLocation0.equals(executorCacheTaskLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("$k5D", "$k5D");
      boolean boolean0 = executorCacheTaskLocation0.equals("$k5D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("T-cNr\"(n gg", "T-cNr\"(n gg");
      boolean boolean0 = executorCacheTaskLocation0.equals(executorCacheTaskLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation(" NdGT.K``+7I>zA", " NdGT.K``+7I>zA");
      // Undeclared exception!
      try { 
        executorCacheTaskLocation0.productElement((-1960));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.ExecutorCacheTaskLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      Option<Tuple2<String, String>> option0 = ExecutorCacheTaskLocation.unapply(executorCacheTaskLocation0);
      assertEquals("Some", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation((String) null, (String) null);
      executorCacheTaskLocation0.productIterator();
      assertEquals(2, executorCacheTaskLocation0.productArity());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("I9e<$ 0", "WToq|IKcJ;H}Mwt`?");
      String string0 = executorCacheTaskLocation0.copy$default$1();
      assertEquals("I9e<$ 0", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function1<Tuple2<String, String>, ExecutorCacheTaskLocation> function1_0 = ExecutorCacheTaskLocation.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = new ExecutorCacheTaskLocation("", "");
      executorCacheTaskLocation0.hashCode();
      assertEquals(2, executorCacheTaskLocation0.productArity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option<Tuple2<String, String>> option0 = ExecutorCacheTaskLocation.unapply((ExecutorCacheTaskLocation) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      int int0 = executorCacheTaskLocation0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("T-cNr\"(n gg", "T-cNr\"(n gg");
      ExecutorCacheTaskLocation executorCacheTaskLocation1 = ExecutorCacheTaskLocation.apply("T-cNr\"(n gg", "T-cNr\"(n gg");
      boolean boolean0 = executorCacheTaskLocation0.equals(executorCacheTaskLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      String string0 = executorCacheTaskLocation0.toString();
      assertEquals("executor_null_null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply("", "");
      String string0 = executorCacheTaskLocation0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExecutorCacheTaskLocation executorCacheTaskLocation0 = ExecutorCacheTaskLocation.apply((String) null, (String) null);
      String string0 = executorCacheTaskLocation0.productPrefix();
      assertEquals("ExecutorCacheTaskLocation", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function1<String, Function1<String, ExecutorCacheTaskLocation>> function1_0 = ExecutorCacheTaskLocation.curried();
      assertNotNull(function1_0);
  }
}
