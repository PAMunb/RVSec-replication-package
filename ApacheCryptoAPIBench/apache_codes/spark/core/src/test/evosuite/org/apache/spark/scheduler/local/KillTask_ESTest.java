/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:27:08 GMT 2022
 */

package org.apache.spark.scheduler.local;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.local.KillTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KillTask_ESTest extends KillTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(0L, true, (String) null);
      KillTask killTask1 = KillTask.apply(1953L, false, "k@oRO{&:EL]&w)");
      boolean boolean0 = killTask1.equals(killTask0);
      assertEquals(1953L, killTask1.taskId());
      assertFalse(killTask1.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(8L, false, "?");
      long long0 = killTask0.taskId();
      assertEquals(8L, long0);
      assertFalse(killTask0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-406L), true, "");
      long long0 = killTask0.taskId();
      assertEquals((-406L), long0);
      assertTrue(killTask0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KillTask killTask0 = new KillTask(228L, false, "_x`|Z0YY[4/`");
      KillTask killTask1 = killTask0.copy(3405L, true, (String) null);
      killTask1.reason();
      assertEquals(3405L, killTask1.taskId());
      assertTrue(killTask1.interruptThread());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(666L, false, "");
      killTask0.reason();
      assertFalse(killTask0.interruptThread());
      assertEquals(666L, killTask0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-1L), true, "");
      killTask0.productElement(2);
      assertEquals((-1L), killTask0.taskId());
      assertTrue(killTask0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-406L), true, "");
      KillTask killTask1 = killTask0.copy((-406L), false, "");
      boolean boolean0 = killTask1.interruptThread();
      assertFalse(killTask1.equals((Object)killTask0));
      assertEquals((-406L), killTask0.copy$default$1());
      assertEquals((-406L), killTask1.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KillTask killTask0 = new KillTask(0L, false, "q2Pg;");
      KillTask killTask1 = killTask0.copy(0L, true, "q2Pg;");
      assertTrue(killTask1.interruptThread());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KillTask killTask0 = new KillTask(228L, false, "_x`|Z0YY[4/`");
      KillTask killTask1 = killTask0.copy(3405L, true, (String) null);
      killTask1.copy$default$3();
      assertEquals(3405L, killTask1.taskId());
      assertTrue(killTask1.interruptThread());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(666L, false, "");
      killTask0.copy$default$3();
      assertFalse(killTask0.interruptThread());
      assertEquals(666L, killTask0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-406L), true, "");
      boolean boolean0 = killTask0.copy$default$2();
      assertTrue(boolean0);
      assertEquals((-406L), killTask0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(0L, true, "");
      killTask0.copy$default$1();
      assertTrue(killTask0.interruptThread());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-1506L), true, "");
      long long0 = killTask0.copy$default$1();
      assertTrue(killTask0.interruptThread());
      assertEquals((-1506L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(0L, true, "");
      Object object0 = killTask0.productElement(0);
      killTask0.canEqual(object0);
      assertTrue(killTask0.interruptThread());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-1L), true, "");
      Object object0 = killTask0.productElement(1);
      assertEquals((-1L), killTask0.copy$default$1());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(1097L, true, (String) null);
      killTask0.productElement(2);
      assertTrue(killTask0.interruptThread());
      assertEquals(1097L, killTask0.taskId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KillTask killTask0 = new KillTask(0L, false, "empty.reduceLeft");
      String string0 = killTask0.reason();
      assertEquals("empty.reduceLeft", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-406L), true, "");
      int int0 = killTask0.productArity();
      assertEquals(3, int0);
      assertEquals((-406L), killTask0.taskId());
      assertTrue(killTask0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-406L), true, "");
      boolean boolean0 = killTask0.interruptThread();
      assertEquals((-406L), killTask0.taskId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KillTask killTask0 = new KillTask((-631L), true, "");
      String string0 = killTask0.productPrefix();
      assertEquals("KillTask", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KillTask killTask0 = new KillTask(0L, false, "empty.reduceLeft");
      long long0 = killTask0.taskId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-91L), true, ".");
      KillTask killTask1 = killTask0.copy((-91L), true, "scala.None$");
      boolean boolean0 = killTask1.equals(killTask0);
      assertFalse(boolean0);
      assertTrue(killTask0.copy$default$2());
      assertEquals((-91L), killTask1.taskId());
      assertTrue(killTask1.copy$default$2());
      assertEquals((-91L), killTask0.taskId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-91L), true, "");
      KillTask killTask1 = killTask0.copy((-91L), true, (String) null);
      boolean boolean0 = killTask1.equals(killTask0);
      assertTrue(killTask0.copy$default$2());
      assertEquals((-91L), killTask1.copy$default$1());
      assertEquals((-91L), killTask0.taskId());
      assertTrue(killTask1.interruptThread());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-91L), true, ".");
      KillTask killTask1 = killTask0.copy((-91L), true, ".");
      boolean boolean0 = killTask0.equals(killTask1);
      assertTrue(boolean0);
      assertEquals((-91L), killTask1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-91L), true, ".");
      KillTask killTask1 = killTask0.copy((-91L), false, ".");
      boolean boolean0 = killTask0.equals(killTask1);
      assertEquals((-91L), killTask0.taskId());
      assertEquals((-91L), killTask1.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(0L, true, "");
      KillTask killTask1 = new KillTask(1L, true, "");
      boolean boolean0 = killTask0.equals(killTask1);
      assertFalse(boolean0);
      assertFalse(killTask1.equals((Object)killTask0));
      assertTrue(killTask0.interruptThread());
      assertEquals(1L, killTask1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(0, true, "");
      Object object0 = killTask0.productElement(0);
      boolean boolean0 = killTask0.equals(object0);
      assertFalse(boolean0);
      assertTrue(killTask0.interruptThread());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-1447L), false, (String) null);
      KillTask killTask1 = killTask0.copy((-1447L), false, (String) null);
      boolean boolean0 = killTask1.equals(killTask0);
      assertTrue(boolean0);
      assertEquals((-1447L), killTask1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-91L), true, "&");
      boolean boolean0 = killTask0.equals(killTask0);
      assertEquals((-91L), killTask0.taskId());
      assertTrue(boolean0);
      assertTrue(killTask0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-1L), true, "");
      killTask0.hashCode();
      assertEquals((-1L), killTask0.copy$default$1());
      assertTrue(killTask0.interruptThread());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KillTask killTask0 = new KillTask((-12L), false, "wf");
      killTask0.hashCode();
      assertEquals((-12L), killTask0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KillTask killTask0 = new KillTask(8L, true, "XN cl8R9`m*Gl");
      // Undeclared exception!
      try { 
        killTask0.productElement(441);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.local.KillTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KillTask killTask0 = KillTask.apply(0L, false, "[?;9y:DGX`A9T8.c");
      KillTask.unapply(killTask0);
      assertFalse(killTask0.copy$default$2());
      assertFalse(killTask0.interruptThread());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KillTask killTask0 = new KillTask(1543L, true, "7R_3YY=cN[");
      long long0 = killTask0.copy$default$1();
      assertEquals(1543L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Function1<Tuple3<Object, Object, String>, KillTask> function1_0 = KillTask.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KillTask killTask0 = new KillTask(0L, false, "empty.reduceLeft");
      String string0 = killTask0.copy$default$3();
      assertEquals("empty.reduceLeft", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KillTask killTask0 = new KillTask(0L, false, "q2Pg;");
      boolean boolean0 = killTask0.canEqual(killTask0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KillTask killTask0 = new KillTask((-1830L), false, "org.apache.spark.scheduler.local.KillTask$");
      boolean boolean0 = killTask0.copy$default$2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option<Tuple3<Object, Object, String>> option0 = KillTask.unapply((KillTask) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KillTask killTask0 = new KillTask((-1054L), false, "org.apache.spark.scheduler.local.KillTask");
      String string0 = killTask0.toString();
      assertEquals("KillTask(-1054,false,org.apache.spark.scheduler.local.KillTask)", string0);
      assertEquals(3, killTask0.productArity());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Function1<Object, Function1<Object, Function1<String, KillTask>>> function1_0 = KillTask.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KillTask killTask0 = KillTask.apply((-230L), false, "");
      killTask0.productIterator();
      assertEquals(3, killTask0.productArity());
      assertFalse(killTask0.copy$default$2());
      assertEquals((-230L), killTask0.copy$default$1());
  }
}
