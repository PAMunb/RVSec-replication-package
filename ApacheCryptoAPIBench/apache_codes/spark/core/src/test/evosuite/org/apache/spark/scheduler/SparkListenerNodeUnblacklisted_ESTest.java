/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:40:02 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerNodeUnblacklisted;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerNodeUnblacklisted_ESTest extends SparkListenerNodeUnblacklisted_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(212L, "(");
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = sparkListenerNodeUnblacklisted0.copy(830L, "(");
      boolean boolean0 = sparkListenerNodeUnblacklisted0.equals(sparkListenerNodeUnblacklisted1);
      assertFalse(boolean0);
      assertEquals(830L, sparkListenerNodeUnblacklisted1.time());
      assertFalse(sparkListenerNodeUnblacklisted1.equals((Object)sparkListenerNodeUnblacklisted0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-2380L), (String) null);
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = sparkListenerNodeUnblacklisted0.copy(0L, "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted$");
      sparkListenerNodeUnblacklisted1.time();
      assertEquals((-2380L), sparkListenerNodeUnblacklisted0.copy$default$1());
      assertEquals((-2380L), sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted((-409L), "");
      long long0 = sparkListenerNodeUnblacklisted0.time();
      assertEquals((-409L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-1L), (String) null);
      sparkListenerNodeUnblacklisted0.productElement(1);
      assertEquals((-1L), sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(0L, "t?1flH");
      String string0 = sparkListenerNodeUnblacklisted0.hostId();
      assertEquals("t?1flH", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted((-409L), "");
      String string0 = sparkListenerNodeUnblacklisted0.hostId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted((-1428L), "");
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = sparkListenerNodeUnblacklisted0.copy((-1428L), ".eaTI@+S@S \",7HUM");
      assertEquals((-1428L), sparkListenerNodeUnblacklisted1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(1L, (String) null);
      sparkListenerNodeUnblacklisted0.copy$default$2();
      assertEquals(1L, sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(1L, "scala.Predef$Pair$");
      String string0 = sparkListenerNodeUnblacklisted0.copy$default$2();
      assertEquals("scala.Predef$Pair$", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0L, ".");
      long long0 = sparkListenerNodeUnblacklisted0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-601L), "");
      long long0 = sparkListenerNodeUnblacklisted0.copy$default$1();
      assertEquals((-601L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(0L, "Z");
      boolean boolean0 = sparkListenerNodeUnblacklisted0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0L, ".");
      Object object0 = sparkListenerNodeUnblacklisted0.productElement(0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted((-1428L), "");
      Object object0 = sparkListenerNodeUnblacklisted0.productElement(1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(1L, (String) null);
      long long0 = sparkListenerNodeUnblacklisted0.time();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-1714L), ".ValueSet");
      int int0 = sparkListenerNodeUnblacklisted0.productArity();
      assertEquals(2, int0);
      assertEquals((-1714L), sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0L, "2");
      sparkListenerNodeUnblacklisted0.productIterator();
      assertEquals(2, sparkListenerNodeUnblacklisted0.productArity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0L, (String) null);
      String string0 = sparkListenerNodeUnblacklisted0.hostId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-1714L), ".ValueSet");
      sparkListenerNodeUnblacklisted0.canEqual(sparkListenerNodeUnblacklisted0);
      assertEquals((-1714L), sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-1L), (String) null);
      String string0 = sparkListenerNodeUnblacklisted0.productPrefix();
      assertEquals((-1L), sparkListenerNodeUnblacklisted0.time());
      assertEquals("SparkListenerNodeUnblacklisted", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-2622L), "");
      SparkListenerNodeUnblacklisted.unapply(sparkListenerNodeUnblacklisted0);
      assertEquals((-2622L), sparkListenerNodeUnblacklisted0.time());
      assertEquals((-2622L), sparkListenerNodeUnblacklisted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(3777L, "");
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = new SparkListenerNodeUnblacklisted(3777L, "cNZ4");
      boolean boolean0 = sparkListenerNodeUnblacklisted0.equals(sparkListenerNodeUnblacklisted1);
      assertFalse(boolean0);
      assertEquals(3777L, sparkListenerNodeUnblacklisted1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(1L, (String) null);
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = new SparkListenerNodeUnblacklisted(1L, (String) null);
      boolean boolean0 = sparkListenerNodeUnblacklisted0.equals(sparkListenerNodeUnblacklisted1);
      assertTrue(boolean0);
      assertEquals(1L, sparkListenerNodeUnblacklisted1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(0, "KhSR}zP");
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = new SparkListenerNodeUnblacklisted(0, (String) null);
      boolean boolean0 = sparkListenerNodeUnblacklisted1.equals(sparkListenerNodeUnblacklisted0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(704L, "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted");
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = sparkListenerNodeUnblacklisted0.copy(2277L, "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted");
      boolean boolean0 = sparkListenerNodeUnblacklisted1.equals(sparkListenerNodeUnblacklisted0);
      assertFalse(boolean0);
      assertFalse(sparkListenerNodeUnblacklisted0.equals((Object)sparkListenerNodeUnblacklisted1));
      assertEquals(2277L, sparkListenerNodeUnblacklisted1.time());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-1188L), (String) null);
      boolean boolean0 = sparkListenerNodeUnblacklisted0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-1188L), sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0, "x");
      boolean boolean0 = sparkListenerNodeUnblacklisted0.equals(sparkListenerNodeUnblacklisted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(0, "");
      // Undeclared exception!
      try { 
        sparkListenerNodeUnblacklisted0.productElement(1024);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerNodeUnblacklisted", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply(40L, "*bqG/&.agE4tJRBmY(");
      sparkListenerNodeUnblacklisted0.hashCode();
      assertEquals(40L, sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(596L, "SparkListenerNodeUnblacklisted");
      long long0 = sparkListenerNodeUnblacklisted0.copy$default$1();
      assertEquals(596L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = SparkListenerNodeUnblacklisted.apply((-2622L), "");
      sparkListenerNodeUnblacklisted0.logEvent();
      assertEquals((-2622L), sparkListenerNodeUnblacklisted0.time());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0, "");
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted1 = sparkListenerNodeUnblacklisted0.copy(0, "");
      boolean boolean0 = sparkListenerNodeUnblacklisted0.equals(sparkListenerNodeUnblacklisted1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Function1<Tuple2<Object, String>, SparkListenerNodeUnblacklisted> function1_0 = SparkListenerNodeUnblacklisted.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function1<Object, Function1<String, SparkListenerNodeUnblacklisted>> function1_0 = SparkListenerNodeUnblacklisted.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(1L, "SparkListenerNodeUnblacklisted");
      String string0 = sparkListenerNodeUnblacklisted0.toString();
      assertEquals("SparkListenerNodeUnblacklisted(1,SparkListenerNodeUnblacklisted)", string0);
      assertEquals(2, sparkListenerNodeUnblacklisted0.productArity());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparkListenerNodeUnblacklisted sparkListenerNodeUnblacklisted0 = new SparkListenerNodeUnblacklisted(0L, "");
      String string0 = sparkListenerNodeUnblacklisted0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option<Tuple2<Object, String>> option0 = SparkListenerNodeUnblacklisted.unapply((SparkListenerNodeUnblacklisted) null);
      assertNotNull(option0);
  }
}
