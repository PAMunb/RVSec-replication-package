/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:12:39 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.CleanBroadcast;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleanBroadcast_ESTest extends CleanBroadcast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(0L);
      CleanBroadcast cleanBroadcast1 = cleanBroadcast0.copy(1992L);
      boolean boolean0 = cleanBroadcast1.equals(cleanBroadcast0);
      assertFalse(boolean0);
      assertEquals(1992L, cleanBroadcast1.copy$default$1());
      assertFalse(cleanBroadcast0.equals((Object)cleanBroadcast1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(0L);
      CleanBroadcast cleanBroadcast1 = cleanBroadcast0.copy(0L);
      assertEquals(0L, cleanBroadcast1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(0L);
      long long0 = cleanBroadcast0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(1L);
      CleanBroadcast cleanBroadcast1 = cleanBroadcast0.copy((-2051L));
      long long0 = cleanBroadcast1.copy$default$1();
      assertEquals(1L, cleanBroadcast0.copy$default$1());
      assertEquals((-2051L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(3898L);
      cleanBroadcast0.canEqual((Object) null);
      assertEquals(3898L, cleanBroadcast0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast(57L);
      long long0 = cleanBroadcast0.broadcastId();
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply((-3709L));
      long long0 = cleanBroadcast0.broadcastId();
      assertEquals((-3709L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply((-3709L));
      Object object0 = cleanBroadcast0.productElement(0);
      assertEquals((-3709L), object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply((-3709L));
      int int0 = cleanBroadcast0.productArity();
      assertEquals(1, int0);
      assertEquals((-3709L), cleanBroadcast0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast((-1L));
      boolean boolean0 = cleanBroadcast0.canEqual(cleanBroadcast0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(0L);
      long long0 = cleanBroadcast0.broadcastId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply((-1L));
      CleanBroadcast cleanBroadcast1 = cleanBroadcast0.copy(1271L);
      boolean boolean0 = cleanBroadcast0.equals(cleanBroadcast1);
      assertEquals((-1L), cleanBroadcast0.copy$default$1());
      assertFalse(cleanBroadcast1.equals((Object)cleanBroadcast0));
      assertFalse(boolean0);
      assertEquals(1271L, cleanBroadcast1.broadcastId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(2376L);
      boolean boolean0 = cleanBroadcast0.equals(cleanBroadcast0);
      assertEquals(2376L, cleanBroadcast0.broadcastId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply((-5349));
      // Undeclared exception!
      try { 
        cleanBroadcast0.productElement((-5349));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.CleanBroadcast", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast((-1014L));
      CleanBroadcast.unapply(cleanBroadcast0);
      assertEquals((-1014L), cleanBroadcast0.broadcastId());
      assertEquals((-1014L), cleanBroadcast0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast(4268L);
      long long0 = cleanBroadcast0.copy$default$1();
      assertEquals(4268L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast((-1L));
      cleanBroadcast0.hashCode();
      assertEquals((-1L), cleanBroadcast0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<Object, CleanBroadcast> function1_0 = CleanBroadcast.andThen((Function1<CleanBroadcast, CleanBroadcast>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option<Object> option0 = CleanBroadcast.unapply((CleanBroadcast) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast(4250L);
      String string0 = cleanBroadcast0.toString();
      assertEquals("CleanBroadcast(4250)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<CleanBroadcast, CleanBroadcast> function1_0 = CleanBroadcast.compose((Function1<CleanBroadcast, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(4250L);
      CleanBroadcast cleanBroadcast1 = new CleanBroadcast(4250L);
      boolean boolean0 = cleanBroadcast0.equals(cleanBroadcast1);
      assertTrue(boolean0);
      assertEquals(4250L, cleanBroadcast1.broadcastId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = new CleanBroadcast((-1659L));
      String string0 = cleanBroadcast0.productPrefix();
      assertEquals("CleanBroadcast", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply((-1L));
      cleanBroadcast0.productIterator();
      assertEquals(1, cleanBroadcast0.productArity());
      assertEquals((-1L), cleanBroadcast0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CleanBroadcast cleanBroadcast0 = CleanBroadcast.apply(2337L);
      boolean boolean0 = cleanBroadcast0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2337L, cleanBroadcast0.copy$default$1());
  }
}
