/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:39:10 GMT 2022
 */

package org.apache.spark.rpc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URISyntaxException;
import org.apache.spark.rpc.RpcAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RpcAddress_ESTest extends RpcAddress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      
      RpcAddress rpcAddress1 = rpcAddress0.copy(")", 2720);
      assertNotNull(rpcAddress1);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(2720, rpcAddress1.copy$default$2());
      assertEquals(2720, rpcAddress1.port());
      assertEquals(")", rpcAddress1.host());
      assertEquals(")", rpcAddress1.copy$default$1());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
      
      RpcAddress rpcAddress2 = RpcAddress.apply(")", 1761);
      assertNotNull(rpcAddress2);
      assertEquals(1761, rpcAddress2.port());
      assertEquals("RpcAddress", rpcAddress2.productPrefix());
      assertEquals(")", rpcAddress2.copy$default$1());
      assertEquals(1761, rpcAddress2.copy$default$2());
      assertEquals(2, rpcAddress2.productArity());
      assertEquals(")", rpcAddress2.host());
      assertFalse(rpcAddress2.equals((Object)rpcAddress0));
      assertFalse(rpcAddress2.equals((Object)rpcAddress1));
      assertNotSame(rpcAddress2, rpcAddress0);
      assertNotSame(rpcAddress2, rpcAddress1);
      
      boolean boolean0 = rpcAddress1.equals(rpcAddress2);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(2720, rpcAddress1.copy$default$2());
      assertEquals(2720, rpcAddress1.port());
      assertEquals(")", rpcAddress1.host());
      assertEquals(")", rpcAddress1.copy$default$1());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(1761, rpcAddress2.port());
      assertEquals("RpcAddress", rpcAddress2.productPrefix());
      assertEquals(")", rpcAddress2.copy$default$1());
      assertEquals(1761, rpcAddress2.copy$default$2());
      assertEquals(2, rpcAddress2.productArity());
      assertEquals(")", rpcAddress2.host());
      assertFalse(rpcAddress0.equals((Object)rpcAddress1));
      assertFalse(rpcAddress0.equals((Object)rpcAddress2));
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertFalse(rpcAddress1.equals((Object)rpcAddress2));
      assertFalse(rpcAddress2.equals((Object)rpcAddress0));
      assertFalse(rpcAddress2.equals((Object)rpcAddress1));
      assertFalse(boolean0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress0, rpcAddress2);
      assertNotSame(rpcAddress1, rpcAddress0);
      assertNotSame(rpcAddress1, rpcAddress2);
      assertNotSame(rpcAddress2, rpcAddress0);
      assertNotSame(rpcAddress2, rpcAddress1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("spark.xxecutor.extraClassPath");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      Object object0 = rpcAddress0.productElement(0);
      assertNull(object0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      
      RpcAddress rpcAddress1 = rpcAddress0.copy(")", 2720);
      assertNotNull(rpcAddress1);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(")", rpcAddress1.copy$default$1());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(2720, rpcAddress1.copy$default$2());
      assertEquals(")", rpcAddress1.host());
      assertEquals(2720, rpcAddress1.port());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
      
      int int0 = rpcAddress1.port();
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(")", rpcAddress1.copy$default$1());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(2720, rpcAddress1.copy$default$2());
      assertEquals(")", rpcAddress1.host());
      assertEquals(2720, rpcAddress1.port());
      assertFalse(rpcAddress0.equals((Object)rpcAddress1));
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertEquals(2720, int0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      int int0 = rpcAddress0.port();
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("y) K8#vQ", 6756);
      assertNotNull(rpcAddress0);
      assertEquals(6756, rpcAddress0.copy$default$2());
      assertEquals("y) K8#vQ", rpcAddress0.copy$default$1());
      assertEquals(6756, rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("y) K8#vQ", rpcAddress0.host());
      
      String string0 = rpcAddress0.host();
      assertNotNull(string0);
      assertEquals(6756, rpcAddress0.copy$default$2());
      assertEquals("y) K8#vQ", rpcAddress0.copy$default$1());
      assertEquals(6756, rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("y) K8#vQ", rpcAddress0.host());
      assertEquals("y) K8#vQ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("", 630);
      assertNotNull(rpcAddress0);
      assertEquals(630, rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals("", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(630, rpcAddress0.copy$default$2());
      
      String string0 = rpcAddress0.host();
      assertNotNull(string0);
      assertEquals(630, rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals("", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(630, rpcAddress0.copy$default$2());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("spark://org.apache.spark.rpc.RpcAddress:2370");
      assertNotNull(rpcAddress0);
      assertEquals(2370, rpcAddress0.copy$default$2());
      assertEquals(2370, rpcAddress0.port());
      assertEquals("org.apache.spark.rpc.RpcAddress", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("org.apache.spark.rpc.RpcAddress", rpcAddress0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromSparkURL("spark://iw:0");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("iw", rpcAddress0.copy$default$1());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals("iw", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(0, rpcAddress0.port());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("", 630);
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(630, rpcAddress0.copy$default$2());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(630, rpcAddress0.port());
      
      RpcAddress rpcAddress1 = rpcAddress0.copy("", 0);
      assertNotNull(rpcAddress1);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(630, rpcAddress0.copy$default$2());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(630, rpcAddress0.port());
      assertEquals("", rpcAddress1.host());
      assertEquals(0, rpcAddress1.port());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals("", rpcAddress1.copy$default$1());
      assertEquals(0, rpcAddress1.copy$default$2());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
      
      int int0 = rpcAddress1.copy$default$2();
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(630, rpcAddress0.copy$default$2());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(630, rpcAddress0.port());
      assertEquals("", rpcAddress1.host());
      assertEquals(0, rpcAddress1.port());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals("", rpcAddress1.copy$default$1());
      assertEquals(0, rpcAddress1.copy$default$2());
      assertFalse(rpcAddress0.equals((Object)rpcAddress1));
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertEquals(0, int0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("6VsI#X+\"i|", 751);
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(751, rpcAddress0.copy$default$2());
      assertEquals(751, rpcAddress0.port());
      assertEquals("6VsI#X+\"i|", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("6VsI#X+\"i|", rpcAddress0.copy$default$1());
      
      int int0 = rpcAddress0.copy$default$2();
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(751, rpcAddress0.copy$default$2());
      assertEquals(751, rpcAddress0.port());
      assertEquals("6VsI#X+\"i|", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("6VsI#X+\"i|", rpcAddress0.copy$default$1());
      assertEquals(751, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("3@%>M", 615);
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("3@%>M", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("3@%>M", rpcAddress0.copy$default$1());
      assertEquals(615, rpcAddress0.copy$default$2());
      assertEquals(615, rpcAddress0.port());
      
      String string0 = rpcAddress0.copy$default$1();
      assertNotNull(string0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("3@%>M", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("3@%>M", rpcAddress0.copy$default$1());
      assertEquals(615, rpcAddress0.copy$default$2());
      assertEquals(615, rpcAddress0.port());
      assertEquals("3@%>M", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RpcAddress rpcAddress0 = new RpcAddress("", 0);
      assertNotNull(rpcAddress0);
      assertEquals(0, rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(0, rpcAddress0.copy$default$2());
      
      String string0 = rpcAddress0.copy$default$1();
      assertNotNull(string0);
      assertEquals(0, rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("empty");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      boolean boolean0 = rpcAddress0.canEqual(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RpcAddress.fromURIString("xYWm!doRK3^(ff$E@/a");
        fail("Expecting exception: URISyntaxException");
      
      } catch(Throwable e) {
         //
         // Illegal character in path at index 10: xYWm!doRK3^(ff$E@/a
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RpcAddress.fromURIString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RpcAddress.fromSparkURL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RpcAddress rpcAddress0 = new RpcAddress("", 0);
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(0, rpcAddress0.port());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      
      int int0 = rpcAddress0.port();
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals(0, rpcAddress0.port());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RpcAddress rpcAddress0 = new RpcAddress("", 0);
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(0, rpcAddress0.port());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      
      String string0 = rpcAddress0.hostPort();
      assertNotNull(string0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress0.host());
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(0, rpcAddress0.port());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(":0", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("6VsI#X+\"i|", 751);
      assertNotNull(rpcAddress0);
      assertEquals(751, rpcAddress0.copy$default$2());
      assertEquals("6VsI#X+\"i|", rpcAddress0.host());
      assertEquals(751, rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("6VsI#X+\"i|", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      
      int int0 = rpcAddress0.productArity();
      assertEquals(751, rpcAddress0.copy$default$2());
      assertEquals("6VsI#X+\"i|", rpcAddress0.host());
      assertEquals(751, rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("6VsI#X+\"i|", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      
      String string0 = rpcAddress0.host();
      assertNull(string0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromSparkURL("spark://org.apache.spark.rpc.RpcAddress:2367");
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("org.apache.spark.rpc.RpcAddress", rpcAddress0.copy$default$1());
      assertEquals(2367, rpcAddress0.copy$default$2());
      assertEquals("org.apache.spark.rpc.RpcAddress", rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals(2367, rpcAddress0.port());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("9y+!jl9sIzUb71");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      
      Option<Tuple2<String, Object>> option0 = RpcAddress.unapply(rpcAddress0);
      assertNotNull(option0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      RpcAddress rpcAddress1 = rpcAddress0.copy("", 1818);
      assertNotNull(rpcAddress1);
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress1.host());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals("", rpcAddress1.copy$default$1());
      assertEquals(1818, rpcAddress1.port());
      assertEquals(1818, rpcAddress1.copy$default$2());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
      
      boolean boolean0 = rpcAddress1.equals(rpcAddress0);
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("", rpcAddress1.host());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals("", rpcAddress1.copy$default$1());
      assertEquals(1818, rpcAddress1.port());
      assertEquals(1818, rpcAddress1.copy$default$2());
      assertFalse(rpcAddress0.equals((Object)rpcAddress1));
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertFalse(boolean0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("v,C1");
      assertNotNull(rpcAddress0);
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      RpcAddress rpcAddress1 = new RpcAddress("v,C1", 1218);
      assertNotNull(rpcAddress1);
      assertEquals("v,C1", rpcAddress1.copy$default$1());
      assertEquals(1218, rpcAddress1.port());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals("v,C1", rpcAddress1.host());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(1218, rpcAddress1.copy$default$2());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      
      boolean boolean0 = rpcAddress0.equals(rpcAddress1);
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("v,C1", rpcAddress1.copy$default$1());
      assertEquals(1218, rpcAddress1.port());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals("v,C1", rpcAddress1.host());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(1218, rpcAddress1.copy$default$2());
      assertFalse(rpcAddress0.equals((Object)rpcAddress1));
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertFalse(boolean0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      
      RpcAddress rpcAddress1 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress1);
      assertNull(rpcAddress1.copy$default$1());
      assertEquals((-1), rpcAddress1.copy$default$2());
      assertEquals(2, rpcAddress1.productArity());
      assertNull(rpcAddress1.host());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals((-1), rpcAddress1.port());
      assertTrue(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress1, rpcAddress0);
      
      boolean boolean0 = rpcAddress0.equals(rpcAddress1);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertNull(rpcAddress1.copy$default$1());
      assertEquals((-1), rpcAddress1.copy$default$2());
      assertEquals(2, rpcAddress1.productArity());
      assertNull(rpcAddress1.host());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals((-1), rpcAddress1.port());
      assertTrue(rpcAddress0.equals((Object)rpcAddress1));
      assertTrue(rpcAddress1.equals((Object)rpcAddress0));
      assertTrue(boolean0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("dG>f/#FZ", (-738));
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("dG>f/#FZ", rpcAddress0.host());
      assertEquals((-738), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("dG>f/#FZ", rpcAddress0.copy$default$1());
      assertEquals((-738), rpcAddress0.copy$default$2());
      
      RpcAddress rpcAddress1 = rpcAddress0.copy("dG>f/#FZ", 3879);
      assertNotNull(rpcAddress1);
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("dG>f/#FZ", rpcAddress0.host());
      assertEquals((-738), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("dG>f/#FZ", rpcAddress0.copy$default$1());
      assertEquals((-738), rpcAddress0.copy$default$2());
      assertEquals("dG>f/#FZ", rpcAddress1.host());
      assertEquals("dG>f/#FZ", rpcAddress1.copy$default$1());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(3879, rpcAddress1.copy$default$2());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(3879, rpcAddress1.port());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
      
      boolean boolean0 = rpcAddress0.equals(rpcAddress1);
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("dG>f/#FZ", rpcAddress0.host());
      assertEquals((-738), rpcAddress0.port());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("dG>f/#FZ", rpcAddress0.copy$default$1());
      assertEquals((-738), rpcAddress0.copy$default$2());
      assertEquals("dG>f/#FZ", rpcAddress1.host());
      assertEquals("dG>f/#FZ", rpcAddress1.copy$default$1());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(3879, rpcAddress1.copy$default$2());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals(3879, rpcAddress1.port());
      assertFalse(rpcAddress0.equals((Object)rpcAddress1));
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertFalse(boolean0);
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("", (-1722));
      assertNotNull(rpcAddress0);
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1722), rpcAddress0.port());
      assertEquals((-1722), rpcAddress0.copy$default$2());
      
      boolean boolean0 = rpcAddress0.equals((Object) null);
      assertEquals("", rpcAddress0.copy$default$1());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1722), rpcAddress0.port());
      assertEquals((-1722), rpcAddress0.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("log4jappender.console.layout");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals((-1), rpcAddress0.port());
      
      boolean boolean0 = rpcAddress0.equals(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals((-1), rpcAddress0.port());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("zY");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals((-1), rpcAddress0.port());
      
      Object object0 = rpcAddress0.productElement(1);
      assertNotNull(object0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals((-1), rpcAddress0.port());
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      
      // Undeclared exception!
      try { 
        rpcAddress0.productElement((-328));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000004
         //
         verifyException("org.apache.spark.rpc.RpcAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.apply("olaris", 0);
      assertNotNull(rpcAddress0);
      assertEquals(0, rpcAddress0.port());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("olaris", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("olaris", rpcAddress0.copy$default$1());
      
      Object object0 = rpcAddress0.productElement(0);
      assertNotNull(object0);
      assertEquals(0, rpcAddress0.port());
      assertEquals(0, rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("olaris", rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("olaris", rpcAddress0.copy$default$1());
      assertEquals("olaris", object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      
      String string0 = rpcAddress0.productPrefix();
      assertNotNull(string0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("RpcAddress", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      
      boolean boolean0 = rpcAddress0.canEqual((Object) null);
      assertEquals(2, rpcAddress0.productArity());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("spark.driver.maxResultSize");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      String string0 = rpcAddress0.copy$default$1();
      assertNull(string0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("I=");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      
      String string0 = rpcAddress0.toString();
      assertNotNull(string0);
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals("null:-1", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option<Tuple2<String, Object>> option0 = RpcAddress.unapply((RpcAddress) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals((-1), rpcAddress0.port());
      
      rpcAddress0.hashCode();
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertNull(rpcAddress0.host());
      assertEquals((-1), rpcAddress0.port());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("spark.app.name");
      assertNotNull(rpcAddress0);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      
      RpcAddress rpcAddress1 = rpcAddress0.copy("spark.app.name", (-1387));
      assertNotNull(rpcAddress1);
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals((-1), rpcAddress0.port());
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals("spark.app.name", rpcAddress1.host());
      assertEquals((-1387), rpcAddress1.port());
      assertEquals("RpcAddress", rpcAddress1.productPrefix());
      assertEquals(2, rpcAddress1.productArity());
      assertEquals("spark.app.name", rpcAddress1.copy$default$1());
      assertEquals((-1387), rpcAddress1.copy$default$2());
      assertFalse(rpcAddress1.equals((Object)rpcAddress0));
      assertNotSame(rpcAddress0, rpcAddress1);
      assertNotSame(rpcAddress1, rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      assertNotNull(rpcAddress0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      
      String string0 = rpcAddress0.toSparkURL();
      assertNotNull(string0);
      assertNull(rpcAddress0.host());
      assertEquals("RpcAddress", rpcAddress0.productPrefix());
      assertEquals((-1), rpcAddress0.port());
      assertEquals(2, rpcAddress0.productArity());
      assertNull(rpcAddress0.copy$default$1());
      assertEquals((-1), rpcAddress0.copy$default$2());
      assertEquals("spark://null:-1", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        RpcAddress.fromSparkURL("");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid master URL: 
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      rpcAddress0.productIterator();
      assertEquals(2, rpcAddress0.productArity());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RpcAddress rpcAddress0 = RpcAddress.fromURIString("");
      int int0 = rpcAddress0.copy$default$2();
      assertEquals((-1), int0);
  }
}
