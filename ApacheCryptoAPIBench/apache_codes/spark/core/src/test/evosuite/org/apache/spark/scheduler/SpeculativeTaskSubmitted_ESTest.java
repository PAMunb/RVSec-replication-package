/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:57:17 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.ResultTask;
import org.apache.spark.scheduler.SpeculativeTaskSubmitted;
import org.apache.spark.scheduler.Task;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpeculativeTaskSubmitted_ESTest extends SpeculativeTaskSubmitted_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Task<SpeculativeTaskSubmitted> task0 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(task0).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply(task0);
      SpeculativeTaskSubmitted speculativeTaskSubmitted1 = speculativeTaskSubmitted0.copy((Task<?>) null);
      Task<?> task1 = speculativeTaskSubmitted1.task();
      assertNull(task1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      Object object0 = speculativeTaskSubmitted0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Task<SpeculativeTaskSubmitted> task0 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(task0).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply(task0);
      boolean boolean0 = speculativeTaskSubmitted0.canEqual(speculativeTaskSubmitted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = new SpeculativeTaskSubmitted((Task<?>) null);
      assertEquals(1, speculativeTaskSubmitted0.productArity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Task<SpeculativeTaskSubmitted> task0 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(task0).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply(task0);
      Object object0 = speculativeTaskSubmitted0.productElement(0);
      boolean boolean0 = speculativeTaskSubmitted0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      int int0 = speculativeTaskSubmitted0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Task<SpeculativeTaskSubmitted> task0 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(task0).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply(task0);
      Task<?> task1 = speculativeTaskSubmitted0.copy$default$1();
      SpeculativeTaskSubmitted speculativeTaskSubmitted1 = SpeculativeTaskSubmitted.apply(task1);
      boolean boolean0 = speculativeTaskSubmitted0.equals(speculativeTaskSubmitted1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Task<SpeculativeTaskSubmitted> task0 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn("FQ^Z^t0+yF_eyq:B8", "FQ^Z^t0+yF_eyq:B8").when(task0).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      SpeculativeTaskSubmitted speculativeTaskSubmitted1 = speculativeTaskSubmitted0.copy(task0);
      boolean boolean0 = speculativeTaskSubmitted0.equals(speculativeTaskSubmitted1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Task<SpeculativeTaskSubmitted> task0 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(task0).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply(task0);
      Task<SpeculativeTaskSubmitted> task1 = (Task<SpeculativeTaskSubmitted>) mock(Task.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(task1).toString();
      SpeculativeTaskSubmitted speculativeTaskSubmitted1 = SpeculativeTaskSubmitted.apply(task1);
      boolean boolean0 = speculativeTaskSubmitted0.equals(speculativeTaskSubmitted1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      boolean boolean0 = speculativeTaskSubmitted0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      boolean boolean0 = speculativeTaskSubmitted0.equals(speculativeTaskSubmitted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      // Undeclared exception!
      try { 
        speculativeTaskSubmitted0.productElement((-1373));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SpeculativeTaskSubmitted", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      Option<Task<Object>> option0 = SpeculativeTaskSubmitted.unapply(speculativeTaskSubmitted0);
      assertEquals(1, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Function1<Task<?>, ResultTask<ResultTask, SpeculativeTaskSubmitted>> function1_0 = SpeculativeTaskSubmitted.andThen((Function1<SpeculativeTaskSubmitted, ResultTask<ResultTask, SpeculativeTaskSubmitted>>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      String string0 = speculativeTaskSubmitted0.toString();
      assertEquals("SpeculativeTaskSubmitted(null)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      String string0 = speculativeTaskSubmitted0.productPrefix();
      assertEquals("SpeculativeTaskSubmitted", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      Task<?> task0 = speculativeTaskSubmitted0.copy$default$1();
      assertNull(task0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      speculativeTaskSubmitted0.hashCode();
      assertEquals(1, speculativeTaskSubmitted0.productArity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      speculativeTaskSubmitted0.productIterator();
      assertEquals(1, speculativeTaskSubmitted0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<ResultTask<ResultTask, SpeculativeTaskSubmitted>, SpeculativeTaskSubmitted> function1_0 = SpeculativeTaskSubmitted.compose((Function1<ResultTask<ResultTask, SpeculativeTaskSubmitted>, Task<?>>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Task<Object>> option0 = SpeculativeTaskSubmitted.unapply((SpeculativeTaskSubmitted) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpeculativeTaskSubmitted speculativeTaskSubmitted0 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      SpeculativeTaskSubmitted speculativeTaskSubmitted1 = SpeculativeTaskSubmitted.apply((Task<?>) null);
      boolean boolean0 = speculativeTaskSubmitted0.equals(speculativeTaskSubmitted1);
      assertTrue(boolean0);
  }
}
