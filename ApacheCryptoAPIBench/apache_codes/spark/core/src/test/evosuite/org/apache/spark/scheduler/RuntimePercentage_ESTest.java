/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:29:22 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.executor.ShuffleReadMetrics;
import org.apache.spark.executor.TaskMetrics;
import org.apache.spark.scheduler.RuntimePercentage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RuntimePercentage_ESTest extends RuntimePercentage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(1.0, (Option<Object>) null, 0.0);
      runtimePercentage0.productElement(1);
      assertEquals(1.0, runtimePercentage0.copy$default$1(), 0.01);
      assertEquals(0.0, runtimePercentage0.copy$default$3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.scheduler.RuntimePercentage$$anonfun$4", "org.apache.spark.scheduler.RuntimePercentage$$anonfun$4", "W|Grc", ".24y`GN\"`TGB+HNGz").when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-91.9447784215146), option0, 5245.0);
      Option<Object> option1 = runtimePercentage0.copy$default$2();
      RuntimePercentage runtimePercentage1 = new RuntimePercentage((-2312.27176113), option1, 0);
      double double0 = runtimePercentage1.other();
      assertEquals((-91.9447784215146), runtimePercentage0.copy$default$1(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(2305.1300141867578, (Option<Object>) null, 883.826552373);
      double double0 = runtimePercentage0.other();
      assertEquals(883.826552373, double0, 0.01);
      assertEquals(2305.1300141867578, runtimePercentage0.copy$default$1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(3636.69974, (Option<Object>) null, 5245.0);
      runtimePercentage0.fetchPct();
      assertEquals(3636.69974, runtimePercentage0.copy$default$1(), 0.01);
      assertEquals(5245.0, runtimePercentage0.other(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage(0L, (Option<Object>) null, 3636.69974);
      double double0 = runtimePercentage0.executorPct();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(5245.0, (Option<Object>) null, 5245.0);
      double double0 = runtimePercentage0.executorPct();
      assertEquals(5245.0, runtimePercentage0.copy$default$3(), 0.01);
      assertEquals(5245.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.scheduler.RuntimePercentage$$anonfun$3", "XkMN(xtW\"EP.", (String) null, (String) null, (String) null).when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-782.28608764182), option0, (-1.0));
      Option<Object> option1 = runtimePercentage0.copy$default$2();
      RuntimePercentage runtimePercentage1 = runtimePercentage0.copy(0, option1, 0);
      assertEquals((-782.28608764182), runtimePercentage0.copy$default$1(), 0.01);
      assertEquals((-1.0), runtimePercentage0.other(), 0.01);
      assertEquals(0.0, runtimePercentage1.copy$default$3(), 0.01);
      assertEquals(0.0, runtimePercentage1.copy$default$1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.scheduler.RuntimePercentage$$anonfun$3", "XkMN(xtW\"EP.", "XkMN(xtW\"EP.", "org.apache.spark.scheduler.RuntimePercentage$$anonfun$3", "org.apache.spark.scheduler.RuntimePercentage$$anonfun$3").when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-782.28608764182), option0, (-1.0));
      Option<Object> option1 = runtimePercentage0.copy$default$2();
      RuntimePercentage runtimePercentage1 = runtimePercentage0.copy(1277.424289031138, option1, 0.0);
      assertEquals(0.0, runtimePercentage1.other(), 0.01);
      assertEquals((-782.28608764182), runtimePercentage0.executorPct(), 0.01);
      assertEquals((-1.0), runtimePercentage0.other(), 0.01);
      assertEquals(1277.424289031138, runtimePercentage1.copy$default$1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(5245.0, (Option<Object>) null, 5245.0);
      double double0 = runtimePercentage0.copy$default$3();
      assertEquals(5245.0, double0, 0.01);
      assertEquals(5245.0, runtimePercentage0.executorPct(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = mock(ShuffleReadMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(shuffleReadMetrics0).fetchWaitTime();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(taskMetrics0).executorRunTime();
      doReturn(shuffleReadMetrics0).when(taskMetrics0).shuffleReadMetrics();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-1L), taskMetrics0);
      Option<Object> option0 = runtimePercentage0.fetchPct();
      RuntimePercentage runtimePercentage1 = new RuntimePercentage((-1L), option0, (-3748.27772));
      double double0 = runtimePercentage1.copy$default$3();
      assertEquals(0.0, runtimePercentage0.other(), 0.01);
      assertEquals(-0.0, runtimePercentage0.executorPct(), 0.01);
      assertEquals((-3748.27772), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-91.69698319128388), option0, 0.0);
      Option<Object> option1 = runtimePercentage0.copy$default$2();
      RuntimePercentage runtimePercentage1 = RuntimePercentage.apply(0.0, option1, 1.0);
      double double0 = runtimePercentage1.copy$default$1();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, runtimePercentage1.other(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("H*}sxD", "-%^4:\"y+kL").when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-91.69698319128388), option0, 5245.0);
      double double0 = runtimePercentage0.copy$default$1();
      assertEquals((-91.69698319128388), double0, 0.01);
      assertEquals(5245.0, runtimePercentage0.other(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = mock(ShuffleReadMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(shuffleReadMetrics0).fetchWaitTime();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(taskMetrics0).executorRunTime();
      doReturn(shuffleReadMetrics0).when(taskMetrics0).shuffleReadMetrics();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(1L, taskMetrics0);
      Option<Object> option0 = runtimePercentage0.fetchPct();
      runtimePercentage0.canEqual(option0);
      assertEquals(0.0, runtimePercentage0.copy$default$1(), 0.01);
      assertEquals(1.0, runtimePercentage0.other(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = mock(ShuffleReadMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-2014L)).when(shuffleReadMetrics0).fetchWaitTime();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(1209L).when(taskMetrics0).executorRunTime();
      doReturn(shuffleReadMetrics0).when(taskMetrics0).shuffleReadMetrics();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(1137L, taskMetrics0);
      assertEquals((-0.06332453825857498), runtimePercentage0.other(), 0.01);
      assertEquals(2.8346525945470535, runtimePercentage0.copy$default$1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = mock(ShuffleReadMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(2143L).when(shuffleReadMetrics0).fetchWaitTime();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(taskMetrics0).executorRunTime();
      doReturn(shuffleReadMetrics0).when(taskMetrics0).shuffleReadMetrics();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(0L, taskMetrics0);
      RuntimePercentage runtimePercentage1 = runtimePercentage0.copy((-553.36), (Option<Object>) null, 2143L);
      assertEquals((-553.36), runtimePercentage1.copy$default$1(), 0.01);
      assertEquals(Double.NaN, runtimePercentage0.copy$default$3(), 0.01);
      assertEquals(2143.0, runtimePercentage1.copy$default$3(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, runtimePercentage0.executorPct(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RuntimePercentage.apply(0L, (TaskMetrics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.RuntimePercentage$", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-91.9447784215146), option0, 5245.0);
      Object object0 = runtimePercentage0.productElement(0);
      assertEquals((-91.9447784215146), object0);
      assertEquals(5245.0, runtimePercentage0.copy$default$3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("H*}sxD", "-%^4:\"y+kL", "H*}sxD", "H*}sxD").when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-91.69698319128388), option0, 5245.0);
      runtimePercentage0.productElement(1);
      assertEquals((-91.69698319128388), runtimePercentage0.copy$default$1(), 0.01);
      assertEquals(5245.0, runtimePercentage0.other(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("H*}sxD", "-%^4:\"y+kL").when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-91.69698319128388), option0, 5245.0);
      Object object0 = runtimePercentage0.productElement(2);
      assertEquals((-91.69698319128388), runtimePercentage0.executorPct(), 0.01);
      assertEquals(5245.0, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage(0.0, (Option<Object>) null, 0.0);
      runtimePercentage0.productIterator();
      assertEquals(3, runtimePercentage0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage((-21.731953655), (Option<Object>) null, (-21.731953655));
      int int0 = runtimePercentage0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      RuntimePercentage runtimePercentage0 = new RuntimePercentage(431.531389144, option0, (-2977.816));
      double double0 = runtimePercentage0.other();
      assertEquals((-2977.816), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.scheduler.RuntimePercentage$$anonfun$3", "XkMN(xtW\"EP.").when(option0).toString();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-782.28608764182), option0, (-1.0));
      double double0 = runtimePercentage0.executorPct();
      assertEquals((-1.0), runtimePercentage0.other(), 0.01);
      assertEquals((-782.28608764182), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage((-2555.544062), (Option<Object>) null, (-2555.544062));
      String string0 = runtimePercentage0.productPrefix();
      assertEquals("RuntimePercentage", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((double) (-1L), (Option<Object>) null, (double) (-1L));
      RuntimePercentage.unapply(runtimePercentage0);
      assertEquals((-1.0), runtimePercentage0.copy$default$1(), 0.01);
      assertEquals((-1.0), runtimePercentage0.copy$default$3(), 0.01);
      assertEquals((-1.0), runtimePercentage0.executorPct(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-2555.544062), (Option<Object>) null, (-2555.544062));
      boolean boolean0 = runtimePercentage0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-2555.544062), runtimePercentage0.other(), 0.01);
      assertEquals((-2555.544062), runtimePercentage0.executorPct(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage(1.8006313137953922, (Option<Object>) null, 1.8006313137953922);
      boolean boolean0 = runtimePercentage0.equals(runtimePercentage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage((-2.002), (Option<Object>) null, (-2.002));
      // Undeclared exception!
      try { 
        runtimePercentage0.productElement((-1701));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.RuntimePercentage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(0.0, (Option<Object>) null, 0.0);
      String string0 = runtimePercentage0.toString();
      assertEquals("RuntimePercentage(0.0,null,0.0)", string0);
      assertEquals(3, runtimePercentage0.productArity());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = new RuntimePercentage(0.0, (Option<Object>) null, 0.0);
      Option<Object> option0 = runtimePercentage0.copy$default$2();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-2555.544062), (Option<Object>) null, (-2555.544062));
      RuntimePercentage runtimePercentage1 = runtimePercentage0.copy((-2555.544062), (Option<Object>) null, (-2555.544062));
      assertTrue(runtimePercentage1.equals((Object)runtimePercentage0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-2555.5440623141594), (Option<Object>) null, (-2555.5440623141594));
      runtimePercentage0.canEqual(runtimePercentage0);
      assertEquals((-2555.5440623141594), runtimePercentage0.copy$default$3(), 0.01);
      assertEquals((-2555.5440623141594), runtimePercentage0.executorPct(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = mock(ShuffleReadMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(shuffleReadMetrics0).fetchWaitTime();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((-1L)).when(taskMetrics0).executorRunTime();
      doReturn(shuffleReadMetrics0).when(taskMetrics0).shuffleReadMetrics();
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-1L), taskMetrics0);
      double double0 = runtimePercentage0.copy$default$3();
      assertEquals(0.0, double0, 0.01);
      assertEquals(-0.0, runtimePercentage0.copy$default$1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply(3636.69974, (Option<Object>) null, 5245.0);
      double double0 = runtimePercentage0.copy$default$1();
      assertEquals(5245.0, runtimePercentage0.copy$default$3(), 0.01);
      assertEquals(3636.69974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RuntimePercentage runtimePercentage0 = RuntimePercentage.apply((-21.731953655), (Option<Object>) null, (-21.731953655));
      runtimePercentage0.hashCode();
      assertEquals((-21.731953655), runtimePercentage0.other(), 0.01);
      assertEquals((-21.731953655), runtimePercentage0.copy$default$1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option<Tuple3<Object, Option<Object>, Object>> option0 = RuntimePercentage.unapply((RuntimePercentage) null);
      assertNotNull(option0);
  }
}
