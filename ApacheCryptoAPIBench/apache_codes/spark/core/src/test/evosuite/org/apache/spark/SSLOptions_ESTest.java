/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:28:19 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.spark.SSLOptions;
import org.apache.spark.SparkConf;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SSLOptions_ESTest extends SSLOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Option<String> option0 = SSLOptions.$lessinit$greater$default$10();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Option<File> option0 = SSLOptions.apply$default$8();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Option<File> option0 = SSLOptions.$lessinit$greater$default$8();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Option<Object> option0 = SSLOptions.apply$default$2();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Option<Object> option0 = SSLOptions.$lessinit$greater$default$2();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Option<String> option0 = SSLOptions.apply$default$6();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SSLOptions.parse(sparkConf0, "Was not allowed to read system property \"", (Option<SSLOptions>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.SSLOptions$", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Option<String> option0 = SSLOptions.apply$default$4();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Option<String> option0 = SSLOptions.$lessinit$greater$default$4();
      assertEquals("None", option0.productPrefix());
  }
}
