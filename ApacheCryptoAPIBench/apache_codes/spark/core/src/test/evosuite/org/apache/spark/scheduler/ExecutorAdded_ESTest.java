/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:33:56 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.ExecutorAdded;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorAdded_ESTest extends ExecutorAdded_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply(">", "scala.collection.immutable.Stream");
      ExecutorAdded executorAdded1 = executorAdded0.copy(">", (String) null);
      Object object0 = executorAdded1.productElement(1);
      assertNull(object0);
      assertEquals("scala.collection.immutable.Stream", executorAdded0.host());
      assertEquals(">", executorAdded0.execId());
      assertEquals("scala.collection.immutable.Stream", executorAdded0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      ExecutorAdded executorAdded1 = executorAdded0.copy("0!D5c'2&:CZwTo(", "ExecutorAdded");
      String string0 = executorAdded1.host();
      assertEquals("ExecutorAdded", string0);
      assertEquals("0!D5c'2&:CZwTo(", executorAdded1.execId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("ExecutorAdded", "");
      String string0 = executorAdded0.host();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply((String) null, (String) null);
      String string0 = executorAdded0.execId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("i", "ExecutorAdded");
      String string0 = executorAdded0.execId();
      assertEquals("i", string0);
      assertEquals("ExecutorAdded", executorAdded0.host());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      String string0 = executorAdded0.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("ExecutorAdded", "");
      String string0 = executorAdded0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply((String) null, (String) null);
      String string0 = executorAdded0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("", "");
      String string0 = executorAdded0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("i", "ExecutorAdded");
      executorAdded0.canEqual("i");
      assertEquals("ExecutorAdded", executorAdded0.copy$default$2());
      assertEquals("i", executorAdded0.execId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("ExecutorAdded", "");
      Object object0 = executorAdded0.productElement(0);
      assertEquals("ExecutorAdded", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("", "");
      boolean boolean0 = executorAdded0.canEqual(executorAdded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply((String) null, "i@");
      int int0 = executorAdded0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      String string0 = executorAdded0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      executorAdded0.productIterator();
      assertEquals(2, executorAdded0.productArity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("", "");
      String string0 = executorAdded0.execId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      String string0 = executorAdded0.productPrefix();
      assertEquals("ExecutorAdded", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<Tuple2<String, String>> option0 = ExecutorAdded.unapply((ExecutorAdded) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("", "");
      ExecutorAdded executorAdded1 = new ExecutorAdded("", "`:pA&FK");
      boolean boolean0 = executorAdded0.equals(executorAdded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      ExecutorAdded executorAdded1 = executorAdded0.copy((String) null, "Fd/\"UKpH~0e[Z\"n/");
      boolean boolean0 = executorAdded0.equals(executorAdded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("", "");
      ExecutorAdded executorAdded1 = new ExecutorAdded("1h4MD<f", "");
      boolean boolean0 = executorAdded0.equals(executorAdded1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      ExecutorAdded executorAdded1 = ExecutorAdded.apply((String) null, (String) null);
      boolean boolean0 = executorAdded0.equals(executorAdded1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("scala.Option$Wi5hFilter", (String) null);
      ExecutorAdded executorAdded1 = ExecutorAdded.apply((String) null, "scala.Option$Wi5hFilter");
      boolean boolean0 = executorAdded1.equals(executorAdded0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("TN-m", "TN-m");
      boolean boolean0 = executorAdded0.equals("TN-m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("4;PKv%,", "4;PKv%,");
      boolean boolean0 = executorAdded0.equals(executorAdded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      // Undeclared exception!
      try { 
        executorAdded0.productElement((-388));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.ExecutorAdded", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Function1<String, Function1<String, ExecutorAdded>> function1_0 = ExecutorAdded.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("~pOiU!X:Q70dVFOdM>w", "~pOiU!X:Q70dVFOdM>w");
      String string0 = executorAdded0.copy$default$1();
      assertEquals("~pOiU!X:Q70dVFOdM>w", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Tuple2<String, String>, ExecutorAdded> function1_0 = ExecutorAdded.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply((String) null, (String) null);
      executorAdded0.hashCode();
      assertEquals(2, executorAdded0.productArity());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded((String) null, (String) null);
      String string0 = executorAdded0.toString();
      assertEquals("ExecutorAdded(null,null)", string0);
      assertEquals(2, executorAdded0.productArity());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("v", "v");
      String string0 = executorAdded0.copy$default$2();
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExecutorAdded executorAdded0 = new ExecutorAdded("scala.Option$WithFilter", "scala.Option$WithFilter");
      ExecutorAdded executorAdded1 = ExecutorAdded.apply("scala.Option$WithFilter", "scala.Option$WithFilter");
      boolean boolean0 = executorAdded0.equals(executorAdded1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExecutorAdded executorAdded0 = ExecutorAdded.apply("KbyVH4>", "KbyVH4>");
      Option<Tuple2<String, String>> option0 = ExecutorAdded.unapply(executorAdded0);
      assertNotNull(option0);
  }
}
