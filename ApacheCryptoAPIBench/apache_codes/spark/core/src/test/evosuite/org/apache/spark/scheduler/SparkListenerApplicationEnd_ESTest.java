/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:10:28 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerApplicationEnd;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerApplicationEnd_ESTest extends SparkListenerApplicationEnd_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(18L);
      SparkListenerApplicationEnd sparkListenerApplicationEnd1 = sparkListenerApplicationEnd0.copy((-1037L));
      boolean boolean0 = sparkListenerApplicationEnd0.equals(sparkListenerApplicationEnd1);
      assertFalse(boolean0);
      assertEquals((-1037L), sparkListenerApplicationEnd1.time());
      assertFalse(sparkListenerApplicationEnd1.equals((Object)sparkListenerApplicationEnd0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(355L);
      long long0 = sparkListenerApplicationEnd0.time();
      assertEquals(355L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply((-4003L));
      long long0 = sparkListenerApplicationEnd0.time();
      assertEquals((-4003L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(0L);
      SparkListenerApplicationEnd sparkListenerApplicationEnd1 = sparkListenerApplicationEnd0.copy(0L);
      assertEquals(1, sparkListenerApplicationEnd1.productArity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(0L);
      long long0 = sparkListenerApplicationEnd0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(355L);
      long long0 = sparkListenerApplicationEnd0.copy$default$1();
      assertEquals(355L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(1725L);
      sparkListenerApplicationEnd0.canEqual((Object) null);
      assertEquals(1725L, sparkListenerApplicationEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(0L);
      Object object0 = sparkListenerApplicationEnd0.productElement(0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd((-789L));
      sparkListenerApplicationEnd0.productIterator();
      assertEquals(1, sparkListenerApplicationEnd0.productArity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(0L);
      long long0 = sparkListenerApplicationEnd0.time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(3591L);
      String string0 = sparkListenerApplicationEnd0.productPrefix();
      assertEquals("SparkListenerApplicationEnd", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(1L);
      int int0 = sparkListenerApplicationEnd0.productArity();
      assertEquals(1, int0);
      assertEquals(1L, sparkListenerApplicationEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd(1730L);
      boolean boolean0 = sparkListenerApplicationEnd0.canEqual(sparkListenerApplicationEnd0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(18L);
      SparkListenerApplicationEnd sparkListenerApplicationEnd1 = sparkListenerApplicationEnd0.copy(3282L);
      boolean boolean0 = sparkListenerApplicationEnd0.equals(sparkListenerApplicationEnd1);
      assertFalse(sparkListenerApplicationEnd1.equals((Object)sparkListenerApplicationEnd0));
      assertEquals(3282L, sparkListenerApplicationEnd1.copy$default$1());
      assertFalse(boolean0);
      assertEquals(18L, sparkListenerApplicationEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(976L);
      boolean boolean0 = sparkListenerApplicationEnd0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(976L, sparkListenerApplicationEnd0.time());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd((-486L));
      boolean boolean0 = sparkListenerApplicationEnd0.equals(sparkListenerApplicationEnd0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd((-2));
      // Undeclared exception!
      try { 
        sparkListenerApplicationEnd0.productElement((-2));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SparkListenerApplicationEnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(1L);
      SparkListenerApplicationEnd.unapply(sparkListenerApplicationEnd0);
      assertEquals(1L, sparkListenerApplicationEnd0.copy$default$1());
      assertEquals(1L, sparkListenerApplicationEnd0.time());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply((-601L));
      long long0 = sparkListenerApplicationEnd0.copy$default$1();
      assertEquals((-601L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(0L);
      boolean boolean0 = sparkListenerApplicationEnd0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Object> option0 = SparkListenerApplicationEnd.unapply((SparkListenerApplicationEnd) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<Object, SparkListenerApplicationEnd> function1_0 = SparkListenerApplicationEnd.andThen((Function1<SparkListenerApplicationEnd, SparkListenerApplicationEnd>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(1L);
      String string0 = sparkListenerApplicationEnd0.toString();
      assertEquals("SparkListenerApplicationEnd(1)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = new SparkListenerApplicationEnd((-486L));
      SparkListenerApplicationEnd sparkListenerApplicationEnd1 = sparkListenerApplicationEnd0.copy((-486L));
      boolean boolean0 = sparkListenerApplicationEnd0.equals(sparkListenerApplicationEnd1);
      assertTrue(boolean0);
      assertEquals((-486L), sparkListenerApplicationEnd1.time());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function1<SparkListenerApplicationEnd, SparkListenerApplicationEnd> function1_0 = SparkListenerApplicationEnd.compose((Function1<SparkListenerApplicationEnd, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerApplicationEnd sparkListenerApplicationEnd0 = SparkListenerApplicationEnd.apply(4333L);
      sparkListenerApplicationEnd0.hashCode();
      assertEquals(4333L, sparkListenerApplicationEnd0.copy$default$1());
  }
}
