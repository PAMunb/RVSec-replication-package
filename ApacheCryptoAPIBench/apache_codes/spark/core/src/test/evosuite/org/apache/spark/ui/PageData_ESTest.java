/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:39:08 GMT 2022
 */

package org.apache.spark.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.ui.PageData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple2;
import scala.collection.Iterator;
import scala.collection.Seq;
import scala.collection.immutable.Range;
import scala.collection.mutable.Queue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PageData_ESTest extends PageData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("^=,JQCr%!k`", "^=,JQCr%!k`", (String) null, "8k\"o", (String) null).when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(3647, seq0);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(3647, pageData0.copy$default$1());
      assertEquals(3647, pageData0.totalPage());
      assertNotNull(pageData0);
      
      Seq<Tuple2<Range, Range>> seq1 = pageData0.copy$default$2();
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(3647, pageData0.copy$default$1());
      assertEquals(3647, pageData0.totalPage());
      assertNotNull(seq1);
      assertSame(seq1, seq0);
      
      PageData<Tuple2<Range, Range>> pageData1 = PageData.apply(3652, seq1);
      assertFalse(pageData1.equals((Object)pageData0));
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(3647, pageData0.copy$default$1());
      assertEquals(3647, pageData0.totalPage());
      assertEquals(2, pageData1.productArity());
      assertEquals(3652, pageData1.copy$default$1());
      assertEquals(3652, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertNotNull(pageData1);
      assertNotSame(pageData0, pageData1);
      assertSame(seq1, seq0);
      assertNotSame(pageData1, pageData0);
      
      PageData<Tuple2<Range, Range>> pageData2 = PageData.apply(3647, seq1);
      assertFalse(pageData0.equals((Object)pageData1));
      assertTrue(pageData2.equals((Object)pageData0));
      assertFalse(pageData2.equals((Object)pageData1));
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(3647, pageData0.copy$default$1());
      assertEquals(3647, pageData0.totalPage());
      assertEquals(3647, pageData2.totalPage());
      assertEquals("PageData", pageData2.productPrefix());
      assertEquals(2, pageData2.productArity());
      assertEquals(3647, pageData2.copy$default$1());
      assertNotNull(pageData2);
      assertNotSame(pageData0, pageData2);
      assertNotSame(pageData0, pageData1);
      assertSame(seq1, seq0);
      assertNotSame(pageData2, pageData1);
      assertNotSame(pageData2, pageData0);
      
      boolean boolean0 = pageData2.equals(pageData1);
      assertTrue(pageData0.equals((Object)pageData2));
      assertFalse(pageData0.equals((Object)pageData1));
      assertFalse(pageData1.equals((Object)pageData0));
      assertFalse(pageData1.equals((Object)pageData2));
      assertTrue(pageData2.equals((Object)pageData0));
      assertFalse(pageData2.equals((Object)pageData1));
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(3647, pageData0.copy$default$1());
      assertEquals(3647, pageData0.totalPage());
      assertEquals(2, pageData1.productArity());
      assertEquals(3652, pageData1.copy$default$1());
      assertEquals(3652, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(3647, pageData2.totalPage());
      assertEquals("PageData", pageData2.productPrefix());
      assertEquals(2, pageData2.productArity());
      assertEquals(3647, pageData2.copy$default$1());
      assertFalse(boolean0);
      assertNotSame(pageData0, pageData2);
      assertNotSame(pageData0, pageData1);
      assertSame(seq1, seq0);
      assertNotSame(pageData1, pageData0);
      assertNotSame(pageData1, pageData2);
      assertNotSame(pageData2, pageData1);
      assertNotSame(pageData2, pageData0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(0, seq0);
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertNotNull(pageData0);
      
      Seq<Tuple2<Range, Range>> seq1 = pageData0.copy$default$2();
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertNotNull(seq1);
      assertSame(seq1, seq0);
      
      PageData<Tuple2<Range, Range>> pageData1 = PageData.apply(10, seq1);
      assertFalse(pageData1.equals((Object)pageData0));
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(10, pageData1.copy$default$1());
      assertEquals(10, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(2, pageData1.productArity());
      assertNotNull(pageData1);
      assertNotSame(pageData0, pageData1);
      assertSame(seq1, seq0);
      assertNotSame(pageData1, pageData0);
      
      int int0 = pageData1.totalPage();
      assertFalse(pageData0.equals((Object)pageData1));
      assertFalse(pageData1.equals((Object)pageData0));
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(10, pageData1.copy$default$1());
      assertEquals(10, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(2, pageData1.productArity());
      assertEquals(10, int0);
      assertNotSame(pageData0, pageData1);
      assertSame(seq1, seq0);
      assertNotSame(pageData1, pageData0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PageData<Range> pageData0 = new PageData<Range>((-1), (Seq<Range>) null);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals((-1), pageData0.totalPage());
      assertEquals((-1), pageData0.copy$default$1());
      assertNotNull(pageData0);
      
      int int0 = pageData0.totalPage();
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals((-1), pageData0.totalPage());
      assertEquals((-1), pageData0.copy$default$1());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("dU", "dU", "dU", "@35@skZMGBd[?VLr", "scala.collection.immutable.Stream").when(seq0).toString();
      PageData<Queue<Range>> pageData0 = PageData.apply(1, seq0);
      assertEquals(1, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(1, pageData0.copy$default$1());
      assertNotNull(pageData0);
      
      Seq<Range> seq1 = pageData0.copy$default$2();
      assertEquals(1, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(1, pageData0.copy$default$1());
      assertNotNull(seq1);
      
      PageData<Range> pageData1 = new PageData<Range>(0, seq1);
      assertEquals(1, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(1, pageData0.copy$default$1());
      assertEquals(0, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(0, pageData1.copy$default$1());
      assertEquals(2, pageData1.productArity());
      assertNotNull(pageData1);
      
      Object object0 = pageData1.productElement(1);
      assertEquals(1, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(1, pageData0.copy$default$1());
      assertEquals(0, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(0, pageData1.copy$default$1());
      assertEquals(2, pageData1.productArity());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageData<Range> pageData0 = PageData.apply(0, (Seq<Range>) null);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(0, pageData0.totalPage());
      assertEquals(0, pageData0.copy$default$1());
      assertNotNull(pageData0);
      
      Seq<Range> seq0 = pageData0.data();
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(0, pageData0.totalPage());
      assertEquals(0, pageData0.copy$default$1());
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(3643, seq0);
      assertEquals(3643, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals(3643, pageData0.copy$default$1());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(pageData0);
      
      PageData<Range> pageData1 = pageData0.copy(0, (Seq<Range>) null);
      assertEquals(3643, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals(3643, pageData0.copy$default$1());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(0, pageData1.copy$default$1());
      assertEquals(0, pageData1.totalPage());
      assertEquals(2, pageData1.productArity());
      assertEquals("PageData", pageData1.productPrefix());
      assertNotNull(pageData1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PageData<Queue<Range>> pageData0 = PageData.apply(0, (Seq<Queue<Range>>) null);
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(pageData0);
      
      PageData<Queue<Range>> pageData1 = pageData0.copy(835, (Seq<Queue<Range>>) null);
      assertFalse(pageData1.equals((Object)pageData0));
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(835, pageData1.copy$default$1());
      assertEquals(835, pageData1.totalPage());
      assertEquals(2, pageData1.productArity());
      assertNotNull(pageData1);
      assertNotSame(pageData0, pageData1);
      assertNotSame(pageData1, pageData0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PageData<Range> pageData0 = new PageData<Range>(1046, (Seq<Range>) null);
      assertEquals(1046, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals(1046, pageData0.copy$default$1());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(pageData0);
      
      Seq<Queue<Range>> seq0 = pageData0.copy$default$2();
      assertEquals(1046, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals(1046, pageData0.copy$default$1());
      assertEquals("PageData", pageData0.productPrefix());
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      PageData<Queue<Range>> pageData0 = PageData.apply((-1993), seq0);
      assertEquals(2, pageData0.productArity());
      assertEquals((-1993), pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals((-1993), pageData0.copy$default$1());
      assertNotNull(pageData0);
      
      Seq<Range> seq1 = pageData0.copy$default$2();
      assertEquals(2, pageData0.productArity());
      assertEquals((-1993), pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals((-1993), pageData0.copy$default$1());
      assertNotNull(seq1);
      
      PageData<Range> pageData1 = new PageData<Range>(1092, seq1);
      assertEquals(2, pageData0.productArity());
      assertEquals((-1993), pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals((-1993), pageData0.copy$default$1());
      assertEquals(2, pageData1.productArity());
      assertEquals(1092, pageData1.copy$default$1());
      assertEquals(1092, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertNotNull(pageData1);
      
      int int0 = pageData1.copy$default$1();
      assertEquals(2, pageData0.productArity());
      assertEquals((-1993), pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals((-1993), pageData0.copy$default$1());
      assertEquals(2, pageData1.productArity());
      assertEquals(1092, pageData1.copy$default$1());
      assertEquals(1092, pageData1.totalPage());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(1092, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      PageData<Queue<Range>> pageData0 = PageData.apply(0, seq0);
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(pageData0);
      
      Seq<Range> seq1 = pageData0.copy$default$2();
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(seq1);
      
      PageData<Range> pageData1 = new PageData<Range>(0, seq1);
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(0, pageData1.copy$default$1());
      assertEquals(0, pageData1.totalPage());
      assertEquals(2, pageData1.productArity());
      assertEquals("PageData", pageData1.productPrefix());
      assertNotNull(pageData1);
      
      PageData<Range> pageData2 = pageData1.copy((-926), (Seq<Range>) null);
      assertFalse(pageData2.equals((Object)pageData1));
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(0, pageData1.copy$default$1());
      assertEquals(0, pageData1.totalPage());
      assertEquals(2, pageData1.productArity());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals("PageData", pageData2.productPrefix());
      assertEquals((-926), pageData2.copy$default$1());
      assertEquals((-926), pageData2.totalPage());
      assertEquals(2, pageData2.productArity());
      assertNotNull(pageData2);
      assertNotSame(pageData1, pageData2);
      assertNotSame(pageData2, pageData1);
      
      int int0 = pageData2.copy$default$1();
      assertFalse(pageData1.equals((Object)pageData2));
      assertFalse(pageData2.equals((Object)pageData1));
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(0, pageData1.copy$default$1());
      assertEquals(0, pageData1.totalPage());
      assertEquals(2, pageData1.productArity());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals("PageData", pageData2.productPrefix());
      assertEquals((-926), pageData2.copy$default$1());
      assertEquals((-926), pageData2.totalPage());
      assertEquals(2, pageData2.productArity());
      assertEquals((-926), int0);
      assertNotSame(pageData1, pageData2);
      assertNotSame(pageData2, pageData1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(1, seq0);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(1, pageData0.copy$default$1());
      assertEquals(1, pageData0.totalPage());
      assertNotNull(pageData0);
      
      boolean boolean0 = pageData0.canEqual((Object) null);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(1, pageData0.copy$default$1());
      assertEquals(1, pageData0.totalPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PageData<Queue<Tuple2<Range, Range>>> pageData0 = PageData.apply(498, (Seq<Queue<Tuple2<Range, Range>>>) null);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(498, pageData0.copy$default$1());
      assertEquals(498, pageData0.totalPage());
      assertNotNull(pageData0);
      
      Object object0 = pageData0.productElement(0);
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(498, pageData0.copy$default$1());
      assertEquals(498, pageData0.totalPage());
      assertEquals(498, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageData<Queue<Range>> pageData0 = PageData.apply(0, (Seq<Queue<Range>>) null);
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertNotNull(pageData0);
      
      Object object0 = pageData0.productElement(1);
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      PageData<Tuple2<Range, Range>> pageData0 = new PageData<Tuple2<Range, Range>>(0, seq0);
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertNotNull(pageData0);
      
      int int0 = pageData0.totalPage();
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2, pageData0.productArity());
      assertEquals(0, pageData0.copy$default$1());
      assertEquals(0, pageData0.totalPage());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      PageData<Queue<Range>> pageData0 = PageData.apply(2433880, seq0);
      assertEquals(2433880, pageData0.copy$default$1());
      assertEquals(2, pageData0.productArity());
      assertEquals(2433880, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(pageData0);
      
      Seq<Range> seq1 = pageData0.copy$default$2();
      assertEquals(2433880, pageData0.copy$default$1());
      assertEquals(2, pageData0.productArity());
      assertEquals(2433880, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertNotNull(seq1);
      
      PageData<Range> pageData1 = new PageData<Range>(2433880, seq1);
      assertEquals(2433880, pageData0.copy$default$1());
      assertEquals(2, pageData0.productArity());
      assertEquals(2433880, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2433880, pageData1.totalPage());
      assertEquals(2433880, pageData1.copy$default$1());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(2, pageData1.productArity());
      assertNotNull(pageData1);
      
      Seq<Range> seq2 = pageData1.data();
      assertEquals(2433880, pageData0.copy$default$1());
      assertEquals(2, pageData0.productArity());
      assertEquals(2433880, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(2433880, pageData1.totalPage());
      assertEquals(2433880, pageData1.copy$default$1());
      assertEquals("PageData", pageData1.productPrefix());
      assertEquals(2, pageData1.productArity());
      assertNotNull(seq2);
      assertSame(seq1, seq2);
      assertSame(seq2, seq1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      PageData<Queue<Range>> pageData0 = new PageData<Queue<Range>>(1531, seq0);
      assertEquals(2, pageData0.productArity());
      assertEquals(1531, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(1531, pageData0.copy$default$1());
      assertNotNull(pageData0);
      
      Iterator<Object> iterator0 = pageData0.productIterator();
      assertEquals(2, pageData0.productArity());
      assertEquals(1531, pageData0.totalPage());
      assertEquals("PageData", pageData0.productPrefix());
      assertEquals(1531, pageData0.copy$default$1());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      PageData<Queue<Range>> pageData0 = PageData.apply(2433880, seq0);
      Seq<Range> seq1 = pageData0.copy$default$2();
      PageData<Range> pageData1 = new PageData<Range>(2433880, seq1);
      String string0 = pageData1.productPrefix();
      assertEquals("PageData", string0);
      assertEquals(2433880, pageData0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("^=,JQCr%k`", "^=,JQCr%k`", "^=,JQCr%k`", "^=,JQCr%k`").when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(3644, seq0);
      PageData<Tuple2<Range, Range>> pageData1 = new PageData<Tuple2<Range, Range>>(3644, seq0);
      boolean boolean0 = pageData1.equals(pageData0);
      assertTrue(boolean0);
      assertEquals(3644, pageData1.totalPage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("^=,JQCr%k`", "^=,JQCr%k`").when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(3644, seq0);
      PageData<Tuple2<Range, Range>> pageData1 = new PageData<Tuple2<Range, Range>>(3662, seq0);
      boolean boolean0 = pageData1.equals(pageData0);
      assertFalse(pageData0.equals((Object)pageData1));
      assertFalse(boolean0);
      assertEquals(3644, pageData0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Seq<Tuple2<Range, Range>> seq0 = (Seq<Tuple2<Range, Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(seq0).toString();
      PageData<Tuple2<Range, Range>> pageData0 = PageData.apply(3643, seq0);
      PageData<Tuple2<Range, Range>> pageData1 = new PageData<Tuple2<Range, Range>>(3643, (Seq<Tuple2<Range, Range>>) null);
      boolean boolean0 = pageData1.equals(pageData0);
      assertEquals(3643, pageData0.totalPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PageData<Tuple2<Range, Range>> pageData0 = new PageData<Tuple2<Range, Range>>(501, (Seq<Tuple2<Range, Range>>) null);
      boolean boolean0 = pageData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PageData<Queue<Range>> pageData0 = PageData.apply(1063, (Seq<Queue<Range>>) null);
      boolean boolean0 = pageData0.equals(pageData0);
      assertTrue(boolean0);
      assertEquals(1063, pageData0.totalPage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PageData<Queue<Range>> pageData0 = new PageData<Queue<Range>>((-423), (Seq<Queue<Range>>) null);
      // Undeclared exception!
      try { 
        pageData0.productElement((-423));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.ui.PageData", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PageData<Range> pageData0 = new PageData<Range>((-1197), (Seq<Range>) null);
      PageData.unapply(pageData0);
      assertEquals((-1197), pageData0.copy$default$1());
      assertEquals((-1197), pageData0.totalPage());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PageData<Range> pageData0 = new PageData<Range>(1046, (Seq<Range>) null);
      PageData<Queue<Range>> pageData1 = new PageData<Queue<Range>>(1046, (Seq<Queue<Range>>) null);
      boolean boolean0 = pageData0.canEqual(pageData1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option<Tuple2<Object, Seq<Queue<Range>>>> option0 = PageData.unapply((PageData<Queue<Range>>) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PageData<Range> pageData0 = new PageData<Range>(583, (Seq<Range>) null);
      String string0 = pageData0.toString();
      assertEquals(2, pageData0.productArity());
      assertEquals("PageData(583,null)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PageData<Tuple2<Range, Range>> pageData0 = new PageData<Tuple2<Range, Range>>((-240), (Seq<Tuple2<Range, Range>>) null);
      pageData0.hashCode();
      assertEquals((-240), pageData0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seq<Queue<Range>> seq0 = (Seq<Queue<Range>>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      PageData<Queue<Range>> pageData0 = PageData.apply(0, seq0);
      Seq<Range> seq1 = pageData0.copy$default$2();
      PageData<Range> pageData1 = new PageData<Range>(0, seq1);
      int int0 = pageData1.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PageData<Range> pageData0 = new PageData<Range>((-1197), (Seq<Range>) null);
      int int0 = pageData0.productArity();
      assertEquals(2, int0);
  }
}
