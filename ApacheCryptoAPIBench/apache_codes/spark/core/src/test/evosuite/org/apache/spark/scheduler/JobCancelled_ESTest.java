/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:44:00 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.JobCancelled;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JobCancelled_ESTest extends JobCancelled_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "(hp}4|*2Ftj", "", "{,ur]\"}8=qZ0l}").when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply(0, option0);
      Option<String> option1 = jobCancelled0.copy$default$2();
      JobCancelled jobCancelled1 = jobCancelled0.copy((-2048144789), option1);
      boolean boolean0 = jobCancelled0.equals(jobCancelled1);
      assertEquals(0, jobCancelled0.jobId());
      assertEquals((-2048144789), jobCancelled1.jobId());
      assertFalse(boolean0);
      assertFalse(jobCancelled1.equals((Object)jobCancelled0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply(736, (Option<String>) null);
      jobCancelled0.reason();
      assertEquals(736, jobCancelled0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("", "Nx2re,YCx", "Nx2re,YCx", (String) null).when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply(2, option0);
      jobCancelled0.productElement(1);
      assertEquals(2, jobCancelled0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(0, (Option<String>) null);
      int int0 = jobCancelled0.jobId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o").when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply(2, option0);
      int int0 = jobCancelled0.jobId();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "(hp}4|*2Ftj", "", "{,ur]\"}8=qZ0l}").when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply(0, option0);
      Option<String> option1 = jobCancelled0.copy$default$2();
      JobCancelled jobCancelled1 = jobCancelled0.copy(0, option1);
      assertTrue(jobCancelled1.equals((Object)jobCancelled0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply((-1199), option0);
      jobCancelled0.copy$default$2();
      assertEquals((-1199), jobCancelled0.jobId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply(0, (Option<String>) null);
      int int0 = jobCancelled0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply((-1097), (Option<String>) null);
      int int0 = jobCancelled0.copy$default$1();
      assertEquals((-1097), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(6, (Option<String>) null);
      boolean boolean0 = jobCancelled0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply(736, (Option<String>) null);
      jobCancelled0.productElement(1);
      assertEquals(736, jobCancelled0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply(0, option0);
      Object object0 = jobCancelled0.productElement(0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(6, (Option<String>) null);
      boolean boolean0 = jobCancelled0.canEqual(jobCancelled0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply(736, (Option<String>) null);
      String string0 = jobCancelled0.productPrefix();
      assertEquals(736, jobCancelled0.copy$default$1());
      assertEquals("JobCancelled", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(745, (Option<String>) null);
      int int0 = jobCancelled0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled((-1771), (Option<String>) null);
      int int0 = jobCancelled0.jobId();
      assertEquals((-1771), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(6, (Option<String>) null);
      jobCancelled0.productIterator();
      assertEquals(2, jobCancelled0.productArity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled((-3152), (Option<String>) null);
      JobCancelled.unapply(jobCancelled0);
      assertEquals((-3152), jobCancelled0.jobId());
      assertEquals((-3152), jobCancelled0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o").when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply(0, option0);
      JobCancelled jobCancelled1 = JobCancelled.apply(0, (Option<String>) null);
      boolean boolean0 = jobCancelled0.equals(jobCancelled1);
      assertFalse(boolean0);
      assertEquals(0, jobCancelled1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(option0).toString();
      JobCancelled jobCancelled0 = new JobCancelled((-3152), option0);
      Option<String> option1 = jobCancelled0.reason();
      JobCancelled jobCancelled1 = JobCancelled.apply((-3438), option1);
      JobCancelled jobCancelled2 = new JobCancelled((-3438), (Option<String>) null);
      boolean boolean0 = jobCancelled2.equals(jobCancelled1);
      assertFalse(boolean0);
      assertFalse(jobCancelled0.equals((Object)jobCancelled1));
      assertEquals((-3438), jobCancelled1.jobId());
      assertFalse(jobCancelled1.equals((Object)jobCancelled0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o", "p&,gy1URxwJz0$)ui6o").when(option0).toString();
      JobCancelled jobCancelled0 = JobCancelled.apply((-18), option0);
      JobCancelled jobCancelled1 = jobCancelled0.copy((-18), option0);
      boolean boolean0 = jobCancelled0.equals(jobCancelled1);
      assertEquals((-18), jobCancelled1.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(2902, (Option<String>) null);
      JobCancelled jobCancelled1 = jobCancelled0.copy((-1748), (Option<String>) null);
      boolean boolean0 = jobCancelled1.equals(jobCancelled0);
      assertFalse(jobCancelled0.equals((Object)jobCancelled1));
      assertFalse(boolean0);
      assertEquals((-1748), jobCancelled1.jobId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply((-933), (Option<String>) null);
      boolean boolean0 = jobCancelled0.equals((Object) null);
      assertEquals((-933), jobCancelled0.jobId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(1825, (Option<String>) null);
      boolean boolean0 = jobCancelled0.equals(jobCancelled0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(599, (Option<String>) null);
      // Undeclared exception!
      try { 
        jobCancelled0.productElement(599);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.JobCancelled", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(2469, (Option<String>) null);
      int int0 = jobCancelled0.copy$default$1();
      assertEquals(2469, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option<Tuple2<Object, Option<String>>> option0 = JobCancelled.unapply((JobCancelled) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled((-3152), (Option<String>) null);
      JobCancelled jobCancelled1 = jobCancelled0.copy((-3152), (Option<String>) null);
      boolean boolean0 = jobCancelled0.equals(jobCancelled1);
      assertTrue(boolean0);
      assertEquals((-3152), jobCancelled1.jobId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Object, Function1<Option<String>, JobCancelled>> function1_0 = JobCancelled.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(745, (Option<String>) null);
      jobCancelled0.hashCode();
      assertEquals(745, jobCancelled0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JobCancelled jobCancelled0 = JobCancelled.apply(4271, (Option<String>) null);
      JobCancelled jobCancelled1 = jobCancelled0.copy(4271, (Option<String>) null);
      assertTrue(jobCancelled1.equals((Object)jobCancelled0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled(917, (Option<String>) null);
      Option<String> option0 = jobCancelled0.copy$default$2();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JobCancelled jobCancelled0 = new JobCancelled((-3152), (Option<String>) null);
      String string0 = jobCancelled0.toString();
      assertEquals(2, jobCancelled0.productArity());
      assertEquals("JobCancelled(-3152,null)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function1<Tuple2<Object, Option<String>>, JobCancelled> function1_0 = JobCancelled.tupled();
      assertNotNull(function1_0);
  }
}
