/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Apr 22 00:35:33 GMT 2022
 */

package org.apache.spark.input;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class StreamRecordReader_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.spark.input.StreamRecordReader"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(StreamRecordReader_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.hadoop.util.Progressable",
      "org.apache.hadoop.fs.HasFileDescriptor",
      "scala.Serializable",
      "scala.reflect.ScalaSignature",
      "org.apache.hadoop.io.WritableComparable",
      "org.apache.hadoop.io.Writable",
      "org.apache.hadoop.classification.InterfaceStability$Evolving",
      "org.apache.hadoop.mapreduce.OutputFormat",
      "org.apache.hadoop.fs.Seekable",
      "org.apache.spark.input.PortableDataStream",
      "org.apache.hadoop.mapred.SplitLocationInfo",
      "org.apache.hadoop.fs.CanUnbuffer",
      "org.apache.hadoop.mapreduce.MRJobConfig",
      "org.apache.hadoop.conf.Configuration",
      "org.apache.hadoop.mapreduce.Reducer",
      "org.apache.hadoop.conf.Configuration$1",
      "org.apache.hadoop.fs.PositionedReadable",
      "org.apache.hadoop.fs.CanSetDropBehind",
      "org.apache.hadoop.fs.Path",
      "org.apache.spark.input.StreamRecordReader",
      "org.apache.hadoop.mapred.ID",
      "org.apache.hadoop.classification.InterfaceAudience$Public",
      "org.apache.hadoop.security.Credentials",
      "org.apache.hadoop.mapreduce.JobID",
      "org.apache.hadoop.conf.Configuration$NegativeCacheSentinel",
      "org.apache.hadoop.classification.InterfaceStability$Stable",
      "org.apache.hadoop.fs.FSDataInputStream",
      "org.apache.spark.input.StreamBasedRecordReader",
      "org.apache.hadoop.mapreduce.TaskAttemptContext",
      "org.apache.hadoop.mapreduce.lib.input.CombineFileSplit",
      "org.apache.hadoop.mapreduce.InputSplit",
      "org.apache.hadoop.mapreduce.TaskAttemptID",
      "org.apache.hadoop.mapreduce.Counter",
      "org.apache.hadoop.conf.Configuration$IntegerRanges",
      "org.apache.hadoop.mapreduce.InputFormat",
      "org.apache.hadoop.fs.HasEnhancedByteBufferAccess",
      "org.apache.hadoop.mapreduce.RecordReader",
      "org.apache.hadoop.mapreduce.Partitioner",
      "org.apache.hadoop.fs.ByteBufferReadable",
      "org.apache.hadoop.io.RawComparator",
      "org.apache.hadoop.mapreduce.Mapper",
      "org.apache.hadoop.mapreduce.JobContext",
      "org.apache.hadoop.fs.CanSetReadahead",
      "org.apache.hadoop.mapreduce.ID"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.hadoop.mapreduce.TaskAttemptContext", false, StreamRecordReader_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.hadoop.mapreduce.lib.input.CombineFileSplit", false, StreamRecordReader_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.apache.spark.input.PortableDataStream", false, StreamRecordReader_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(StreamRecordReader_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.hadoop.mapreduce.RecordReader",
      "org.apache.spark.input.StreamBasedRecordReader",
      "org.apache.spark.input.StreamRecordReader",
      "org.apache.hadoop.mapreduce.InputSplit",
      "org.apache.hadoop.mapreduce.lib.input.CombineFileSplit",
      "org.apache.spark.input.PortableDataStream"
    );
  }
}
