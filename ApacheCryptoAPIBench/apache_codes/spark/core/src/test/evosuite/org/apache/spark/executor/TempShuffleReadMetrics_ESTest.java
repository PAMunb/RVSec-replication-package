/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:03:06 GMT 2022
 */

package org.apache.spark.executor;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.spark.executor.TempShuffleReadMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TempShuffleReadMetrics_ESTest extends TempShuffleReadMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      tempShuffleReadMetrics0.incRemoteBytesReadToDisk(4214L);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(4214L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      long long0 = tempShuffleReadMetrics0.remoteBytesReadToDisk();
      assertEquals(4214L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(4214L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      
      tempShuffleReadMetrics0.incRemoteBytesReadToDisk((-2133L));
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2133L), tempShuffleReadMetrics0.remoteBytesReadToDisk());
      
      long long0 = tempShuffleReadMetrics0.remoteBytesReadToDisk();
      assertEquals((-2133L), long0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2133L), tempShuffleReadMetrics0.remoteBytesReadToDisk());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      tempShuffleReadMetrics0.incRemoteBytesRead((-2133L));
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals((-2133L), tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      long long0 = tempShuffleReadMetrics0.remoteBytesRead();
      assertEquals((-2133L), long0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals((-2133L), tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      tempShuffleReadMetrics0.incRemoteBlocksFetched(1L);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(1L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      long long0 = tempShuffleReadMetrics0.remoteBlocksFetched();
      assertEquals(1L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(1L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      tempShuffleReadMetrics0.incRemoteBlocksFetched((-2552L));
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals((-2552L), tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      long long0 = tempShuffleReadMetrics0.remoteBlocksFetched();
      assertEquals((-2552L), long0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals((-2552L), tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      
      tempShuffleReadMetrics0.incRecordsRead(1675L);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(1675L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      
      long long0 = tempShuffleReadMetrics0.recordsRead();
      assertEquals(1675L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(1675L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      
      tempShuffleReadMetrics0.incRecordsRead((-2816L));
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2816L), tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      
      long long0 = tempShuffleReadMetrics0.recordsRead();
      assertEquals((-2816L), long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2816L), tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      tempShuffleReadMetrics0.incLocalBytesRead((-535L));
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals((-535L), tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      long long0 = tempShuffleReadMetrics0.localBytesRead();
      assertEquals((-535L), long0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals((-535L), tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      
      tempShuffleReadMetrics0.incLocalBlocksFetched(2030L);
      assertEquals(2030L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      long long0 = tempShuffleReadMetrics0.localBlocksFetched();
      assertEquals(2030L, long0);
      assertEquals(2030L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      tempShuffleReadMetrics0.incLocalBlocksFetched((-2133L));
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-2133L), tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      long long0 = tempShuffleReadMetrics0.localBlocksFetched();
      assertEquals((-2133L), long0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-2133L), tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      
      tempShuffleReadMetrics0.incFetchWaitTime(3856L);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(3856L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      
      long long0 = tempShuffleReadMetrics0.fetchWaitTime();
      assertEquals(3856L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(3856L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      tempShuffleReadMetrics0.incFetchWaitTime((-1273L));
      assertEquals((-1273L), tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      long long0 = tempShuffleReadMetrics0.fetchWaitTime();
      assertEquals((-1273L), long0);
      assertEquals((-1273L), tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      long long0 = tempShuffleReadMetrics0.localBytesRead();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      
      long long0 = tempShuffleReadMetrics0.fetchWaitTime();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      
      long long0 = tempShuffleReadMetrics0.remoteBytesRead();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      
      long long0 = tempShuffleReadMetrics0.recordsRead();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      
      long long0 = tempShuffleReadMetrics0.remoteBytesReadToDisk();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      
      tempShuffleReadMetrics0.incRemoteBytesRead(941L);
      assertEquals(941L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      
      long long0 = tempShuffleReadMetrics0.remoteBytesRead();
      assertEquals(941L, long0);
      assertEquals(941L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      
      tempShuffleReadMetrics0.incLocalBytesRead(1L);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(1L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      
      long long0 = tempShuffleReadMetrics0.localBytesRead();
      assertEquals(1L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(1L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      
      long long0 = tempShuffleReadMetrics0.localBlocksFetched();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TempShuffleReadMetrics tempShuffleReadMetrics0 = new TempShuffleReadMetrics();
      assertNotNull(tempShuffleReadMetrics0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
      
      long long0 = tempShuffleReadMetrics0.remoteBlocksFetched();
      assertEquals(0L, long0);
      assertEquals(0L, tempShuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.recordsRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, tempShuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, tempShuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, tempShuffleReadMetrics0.localBytesRead());
      assertEquals(0L, tempShuffleReadMetrics0.remoteBytesRead());
  }
}
