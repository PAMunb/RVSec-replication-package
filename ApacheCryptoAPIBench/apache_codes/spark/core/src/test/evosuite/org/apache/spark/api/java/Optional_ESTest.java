/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:18:26 GMT 2022
 */

package org.apache.spark.api.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.api.java.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Optional_ESTest extends Optional_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optional<Integer> optional0 = Optional.empty();
      Optional<Optional<Integer>> optional1 = Optional.ofNullable(optional0);
      Optional<Integer> optional2 = optional1.orNull();
      assertFalse(optional2.isPresent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Optional<Object> optional0 = Optional.of((Object) integer0);
      Optional<Optional<Object>> optional1 = Optional.fromNullable(optional0);
      Object object0 = optional1.get();
      boolean boolean0 = optional0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Optional.of((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optional<Object> optional0 = Optional.empty();
      String string0 = optional0.toString();
      assertEquals("Optional.empty", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Optional<Integer> optional0 = Optional.ofNullable((Integer) null);
      assertFalse(optional0.isPresent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Optional<Integer> optional0 = Optional.empty();
      Optional<Optional<Integer>> optional1 = Optional.ofNullable(optional0);
      String string0 = optional1.toString();
      assertEquals("Optional[Optional.empty]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optional<Integer> optional0 = Optional.absent();
      optional0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Optional<Object> optional0 = Optional.empty();
      Optional<Object> optional1 = Optional.fromNullable((Object) optional0);
      optional1.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optional<Integer> optional0 = Optional.absent();
      boolean boolean0 = optional0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optional<Object> optional0 = Optional.fromNullable((Object) null);
      Integer integer0 = new Integer(1829);
      Optional<Integer> optional1 = Optional.ofNullable(integer0);
      boolean boolean0 = optional0.equals(optional1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optional<Object> optional0 = Optional.empty();
      Optional<Object> optional1 = Optional.fromNullable((Object) optional0);
      Optional optional2 = (Optional)optional1.or("Optional[Optional.empty]");
      assertFalse(optional2.isPresent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1790);
      Optional<Object> optional0 = Optional.fromNullable((Object) integer0);
      boolean boolean0 = optional0.isPresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optional<Optional<Object>> optional0 = Optional.absent();
      boolean boolean0 = optional0.isPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Optional<Object> optional0 = Optional.empty();
      Optional<Optional<Object>> optional1 = Optional.ofNullable(optional0);
      Optional optional2 = (Optional)optional1.orElse((Object) null);
      assertFalse(optional2.isPresent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Optional<Integer> optional0 = Optional.empty();
      Integer integer0 = optional0.orElse((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Optional<Object> optional0 = Optional.empty();
      // Undeclared exception!
      try { 
        optional0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optional<Object> optional0 = Optional.fromNullable((Object) null);
      Object object0 = optional0.or((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Optional<Optional<Object>> optional0 = Optional.absent();
      Object object0 = optional0.orNull();
      assertNull(object0);
  }
}
