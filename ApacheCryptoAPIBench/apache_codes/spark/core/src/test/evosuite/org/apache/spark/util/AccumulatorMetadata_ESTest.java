/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:25:40 GMT 2022
 */

package org.apache.spark.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.util.AccumulatorMetadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccumulatorMetadata_ESTest extends AccumulatorMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply((-957L), option0, true);
      accumulatorMetadata0.productElement(1);
      assertTrue(accumulatorMetadata0.countFailedValues());
      assertEquals((-957L), accumulatorMetadata0.id());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(0L, (Option<String>) null, false);
      long long0 = accumulatorMetadata0.id();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(1L, (Option<String>) null, false);
      long long0 = accumulatorMetadata0.id();
      assertEquals(1L, long0);
      assertFalse(accumulatorMetadata0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-1301L), (Option<String>) null, false);
      boolean boolean0 = accumulatorMetadata0.countFailedValues();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-1L), option0, false);
      Option<String> option1 = accumulatorMetadata0.name();
      AccumulatorMetadata accumulatorMetadata1 = accumulatorMetadata0.copy(1014L, option1, false);
      assertFalse(accumulatorMetadata1.copy$default$3());
      assertEquals(1014L, accumulatorMetadata1.id());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(0L, (Option<String>) null, false);
      AccumulatorMetadata accumulatorMetadata1 = accumulatorMetadata0.copy(0L, (Option<String>) null, true);
      assertTrue(accumulatorMetadata1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(2120L, (Option<String>) null, true);
      AccumulatorMetadata accumulatorMetadata1 = accumulatorMetadata0.copy((-286L), (Option<String>) null, true);
      assertTrue(accumulatorMetadata1.copy$default$3());
      assertEquals((-286L), accumulatorMetadata1.id());
      assertTrue(accumulatorMetadata0.countFailedValues());
      assertEquals(2120L, accumulatorMetadata0.id());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply((-1L), option0, true);
      boolean boolean0 = accumulatorMetadata0.copy$default$3();
      assertEquals((-1L), accumulatorMetadata0.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-1L), option0, false);
      Option<String> option1 = accumulatorMetadata0.copy$default$2();
      assertSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(0L, (Option<String>) null, true);
      accumulatorMetadata0.copy$default$1();
      assertTrue(accumulatorMetadata0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply((-1L), option0, true);
      long long0 = accumulatorMetadata0.copy$default$1();
      assertTrue(accumulatorMetadata0.copy$default$3());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-1L), option0, false);
      Object object0 = accumulatorMetadata0.productElement(2);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(2120L, (Option<String>) null, true);
      accumulatorMetadata0.productElement(1);
      assertTrue(accumulatorMetadata0.countFailedValues());
      assertEquals(2120L, accumulatorMetadata0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply((-1L), option0, true);
      Object object0 = accumulatorMetadata0.productElement(0);
      assertEquals((-1L), object0);
      assertTrue(accumulatorMetadata0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-3552L), (Option<String>) null, false);
      int int0 = accumulatorMetadata0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-3552L), (Option<String>) null, false);
      Option<String> option0 = accumulatorMetadata0.name();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(1L, (Option<String>) null, false);
      String string0 = accumulatorMetadata0.productPrefix();
      assertEquals("AccumulatorMetadata", string0);
      assertFalse(accumulatorMetadata0.copy$default$3());
      assertEquals(1L, accumulatorMetadata0.id());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(1L, option0, true);
      boolean boolean0 = accumulatorMetadata0.countFailedValues();
      assertEquals(1L, accumulatorMetadata0.id());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-3552L), (Option<String>) null, false);
      long long0 = accumulatorMetadata0.id();
      assertEquals((-3552L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(944L, (Option<String>) null, false);
      accumulatorMetadata0.productIterator();
      assertEquals(3, accumulatorMetadata0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(1L, (Option<String>) null, false);
      boolean boolean0 = accumulatorMetadata0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-313L), (Option<String>) null, true);
      boolean boolean0 = accumulatorMetadata0.equals(accumulatorMetadata0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(2390L, (Option<String>) null, true);
      accumulatorMetadata0.hashCode();
      assertEquals(2390L, accumulatorMetadata0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply((-16L), (Option<String>) null, false);
      accumulatorMetadata0.hashCode();
      assertFalse(accumulatorMetadata0.copy$default$3());
      assertEquals((-16L), accumulatorMetadata0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(9L, (Option<String>) null, false);
      // Undeclared exception!
      try { 
        accumulatorMetadata0.productElement((-2058));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.util.AccumulatorMetadata", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = AccumulatorMetadata.apply(1480L, (Option<String>) null, true);
      AccumulatorMetadata.unapply(accumulatorMetadata0);
      assertEquals(1480L, accumulatorMetadata0.copy$default$1());
      assertTrue(accumulatorMetadata0.countFailedValues());
      assertEquals(1480L, accumulatorMetadata0.id());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(2851L, (Option<String>) null, false);
      Option<String> option0 = accumulatorMetadata0.copy$default$2();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(2219L, (Option<String>) null, false);
      long long0 = accumulatorMetadata0.copy$default$1();
      assertEquals(2219L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option<Tuple3<Object, Option<String>, Object>> option0 = AccumulatorMetadata.unapply((AccumulatorMetadata) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata((-3552L), (Option<String>) null, false);
      boolean boolean0 = accumulatorMetadata0.copy$default$3();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(0L, (Option<String>) null, false);
      boolean boolean0 = accumulatorMetadata0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Function1<Object, Function1<Option<String>, Function1<Object, AccumulatorMetadata>>> function1_0 = AccumulatorMetadata.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Function1<Tuple3<Object, Option<String>, Object>, AccumulatorMetadata> function1_0 = AccumulatorMetadata.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccumulatorMetadata accumulatorMetadata0 = new AccumulatorMetadata(2120L, (Option<String>) null, false);
      String string0 = accumulatorMetadata0.toString();
      assertEquals("AccumulatorMetadata(2120,null,false)", string0);
      assertEquals(3, accumulatorMetadata0.productArity());
  }
}
