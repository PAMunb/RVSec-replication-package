/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:08:16 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.HeartbeatResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HeartbeatResponse_ESTest extends HeartbeatResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      boolean boolean0 = heartbeatResponse0.reregisterBlockManager();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      boolean boolean0 = heartbeatResponse0.copy$default$1();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      heartbeatResponse0.canEqual(heartbeatResponse0);
      assertFalse(heartbeatResponse0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(true);
      Object object0 = heartbeatResponse0.productElement(0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(true);
      boolean boolean0 = heartbeatResponse0.reregisterBlockManager();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(true);
      heartbeatResponse0.canEqual((Object) null);
      assertTrue(heartbeatResponse0.reregisterBlockManager());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(true);
      String string0 = heartbeatResponse0.productPrefix();
      assertEquals("HeartbeatResponse", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      int int0 = heartbeatResponse0.productArity();
      assertFalse(heartbeatResponse0.reregisterBlockManager());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(true);
      heartbeatResponse0.productIterator();
      assertEquals(1, heartbeatResponse0.productArity());
      assertTrue(heartbeatResponse0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(true);
      Option<Object> option0 = HeartbeatResponse.unapply(heartbeatResponse0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(true);
      HeartbeatResponse heartbeatResponse1 = heartbeatResponse0.copy(false);
      boolean boolean0 = heartbeatResponse0.equals(heartbeatResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      boolean boolean0 = heartbeatResponse0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(heartbeatResponse0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      boolean boolean0 = heartbeatResponse0.equals(heartbeatResponse0);
      assertFalse(heartbeatResponse0.reregisterBlockManager());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(true);
      heartbeatResponse0.hashCode();
      assertTrue(heartbeatResponse0.reregisterBlockManager());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(false);
      heartbeatResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = new HeartbeatResponse(false);
      // Undeclared exception!
      try { 
        heartbeatResponse0.productElement(2213);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.HeartbeatResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(true);
      HeartbeatResponse heartbeatResponse1 = heartbeatResponse0.copy(true);
      assertTrue(heartbeatResponse1.equals((Object)heartbeatResponse0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<Object> option0 = HeartbeatResponse.unapply((HeartbeatResponse) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(false);
      HeartbeatResponse heartbeatResponse1 = HeartbeatResponse.apply(false);
      boolean boolean0 = heartbeatResponse0.equals(heartbeatResponse1);
      assertFalse(heartbeatResponse1.reregisterBlockManager());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<Object, HeartbeatResponse> function1_0 = HeartbeatResponse.andThen((Function1<HeartbeatResponse, HeartbeatResponse>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(true);
      boolean boolean0 = heartbeatResponse0.copy$default$1();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<HeartbeatResponse, HeartbeatResponse> function1_0 = HeartbeatResponse.compose((Function1<HeartbeatResponse, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HeartbeatResponse heartbeatResponse0 = HeartbeatResponse.apply(true);
      String string0 = heartbeatResponse0.toString();
      assertEquals("HeartbeatResponse(true)", string0);
  }
}
