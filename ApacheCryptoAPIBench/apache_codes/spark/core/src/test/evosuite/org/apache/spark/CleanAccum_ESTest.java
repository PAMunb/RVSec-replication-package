/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:11:36 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.CleanAccum;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleanAccum_ESTest extends CleanAccum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(0L);
      CleanAccum cleanAccum1 = cleanAccum0.copy(1L);
      boolean boolean0 = cleanAccum0.equals(cleanAccum1);
      assertFalse(boolean0);
      assertEquals(1L, cleanAccum1.copy$default$1());
      assertFalse(cleanAccum1.equals((Object)cleanAccum0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply((-4076L));
      cleanAccum0.copy(0L);
      assertEquals((-4076L), cleanAccum0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(0L);
      long long0 = cleanAccum0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum((-4253L));
      long long0 = cleanAccum0.copy$default$1();
      assertEquals((-4253L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(0L);
      Object object0 = cleanAccum0.productElement(0);
      boolean boolean0 = cleanAccum0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(1L);
      long long0 = cleanAccum0.accId();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply((-128L));
      long long0 = cleanAccum0.accId();
      assertEquals((-128L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum((-289L));
      int int0 = cleanAccum0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum((-4253L));
      cleanAccum0.productIterator();
      assertEquals(1, cleanAccum0.productArity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(0L);
      boolean boolean0 = cleanAccum0.canEqual(cleanAccum0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum(0L);
      long long0 = cleanAccum0.accId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum((-128L));
      String string0 = cleanAccum0.productPrefix();
      assertEquals("CleanAccum", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(31L);
      CleanAccum cleanAccum1 = CleanAccum.apply((-1225L));
      boolean boolean0 = cleanAccum0.equals(cleanAccum1);
      assertFalse(boolean0);
      assertFalse(cleanAccum1.equals((Object)cleanAccum0));
      assertEquals((-1225L), cleanAccum1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum((-842L));
      boolean boolean0 = cleanAccum0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum(914L);
      boolean boolean0 = cleanAccum0.equals(cleanAccum0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum((-1681L));
      // Undeclared exception!
      try { 
        cleanAccum0.productElement(398);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.CleanAccum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CleanAccum cleanAccum0 = new CleanAccum(24L);
      CleanAccum.unapply(cleanAccum0);
      assertEquals(24L, cleanAccum0.copy$default$1());
      assertEquals(24L, cleanAccum0.accId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(1L);
      CleanAccum cleanAccum1 = cleanAccum0.copy(1L);
      boolean boolean0 = cleanAccum0.equals(cleanAccum1);
      assertEquals(1L, cleanAccum1.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply(486L);
      long long0 = cleanAccum0.copy$default$1();
      assertEquals(486L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option<Object> option0 = CleanAccum.unapply((CleanAccum) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<CleanAccum, CleanAccum> function1_0 = CleanAccum.compose((Function1<CleanAccum, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<Object, CleanAccum> function1_0 = CleanAccum.andThen((Function1<CleanAccum, CleanAccum>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply((-1L));
      cleanAccum0.hashCode();
      assertEquals((-1L), cleanAccum0.accId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply((-1L));
      String string0 = cleanAccum0.toString();
      assertEquals("CleanAccum(-1)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CleanAccum cleanAccum0 = CleanAccum.apply((-1L));
      CleanAccum cleanAccum1 = cleanAccum0.copy((-1L));
      assertTrue(cleanAccum1.equals((Object)cleanAccum0));
  }
}
