/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:21:02 GMT 2022
 */

package org.apache.spark.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.spark.util.ByteBufferInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteBufferInputStream_ESTest extends ByteBufferInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(byteBuffer0).toString();
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferInputStream0.skip((-82L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream((ByteBuffer) null);
      // Undeclared exception!
      try { 
        byteBufferInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.ByteBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(byteBuffer0).toString();
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream(byteBuffer0);
      byte[] byteArray0 = new byte[5];
      int int0 = byteBufferInputStream0.read(byteArray0, (int) (byte) (-42), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream((ByteBuffer) null);
      long long0 = byteBufferInputStream0.skip(1762L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream((ByteBuffer) null);
      byte[] byteArray0 = new byte[0];
      int int0 = byteBufferInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(byteBuffer0).toString();
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream(byteBuffer0);
      int int0 = byteBufferInputStream0.read();
      byte[] byteArray0 = new byte[7];
      int int1 = byteBufferInputStream0.read(byteArray0, (int) (byte)60, (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(byteBuffer0).toString();
      ByteBufferInputStream byteBufferInputStream0 = new ByteBufferInputStream(byteBuffer0);
      long long0 = byteBufferInputStream0.skip(1L);
      assertEquals(0L, long0);
      
      int int0 = byteBufferInputStream0.read();
      assertEquals((-1), int0);
  }
}
