/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 21 22:00:46 GMT 2022
 */

package org.apache.spark.deploy.worker.ui;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class LogPage_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.spark.deploy.worker.ui.LogPage"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core"); 
    java.lang.System.setProperty("user.home", "/home/pedro"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "pedro"); 
    java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
    java.lang.System.setProperty("log4j.configuration", "SUT.log4j.properties"); 
    java.lang.System.setProperty("strategy", "MOSuite"); 
    java.lang.System.setProperty("sun.java.launcher", "SUN_STANDARD"); 
    java.lang.System.setProperty("sun.management.compiler", "HotSpot 64-Bit Tiered Compilers"); 
    java.lang.System.setProperty("sun.boot.class.path", "/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/resources.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/rt.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/jsse.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/jce.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/charsets.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/jfr.jar:/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/classes"); 
    java.lang.System.setProperty("show_progress", "false"); 
    java.lang.System.setProperty("extra_timeout", "22"); 
    java.lang.System.setProperty("process_communication_port", "12081"); 
    java.lang.System.setProperty("initialization_timeout", "22"); 
    java.lang.System.setProperty("assertion_timeout", "22"); 
    java.lang.System.setProperty("junit_tests", "true"); 
    java.lang.System.setProperty("analysis_criteria", ""); 
    java.lang.System.setProperty("sun.boot.library.path", "/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64/jre/lib/amd64"); 
    java.lang.System.setProperty("enable_asserts_for_evosuite", "false"); 
    java.lang.System.setProperty("sun.arch.data.model", "64"); 
    java.lang.System.setProperty("sun.cpu.isalist", ""); 
    java.lang.System.setProperty("sun.jnu.encoding", "UTF-8"); 
    java.lang.System.setProperty("file.encoding.pkg", "sun.io"); 
    java.lang.System.setProperty("configuration_id", "default"); 
    java.lang.System.setProperty("num_parallel_clients", "1"); 
    java.lang.System.setProperty("PROJECT_PREFIX", ""); 
    java.lang.System.setProperty("ctg_time_per_class", "2"); 
    java.lang.System.setProperty("write_pool", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core/.evosuite/tmp_2022_04_21_21_19_14/pools/org.apache.spark.deploy.worker.ui.LogPage.pool"); 
    java.lang.System.setProperty("save_all_data", "false"); 
    java.lang.System.setProperty("logback.configurationFile", "logback-ctg.xml"); 
    java.lang.System.setProperty("junit_check_timeout", "22"); 
    java.lang.System.setProperty("replace_calls", "true"); 
    java.lang.System.setProperty("coverage", "true"); 
    java.lang.System.setProperty("ctg_schedule", "BUDGET"); 
    java.lang.System.setProperty("sun.io.unicode.encoding", "UnicodeLittle"); 
    java.lang.System.setProperty("stopping_condition", "MAXTIME"); 
    java.lang.System.setProperty("print_to_system", "false"); 
    java.lang.System.setProperty("output_variables", "TARGET_CLASS,configuration_id,criterion,ctg_min_time_per_job,ctg_schedule,search_budget,p_object_pool,ctg_time_per_class,Size,Length,Total_Time,Random_Seed,LineCoverage,LineCoverageBitString,BranchCoverage,BranchCoverageBitString,ExceptionCoverage,ExceptionCoverageBitString,Explicit_MethodExceptions,Explicit_TypeExceptions,Implicit_MethodExceptions,Implicit_TypeExceptions,WeakMutationScore,WeakMutationCoverageBitString,OutputCoverage,OutputCoverageBitString,MethodCoverage,MethodCoverageBitString,MethodNoExceptionCoverage,MethodNoExceptionCoverageBitString,CBranchCoverage,CBranchCoverageBitString"); 
    java.lang.System.setProperty("global_timeout", "137"); 
    java.lang.System.setProperty("assertions", "true"); 
    java.lang.System.setProperty("log_timeout", "false"); 
    java.lang.System.setProperty("master_log_port", "41343"); 
    java.lang.System.setProperty("reset_static_fields", "true"); 
    java.lang.System.setProperty("sun.java.command", "org.evosuite.ClientProcess Client-0"); 
    java.lang.System.setProperty("junit_check", "TRUE"); 
    java.lang.System.setProperty("evosuite.log.folder", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core/.evosuite/tmp_2022_04_21_21_19_14/logs/org.apache.spark.deploy.worker.ui.LogPage"); 
    java.lang.System.setProperty("minimize", "true"); 
    java.lang.System.setProperty("max_size", "100"); 
    java.lang.System.setProperty("sun.os.patch.level", "unknown"); 
    java.lang.System.setProperty("sun.cpu.endian", "little"); 
    java.lang.System.setProperty("ctg_min_time_per_job", "1"); 
    java.lang.System.setProperty("junit_suffix", "_ESTest"); 
    java.lang.System.setProperty("java.vendor.url.bug", "https://github.com/AdoptOpenJDK/openjdk-support/issues"); 
    java.lang.System.setProperty("report_dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core/.evosuite/tmp_2022_04_21_21_19_14/reports/org.apache.spark.deploy.worker.ui.LogPage"); 
    java.lang.System.setProperty("minimization_timeout", "22"); 
    java.lang.System.setProperty("CP_file_path", "/tmp/EvoSuite_classpathFile3684318306409554381.txt"); 
    java.lang.System.setProperty("java.rmi.server.hostname", "127.0.0.1"); 
    java.lang.System.setProperty("inline", "true"); 
    java.lang.System.setProperty("TARGET_CLASS", "org.apache.spark.deploy.worker.ui.LogPage"); 
    java.lang.System.setProperty("spawn_process_manager_port", "38853"); 
    java.lang.System.setProperty("selection_function", "RANK_CROWD_DISTANCE_TOURNAMENT"); 
    java.lang.System.setProperty("evosuite.log.appender", "CLIENT"); 
    java.lang.System.setProperty("write_junit_timeout", "22"); 
    java.lang.System.setProperty("test_dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core/.evosuite/tmp_2022_04_21_21_19_14/tests"); 
    java.lang.System.setProperty("search_budget", "137"); 
    java.lang.System.setProperty("plot", "false"); 
    java.lang.System.setProperty("algorithm", "DYNAMOSA"); 
    java.lang.System.setProperty("p_object_pool", "0.3"); 
    java.lang.System.setProperty("criterion", "LINE:BRANCH:EXCEPTION:WEAKMUTATION:OUTPUT:METHOD:METHODNOEXCEPTION:CBRANCH"); 
    java.lang.System.setProperty("test_comments", "false"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(LogPage_ESTest_scaffolding.class.getClassLoader() ,
      "org.eclipse.jetty.servlet.ServletContextHandler",
      "scala.collection.Parallelizable",
      "scala.math.Equiv",
      "scala.Serializable",
      "scala.reflect.ScalaSignature",
      "org.eclipse.jetty.server.handler.AbstractHandlerContainer",
      "org.apache.spark.internal.Logging$class",
      "org.eclipse.jetty.util.component.ContainerLifeCycle",
      "scala.collection.generic.Shrinkable",
      "org.apache.spark.ui.WebUIPage",
      "scala.collection.mutable.BufferLike",
      "scala.collection.AbstractSeq",
      "scala.collection.AbstractMap",
      "org.eclipse.jetty.server.HandlerContainer",
      "scala.collection.Map",
      "org.eclipse.jetty.util.component.AbstractLifeCycle",
      "scala.collection.Seq",
      "scala.collection.mutable.HashTable",
      "scala.collection.mutable.IndexedSeqLike",
      "scala.math.PartialOrdering",
      "scala.collection.mutable.Buffer",
      "scala.collection.MapLike",
      "org.apache.spark.SecurityManager",
      "scala.collection.mutable.Builder",
      "scala.collection.generic.FilterMonadic",
      "org.eclipse.jetty.server.Handler",
      "org.eclipse.jetty.util.component.Destroyable",
      "scala.collection.mutable.Cloneable",
      "scala.collection.GenIterableLike",
      "scala.Equals",
      "scala.Function0",
      "scala.Function1",
      "scala.xml.UnprefixedAttribute",
      "scala.collection.generic.GenericTraversableTemplate",
      "scala.math.Ordering",
      "scala.Mutable",
      "org.apache.spark.ui.WebUITab",
      "scala.collection.GenMapLike",
      "org.apache.spark.deploy.worker.Worker",
      "org.json4s.JsonAST$JValue",
      "scala.collection.GenMap",
      "scala.collection.GenTraversable",
      "scala.collection.GenSeq",
      "org.apache.spark.network.sasl.SecretKeyHolder",
      "scala.collection.GenSeqLike",
      "org.apache.spark.SparkConf",
      "org.apache.spark.internal.Logging",
      "scala.collection.mutable.ResizableArray",
      "org.eclipse.jetty.util.component.Dumpable",
      "scala.None$",
      "org.apache.spark.rpc.RpcEndpoint",
      "scala.collection.mutable.Map",
      "scala.xml.Attribute",
      "scala.collection.mutable.Seq",
      "scala.collection.SeqLike",
      "scala.Product",
      "org.apache.spark.deploy.worker.ui.LogPage",
      "scala.xml.NamespaceBinding",
      "org.eclipse.jetty.util.Attributes",
      "scala.xml.MetaData",
      "org.eclipse.jetty.util.component.LifeCycle",
      "scala.collection.mutable.HashTable$HashUtils",
      "scala.xml.TopScope$",
      "org.apache.spark.ui.ServerInfo",
      "org.eclipse.jetty.util.component.Container",
      "scala.collection.GenIterable",
      "scala.collection.script.Scriptable",
      "scala.collection.mutable.SeqLike",
      "scala.collection.mutable.AbstractBuffer",
      "scala.Cloneable",
      "scala.Some",
      "scala.MatchError",
      "scala.PartialFunction",
      "org.eclipse.jetty.util.component.Graceful",
      "org.json4s.JsonAST$JNothing$",
      "scala.xml.Equality",
      "scala.collection.TraversableOnce",
      "org.apache.spark.ui.WebUI",
      "scala.collection.TraversableLike",
      "scala.collection.IterableLike",
      "scala.collection.mutable.Iterable",
      "org.apache.spark.rpc.ThreadSafeRpcEndpoint",
      "scala.xml.Null$",
      "scala.collection.IndexedSeq",
      "org.eclipse.jetty.server.handler.AbstractHandler",
      "org.apache.spark.SSLOptions",
      "scala.collection.IndexedSeqLike",
      "org.json4s.Diff$Diffable",
      "scala.collection.mutable.IndexedSeqOptimized",
      "scala.collection.generic.HasNewBuilder",
      "scala.collection.mutable.MapLike",
      "scala.collection.GenTraversableOnce",
      "org.apache.spark.rpc.RpcTimeout",
      "scala.collection.GenTraversableLike",
      "scala.collection.AbstractTraversable",
      "org.apache.spark.deploy.worker.ui.WorkerWebUI",
      "scala.collection.AbstractIterable",
      "scala.math.Numeric",
      "scala.collection.Traversable",
      "scala.collection.mutable.HashMap",
      "scala.collection.mutable.ArrayBuffer",
      "org.apache.spark.deploy.worker.ui.WorkerPage",
      "scala.collection.mutable.IndexedSeq",
      "scala.collection.IndexedSeqOptimized",
      "scala.collection.Iterable",
      "org.eclipse.jetty.server.handler.HandlerWrapper",
      "org.eclipse.jetty.server.handler.ContextHandler",
      "scala.Option",
      "scala.collection.generic.Subtractable",
      "scala.collection.mutable.AbstractSeq",
      "scala.collection.generic.Clearable",
      "scala.collection.generic.Growable",
      "org.eclipse.jetty.server.handler.ScopedHandler",
      "scala.collection.mutable.Traversable",
      "scala.collection.mutable.AbstractMap",
      "scala.collection.CustomParallelizable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.spark.deploy.worker.ui.WorkerWebUI", false, LogPage_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(LogPage_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.spark.ui.WebUIPage",
      "org.apache.spark.deploy.worker.ui.LogPage",
      "scala.runtime.AbstractFunction1",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$4",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$5",
      "scala.runtime.AbstractFunction0",
      "scala.runtime.AbstractFunction0$mcI$sp",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$1",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$getLog$1",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$8",
      "scala.runtime.AbstractFunction0$mcJ$sp",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$3",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$getLog$2",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$getLog$3",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$getLog$4",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$6",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$7",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$2",
      "org.apache.spark.deploy.worker.ui.LogPage$$anonfun$render$1",
      "scala.LowPriorityImplicits",
      "scala.DeprecatedPredef$class",
      "scala.package$$anon$1",
      "scala.collection.generic.GenericCompanion",
      "scala.collection.generic.GenTraversableFactory",
      "scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom",
      "scala.collection.generic.GenTraversableFactory$$anon$1",
      "scala.util.control.Breaks",
      "scala.util.control.BreakControl",
      "scala.util.control.NoStackTrace$class",
      "scala.sys.SystemProperties$",
      "scala.sys.BooleanProp$",
      "scala.sys.PropImpl",
      "scala.sys.BooleanProp$BooleanPropImpl",
      "scala.sys.BooleanProp$$anonfun$keyExists$1",
      "scala.Function1$class",
      "scala.collection.generic.GenMapFactory",
      "scala.collection.generic.MapFactory",
      "scala.collection.generic.MutableMapFactory",
      "scala.collection.mutable.Map$",
      "scala.collection.AbstractTraversable",
      "scala.collection.AbstractIterable",
      "scala.collection.AbstractSeq",
      "scala.collection.immutable.List",
      "scala.collection.TraversableOnce$class",
      "scala.collection.Parallelizable$class",
      "scala.collection.TraversableLike$class",
      "scala.collection.generic.GenericTraversableTemplate$class",
      "scala.collection.GenTraversable$class",
      "scala.collection.Traversable$class",
      "scala.collection.GenIterable$class",
      "scala.collection.IterableLike$class",
      "scala.collection.Iterable$class",
      "scala.PartialFunction$class",
      "scala.collection.GenSeqLike$class",
      "scala.collection.GenSeq$class",
      "scala.collection.SeqLike$class",
      "scala.collection.Seq$class",
      "scala.collection.immutable.Traversable$class",
      "scala.collection.immutable.Iterable$class",
      "scala.collection.immutable.Seq$class",
      "scala.collection.LinearSeqLike$class",
      "scala.collection.LinearSeq$class",
      "scala.collection.immutable.LinearSeq$class",
      "scala.Product$class",
      "scala.collection.LinearSeqOptimized$class",
      "scala.collection.immutable.Nil$",
      "scala.collection.AbstractMap",
      "scala.collection.mutable.AbstractMap",
      "scala.collection.mutable.HashMap",
      "scala.collection.GenMapLike$class",
      "scala.collection.generic.Subtractable$class",
      "scala.collection.MapLike$class",
      "scala.collection.Map$class",
      "scala.collection.mutable.Traversable$class",
      "scala.collection.mutable.Iterable$class",
      "scala.collection.generic.Growable$class",
      "scala.collection.mutable.Builder$class",
      "scala.collection.generic.Shrinkable$class",
      "scala.collection.mutable.Cloneable$class",
      "scala.collection.mutable.MapLike$class",
      "scala.collection.mutable.Map$class",
      "scala.collection.mutable.HashTable$HashUtils$class",
      "scala.collection.mutable.HashTable$class",
      "scala.collection.mutable.HashTable$",
      "scala.collection.CustomParallelizable$class",
      "scala.runtime.BoxedUnit",
      "scala.runtime.ScalaRunTime$",
      "scala.util.hashing.package$",
      "scala.collection.mutable.DefaultEntry",
      "scala.collection.mutable.HashEntry$class",
      "scala.Option",
      "scala.None$",
      "scala.sys.package$",
      "scala.sys.SystemProperties",
      "scala.runtime.AbstractFunction0$mcZ$sp",
      "scala.sys.SystemProperties$$anonfun$contains$1",
      "scala.Function0$class",
      "scala.Function0$mcZ$sp$class",
      "scala.Some",
      "scala.sys.SystemProperties$$anonfun$get$1",
      "scala.Option$",
      "scala.runtime.BoxesRunTime",
      "scala.util.control.NoStackTrace$",
      "scala.collection.Traversable$",
      "scala.collection.Iterable$",
      "scala.collection.generic.GenSeqFactory",
      "scala.collection.generic.SeqFactory",
      "scala.collection.Seq$",
      "scala.collection.generic.IndexedSeqFactory",
      "scala.collection.IndexedSeq$$anon$1",
      "scala.collection.IndexedSeq$",
      "scala.collection.AbstractIterator",
      "scala.collection.Iterator$$anon$2",
      "scala.collection.Iterator$class",
      "scala.collection.Iterator$",
      "scala.collection.immutable.List$$anon$1",
      "scala.collection.immutable.List$",
      "scala.collection.immutable.$colon$colon$",
      "scala.collection.$plus$colon$",
      "scala.collection.$colon$plus$",
      "scala.collection.immutable.Stream$",
      "scala.collection.immutable.Stream$$hash$colon$colon$",
      "scala.collection.immutable.Vector",
      "scala.collection.IndexedSeqLike$class",
      "scala.collection.IndexedSeq$class",
      "scala.collection.immutable.IndexedSeq$class",
      "scala.collection.immutable.VectorPointer$class",
      "scala.collection.immutable.Vector$",
      "scala.collection.mutable.StringBuilder$",
      "scala.collection.immutable.Range$",
      "scala.math.BigDecimal$",
      "scala.math.BigInt$",
      "scala.math.LowPriorityEquiv$class",
      "scala.math.Equiv$",
      "scala.math.Fractional$",
      "scala.math.Integral$",
      "scala.math.Numeric$",
      "scala.math.Ordered$",
      "scala.math.LowPriorityOrderingImplicits$class",
      "scala.math.Ordering$",
      "scala.util.Either$",
      "scala.util.Left$",
      "scala.util.Right$",
      "scala.package$",
      "scala.collection.generic.ImmutableMapFactory",
      "scala.collection.immutable.Map$",
      "scala.collection.generic.GenSetFactory",
      "scala.collection.generic.SetFactory",
      "scala.collection.generic.ImmutableSetFactory",
      "scala.collection.immutable.Set$",
      "scala.reflect.AnyValManifest",
      "scala.reflect.ManifestFactory$$anon$6",
      "scala.reflect.ClassManifestDeprecatedApis$class",
      "scala.reflect.ClassTag$class",
      "scala.reflect.Manifest$class",
      "scala.reflect.ManifestFactory$$anon$7",
      "scala.reflect.ManifestFactory$$anon$8",
      "scala.reflect.ManifestFactory$$anon$9",
      "scala.reflect.ManifestFactory$$anon$10",
      "scala.reflect.ManifestFactory$$anon$11",
      "scala.reflect.ManifestFactory$$anon$12",
      "scala.reflect.ManifestFactory$$anon$13",
      "scala.reflect.ManifestFactory$$anon$14",
      "scala.reflect.ManifestFactory$ClassTypeManifest",
      "scala.reflect.ManifestFactory$PhantomManifest",
      "scala.reflect.ManifestFactory$$anon$1",
      "scala.reflect.ManifestFactory$$anon$2",
      "scala.reflect.ManifestFactory$$anon$3",
      "scala.reflect.ManifestFactory$$anon$4",
      "scala.reflect.ManifestFactory$$anon$5",
      "scala.reflect.ManifestFactory$",
      "scala.reflect.ClassManifestFactory$",
      "scala.reflect.package$",
      "scala.reflect.NoManifest$",
      "scala.Predef$$anon$3",
      "scala.Predef$$less$colon$less",
      "scala.Predef$$anon$1",
      "scala.Predef$$eq$colon$eq",
      "scala.Predef$$anon$2",
      "scala.Predef$",
      "org.apache.spark.internal.Logging$class",
      "org.apache.spark.util.SparkUncaughtExceptionHandler",
      "org.apache.spark.util.SparkUncaughtExceptionHandler$",
      "scala.collection.convert.DecorateAsJava$class",
      "scala.collection.convert.DecorateAsScala$class",
      "scala.collection.JavaConverters$",
      "scala.collection.convert.Decorators$AsScala",
      "scala.collection.convert.Decorators$class",
      "scala.collection.convert.Decorators$",
      "scala.collection.convert.DecorateAsScala$$anonfun$mapAsScalaMapConverter$1",
      "scala.collection.convert.WrapAsScala$class",
      "scala.collection.convert.WrapAsScala$",
      "scala.collection.convert.Wrappers$JMapWrapper",
      "scala.collection.convert.Wrappers$class",
      "scala.collection.convert.Wrappers$",
      "scala.collection.convert.Wrappers$JMapWrapperLike$class",
      "scala.collection.mutable.AbstractSeq",
      "scala.collection.mutable.AbstractBuffer",
      "scala.collection.mutable.ArrayBuffer",
      "scala.collection.mutable.SeqLike$class",
      "scala.collection.mutable.Seq$class",
      "scala.collection.mutable.BufferLike$class",
      "scala.collection.mutable.Buffer$class",
      "scala.collection.mutable.IndexedSeqLike$class",
      "scala.collection.IndexedSeqOptimized$class",
      "scala.collection.mutable.IndexedSeq$class",
      "scala.collection.mutable.ResizableArray$class",
      "scala.math.package$",
      "scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1",
      "scala.collection.convert.Wrappers$JMapWrapperLike$$anon$2",
      "scala.Tuple2",
      "scala.Product2$class",
      "scala.collection.mutable.MapBuilder",
      "scala.collection.immutable.AbstractMap",
      "scala.collection.immutable.MapLike$class",
      "scala.collection.immutable.Map$class",
      "scala.collection.immutable.Map$EmptyMap$",
      "scala.collection.immutable.Map$Map1",
      "scala.collection.immutable.Map$Map2",
      "scala.collection.immutable.Map$Map3",
      "scala.collection.immutable.Map$Map4",
      "scala.collection.immutable.HashMap",
      "scala.collection.mutable.WrappedArray",
      "scala.collection.mutable.WrappedArray$ofRef",
      "scala.collection.mutable.ArrayLike$class",
      "scala.collection.immutable.HashMap$HashMap1",
      "scala.collection.generic.BitOperations$Int$class",
      "scala.runtime.AbstractFunction2",
      "scala.collection.immutable.HashMap$$anonfun$1",
      "scala.Function2$class",
      "scala.collection.immutable.HashMap$Merger",
      "scala.collection.immutable.HashMap$$anon$2",
      "scala.collection.immutable.HashMap$$anon$2$$anon$3",
      "scala.collection.immutable.HashMap$",
      "scala.collection.immutable.HashMap$HashTrieMap",
      "scala.collection.generic.GenMapFactory$MapCanBuildFrom",
      "scala.collection.immutable.HashMap$EmptyHashMap$",
      "scala.FallbackArrayBuilding",
      "scala.Array$",
      "scala.util.PropertiesTrait$class",
      "scala.collection.mutable.StringBuilder",
      "scala.math.Ordered$class",
      "scala.collection.immutable.StringLike$class",
      "scala.runtime.AbstractFunction0$mcV$sp",
      "scala.util.PropertiesTrait$$anonfun$scalaProps$1",
      "scala.Function0$mcV$sp$class",
      "scala.util.PropertiesTrait$$anonfun$scalaProps$2",
      "scala.util.PropertiesTrait$$anonfun$1",
      "scala.Option$WithFilter",
      "scala.util.PropertiesTrait$$anonfun$2",
      "scala.util.PropertiesTrait$$anonfun$3",
      "scala.util.PropertiesTrait$$anonfun$4",
      "scala.util.PropertiesTrait$$anonfun$scalaPropOrElse$1",
      "scala.util.Properties$",
      "scala.compat.Platform$",
      "org.apache.commons.lang3.math.NumberUtils",
      "org.apache.commons.lang3.JavaVersion",
      "org.apache.commons.lang3.SystemUtils",
      "scala.collection.immutable.StringOps",
      "scala.util.matching.Regex",
      "scala.collection.immutable.StringOps$",
      "scala.collection.AbstractSet",
      "scala.collection.GenSetLike$class",
      "scala.collection.generic.GenericSetTemplate$class",
      "scala.collection.GenSet$class",
      "scala.collection.SetLike$class",
      "scala.collection.Set$class",
      "scala.collection.immutable.Set$class",
      "scala.collection.immutable.Set$EmptySet$",
      "org.apache.spark.util.Utils$",
      "org.apache.spark.util.Utils$$anonfun$getContextOrSparkClassLoader$1",
      "org.apache.spark.internal.Logging$",
      "org.apache.log4j.Priority",
      "org.apache.log4j.Level",
      "org.apache.log4j.helpers.OptionConverter",
      "org.apache.log4j.helpers.LogLog",
      "org.apache.log4j.helpers.Loader",
      "org.apache.log4j.Hierarchy",
      "org.apache.log4j.Category",
      "org.apache.log4j.Logger",
      "org.apache.log4j.spi.RootLogger",
      "org.apache.log4j.or.DefaultRenderer",
      "org.apache.log4j.or.RendererMap",
      "org.apache.log4j.DefaultCategoryFactory",
      "org.apache.log4j.spi.DefaultRepositorySelector",
      "org.apache.log4j.PropertyConfigurator",
      "org.apache.log4j.LogManager",
      "scala.StringContext",
      "scala.StringContext$$anonfun$raw$1",
      "scala.collection.IndexedSeqLike$Elements",
      "scala.collection.BufferedIterator$class",
      "scala.collection.LinearSeqLike$$anon$1",
      "org.apache.spark.ui.UIUtils$$anon$3",
      "org.apache.spark.ui.UIUtils$",
      "scala.xml.MetaData",
      "scala.xml.Equality$class",
      "scala.xml.Null$",
      "scala.xml.NamespaceBinding",
      "scala.xml.TopScope$",
      "scala.xml.Unparsed$",
      "org.apache.spark.util.logging.RollingFileAppender$",
      "scala.math.PartialOrdering$class",
      "scala.math.Ordering$class",
      "scala.math.Numeric$class",
      "scala.math.Integral$class",
      "scala.math.Numeric$LongIsIntegral$class",
      "scala.math.Ordering$LongOrdering$class",
      "scala.math.Numeric$LongIsIntegral$",
      "org.apache.spark.ui.WebUI",
      "org.apache.spark.deploy.worker.ui.WorkerWebUI",
      "org.scalatest.FunSuite",
      "org.apache.spark.SparkFunSuite",
      "org.apache.spark.scheduler.SparkListenerSuite",
      "org.scalactic.TripleEqualsSupport$class",
      "org.scalactic.TripleEquals$class",
      "org.scalatest.Assertions$class",
      "org.scalatest.Assertions$AssertionsHelper",
      "org.scalatest.Outcome",
      "org.scalatest.Succeeded$",
      "org.scalatest.Suite$class",
      "org.scalatest.TestSuite$class",
      "org.scalatest.FunSuiteLike$class",
      "org.scalatest.SuperEngine",
      "org.scalatest.Engine",
      "org.scalatest.FunSuiteLike$$anonfun$1",
      "org.scalatest.SuperEngine$Bundle$",
      "org.scalatest.SuperEngine$Node",
      "org.scalatest.SuperEngine$Branch",
      "org.scalatest.SuperEngine$Trunk$",
      "org.scalatest.SuperEngine$Bundle",
      "org.scalatest.SuperEngine$RegistrationInformer",
      "org.scalatest.Informer$class",
      "org.scalatest.SuperEngine$RegistrationNotifier",
      "org.scalatest.Notifier$class",
      "org.scalatest.SuperEngine$RegistrationAlerter",
      "org.scalatest.Alerter$class",
      "org.scalatest.SuperEngine$RegistrationDocumenter",
      "org.scalatest.SuperEngine$$anon$1",
      "org.scalatest.SuperEngine$$anon$2",
      "org.scalatest.SuperEngine$$anon$3",
      "org.scalatest.SuperEngine$$anon$4",
      "org.scalatest.BeforeAndAfterAll$class",
      "org.apache.spark.ThreadAudit$class",
      "scala.collection.mutable.SetBuilder",
      "scala.collection.immutable.Set$Set1",
      "scala.collection.immutable.Set$Set2",
      "scala.collection.immutable.Set$Set3",
      "scala.collection.immutable.Set$Set4",
      "scala.collection.immutable.HashSet",
      "scala.collection.mutable.WrappedArray$",
      "scala.collection.immutable.HashSet$LeafHashSet",
      "scala.collection.immutable.HashSet$HashSet1",
      "scala.collection.immutable.HashSet$",
      "scala.collection.immutable.HashSet$HashTrieSet",
      "scala.collection.SetLike$$anonfun$$plus$plus$1",
      "org.scalatest.BeforeAndAfterEach$class",
      "org.apache.spark.LocalSparkContext$class",
      "org.scalactic.Tolerance$class",
      "org.scalatest.words.ShouldVerb$class",
      "org.scalatest.words.MatcherWords$class",
      "org.scalatest.words.FullyMatchWord",
      "org.scalatest.words.StartWithWord",
      "org.scalatest.words.EndWithWord",
      "org.scalatest.words.IncludeWord",
      "org.scalatest.words.HaveWord",
      "org.scalatest.words.BeWord",
      "org.scalatest.words.ContainWord",
      "org.scalatest.words.NotWord",
      "org.scalatest.matchers.MatcherFactory1",
      "org.scalatest.words.NotWord$$anon$57",
      "org.scalatest.words.LengthWord",
      "org.scalatest.words.SizeWord",
      "org.scalatest.words.SortedWord",
      "org.scalatest.words.DefinedWord",
      "org.scalatest.words.ExistWord",
      "org.scalatest.words.ExistWord$$anon$2",
      "org.scalatest.words.ReadableWord",
      "org.scalatest.words.WritableWord",
      "org.scalatest.words.EmptyWord",
      "org.scalatest.words.CompileWord",
      "org.scalatest.words.TypeCheckWord",
      "org.scalatest.words.MatchPatternWord",
      "org.scalactic.Explicitly$class",
      "org.scalactic.Explicitly$DecidedWord",
      "org.scalactic.Explicitly$DeterminedWord",
      "org.scalactic.Explicitly$TheAfterWord",
      "org.scalatest.Matchers$class",
      "org.scalatest.Matchers$KeyWord",
      "org.scalatest.Matchers$ValueWord",
      "org.scalatest.Matchers$AWord",
      "org.scalatest.Matchers$AnWord",
      "org.scalatest.Matchers$TheSameInstanceAsPhrase",
      "org.scalatest.Matchers$RegexWord",
      "org.apache.spark.util.ResetSystemProperties$class",
      "org.mockito.internal.progress.ThreadSafeMockingProgress",
      "org.mockito.Matchers",
      "org.mockito.internal.MockitoCore",
      "org.mockito.exceptions.Reporter",
      "org.mockito.internal.configuration.plugins.PluginRegistry",
      "org.mockito.internal.configuration.plugins.PluginLoader",
      "org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
      "org.mockito.internal.configuration.plugins.PluginFinder",
      "org.mockito.internal.util.collections.Iterables",
      "org.mockito.internal.creation.cglib.CglibMockMaker",
      "org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider",
      "org.mockito.internal.configuration.plugins.Plugins",
      "org.mockito.internal.util.MockUtil",
      "org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues",
      "org.mockito.internal.util.ObjectMethodsGuru",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsMocks",
      "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs",
      "org.mockito.internal.stubbing.answers.CallsRealMethods",
      "org.mockito.Answers",
      "org.mockito.Mockito",
      "org.mockito.internal.creation.settings.CreationSettings",
      "org.mockito.internal.creation.MockSettingsImpl",
      "org.mockito.mock.SerializableMode",
      "org.mockito.internal.util.MockCreationValidator",
      "org.mockito.internal.util.MockNameImpl",
      "org.mockito.internal.handler.MockHandlerFactory",
      "org.mockito.internal.handler.MockHandlerImpl",
      "org.mockito.internal.invocation.MatchersBinder",
      "org.mockito.internal.stubbing.InvocationContainerImpl",
      "org.mockito.internal.verification.DefaultRegisteredInvocations",
      "org.mockito.internal.handler.NullResultGuardian",
      "org.mockito.internal.handler.InvocationNotifierHandler",
      "org.mockito.internal.creation.cglib.AcrossJVMSerializationFeature",
      "org.mockito.cglib.core.DefaultNamingPolicy",
      "org.mockito.internal.creation.cglib.MockitoNamingPolicy",
      "org.mockito.internal.creation.cglib.ClassImposterizer$1",
      "org.mockito.internal.creation.cglib.ClassImposterizer$2",
      "org.mockito.internal.creation.cglib.ClassImposterizer",
      "org.mockito.internal.creation.instance.ObjenesisInstantiator",
      "org.objenesis.ObjenesisBase",
      "org.objenesis.ObjenesisStd",
      "org.mockito.internal.configuration.GlobalConfiguration",
      "org.mockito.configuration.DefaultMockitoConfiguration",
      "org.mockito.internal.configuration.ClassPathLoader",
      "org.objenesis.strategy.BaseInstantiatorStrategy",
      "org.objenesis.strategy.StdInstantiatorStrategy",
      "org.mockito.internal.creation.instance.InstantiatorProvider",
      "org.mockito.internal.creation.cglib.MethodInterceptorFilter",
      "org.mockito.cglib.core.AbstractClassGenerator",
      "org.mockito.cglib.proxy.Enhancer$1",
      "org.mockito.cglib.core.AbstractClassGenerator$Source",
      "org.mockito.cglib.core.CollectionUtils",
      "org.mockito.cglib.core.TypeUtils",
      "org.mockito.cglib.core.Signature",
      "org.mockito.asm.Type",
      "org.mockito.cglib.core.KeyFactory$1",
      "org.mockito.cglib.core.KeyFactory$2",
      "org.mockito.cglib.core.KeyFactory",
      "org.mockito.cglib.core.KeyFactory$Generator",
      "org.mockito.cglib.core.DefaultGeneratorStrategy",
      "org.mockito.asm.ClassWriter",
      "org.mockito.cglib.core.DebuggingClassWriter",
      "org.mockito.asm.ByteVector",
      "org.mockito.asm.Item",
      "org.mockito.asm.ClassAdapter",
      "org.mockito.cglib.core.ClassEmitter",
      "org.mockito.cglib.core.ReflectUtils$1",
      "org.mockito.cglib.core.ReflectUtils$2",
      "org.mockito.cglib.core.ReflectUtils",
      "org.mockito.cglib.core.AbstractClassGenerator$1",
      "org.mockito.cglib.core.ClassInfo",
      "org.mockito.cglib.core.ClassEmitter$1",
      "org.mockito.cglib.core.EmitUtils$ArrayDelimiters",
      "org.mockito.cglib.core.EmitUtils",
      "org.mockito.asm.MethodWriter",
      "org.mockito.asm.Label",
      "org.mockito.cglib.core.Constants",
      "org.mockito.asm.MethodAdapter",
      "org.mockito.cglib.core.LocalVariablesSorter",
      "org.mockito.cglib.core.CodeEmitter",
      "org.mockito.cglib.core.LocalVariablesSorter$State",
      "org.mockito.cglib.core.MethodInfo",
      "org.mockito.cglib.core.CodeEmitter$State",
      "org.mockito.asm.Frame",
      "org.mockito.cglib.core.ClassEmitter$FieldInfo",
      "org.mockito.asm.FieldWriter",
      "org.mockito.asm.Edge",
      "org.mockito.cglib.core.EmitUtils$7",
      "org.mockito.cglib.core.Local",
      "org.mockito.cglib.core.EmitUtils$8",
      "org.mockito.cglib.core.EmitUtils$9",
      "org.mockito.cglib.core.DebuggingClassWriter$1",
      "org.mockito.asm.ClassReader",
      "org.mockito.cglib.core.ClassNameReader$EarlyExitException",
      "org.mockito.cglib.core.ClassNameReader",
      "org.mockito.cglib.core.ClassNameReader$1",
      "org.mockito.cglib.proxy.Enhancer",
      "org.mockito.internal.creation.cglib.ClassImposterizer$3",
      "org.mockito.internal.creation.util.SearchingClassLoader",
      "org.mockito.cglib.proxy.NoOpGenerator",
      "org.mockito.cglib.proxy.MethodInterceptorGenerator$1",
      "org.mockito.cglib.proxy.MethodInterceptorGenerator",
      "org.mockito.cglib.proxy.InvocationHandlerGenerator",
      "org.mockito.cglib.proxy.LazyLoaderGenerator",
      "org.mockito.cglib.proxy.DispatcherGenerator",
      "org.mockito.cglib.proxy.FixedValueGenerator",
      "org.mockito.cglib.proxy.CallbackInfo",
      "org.apache.spark.SparkConf",
      "scala.collection.convert.DecorateAsScala$$anonfun$asScalaSetConverter$1",
      "scala.collection.mutable.AbstractIterable",
      "scala.collection.mutable.AbstractSet",
      "scala.collection.convert.Wrappers$JSetWrapper",
      "scala.collection.mutable.SetLike$class",
      "scala.collection.mutable.Set$class",
      "org.apache.spark.util.Utils$$anonfun$getSystemProperties$1",
      "scala.collection.generic.MutableSetFactory",
      "scala.collection.mutable.Set$",
      "scala.collection.generic.GenSetFactory$$anon$1",
      "scala.collection.mutable.GrowingBuilder",
      "scala.collection.mutable.HashSet$",
      "scala.collection.mutable.HashSet",
      "scala.collection.mutable.FlatHashTable$HashUtils$class",
      "scala.collection.mutable.FlatHashTable$class",
      "scala.collection.mutable.FlatHashTable$",
      "scala.collection.TraversableLike$$anonfun$map$1",
      "scala.collection.convert.Wrappers$JIteratorWrapper",
      "scala.collection.TraversableOnce$$anonfun$toMap$1",
      "scala.collection.mutable.FlatHashTable$NullSentinel$",
      "org.apache.spark.SparkConf$$anonfun$loadFromSystemProperties$1",
      "scala.collection.TraversableLike$WithFilter",
      "org.apache.spark.SparkConf$$anonfun$loadFromSystemProperties$2",
      "scala.collection.TraversableLike$WithFilter$$anonfun$withFilter$1",
      "org.apache.spark.SparkConf$$anonfun$loadFromSystemProperties$3",
      "scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1",
      "org.apache.spark.SecurityManager",
      "org.apache.spark.internal.config.ConfigBuilder",
      "org.apache.spark.internal.config.TypedConfigBuilder",
      "org.apache.spark.internal.config.ConfigBuilder$$anonfun$stringConf$1",
      "org.apache.spark.internal.config.TypedConfigBuilder$$anonfun$$lessinit$greater$1",
      "org.apache.spark.internal.config.ConfigEntry",
      "org.apache.spark.internal.config.OptionalConfigEntry",
      "org.apache.spark.internal.config.OptionalConfigEntry$$anonfun$$lessinit$greater$1",
      "org.apache.spark.internal.config.OptionalConfigEntry$$anonfun$$lessinit$greater$2",
      "org.apache.spark.internal.config.ConfigEntry$",
      "org.apache.spark.internal.config.ConfigEntry$$anonfun$registerEntry$1",
      "org.apache.spark.internal.config.TypedConfigBuilder$$anonfun$createOptional$1",
      "org.apache.spark.internal.config.ConfigBuilder$$anonfun$booleanConf$1",
      "org.apache.spark.internal.config.TypedConfigBuilder$$anonfun$$lessinit$greater$1$$anonfun$apply$1",
      "scala.Option$$anonfun$orNull$1",
      "org.apache.spark.internal.config.ConfigHelpers$",
      "scala.StringContext$$anonfun$s$1",
      "scala.StringContext$",
      "org.apache.spark.internal.config.package$",
      "org.apache.spark.deploy.worker.Worker",
      "org.apache.spark.deploy.worker.Worker$",
      "org.apache.spark.serializer.SerializerInstance",
      "org.apache.spark.serializer.JavaSerializerInstance",
      "org.apache.spark.SecurityManager$"
    );
  }
}
