/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:00:34 GMT 2022
 */

package org.apache.spark.deploy;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.spark.deploy.DockerId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DockerId_ESTest extends DockerId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DockerId dockerId0 = new DockerId((String) null);
      String string0 = dockerId0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DockerId dockerId0 = new DockerId("org.apache.spark.deploy.DockerId");
      String string0 = dockerId0.toString();
      assertEquals("org.apache.spark.deploy.DockerId", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DockerId dockerId0 = new DockerId("org.apache.spark.deploy.DockerId");
      String string0 = dockerId0.id();
      assertEquals("org.apache.spark.deploy.DockerId", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DockerId dockerId0 = new DockerId("");
      String string0 = dockerId0.id();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DockerId dockerId0 = new DockerId((String) null);
      String string0 = dockerId0.id();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DockerId dockerId0 = new DockerId("");
      String string0 = dockerId0.toString();
      assertEquals("", string0);
  }
}
