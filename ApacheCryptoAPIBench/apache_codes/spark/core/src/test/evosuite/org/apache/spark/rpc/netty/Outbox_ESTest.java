/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:12:17 GMT 2022
 */

package org.apache.spark.rpc.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.spark.network.client.TransportClient;
import org.apache.spark.rpc.RpcAddress;
import org.apache.spark.rpc.netty.NettyRpcEnv;
import org.apache.spark.rpc.netty.Outbox;
import org.apache.spark.rpc.netty.OutboxMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.runtime.BoxedUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Outbox_ESTest extends Outbox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      outbox0.stop();
      boolean boolean0 = outbox0.org$apache$spark$rpc$netty$Outbox$$stopped();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      // Undeclared exception!
      try { 
        outbox0.send((OutboxMessage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.rpc.netty.Outbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = mock(ThreadPoolExecutor.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor1 = mock(ThreadPoolExecutor.class, new ViolatedAssumptionAnswer());
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      doReturn((ThreadPoolExecutor) null).when(nettyRpcEnv0).clientConnectionExecutor();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      OutboxMessage outboxMessage0 = mock(OutboxMessage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        outbox0.send(outboxMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.rpc.netty.Outbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      outbox0.address();
      assertFalse(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      outbox0.org$apache$spark$rpc$netty$Outbox$$closeClient();
      assertFalse(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, (RpcAddress) null);
      boolean boolean0 = outbox0.org$apache$spark$rpc$netty$Outbox$$stopped();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = mock(ThreadPoolExecutor.class, new ViolatedAssumptionAnswer());
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      doReturn((ThreadPoolExecutor) null).when(nettyRpcEnv0).clientConnectionExecutor();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      OutboxMessage outboxMessage0 = mock(OutboxMessage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        outbox0.send(outboxMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.rpc.netty.Outbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      Future<BoxedUnit> future0 = (Future<BoxedUnit>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(future0).toString();
      doReturn(false).when(future0).cancel(anyBoolean());
      outbox0.org$apache$spark$rpc$netty$Outbox$$connectFuture_$eq(future0);
      outbox0.stop();
      assertTrue(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      outbox0.stop();
      outbox0.stop();
      assertTrue(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadPoolExecutor threadPoolExecutor0 = mock(ThreadPoolExecutor.class, new ViolatedAssumptionAnswer());
      doReturn((Future) null).when(threadPoolExecutor0).submit(any(java.util.concurrent.Callable.class));
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      doReturn(threadPoolExecutor0).when(nettyRpcEnv0).clientConnectionExecutor();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rpcAddress0).toString();
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      OutboxMessage outboxMessage0 = mock(OutboxMessage.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outboxMessage0).toString();
      outbox0.send(outboxMessage0);
      assertFalse(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
      
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      outbox0.org$apache$spark$rpc$netty$Outbox$$handleNetworkFailure(throwable0);
      assertTrue(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      outbox0.stop();
      outbox0.org$apache$spark$rpc$netty$Outbox$$handleNetworkFailure((Throwable) null);
      assertTrue(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      Future<BoxedUnit> future0 = (Future<BoxedUnit>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(future0).toString();
      outbox0.org$apache$spark$rpc$netty$Outbox$$connectFuture_$eq(future0);
      // Undeclared exception!
      try { 
        outbox0.org$apache$spark$rpc$netty$Outbox$$handleNetworkFailure((Throwable) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, (RpcAddress) null);
      TransportClient transportClient0 = mock(TransportClient.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(transportClient0).toString();
      outbox0.org$apache$spark$rpc$netty$Outbox$$client_$eq(transportClient0);
      outbox0.org$apache$spark$rpc$netty$Outbox$$drainOutbox();
      assertFalse(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, rpcAddress0);
      Future<BoxedUnit> future0 = (Future<BoxedUnit>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(future0).toString();
      outbox0.org$apache$spark$rpc$netty$Outbox$$connectFuture_$eq(future0);
      outbox0.org$apache$spark$rpc$netty$Outbox$$drainOutbox();
      assertFalse(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      outbox0.stop();
      outbox0.org$apache$spark$rpc$netty$Outbox$$drainOutbox();
      assertTrue(outbox0.org$apache$spark$rpc$netty$Outbox$$stopped());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      NettyRpcEnv nettyRpcEnv0 = mock(NettyRpcEnv.class, new ViolatedAssumptionAnswer());
      Outbox outbox0 = new Outbox(nettyRpcEnv0, rpcAddress0);
      outbox0.stop();
      // Undeclared exception!
      try { 
        outbox0.send((OutboxMessage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.rpc.netty.Outbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      // Undeclared exception!
      try { 
        outbox0.org$apache$spark$rpc$netty$Outbox$$drainOutbox();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.rpc.netty.Outbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Outbox outbox0 = new Outbox((NettyRpcEnv) null, (RpcAddress) null);
      // Undeclared exception!
      try { 
        outbox0.org$apache$spark$rpc$netty$Outbox$$handleNetworkFailure((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.rpc.netty.Outbox", e);
      }
  }
}
