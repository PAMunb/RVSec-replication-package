/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:40:10 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.IndirectTaskResult;
import org.apache.spark.storage.BlockId;
import org.apache.spark.storage.BroadcastBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndirectTaskResult_ESTest extends IndirectTaskResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(blockId0).toString();
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>(blockId0, 0);
      BlockId blockId1 = indirectTaskResult0.copy$default$1();
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult1 = IndirectTaskResult.apply(blockId1, (-2505));
      boolean boolean0 = indirectTaskResult0.equals(indirectTaskResult1);
      assertEquals((-2505), indirectTaskResult1.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 911);
      int int0 = indirectTaskResult0.size();
      assertEquals(911, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>((BlockId) null, (-394));
      int int0 = indirectTaskResult0.size();
      assertEquals((-394), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, (-394));
      indirectTaskResult0.productElement(0);
      assertEquals((-394), indirectTaskResult0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 3316);
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult1 = indirectTaskResult0.copy((BlockId) null, 0);
      assertEquals(0, indirectTaskResult1.copy$default$2());
      assertEquals(3316, indirectTaskResult0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>(blockId0, 0);
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult1 = indirectTaskResult0.copy((BlockId) null, (-2021));
      assertEquals((-2021), indirectTaskResult1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 0);
      int int0 = indirectTaskResult0.copy$default$2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 3104);
      int int0 = indirectTaskResult0.copy$default$2();
      assertEquals(3104, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 0);
      indirectTaskResult0.canEqual((Object) null);
      assertEquals(0, indirectTaskResult0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 0);
      indirectTaskResult0.blockId();
      assertEquals(0, indirectTaskResult0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>((BlockId) null, 1);
      Object object0 = indirectTaskResult0.productElement(1);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(blockId0).toString();
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>(blockId0, 0);
      BlockId blockId1 = indirectTaskResult0.blockId();
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult1 = IndirectTaskResult.apply(blockId1, 0);
      indirectTaskResult1.productElement(0);
      assertEquals(0, indirectTaskResult1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>((BlockId) null, 2289);
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult1 = IndirectTaskResult.apply((BlockId) null, (-597));
      indirectTaskResult1.canEqual(indirectTaskResult0);
      assertEquals((-597), indirectTaskResult1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>((BlockId) null, (-5247));
      indirectTaskResult0.productIterator();
      assertEquals(2, indirectTaskResult0.productArity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 0);
      int int0 = indirectTaskResult0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>((BlockId) null, 25);
      IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>> indirectTaskResult1 = IndirectTaskResult.apply((BlockId) null, (-2077));
      boolean boolean0 = indirectTaskResult1.equals(indirectTaskResult0);
      assertFalse(boolean0);
      assertEquals((-2077), indirectTaskResult1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      doReturn("").when(blockId0).toString();
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>(blockId0, 0);
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult1 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>((BlockId) null, 0);
      boolean boolean0 = indirectTaskResult0.equals(indirectTaskResult1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(blockId0).toString();
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>(blockId0, 875);
      BlockId blockId1 = indirectTaskResult0.copy$default$1();
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult1 = IndirectTaskResult.apply(blockId1, 875);
      IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>> indirectTaskResult2 = IndirectTaskResult.apply((BlockId) null, 875);
      boolean boolean0 = indirectTaskResult2.equals(indirectTaskResult1);
      assertEquals(875, indirectTaskResult2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(blockId0).toString();
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply(blockId0, 1024);
      BlockId blockId1 = indirectTaskResult0.blockId();
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult1 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>(blockId1, 1024);
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult2 = IndirectTaskResult.apply(blockId1, 1024);
      boolean boolean0 = indirectTaskResult2.equals(indirectTaskResult1);
      assertTrue(boolean0);
      assertEquals(1024, indirectTaskResult2.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 20);
      boolean boolean0 = indirectTaskResult0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(20, indirectTaskResult0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>>((BlockId) null, (-889275714));
      boolean boolean0 = indirectTaskResult0.equals(indirectTaskResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>((BlockId) null, 1070);
      // Undeclared exception!
      try { 
        indirectTaskResult0.productElement(1070);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.IndirectTaskResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, 767);
      IndirectTaskResult.unapply(indirectTaskResult0);
      assertEquals(767, indirectTaskResult0.copy$default$2());
      assertEquals(767, indirectTaskResult0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, (-1));
      int int0 = indirectTaskResult0.copy$default$2();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>((BlockId) null, 7);
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult1 = indirectTaskResult0.copy((BlockId) null, 7);
      assertEquals(7, indirectTaskResult1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>>((BlockId) null, 5);
      indirectTaskResult0.hashCode();
      assertEquals(5, indirectTaskResult0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = new IndirectTaskResult<BroadcastBlockId>((BlockId) null, (-394));
      String string0 = indirectTaskResult0.toString();
      assertEquals("IndirectTaskResult(null,-394)", string0);
      assertEquals(2, indirectTaskResult0.productArity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, (-663));
      int int0 = indirectTaskResult0.productArity();
      assertEquals(2, int0);
      assertEquals((-663), indirectTaskResult0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>> indirectTaskResult0 = new IndirectTaskResult<IndirectTaskResult<BroadcastBlockId>>((BlockId) null, (-3606));
      BlockId blockId0 = indirectTaskResult0.copy$default$1();
      assertNull(blockId0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option<Tuple2<BlockId, Object>> option0 = IndirectTaskResult.unapply((IndirectTaskResult<Tuple2<BroadcastBlockId, BroadcastBlockId>>) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IndirectTaskResult<BroadcastBlockId> indirectTaskResult0 = IndirectTaskResult.apply((BlockId) null, (-3216));
      String string0 = indirectTaskResult0.productPrefix();
      assertEquals((-3216), indirectTaskResult0.size());
      assertEquals("IndirectTaskResult", string0);
  }
}
