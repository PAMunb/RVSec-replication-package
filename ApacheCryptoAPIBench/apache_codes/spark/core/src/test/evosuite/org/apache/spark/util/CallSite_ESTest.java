/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:35:06 GMT 2022
 */

package org.apache.spark.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.util.CallSite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CallSite_ESTest extends CallSite_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CallSite callSite0 = new CallSite("allSite.long", "");
      String string0 = callSite0.shortForm();
      assertEquals("allSite.long", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CallSite callSite0 = CallSite.apply("", "");
      String string0 = callSite0.shortForm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = callSite0.copy((String) null, (String) null);
      Object object0 = callSite1.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = callSite0.copy((String) null, (String) null);
      String string0 = callSite1.longForm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CallSite callSite0 = new CallSite("4-ga>;7", "4-ga>;7");
      String string0 = callSite0.longForm();
      assertEquals("4-ga>;7", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = callSite0.copy((String) null, (String) null);
      String string0 = callSite1.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CallSite callSite0 = new CallSite("scala.Product$class", "5V&]ai2Iy");
      String string0 = callSite0.copy$default$2();
      assertEquals("5V&]ai2Iy", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CallSite callSite0 = new CallSite((String) null, "");
      String string0 = callSite0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CallSite callSite0 = CallSite.apply("-nzP4U{v", "");
      String string0 = callSite0.copy$default$1();
      assertEquals("", callSite0.longForm());
      assertEquals("-nzP4U{v", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CallSite callSite0 = new CallSite("", "");
      boolean boolean0 = callSite0.canEqual("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CallSite callSite0 = new CallSite("scala.Product$class", "5V&]ai2Iy");
      Object object0 = callSite0.productElement(0);
      assertEquals("scala.Product$class", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CallSite callSite0 = new CallSite((String) null, "");
      int int0 = callSite0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      String string0 = callSite0.longForm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CallSite callSite0 = new CallSite((String) null, "");
      String string0 = callSite0.shortForm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CallSite callSite0 = new CallSite("scala.runtime.ScalaRunTime$$anon$1", "{aKq~zBK6");
      CallSite callSite1 = callSite0.copy("scala.runtime.ScalaRunTime$$anon$1", "scala.runtime.ScalaRunTime$$anon$1");
      boolean boolean0 = callSite0.equals(callSite1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CallSite callSite0 = CallSite.apply("callSite.short", "callSite.short");
      CallSite callSite1 = callSite0.copy("callSite.short", (String) null);
      boolean boolean0 = callSite1.equals(callSite0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = new CallSite("", "");
      boolean boolean0 = callSite0.equals(callSite1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = new CallSite((String) null, (String) null);
      boolean boolean0 = callSite1.equals(callSite0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = CallSite.apply("NYd:7HUhs", "NYd:7HUhs");
      boolean boolean0 = callSite0.equals(callSite1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      boolean boolean0 = callSite0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      boolean boolean0 = callSite0.equals(callSite0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      // Undeclared exception!
      try { 
        callSite0.productElement(740);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000011
         //
         verifyException("org.apache.spark.util.CallSite", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      Option<Tuple2<String, String>> option0 = CallSite.unapply(callSite0);
      assertEquals("Some", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      String string0 = callSite0.toString();
      assertEquals("CallSite(,)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      callSite0.productIterator();
      assertEquals(2, callSite0.productArity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      CallSite callSite1 = callSite0.copy((String) null, (String) null);
      CallSite callSite2 = callSite0.copy((String) null, (String) null);
      boolean boolean0 = callSite1.equals(callSite2);
      assertTrue(boolean0);
      assertFalse(callSite2.equals((Object)callSite0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      boolean boolean0 = callSite0.canEqual(callSite0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      String string0 = callSite0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      String string0 = callSite0.productPrefix();
      assertEquals("CallSite", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CallSite callSite0 = new CallSite("", "");
      String string0 = callSite0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option<Tuple2<String, String>> option0 = CallSite.unapply((CallSite) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CallSite callSite0 = CallSite.empty();
      callSite0.hashCode();
      assertEquals(2, callSite0.productArity());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = CallSite.LONG_FORM();
      assertEquals("callSite.long", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = CallSite.SHORT_FORM();
      assertEquals("callSite.short", string0);
  }
}
