/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:53:08 GMT 2022
 */

package org.apache.spark.status.api.v1;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.spark.status.api.v1.ShuffleWriteMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShuffleWriteMetrics_ESTest extends ShuffleWriteMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics(1952L, 1952L, 1952L);
      long long0 = shuffleWriteMetrics0.writeTime();
      assertEquals(1952L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics((-1L), (-1L), 1L);
      long long0 = shuffleWriteMetrics0.writeTime();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics(0L, 0L, 0L);
      long long0 = shuffleWriteMetrics0.recordsWritten();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics(1952L, 1952L, 1952L);
      long long0 = shuffleWriteMetrics0.recordsWritten();
      assertEquals(1952L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics(1L, 1L, 1L);
      long long0 = shuffleWriteMetrics0.bytesWritten();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics((-1L), (-1L), 1L);
      long long0 = shuffleWriteMetrics0.bytesWritten();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics(0L, 0L, 0L);
      long long0 = shuffleWriteMetrics0.writeTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics(0L, 0L, 0L);
      long long0 = shuffleWriteMetrics0.bytesWritten();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ShuffleWriteMetrics shuffleWriteMetrics0 = new ShuffleWriteMetrics((-339L), (-339L), (-339L));
      long long0 = shuffleWriteMetrics0.recordsWritten();
      assertEquals((-339L), long0);
  }
}
