/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:56:34 GMT 2022
 */

package org.apache.spark.status.api.v1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.status.api.v1.ErrorWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ErrorWrapper_ESTest extends ErrorWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply((String) null);
      String string0 = errorWrapper0.s();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("");
      String string0 = errorWrapper0.s();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper((String) null);
      Object object0 = errorWrapper0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply((String) null);
      String string0 = errorWrapper0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("");
      String string0 = errorWrapper0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper("scala.Predef$StringAdd");
      boolean boolean0 = errorWrapper0.canEqual(errorWrapper0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper("scala.Enumeration");
      Object object0 = errorWrapper0.productElement(0);
      assertEquals("scala.Enumeration", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("3j[8&z^@^tL*N#zcYi;");
      boolean boolean0 = errorWrapper0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("CfM");
      String string0 = errorWrapper0.productPrefix();
      assertEquals("ErrorWrapper", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper("scala.Enumeration");
      int int0 = errorWrapper0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("GO1WHMoAs4?'");
      String string0 = errorWrapper0.s();
      assertEquals("GO1WHMoAs4?'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("GO1WHMoAs4?'");
      errorWrapper0.productIterator();
      assertEquals(1, errorWrapper0.productArity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper("'");
      ErrorWrapper errorWrapper1 = errorWrapper0.copy("");
      boolean boolean0 = errorWrapper0.equals(errorWrapper1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper((String) null);
      ErrorWrapper errorWrapper1 = errorWrapper0.copy((String) null);
      boolean boolean0 = errorWrapper0.equals(errorWrapper1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply((String) null);
      ErrorWrapper errorWrapper1 = errorWrapper0.copy("None.get");
      boolean boolean0 = errorWrapper0.equals(errorWrapper1);
      assertFalse(errorWrapper1.equals((Object)errorWrapper0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorWrapper errorWrapper0 = new ErrorWrapper(".C#L,%<wbvhiZ");
      boolean boolean0 = errorWrapper0.equals(".C#L,%<wbvhiZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply(".C#L,%<wbvhiZ");
      boolean boolean0 = errorWrapper0.equals(errorWrapper0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply(".C#L,<wbvhwM@");
      // Undeclared exception!
      try { 
        errorWrapper0.productElement((-411));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.status.api.v1.ErrorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply(".C#L,<wbvhM@");
      Option<String> option0 = ErrorWrapper.unapply(errorWrapper0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<String, ErrorWrapper> function1_0 = ErrorWrapper.andThen((Function1<ErrorWrapper, ErrorWrapper>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply(".C#L,<wbvhM@");
      String string0 = errorWrapper0.copy$default$1();
      assertEquals(".C#L,<wbvhM@", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply("ErrorWrapper");
      errorWrapper0.hashCode();
      assertEquals(1, errorWrapper0.productArity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Function1<ErrorWrapper, ErrorWrapper> function1_0 = ErrorWrapper.compose((Function1<ErrorWrapper, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option<String> option0 = ErrorWrapper.unapply((ErrorWrapper) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply(".C#L,%<wbvhiZ");
      ErrorWrapper errorWrapper1 = errorWrapper0.copy(".C#L,%<wbvhiZ");
      boolean boolean0 = errorWrapper0.equals(errorWrapper1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorWrapper errorWrapper0 = ErrorWrapper.apply(".C#L,<wbvhM@");
      String string0 = errorWrapper0.toString();
      assertEquals("ErrorWrapper(.C#L,<wbvhM@)", string0);
  }
}
