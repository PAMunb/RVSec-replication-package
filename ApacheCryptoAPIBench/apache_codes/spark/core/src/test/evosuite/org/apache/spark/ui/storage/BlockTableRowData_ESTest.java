/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:03:45 GMT 2022
 */

package org.apache.spark.ui.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.ui.storage.BlockTableRowData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockTableRowData_ESTest extends BlockTableRowData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", (String) null, 4245L, 4245L, "");
      String string0 = blockTableRowData0.storageLevel();
      assertEquals(4245L, blockTableRowData0.diskUsed());
      assertNull(string0);
      assertEquals(4245L, blockTableRowData0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("Xr4;", "", (-1314L), (-1314L), "Xr4;");
      String string0 = blockTableRowData0.storageLevel();
      assertEquals("", string0);
      assertEquals("Xr4;", blockTableRowData0.blockName());
      assertEquals((-1314L), blockTableRowData0.memoryUsed());
      assertEquals("Xr4;", blockTableRowData0.executors());
      assertEquals((-1314L), blockTableRowData0.diskUsed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData((String) null, (String) null, 2754L, 0L, (String) null);
      Object object0 = blockTableRowData0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "p@%#O|}+RZ*J#", (-1533L), (-1533L), "");
      BlockTableRowData blockTableRowData1 = blockTableRowData0.copy("u", "y!ak rHPf95t", 0L, (-1533L), "");
      long long0 = blockTableRowData1.memoryUsed();
      assertEquals((-1533L), blockTableRowData0.memoryUsed());
      assertEquals((-1533L), blockTableRowData1.copy$default$4());
      assertEquals("", blockTableRowData1.executors());
      assertEquals("p@%#O|}+RZ*J#", blockTableRowData0.storageLevel());
      assertEquals("", blockTableRowData0.blockName());
      assertEquals(0L, long0);
      assertEquals((-1533L), blockTableRowData0.copy$default$4());
      assertEquals("y!ak rHPf95t", blockTableRowData1.storageLevel());
      assertEquals("u", blockTableRowData1.copy$default$1());
      assertEquals("", blockTableRowData0.executors());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("9j8u%i\"z6h3", "9j8u%i\"z6h3", (-2607L), (-2607L), "9j8u%i\"z6h3");
      long long0 = blockTableRowData0.memoryUsed();
      assertEquals((-2607L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("org.apache.spark.ui.storage.BlockTableRowData", "Fb7iw=hD", 1566L, 1L, (String) null);
      String string0 = blockTableRowData0.executors();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "\":C4mjsxPT=Vr", 1214L, (-4443L), "");
      BlockTableRowData blockTableRowData1 = blockTableRowData0.copy("h)2", "", (-4443L), 0L, "\":C4mjsxPT=Vr");
      String string0 = blockTableRowData1.executors();
      assertEquals("", blockTableRowData1.copy$default$2());
      assertEquals("h)2", blockTableRowData1.blockName());
      assertEquals(0L, blockTableRowData1.copy$default$4());
      assertEquals(1214L, blockTableRowData0.memoryUsed());
      assertEquals("\":C4mjsxPT=Vr", blockTableRowData0.storageLevel());
      assertEquals((-4443L), blockTableRowData0.copy$default$4());
      assertEquals("\":C4mjsxPT=Vr", string0);
      assertEquals((-4443L), blockTableRowData1.copy$default$3());
      assertEquals("", blockTableRowData0.copy$default$1());
      assertEquals("", blockTableRowData0.executors());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("*Zi@b^8B!y\"`'", "*Zi@b^8B!y\"`'", 442L, 0L, "*Zi@b^8B!y\"`'");
      long long0 = blockTableRowData0.diskUsed();
      assertEquals(442L, blockTableRowData0.memoryUsed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "\":C4mjsxPT=Vr", 1214L, (-4443L), "");
      long long0 = blockTableRowData0.diskUsed();
      assertEquals((-4443L), long0);
      assertEquals("", blockTableRowData0.copy$default$1());
      assertEquals("\":C4mjsxPT=Vr", blockTableRowData0.storageLevel());
      assertEquals(1214L, blockTableRowData0.memoryUsed());
      assertEquals("", blockTableRowData0.executors());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "@(6A%g5NggP+Qs[/i,", (-971L), 2369L, "org.apache.spark.ui.storage.BlockTableRowData$");
      BlockTableRowData blockTableRowData1 = blockTableRowData0.copy((String) null, "HF!3'>$VG", 908L, 2369L, (String) null);
      String string0 = blockTableRowData1.copy$default$5();
      assertEquals(2369L, blockTableRowData1.diskUsed());
      assertNull(string0);
      assertEquals(908L, blockTableRowData1.memoryUsed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("V", "V", (-2043L), (-1877L), "-{)");
      String string0 = blockTableRowData0.copy$default$5();
      assertEquals("-{)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData((String) null, (String) null, 2754L, 0L, (String) null);
      long long0 = blockTableRowData0.copy$default$4();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("Z#uWa:'Rq42o#+T", "BlockTableRowData", 0L, 1L, "");
      long long0 = blockTableRowData0.copy$default$4();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("<d", "", 0L, 3023L, "V1M1D2{7@#ziH;glr");
      long long0 = blockTableRowData0.copy$default$3();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("9j8u%i\"z6h3", "9j8u%i\"z6h3", (-2607L), (-2607L), "9j8u%i\"z6h3");
      long long0 = blockTableRowData0.copy$default$3();
      assertEquals((-2607L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData((String) null, (String) null, 2754L, 0L, (String) null);
      String string0 = blockTableRowData0.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("9j8u%i\"z6h3", "9j8u%i\"z6h3", (-2607L), (-2607L), "9j8u%i\"z6h3");
      String string0 = blockTableRowData0.copy$default$2();
      assertEquals("9j8u%i\"z6h3", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData((String) null, (String) null, 2754L, 0L, (String) null);
      String string0 = blockTableRowData0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", (-1L), (-1L), ")");
      String string0 = blockTableRowData0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("?8)OmT}", "?8)OmT}", 0L, 2028L, "?8)OmT}");
      blockTableRowData0.canEqual(blockTableRowData0);
      assertEquals(2028L, blockTableRowData0.copy$default$4());
      assertEquals(0L, blockTableRowData0.memoryUsed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("Qi6' 98,W~", "Qi6' 98,W~", 1L, 1L, "Qi6' 98,W~");
      BlockTableRowData blockTableRowData1 = blockTableRowData0.copy((String) null, "j u", 1097L, 1L, (String) null);
      String string0 = blockTableRowData1.blockName();
      assertNull(string0);
      assertEquals(1097L, blockTableRowData1.memoryUsed());
      assertEquals(1L, blockTableRowData1.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "p@%#O|}+RZ*J#", (-1533L), (-1533L), "");
      BlockTableRowData blockTableRowData1 = blockTableRowData0.copy("u", "y!ak rHPf95t", 0L, (-1533L), "");
      String string0 = blockTableRowData1.blockName();
      assertEquals("p@%#O|}+RZ*J#", blockTableRowData0.storageLevel());
      assertEquals((-1533L), blockTableRowData1.copy$default$4());
      assertEquals(0L, blockTableRowData1.memoryUsed());
      assertEquals((-1533L), blockTableRowData0.diskUsed());
      assertEquals("", blockTableRowData1.copy$default$5());
      assertEquals("u", string0);
      assertEquals("", blockTableRowData0.executors());
      assertEquals((-1533L), blockTableRowData0.copy$default$3());
      assertEquals("y!ak rHPf95t", blockTableRowData1.copy$default$2());
      assertEquals("", blockTableRowData0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "\":C4mjsxPT=Vr", 1214L, (-4443L), "");
      Object object0 = blockTableRowData0.productElement(0);
      assertEquals("", object0);
      assertEquals("\":C4mjsxPT=Vr", blockTableRowData0.copy$default$2());
      assertEquals((-4443L), blockTableRowData0.diskUsed());
      assertEquals("", blockTableRowData0.copy$default$5());
      assertEquals(1214L, blockTableRowData0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("O_<.},@t", "", 0L, 0L, (String) null);
      Object object0 = blockTableRowData0.productElement(2);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("Z#uWa:'Rq42o#+T", "BlockTableRowData", 0L, 1L, "");
      Object object0 = blockTableRowData0.productElement(3);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("1H<4c.N^T`E>y3fYhb", "Y0qz", 630L, 630L, "1H<4c.N^T`E>y3fYhb");
      Object object0 = blockTableRowData0.productElement(4);
      assertEquals("1H<4c.N^T`E>y3fYhb", object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply(")", "", (-1L), (-1L), "");
      Object object0 = blockTableRowData0.productElement(1);
      assertEquals((-1L), blockTableRowData0.memoryUsed());
      assertEquals(")", blockTableRowData0.blockName());
      assertEquals("", blockTableRowData0.executors());
      assertEquals((-1L), blockTableRowData0.diskUsed());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", 0L, 509L, ",)");
      long long0 = blockTableRowData0.diskUsed();
      assertEquals(509L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", 1L, (-4L), "");
      long long0 = blockTableRowData0.memoryUsed();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "p@%#O|}+RZ*J#", (-1533L), (-1533L), "");
      String string0 = blockTableRowData0.storageLevel();
      assertEquals("", blockTableRowData0.copy$default$1());
      assertEquals((-1533L), blockTableRowData0.diskUsed());
      assertEquals("", blockTableRowData0.copy$default$5());
      assertEquals("p@%#O|}+RZ*J#", string0);
      assertEquals((-1533L), blockTableRowData0.memoryUsed());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "\":C4mjsxPT=Vr", 1214L, (-4443L), "");
      String string0 = blockTableRowData0.blockName();
      assertEquals(1214L, blockTableRowData0.copy$default$3());
      assertEquals("", blockTableRowData0.copy$default$5());
      assertEquals("", string0);
      assertEquals((-4443L), blockTableRowData0.diskUsed());
      assertEquals("\":C4mjsxPT=Vr", blockTableRowData0.storageLevel());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", 1L, (-4L), "");
      String string0 = blockTableRowData0.productPrefix();
      assertEquals("BlockTableRowData", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("3", "3", (-1L), (-1L), "3");
      blockTableRowData0.productIterator();
      assertEquals((-1L), blockTableRowData0.memoryUsed());
      assertEquals(5, blockTableRowData0.productArity());
      assertEquals((-1L), blockTableRowData0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("tail of empty list", "tail of empty list", 1L, 1L, "tail of empty list");
      int int0 = blockTableRowData0.productArity();
      assertEquals(1L, blockTableRowData0.memoryUsed());
      assertEquals(5, int0);
      assertEquals(1L, blockTableRowData0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("2", "2", 908L, 908L, "2");
      boolean boolean0 = blockTableRowData0.equals("2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("80]sEuhTaRj3'id", "80]sEuhTaRj3'id", 0L, 0L, "80]sEuhTaRj3'id");
      boolean boolean0 = blockTableRowData0.equals(blockTableRowData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("A[^BiR$jjizX", "A[^BiR$jjizX", 1535L, 1535L, "A[^BiR$jjizX");
      // Undeclared exception!
      try { 
        blockTableRowData0.productElement(15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.ui.storage.BlockTableRowData", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", (-16L), (-16L), "");
      BlockTableRowData.unapply(blockTableRowData0);
      assertEquals((-16L), blockTableRowData0.copy$default$4());
      assertEquals((-16L), blockTableRowData0.memoryUsed());
      assertEquals((-16L), blockTableRowData0.diskUsed());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("3", "3", (-1L), (-1L), "3");
      long long0 = blockTableRowData0.copy$default$4();
      assertEquals((-1L), blockTableRowData0.copy$default$3());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "", 908L, 908L, "");
      blockTableRowData0.hashCode();
      assertEquals(908L, blockTableRowData0.copy$default$4());
      assertEquals(908L, blockTableRowData0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("Jb,EBV+", "Jb,EBV+", 1476L, 1476L, "");
      long long0 = blockTableRowData0.copy$default$3();
      assertEquals(1476L, long0);
      assertEquals("Jb,EBV+", blockTableRowData0.blockName());
      assertEquals("Jb,EBV+", blockTableRowData0.storageLevel());
      assertEquals("", blockTableRowData0.copy$default$5());
      assertEquals(1476L, blockTableRowData0.diskUsed());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Function1<String, Function1<String, Function1<Object, Function1<Object, Function1<String, BlockTableRowData>>>>> function1_0 = BlockTableRowData.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", 0L, 509L, ",)");
      String string0 = blockTableRowData0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Function1<Tuple5<String, String, Object, Object, String>, BlockTableRowData> function1_0 = BlockTableRowData.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option<Tuple5<String, String, Object, Object, String>> option0 = BlockTableRowData.unapply((BlockTableRowData) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("org.apache.ipark`ui.storage.BlockTableRowDat$", "org.apache.ipark`ui.storage.BlockTableRowDat$", 0L, 0L, "org.apache.ipark`ui.storage.BlockTableRowDat$");
      boolean boolean0 = blockTableRowData0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = new BlockTableRowData("", "", 908L, 1536L, "");
      String string0 = blockTableRowData0.copy$default$5();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("tail of empty list", "tail of empty list", 1L, 1L, "tail of empty list");
      blockTableRowData0.copy$default$1();
      assertEquals(1L, blockTableRowData0.copy$default$4());
      assertEquals(1L, blockTableRowData0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "", 1541L, 1541L, "");
      String string0 = blockTableRowData0.toString();
      assertEquals("BlockTableRowData(,,1541,1541,)", string0);
      assertEquals(5, blockTableRowData0.productArity());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BlockTableRowData blockTableRowData0 = BlockTableRowData.apply("", "", 1541L, 1541L, "");
      blockTableRowData0.executors();
      assertEquals(1541L, blockTableRowData0.copy$default$4());
      assertEquals(1541L, blockTableRowData0.memoryUsed());
  }
}
