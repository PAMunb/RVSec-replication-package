/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:53:37 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.storage.StorageLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StorageLevel_ESTest extends StorageLevel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel0 = StorageLevel.fromString("NONE");
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-29), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-29), storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(7, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(13, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertFalse(storageLevel0.isValid());
      assertEquals(7, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel1 = StorageLevel.fromString("MEMORY_AND_DISK_2");
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(35, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(3, storageLevel1.toInt());
      assertEquals(35, storageLevel1.replication());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useDisk());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(0 replicas)", string0);
      assertNotNull(string0);
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_SER();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(4, storageLevel1.toInt());
      assertEquals(0, storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      boolean boolean0 = storageLevel0.equals(storageLevel0);
      assertTrue(boolean0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_SER();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useDisk());
      assertEquals(4, storageLevel1.toInt());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK_SER();
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertTrue(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel2.toInt());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.deserialized());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(0, storageLevel2.replication());
      assertTrue(storageLevel2.useMemory());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertEquals(7, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.NONE();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.deserialized());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_ONLY();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(0, storageLevel2.toInt());
      assertEquals(0, storageLevel2.replication());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel1 = StorageLevel.apply(false, false, false, 16);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.deserialized());
      assertEquals(16, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(0, storageLevel1.toInt());
      assertEquals(16, storageLevel1.replication());
      
      StorageLevel storageLevel2 = storageLevel1.clone();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertTrue(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel1.deserialized());
      assertEquals(16, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(0, storageLevel1.toInt());
      assertEquals(16, storageLevel1.replication());
      assertEquals(16, storageLevel2.replication());
      assertFalse(storageLevel2.deserialized());
      assertEquals(16, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertEquals(0, storageLevel2.toInt());
      
      String string0 = storageLevel0.toString();
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals("StorageLevel(disk, memory, 0 replicas)", string0);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotNull(string0);
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_replication_$eq(788);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(788, storageLevel1.replication());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(788, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.toInt());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("F Z~&O[\"rxd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: F Z~&O[\"rxd
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(9, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(12, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      
      boolean boolean0 = storageLevel0.equals(storageLevel0);
      assertTrue(boolean0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(9, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      
      StorageLevel storageLevel1 = StorageLevel.OFF_HEAP();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.isValid());
      assertEquals(15, storageLevel1.toInt());
      assertTrue(storageLevel1.useDisk());
      assertEquals(41, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(41, storageLevel1.replication());
      
      StorageLevel storageLevel2 = StorageLevel.apply(true, true, false, (-3250));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.deserialized());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals((-3250), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.useDisk());
      assertEquals((-3250), storageLevel2.replication());
      assertTrue(storageLevel2.useMemory());
      assertEquals(12, storageLevel2.toInt());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.isValid());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_AND_DISK_2();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertTrue(storageLevel3.deserialized());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      assertTrue(storageLevel3.useOffHeap());
      assertFalse(storageLevel3.useDisk());
      assertEquals(1, storageLevel3.apply$default$4());
      assertEquals(3, storageLevel3.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel3.memoryMode());
      assertEquals(35, storageLevel3.replication());
      assertEquals(35, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel1.writeExternal(objectOutput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel2);
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.isValid());
      assertEquals(15, storageLevel1.toInt());
      assertTrue(storageLevel1.useDisk());
      assertEquals(41, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(41, storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals(13, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)35, (byte)35).when(objectInput0).readByte();
      storageLevel0.readExternal(objectInput0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertEquals(35, storageLevel0.replication());
      assertEquals(35, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(3, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = StorageLevel.fromString("MEMORY_AND_DISK");
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      
      StorageLevel storageLevel2 = StorageLevel.apply(false, true, true, 37);
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(37, storageLevel2.replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(5, storageLevel2.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertTrue(storageLevel2.deserialized());
      assertFalse(storageLevel2.useOffHeap());
      assertTrue(storageLevel2.isValid());
      assertEquals(37, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.useMemory());
      
      boolean boolean0 = storageLevel1.equals((Object) null);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(boolean0);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_AND_DISK_2();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertEquals(35, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel3.apply$default$4());
      assertTrue(storageLevel3.useOffHeap());
      assertFalse(storageLevel3.useDisk());
      assertEquals(3, storageLevel3.toInt());
      assertEquals(35, storageLevel3.replication());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      assertTrue(storageLevel3.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel3.memoryMode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-29), storageLevel0.replication());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.replication());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals((-29), storageLevel0.replication());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      
      int int0 = storageLevel0.toInt();
      assertEquals(5, int0);
      assertEquals((-29), storageLevel0.replication());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.isValid());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-29), storageLevel0.replication());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.deserialized());
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(12, storageLevel1.toInt());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(12, storageLevel0.toInt());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("I|/)QC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: I|/)QC
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, true, true, false, 0);
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      
      boolean boolean0 = storageLevel0.useOffHeap();
      assertTrue(boolean0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-1), (byte) (-1)).when(objectInput0).readByte();
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-1), storageLevel1.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useDisk());
      assertEquals(15, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-1), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel1.writeExternal(objectOutput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-1), storageLevel1.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useDisk());
      assertEquals(15, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-1), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-1), storageLevel1.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useDisk());
      assertEquals(15, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-1), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertEquals((-1), storageLevel1.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-1), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK_2();
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.replication());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(0, storageLevel2.toInt());
      
      StorageLevel storageLevel3 = StorageLevel.DISK_ONLY();
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotNull(storageLevel3);
      assertEquals(0, storageLevel3.replication());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(5, storageLevel3.toInt());
      assertFalse(storageLevel3.useDisk());
      assertTrue(storageLevel3.deserialized());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("Yarn Local dirs can't be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: Yarn Local dirs can't be empty
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.fromString("DISK_ONLY");
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.deserialized());
      assertEquals(41, storageLevel0.replication());
      assertEquals(11, storageLevel0.toInt());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)39, (byte)10).when(objectInput0).readByte();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertTrue(storageLevel0.deserialized());
      assertEquals(41, storageLevel0.replication());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(10, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.deserialized());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(7, storageLevel1.toInt());
      assertEquals(10, storageLevel1.replication());
      assertEquals(1, storageLevel1.apply$default$4());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(15, int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.deserialized());
      assertEquals(41, storageLevel0.replication());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, int0);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      
      int int1 = StorageLevel.apply$default$4();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_replication_$eq((-1419));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals((-1419), storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-1419), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(7, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.deserialized());
      assertEquals(41, storageLevel0.replication());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_ONLY_2();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.isValid());
      assertEquals((-29), storageLevel2.replication());
      assertEquals(5, storageLevel2.toInt());
      assertFalse(storageLevel2.useDisk());
      assertTrue(storageLevel2.deserialized());
      assertTrue(storageLevel2.useMemory());
      assertEquals((-29), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals((-889275715), storageLevel2.replication());
      assertEquals((-889275715), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel3 = StorageLevel.apply(false, false, false, false, 1);
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotNull(storageLevel3);
      assertEquals(1, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel3.toInt());
      assertEquals(1, storageLevel3.replication());
      assertFalse(storageLevel3.deserialized());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      assertFalse(storageLevel3.useDisk());
      
      StorageLevel storageLevel4 = StorageLevel.apply(false, false, true, 0);
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertNotSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel1);
      assertNotNull(storageLevel4);
      assertEquals(1, storageLevel4.apply$default$4());
      assertFalse(storageLevel4.useDisk());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel4.replication());
      assertEquals(1, storageLevel4.toInt());
      assertFalse(storageLevel4.isValid());
      assertFalse(storageLevel4.useOffHeap());
      assertTrue(storageLevel4.deserialized());
      assertFalse(storageLevel4.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      
      int int2 = StorageLevel.apply$default$4();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      MemoryMode memoryMode0 = storageLevel3.memoryMode();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel4));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel1);
      assertEquals(1, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel3.toInt());
      assertEquals(1, storageLevel3.replication());
      assertFalse(storageLevel3.deserialized());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      assertFalse(storageLevel3.useDisk());
      
      int int3 = StorageLevel.apply$default$4();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER();
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(false);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      
      String string0 = storageLevel0.description();
      assertEquals("Memory Serialized 0x Replicated", string0);
      assertNotNull(string0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: 
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.fromString("MEMORY_AND_DISK");
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(7, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("System.err");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: System.err
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      
      // Undeclared exception!
      try { 
        storageLevel0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.fromString("MEMORY_ONLY");
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(7, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(7, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.replication());
      assertTrue(storageLevel2.deserialized());
      assertTrue(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      assertEquals(7, storageLevel2.toInt());
      
      String string0 = storageLevel2.toString();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertEquals("StorageLevel(memory, offheap, deserialized, 0 replicas)", string0);
      assertSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(string0);
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.replication());
      assertTrue(storageLevel2.deserialized());
      assertTrue(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      assertEquals(7, storageLevel2.toInt());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertTrue(storageLevel3.deserialized());
      assertEquals(9, storageLevel3.toInt());
      assertTrue(storageLevel3.useDisk());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(0, storageLevel3.replication());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      
      StorageLevel storageLevel4 = StorageLevel.MEMORY_AND_DISK();
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertNotSame(storageLevel4, storageLevel1);
      assertNotSame(storageLevel4, storageLevel3);
      assertSame(storageLevel4, storageLevel0);
      assertSame(storageLevel4, storageLevel2);
      assertNotNull(storageLevel4);
      assertEquals(0, storageLevel4.replication());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel4.deserialized());
      assertTrue(storageLevel4.useOffHeap());
      assertTrue(storageLevel4.useMemory());
      assertFalse(storageLevel4.useDisk());
      assertEquals(1, storageLevel4.apply$default$4());
      assertFalse(storageLevel4.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel4.memoryMode());
      assertEquals(7, storageLevel4.toInt());
      
      StorageLevel storageLevel5 = StorageLevel.NONE();
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotNull(storageLevel5);
      assertEquals(1, storageLevel5.apply$default$4());
      assertFalse(storageLevel5.useDisk());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertFalse(storageLevel5.useOffHeap());
      assertFalse(storageLevel5.useMemory());
      assertEquals(1, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel5.replication());
      assertEquals(0, storageLevel5.toInt());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel3.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel4));
      assertFalse(storageLevel3.equals((Object)storageLevel5));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel5);
      assertNotSame(storageLevel3, storageLevel0);
      assertTrue(storageLevel3.deserialized());
      assertEquals(9, storageLevel3.toInt());
      assertTrue(storageLevel3.useDisk());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(0, storageLevel3.replication());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      
      storageLevel5.writeExternal(objectOutput0);
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel2);
      assertEquals(1, storageLevel5.apply$default$4());
      assertFalse(storageLevel5.useDisk());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertFalse(storageLevel5.useOffHeap());
      assertFalse(storageLevel5.useMemory());
      assertEquals(1, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel5.replication());
      assertEquals(0, storageLevel5.toInt());
      
      StorageLevel storageLevel6 = storageLevel1.clone();
      assertFalse(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel6.equals((Object)storageLevel0));
      assertFalse(storageLevel6.equals((Object)storageLevel2));
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertFalse(storageLevel6.equals((Object)storageLevel4));
      assertTrue(storageLevel6.equals((Object)storageLevel1));
      assertFalse(storageLevel6.equals((Object)storageLevel5));
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel5);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel6, storageLevel0);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotSame(storageLevel6, storageLevel3);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel5);
      assertNotNull(storageLevel6);
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel6.useMemory());
      assertEquals(1, storageLevel6.apply$default$4());
      assertFalse(storageLevel6.useOffHeap());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertEquals(0, storageLevel6.replication());
      assertFalse(storageLevel6.isValid());
      assertTrue(storageLevel6.deserialized());
      assertEquals(5, storageLevel6.toInt());
      assertFalse(storageLevel6.useDisk());
      
      storageLevel6.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertTrue(storageLevel1.equals((Object)storageLevel6));
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel6.equals((Object)storageLevel0));
      assertFalse(storageLevel6.equals((Object)storageLevel2));
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertFalse(storageLevel6.equals((Object)storageLevel4));
      assertTrue(storageLevel6.equals((Object)storageLevel1));
      assertFalse(storageLevel6.equals((Object)storageLevel5));
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel5);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel6, storageLevel0);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotSame(storageLevel6, storageLevel3);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel5);
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel6.useMemory());
      assertEquals(1, storageLevel6.apply$default$4());
      assertFalse(storageLevel6.useOffHeap());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertEquals(0, storageLevel6.replication());
      assertFalse(storageLevel6.isValid());
      assertTrue(storageLevel6.deserialized());
      assertEquals(5, storageLevel6.toInt());
      assertFalse(storageLevel6.useDisk());
      
      MemoryMode memoryMode0 = storageLevel3.memoryMode();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel6));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel4));
      assertFalse(storageLevel3.equals((Object)storageLevel5));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel6);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel5);
      assertNotSame(storageLevel3, storageLevel0);
      assertTrue(storageLevel3.deserialized());
      assertEquals(9, storageLevel3.toInt());
      assertTrue(storageLevel3.useDisk());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(0, storageLevel3.replication());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      
      MemoryMode memoryMode1 = storageLevel1.memoryMode();
      assertFalse(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertTrue(storageLevel1.equals((Object)storageLevel6));
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertEquals(MemoryMode.ON_HEAP, memoryMode1);
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel5);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel0);
      assertSame(memoryMode1, memoryMode0);
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, true, 2981);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      
      boolean boolean0 = storageLevel0.equals(storageLevel0);
      assertTrue(boolean0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals((-29), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals((-29), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-29), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-29), storageLevel1.replication());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals((-889275715), storageLevel0.replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq((-29));
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals((-29), storageLevel0.replication());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals((-29), storageLevel0.replication());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      
      int int0 = storageLevel0.toInt();
      assertEquals(5, int0);
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals((-29), storageLevel0.replication());
      assertEquals((-29), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_SER();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(4, storageLevel1.toInt());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      int int0 = 3;
      StorageLevel storageLevel0 = new StorageLevel(false, false, false, false, 3);
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(3, storageLevel0.replication());
      assertEquals(3, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(3, storageLevel0.replication());
      assertEquals(3, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(3, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.toInt());
      assertEquals(3, storageLevel1.replication());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("xK0T&,i#y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: xK0T&,i#y
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      
      boolean boolean0 = storageLevel0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.isValid());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)38, (byte)38).when(objectInput0).readByte();
      StorageLevel storageLevel0 = StorageLevel.apply(objectInput0);
      assertNotNull(storageLevel0);
      assertEquals(38, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(38, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_AND_DISK();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(7, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel2 = StorageLevel.apply(true, false, false, (int) (byte)38);
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.deserialized());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(38, storageLevel2.replication());
      assertEquals(8, storageLevel2.toInt());
      assertEquals(38, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertTrue(storageLevel2.isValid());
      assertTrue(storageLevel2.useDisk());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_AND_DISK();
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertSame(storageLevel3, storageLevel1);
      assertNotNull(storageLevel3);
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useDisk());
      assertEquals(7, storageLevel3.toInt());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel3.useOffHeap());
      assertTrue(storageLevel3.useMemory());
      assertEquals(0, storageLevel3.replication());
      assertFalse(storageLevel3.isValid());
      assertTrue(storageLevel3.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel3.memoryMode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(4, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel1.writeExternal(objectOutput0);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(4, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      
      StorageLevel storageLevel2 = StorageLevel.apply(false, false, false, (int) (byte) (-45));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.useMemory());
      assertEquals((-45), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel2.toInt());
      assertEquals((-45), storageLevel2.replication());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.deserialized());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.fromString("MEMORY_AND_DISK_SER_2");
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertEquals(9, storageLevel0.toInt());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertEquals(9, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(41, storageLevel0.replication());
      assertEquals(11, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.isValid());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(41, storageLevel0.replication());
      assertEquals(11, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.isValid());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      
      String string0 = storageLevel1.description();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertEquals("Memory Deserialized 0x Replicated", string0);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(string0);
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      
      StorageLevel storageLevel2 = StorageLevel.NONE();
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertEquals(0, storageLevel2.toInt());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_AND_DISK();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertEquals(13, storageLevel3.toInt());
      assertTrue(storageLevel3.useMemory());
      assertTrue(storageLevel3.useDisk());
      assertTrue(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel3.replication());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertFalse(storageLevel3.isValid());
      assertEquals(1, storageLevel3.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      
      boolean boolean0 = storageLevel0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel0 = StorageLevel.fromString("MEMORY_ONLY_2");
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertEquals(9, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel1 = StorageLevel.fromString("MEMORY_ONLY_2");
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-889275715), storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-889275715), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK();
      assertTrue(storageLevel2.equals((Object)storageLevel1));
      assertSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertEquals(0, storageLevel2.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertTrue(storageLevel2.deserialized());
      assertEquals(5, storageLevel2.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.useMemory());
      
      String string0 = storageLevel2.toString();
      assertTrue(storageLevel2.equals((Object)storageLevel1));
      assertEquals("StorageLevel(memory, deserialized, 0 replicas)", string0);
      assertSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(string0);
      assertEquals(0, storageLevel2.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertTrue(storageLevel2.deserialized());
      assertEquals(5, storageLevel2.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.useMemory());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertEquals(0, storageLevel3.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertFalse(storageLevel3.deserialized());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useMemory());
      assertEquals(8, storageLevel3.toInt());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel3.useDisk());
      
      StorageLevel storageLevel4 = StorageLevel.MEMORY_AND_DISK();
      assertTrue(storageLevel4.equals((Object)storageLevel1));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertNotSame(storageLevel4, storageLevel1);
      assertSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel3);
      assertSame(storageLevel4, storageLevel2);
      assertNotNull(storageLevel4);
      assertTrue(storageLevel4.useMemory());
      assertTrue(storageLevel4.deserialized());
      assertEquals(5, storageLevel4.toInt());
      assertFalse(storageLevel4.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      assertEquals(0, storageLevel4.replication());
      assertFalse(storageLevel4.isValid());
      assertEquals(1, storageLevel4.apply$default$4());
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel5 = StorageLevel.NONE();
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel3);
      assertNotNull(storageLevel5);
      assertEquals(0, storageLevel5.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertEquals(0, storageLevel5.replication());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.useMemory());
      assertFalse(storageLevel5.useDisk());
      assertEquals(1, storageLevel5.apply$default$4());
      assertFalse(storageLevel5.useOffHeap());
      assertEquals(0, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel3.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel3.equals((Object)storageLevel4));
      assertFalse(storageLevel3.equals((Object)storageLevel5));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel5);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertEquals(0, storageLevel3.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertFalse(storageLevel3.isValid());
      assertTrue(storageLevel3.deserialized());
      assertFalse(storageLevel3.useMemory());
      assertEquals(9, storageLevel3.toInt());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel3.useDisk());
      
      storageLevel5.writeExternal(objectOutput0);
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel3);
      assertEquals(0, storageLevel5.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertEquals(0, storageLevel5.replication());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.useMemory());
      assertFalse(storageLevel5.useDisk());
      assertEquals(1, storageLevel5.apply$default$4());
      assertFalse(storageLevel5.useOffHeap());
      assertEquals(0, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel6 = storageLevel1.clone();
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertTrue(storageLevel1.equals((Object)storageLevel2));
      assertTrue(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel0));
      assertTrue(storageLevel6.equals((Object)storageLevel1));
      assertFalse(storageLevel6.equals((Object)storageLevel5));
      assertTrue(storageLevel6.equals((Object)storageLevel2));
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel4));
      assertNotSame(storageLevel1, storageLevel5);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel5);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotSame(storageLevel6, storageLevel3);
      assertNotSame(storageLevel6, storageLevel0);
      assertNotNull(storageLevel6);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel6.replication());
      assertFalse(storageLevel6.isValid());
      assertTrue(storageLevel6.deserialized());
      assertFalse(storageLevel6.useDisk());
      assertEquals(5, storageLevel6.toInt());
      assertFalse(storageLevel6.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertEquals(1, storageLevel6.apply$default$4());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel6.useMemory());
      
      storageLevel6.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertTrue(storageLevel1.equals((Object)storageLevel6));
      assertTrue(storageLevel1.equals((Object)storageLevel2));
      assertTrue(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel0));
      assertTrue(storageLevel6.equals((Object)storageLevel1));
      assertFalse(storageLevel6.equals((Object)storageLevel5));
      assertTrue(storageLevel6.equals((Object)storageLevel2));
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel4));
      assertNotSame(storageLevel1, storageLevel5);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel5);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotSame(storageLevel6, storageLevel3);
      assertNotSame(storageLevel6, storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel6.replication());
      assertFalse(storageLevel6.isValid());
      assertTrue(storageLevel6.deserialized());
      assertFalse(storageLevel6.useDisk());
      assertEquals(5, storageLevel6.toInt());
      assertFalse(storageLevel6.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertEquals(1, storageLevel6.apply$default$4());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel6.useMemory());
      
      MemoryMode memoryMode0 = storageLevel3.memoryMode();
      assertFalse(storageLevel3.equals((Object)storageLevel4));
      assertFalse(storageLevel3.equals((Object)storageLevel5));
      assertFalse(storageLevel3.equals((Object)storageLevel6));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel5);
      assertNotSame(storageLevel3, storageLevel6);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertEquals(0, storageLevel3.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertFalse(storageLevel3.isValid());
      assertTrue(storageLevel3.deserialized());
      assertFalse(storageLevel3.useMemory());
      assertEquals(9, storageLevel3.toInt());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel3.useDisk());
      
      MemoryMode memoryMode1 = storageLevel6.memoryMode();
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertTrue(storageLevel1.equals((Object)storageLevel6));
      assertTrue(storageLevel1.equals((Object)storageLevel2));
      assertTrue(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel0));
      assertTrue(storageLevel6.equals((Object)storageLevel1));
      assertFalse(storageLevel6.equals((Object)storageLevel5));
      assertTrue(storageLevel6.equals((Object)storageLevel2));
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel4));
      assertEquals(MemoryMode.ON_HEAP, memoryMode1);
      assertNotSame(storageLevel1, storageLevel5);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel5);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotSame(storageLevel6, storageLevel3);
      assertNotSame(storageLevel6, storageLevel0);
      assertSame(memoryMode1, memoryMode0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel6.replication());
      assertFalse(storageLevel6.isValid());
      assertTrue(storageLevel6.deserialized());
      assertFalse(storageLevel6.useDisk());
      assertEquals(5, storageLevel6.toInt());
      assertFalse(storageLevel6.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertEquals(1, storageLevel6.apply$default$4());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel6.useMemory());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, true, 2981);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = StorageLevel.apply((-115), (-115));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals((-115), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-115), storageLevel1.replication());
      assertEquals(13, storageLevel1.toInt());
      assertTrue(storageLevel1.useDisk());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER();
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      
      int int0 = storageLevel0.org$apache$spark$storage$StorageLevel$$_replication();
      assertEquals(0, int0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      
      StorageLevel storageLevel1 = StorageLevel.apply(true, true, false, 4);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertEquals(12, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
      assertEquals(4, storageLevel1.replication());
      assertTrue(storageLevel1.useDisk());
      assertEquals(4, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.isValid());
      
      StorageLevel storageLevel2 = StorageLevel.OFF_HEAP();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useOffHeap());
      assertEquals(41, storageLevel2.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      assertEquals(41, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.deserialized());
      assertEquals(11, storageLevel2.toInt());
      assertFalse(storageLevel2.useMemory());
      assertTrue(storageLevel2.isValid());
      assertTrue(storageLevel2.useDisk());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(13, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      int int0 = storageLevel0.replication();
      assertEquals(0, int0);
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(13, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel(false, false, false, false, 3783);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(12, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertEquals(11, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(41, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = StorageLevel.apply((-2351), 11);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.deserialized());
      assertEquals(11, storageLevel1.replication());
      assertFalse(storageLevel1.isValid());
      assertEquals(11, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.toInt());
      assertFalse(storageLevel1.useMemory());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK_SER();
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.isValid());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel2.toInt());
      assertEquals(0, storageLevel2.replication());
      assertTrue(storageLevel2.useMemory());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.deserialized());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.deserialized());
      assertEquals(8, storageLevel3.toInt());
      assertFalse(storageLevel3.useMemory());
      assertTrue(storageLevel3.useDisk());
      assertFalse(storageLevel3.isValid());
      assertEquals(0, storageLevel3.replication());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = StorageLevel.fromString("MEMORY_ONLY_SER");
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.useMemory());
      assertEquals(4, storageLevel1.toInt());
      
      boolean boolean0 = storageLevel0.isValid();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(boolean0);
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useMemory());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      boolean boolean0 = storageLevel0.isValid();
      assertFalse(boolean0);
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel1 = new StorageLevel(1474, (-328));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotNull(storageLevel1);
      assertEquals((-328), storageLevel1.replication());
      assertEquals((-328), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(2, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
      
      String string0 = storageLevel1.toString();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertEquals("StorageLevel(offheap, -328 replicas)", string0);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(string0);
      assertEquals((-328), storageLevel1.replication());
      assertEquals((-328), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(2, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(0, int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(6, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals((-42), storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(6, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals((-42), storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = null;
      try {
        storageLevel1 = new StorageLevel(true, true, true, true, (-2351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel();
      assertNotNull(storageLevel0);
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      
      boolean boolean0 = storageLevel0.isValid();
      assertTrue(boolean0);
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      boolean boolean0 = storageLevel0.isValid();
      assertFalse(boolean0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(0 replicas)", string0);
      assertNotNull(string0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      
      boolean boolean0 = storageLevel0.isValid();
      assertFalse(boolean0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-42), storageLevel0.replication());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(false);
      assertEquals((-42), storageLevel0.replication());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(memory, offheap, -42 replicas)", string0);
      assertNotNull(string0);
      assertEquals((-42), storageLevel0.replication());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      
      boolean boolean0 = storageLevel0.isValid();
      assertFalse(boolean0);
      assertEquals((-42), storageLevel0.replication());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals((-42), storageLevel0.replication());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-42), storageLevel1.replication());
      assertTrue(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-42), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(6, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(13, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      
      boolean boolean0 = storageLevel0.deserialized();
      assertTrue(boolean0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      
      boolean boolean0 = storageLevel0.useOffHeap();
      assertFalse(boolean0);
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_AND_DISK_2();
      assertSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(13, storageLevel1.toInt());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      ObjectInput objectInput1 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-889275715), storageLevel1.replication());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      String string0 = storageLevel0.description();
      assertEquals("Serialized 0x Replicated", string0);
      assertNotNull(string0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(8, storageLevel1.toInt());
      assertFalse(storageLevel1.useMemory());
      
      String string1 = storageLevel1.toString();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("StorageLevel(disk, 0 replicas)", string1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(string1);
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(8, storageLevel1.toInt());
      assertFalse(storageLevel1.useMemory());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      
      String string0 = storageLevel1.description();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertEquals("Memory Deserialized 0x Replicated", string0);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(string0);
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      
      String string1 = storageLevel0.toString();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("StorageLevel(memory, deserialized, -889275715 replicas)", string1);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotNull(string1);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK_SER();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(4, storageLevel2.toInt());
      assertFalse(storageLevel2.useOffHeap());
      assertTrue(storageLevel2.useMemory());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      
      int int0 = storageLevel0.org$apache$spark$storage$StorageLevel$$_replication();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertEquals((-889275715), int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel2);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(6, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useDisk());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(11, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(41, storageLevel0.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(14, storageLevel0.toInt());
      
      int int0 = storageLevel0.toInt();
      assertEquals(11, int0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useDisk());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(11, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(41, storageLevel0.replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(14, int0);
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(14, storageLevel0.toInt());
      
      // Undeclared exception!
      try { 
        StorageLevel.apply(11, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useMemory());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(11, storageLevel0.toInt());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(41, storageLevel0.replication());
      
      int int0 = storageLevel0.toInt();
      assertEquals(11, int0);
      assertFalse(storageLevel0.useMemory());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(11, storageLevel0.toInt());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(41, storageLevel0.replication());
      
      StorageLevel storageLevel1 = StorageLevel.fromString("DISK_ONLY_2");
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(6, storageLevel1.toInt());
      assertEquals((-42), storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.deserialized());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-42), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-46), (byte) (-46)).when(objectInput0).readByte();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertEquals(2, storageLevel1.toInt());
      assertEquals((-46), storageLevel1.replication());
      assertEquals((-46), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.deserialized());
      
      StorageLevel storageLevel2 = StorageLevel.apply(2, 2);
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(2, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.deserialized());
      assertEquals(2, storageLevel2.replication());
      assertEquals(2, storageLevel2.toInt());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useMemory());
      assertTrue(storageLevel2.useOffHeap());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(6, int0);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      
      int int1 = StorageLevel.apply$default$4();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals(3, storageLevel1.toInt());
      assertEquals((-46), storageLevel1.replication());
      assertEquals((-46), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(MemoryMode.OFF_HEAP, memoryMode0);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(6, storageLevel0.toInt());
      
      ObjectInput objectInput1 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-5), (byte)41).when(objectInput1).readByte();
      storageLevel0.readExternal(objectInput1);
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(11, storageLevel0.toInt());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(41, storageLevel0.replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(11, storageLevel0.toInt());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(41, storageLevel0.replication());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotNull(storageLevel3);
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(4, storageLevel3.toInt());
      assertFalse(storageLevel3.deserialized());
      assertFalse(storageLevel3.isValid());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useDisk());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel3.replication());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(false);
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.toInt());
      assertEquals((-46), storageLevel1.replication());
      assertEquals((-46), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      
      StorageLevel storageLevel4 = StorageLevel.fromString("DISK_ONLY_2");
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel1);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotNull(storageLevel4);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel4.memoryMode());
      assertFalse(storageLevel4.deserialized());
      assertEquals(1, storageLevel4.apply$default$4());
      assertTrue(storageLevel4.useMemory());
      assertEquals((-42), storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel4.isValid());
      assertEquals(6, storageLevel4.toInt());
      assertTrue(storageLevel4.useOffHeap());
      assertEquals((-42), storageLevel4.replication());
      assertFalse(storageLevel4.useDisk());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      
      int int0 = 1;
      StorageLevel storageLevel1 = StorageLevel.apply(1, (-20));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertEquals((-20), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.toInt());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-20), storageLevel1.replication());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("%PdE?|DuGMI+1A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: %PdE?|DuGMI+1A
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals((-42), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(6, storageLevel0.toInt());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      
      int int0 = (-7);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, true, true, false, 0);
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      
      boolean boolean0 = storageLevel0.useOffHeap();
      assertTrue(boolean0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.apply((int) (byte)42, 5);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(10, storageLevel1.toInt());
      assertTrue(storageLevel1.isValid());
      assertEquals(5, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(5, storageLevel1.replication());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      
      storageLevel1.hashCode();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(10, storageLevel1.toInt());
      assertTrue(storageLevel1.isValid());
      assertEquals(5, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(5, storageLevel1.replication());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      
      String string0 = storageLevel0.description();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals("Memory (off heap) Serialized 0x Replicated", string0);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotNull(string0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(6, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.useMemory());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-42), (byte) (-42)).when(objectInput0).readByte();
      storageLevel0.readExternal(objectInput0);
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(true);
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-889275715), storageLevel1.replication());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertFalse(storageLevel1.useDisk());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-889275715), storageLevel1.replication());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK_SER();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertTrue(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.deserialized());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useDisk());
      assertEquals(4, storageLevel2.toInt());
      
      ObjectInput objectInput1 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-42), (byte)8).when(objectInput1).readByte();
      StorageLevel storageLevel3 = StorageLevel.apply(objectInput1);
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertEquals(6, storageLevel3.toInt());
      assertEquals(1, storageLevel3.apply$default$4());
      assertTrue(storageLevel3.isValid());
      assertFalse(storageLevel3.deserialized());
      assertTrue(storageLevel3.useMemory());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel3.memoryMode());
      assertEquals(8, storageLevel3.replication());
      assertTrue(storageLevel3.useOffHeap());
      assertEquals(8, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.useDisk());
      
      StorageLevel storageLevel4 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertTrue(storageLevel4.equals((Object)storageLevel2));
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel1);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotNull(storageLevel4);
      assertFalse(storageLevel4.isValid());
      assertEquals(4, storageLevel4.toInt());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel4.deserialized());
      assertFalse(storageLevel4.useDisk());
      assertEquals(0, storageLevel4.replication());
      assertTrue(storageLevel4.useMemory());
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      assertEquals(1, storageLevel4.apply$default$4());
      
      StorageLevel storageLevel5 = storageLevel0.clone();
      assertFalse(storageLevel0.equals((Object)storageLevel3));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel4));
      assertTrue(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertNotSame(storageLevel0, storageLevel3);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel4);
      assertNotSame(storageLevel0, storageLevel5);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotNull(storageLevel5);
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel5.memoryMode());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.deserialized());
      assertEquals(1, storageLevel5.apply$default$4());
      assertEquals((-42), storageLevel5.replication());
      assertTrue(storageLevel5.useMemory());
      assertTrue(storageLevel5.useOffHeap());
      assertEquals(6, storageLevel5.toInt());
      assertEquals((-42), storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel5.useDisk());
      
      ObjectOutput objectOutput1 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel5.writeExternal(objectOutput1);
      assertFalse(storageLevel0.equals((Object)storageLevel3));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel0.equals((Object)storageLevel5));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel4));
      assertTrue(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertNotSame(storageLevel0, storageLevel3);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel4);
      assertNotSame(storageLevel0, storageLevel5);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel0);
      assertEquals((-42), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-42), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel5.memoryMode());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.deserialized());
      assertEquals(1, storageLevel5.apply$default$4());
      assertEquals((-42), storageLevel5.replication());
      assertTrue(storageLevel5.useMemory());
      assertTrue(storageLevel5.useOffHeap());
      assertEquals(6, storageLevel5.toInt());
      assertEquals((-42), storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel5.useDisk());
      
      StorageLevel storageLevel6 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertTrue(storageLevel6.equals((Object)storageLevel2));
      assertFalse(storageLevel6.equals((Object)storageLevel5));
      assertFalse(storageLevel6.equals((Object)storageLevel0));
      assertFalse(storageLevel6.equals((Object)storageLevel1));
      assertNotSame(storageLevel6, storageLevel3);
      assertSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotSame(storageLevel6, storageLevel5);
      assertNotSame(storageLevel6, storageLevel0);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotNull(storageLevel6);
      assertEquals(1, storageLevel6.apply$default$4());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel6.replication());
      assertTrue(storageLevel6.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertFalse(storageLevel6.isValid());
      assertFalse(storageLevel6.useOffHeap());
      assertFalse(storageLevel6.deserialized());
      assertEquals(4, storageLevel6.toInt());
      assertFalse(storageLevel6.useDisk());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(false);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel6));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel1.equals((Object)storageLevel4));
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel5));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel6);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel4);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel5);
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-889275715), storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(0 replicas)", string0);
      assertNotNull(string0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertEquals("StorageLevel(deserialized, 0 replicas)", string0);
      assertEquals(1, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
      
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals(12, storageLevel0.toInt());
      assertTrue(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = StorageLevel.apply(1, 4);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals(4, storageLevel1.replication());
      assertEquals(1, storageLevel1.toInt());
      assertEquals(4, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      
      boolean boolean0 = false;
      StorageLevel storageLevel2 = StorageLevel.apply(false, false, false, true, 4);
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel0);
      assertSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.isValid());
      assertEquals(1, storageLevel2.toInt());
      assertTrue(storageLevel2.deserialized());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.useDisk());
      assertEquals(4, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel2.replication());
      assertEquals(1, storageLevel2.apply$default$4());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)71, (byte) (-2)).when(objectInput0).readByte();
      storageLevel1.readExternal(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals((-2), storageLevel1.replication());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.deserialized());
      assertTrue(storageLevel1.useMemory());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-2), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel2);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotNull(storageLevel3);
      assertEquals(0, storageLevel3.replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(4, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useDisk());
      assertFalse(storageLevel3.isValid());
      
      String string0 = storageLevel3.toString();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertEquals("StorageLevel(memory, 0 replicas)", string0);
      assertSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotNull(string0);
      assertEquals(0, storageLevel3.replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(4, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useDisk());
      assertFalse(storageLevel3.isValid());
      
      String string1 = storageLevel3.description();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Memory Serialized 0x Replicated", string1);
      assertSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotNull(string1);
      assertEquals(0, storageLevel3.replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(4, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useDisk());
      assertFalse(storageLevel3.isValid());
      
      // Undeclared exception!
      try { 
        StorageLevel.fromString("scala.collection.immutable.Stream$$hash$colon$colon$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: scala.collection.immutable.Stream$$hash$colon$colon$
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.deserialized());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      
      int int0 = storageLevel0.toInt();
      assertEquals(4, int0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      
      int int1 = StorageLevel.apply$default$4();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      
      StorageLevel storageLevel1 = StorageLevel.apply(false, false, true, false, 0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(2, storageLevel1.toInt());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(true);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(6, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      boolean boolean0 = storageLevel1.useOffHeap();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertTrue(boolean0);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(2, storageLevel1.toInt());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = StorageLevel.apply((-955), (-1));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-1), storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals((-1), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.isValid());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-46), (byte) (-46)).when(objectInput0).readByte();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertEquals(2, storageLevel1.toInt());
      assertEquals((-46), storageLevel1.replication());
      assertEquals((-46), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useOffHeap());
      
      StorageLevel storageLevel2 = StorageLevel.apply(2, 2);
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(2, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(2, storageLevel2.replication());
      assertEquals(2, storageLevel2.toInt());
      assertTrue(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.isValid());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.deserialized());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(15, int0);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      
      int int1 = StorageLevel.apply$default$4();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-46), storageLevel1.replication());
      assertEquals((-46), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(3, storageLevel1.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useOffHeap());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(MemoryMode.OFF_HEAP, memoryMode0);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)3, (byte)3).when(objectInput0).readByte();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.deserialized());
      assertEquals(3, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertEquals(3, storageLevel1.toInt());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(3, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
      
      int int1 = StorageLevel.apply$default$4();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.isValid());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertEquals(15, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(false);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(3, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertEquals(2, storageLevel1.toInt());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(3, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.apply$default$4());
      
      MemoryMode memoryMode0 = storageLevel1.memoryMode();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertEquals(MemoryMode.OFF_HEAP, memoryMode0);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(3, storageLevel1.replication());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertEquals(2, storageLevel1.toInt());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(3, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.apply$default$4());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        StorageLevel.apply(false, true, false, false, 3846);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)41, (byte) (-37)).when(objectInput0).readByte();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-37), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-37), storageLevel1.replication());
      assertEquals(9, storageLevel1.toInt());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(14, int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      int int1 = StorageLevel.apply$default$4();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(MemoryMode.OFF_HEAP, memoryMode0);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      StorageLevel storageLevel2 = StorageLevel.apply(true, true, false, (-1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertTrue(storageLevel2.useDisk());
      assertEquals((-1), storageLevel2.replication());
      assertEquals(12, storageLevel2.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useMemory());
      assertEquals((-1), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.deserialized());
      
      int int2 = storageLevel1.hashCode();
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-37), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-37), storageLevel1.replication());
      assertEquals(9, storageLevel1.toInt());
      
      boolean boolean0 = storageLevel1.useDisk();
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertTrue(boolean0);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-37), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-37), storageLevel1.replication());
      assertEquals(9, storageLevel1.toInt());
      
      MemoryMode memoryMode1 = storageLevel1.memoryMode();
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(memoryMode1.equals((Object)memoryMode0));
      assertEquals(MemoryMode.ON_HEAP, memoryMode1);
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(memoryMode1, memoryMode0);
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-37), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-37), storageLevel1.replication());
      assertEquals(9, storageLevel1.toInt());
      
      int int3 = StorageLevel.apply$default$4();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, false, true, (-320));
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-320), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-320), storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-19), (byte) (-94)).when(objectInput0).readByte();
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals((-94), storageLevel1.replication());
      assertEquals((-94), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(13, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      
      int int0 = storageLevel0.replication();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals((-320), int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-320), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-320), storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertTrue(storageLevel2.useMemory());
      assertTrue(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.replication());
      assertTrue(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(13, storageLevel2.toInt());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useOffHeap());
      
      String string0 = storageLevel2.toString();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertEquals("StorageLevel(disk, memory, deserialized, 0 replicas)", string0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(string0);
      assertTrue(storageLevel2.useMemory());
      assertTrue(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.replication());
      assertTrue(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(13, storageLevel2.toInt());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useOffHeap());
      
      StorageLevel storageLevel3 = StorageLevel.apply(false, true, false, true, 0);
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(0, storageLevel3.replication());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel3.deserialized());
      assertTrue(storageLevel3.useMemory());
      assertFalse(storageLevel3.useDisk());
      assertEquals(5, storageLevel3.toInt());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      
      ObjectInput objectInput1 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)69, (byte)94).when(objectInput1).readByte();
      StorageLevel storageLevel4 = StorageLevel.apply(objectInput1);
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertNotSame(storageLevel4, storageLevel1);
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotNull(storageLevel4);
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      assertEquals(94, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(94, storageLevel4.replication());
      assertEquals(1, storageLevel4.apply$default$4());
      assertTrue(storageLevel4.useMemory());
      assertTrue(storageLevel4.isValid());
      assertTrue(storageLevel4.deserialized());
      assertEquals(5, storageLevel4.toInt());
      assertFalse(storageLevel4.useDisk());
      
      StorageLevel storageLevel5 = StorageLevel.apply(0, 0);
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotNull(storageLevel5);
      assertEquals(1, storageLevel5.apply$default$4());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertFalse(storageLevel5.deserialized());
      assertEquals(0, storageLevel5.replication());
      assertEquals(0, storageLevel5.toInt());
      assertEquals(0, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel5.useDisk());
      assertFalse(storageLevel5.useMemory());
      
      StorageLevel storageLevel6 = StorageLevel.apply((-320), 0);
      assertFalse(storageLevel6.equals((Object)storageLevel3));
      assertFalse(storageLevel6.equals((Object)storageLevel0));
      assertFalse(storageLevel6.equals((Object)storageLevel4));
      assertFalse(storageLevel6.equals((Object)storageLevel1));
      assertFalse(storageLevel6.equals((Object)storageLevel2));
      assertNotSame(storageLevel6, storageLevel3);
      assertNotSame(storageLevel6, storageLevel0);
      assertSame(storageLevel6, storageLevel5);
      assertNotSame(storageLevel6, storageLevel1);
      assertNotSame(storageLevel6, storageLevel4);
      assertNotSame(storageLevel6, storageLevel2);
      assertNotNull(storageLevel6);
      assertEquals(1, storageLevel6.apply$default$4());
      assertFalse(storageLevel6.useMemory());
      assertFalse(storageLevel6.useDisk());
      assertFalse(storageLevel6.isValid());
      assertEquals(0, storageLevel6.toInt());
      assertFalse(storageLevel6.useOffHeap());
      assertFalse(storageLevel6.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel6.memoryMode());
      assertEquals(0, storageLevel6.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel6.replication());
      
      // Undeclared exception!
      try { 
        StorageLevel.apply(false, true, false, 416);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)41, (byte)41).when(objectInput0).readByte();
      StorageLevel storageLevel0 = StorageLevel.apply(objectInput0);
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(9, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(41, storageLevel0.replication());
      assertEquals(41, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)19, (byte)19).when(objectInput0).readByte();
      StorageLevel storageLevel0 = StorageLevel.apply(objectInput0);
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(19, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals(3, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(19, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)71, (byte)71).when(objectInput0).readByte();
      StorageLevel storageLevel0 = StorageLevel.apply(objectInput0);
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(71, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals(7, storageLevel0.toInt());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(71, storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn((byte)7, (byte)121).when(objectInput0).readByte();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel1 = StorageLevel.apply(objectInput0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(121, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(121, storageLevel1.replication());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(14, int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      
      int int1 = StorageLevel.apply$default$4();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq(1);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(121, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(121, storageLevel1.replication());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals(MemoryMode.OFF_HEAP, memoryMode0);
      assertNotSame(storageLevel0, storageLevel1);
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertEquals(14, storageLevel0.toInt());
      assertEquals(1, storageLevel0.replication());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      
      StorageLevel storageLevel2 = StorageLevel.apply(false, false, true, false, 0);
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.isValid());
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.useMemory());
      assertFalse(storageLevel2.useDisk());
      assertEquals(2, storageLevel2.toInt());
      
      StorageLevel storageLevel3 = StorageLevel.apply(true, true, false, (-1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotNull(storageLevel3);
      assertEquals(12, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.deserialized());
      assertEquals(1, storageLevel3.apply$default$4());
      assertEquals((-1), storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel3.useDisk());
      assertEquals((-1), storageLevel3.replication());
      assertTrue(storageLevel3.useMemory());
      
      int int2 = storageLevel1.hashCode();
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(121, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(121, storageLevel1.replication());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      
      boolean boolean0 = storageLevel1.useDisk();
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertFalse(boolean0);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(121, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(121, storageLevel1.replication());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      
      MemoryMode memoryMode1 = storageLevel1.memoryMode();
      assertFalse(storageLevel1.equals((Object)storageLevel3));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertEquals(MemoryMode.OFF_HEAP, memoryMode1);
      assertNotSame(storageLevel1, storageLevel3);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertSame(memoryMode1, memoryMode0);
      assertEquals(MemoryMode.OFF_HEAP, storageLevel1.memoryMode());
      assertEquals(121, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.isValid());
      assertTrue(storageLevel1.useOffHeap());
      assertEquals(121, storageLevel1.replication());
      assertEquals(7, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      
      int int3 = StorageLevel.apply$default$4();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel1 = StorageLevel.apply(1, 1);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(1, storageLevel1.toInt());
      assertEquals(1, storageLevel1.replication());
      
      storageLevel0.hashCode();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel2 = StorageLevel.apply(1, 1);
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(1, storageLevel2.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(1, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertFalse(storageLevel2.isValid());
      assertTrue(storageLevel2.deserialized());
      assertFalse(storageLevel2.useMemory());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertEquals(0, int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel2);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = StorageLevel.apply(3237, (-4300));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertEquals((-4300), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-4300), storageLevel1.replication());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      
      // Undeclared exception!
      try { 
        storageLevel0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel((-2629), (-2629));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = StorageLevel.apply(2096, 3);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(3, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.deserialized());
      assertEquals(3, storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(0, 0);
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(true);
      assertEquals(8, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertEquals((-889275715), storageLevel1.replication());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useOffHeap());
      
      StorageLevel storageLevel2 = storageLevel1.clone();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertTrue(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertTrue(storageLevel1.useMemory());
      assertEquals((-889275715), storageLevel1.replication());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel2.isValid());
      assertTrue(storageLevel2.deserialized());
      assertFalse(storageLevel2.useDisk());
      assertEquals(5, storageLevel2.toInt());
      assertEquals((-889275715), storageLevel2.replication());
      assertEquals((-889275715), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.useMemory());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useOffHeap());
      
      storageLevel2.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertTrue(storageLevel1.equals((Object)storageLevel2));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertTrue(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel1, storageLevel2);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertEquals((-889275715), storageLevel1.replication());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.deserialized());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel2.isValid());
      assertTrue(storageLevel2.deserialized());
      assertFalse(storageLevel2.useDisk());
      assertEquals(5, storageLevel2.toInt());
      assertEquals((-889275715), storageLevel2.replication());
      assertEquals((-889275715), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel2.useMemory());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.useOffHeap());
      
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(null, null).when(objectInput0).readByte();
      storageLevel2.readExternal(objectInput0);
      storageLevel1.toString();
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      StorageLevel.apply(false, true, false, true, 0);
      StorageLevel storageLevel3 = storageLevel0.clone();
      storageLevel3.clone();
      storageLevel3.toString();
      storageLevel0.description();
      StorageLevel.MEMORY_AND_DISK_SER();
      StorageLevel.apply(true, false, true, 0);
      StorageLevel.DISK_ONLY();
      StorageLevel.apply(false, false, false, 3);
      StorageLevel.MEMORY_AND_DISK_SER_2();
      StorageLevel.MEMORY_ONLY_SER();
      StorageLevel.MEMORY_ONLY();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = 40;
      // Undeclared exception!
      try { 
        StorageLevel.apply(false, true, false, 40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel(true, true, true, true, (-697));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = (-3228);
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel(true, true, true, true, (-3228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(disk, memory, 0 replicas)", string0);
      assertNotNull(string0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      String string1 = storageLevel0.description();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Disk Memory Serialized 0x Replicated", string1);
      assertNotNull(string1);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      
      StorageLevel storageLevel1 = StorageLevel.apply((int) (byte) (-116), 3);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(3, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.isValid());
      assertEquals(3, storageLevel1.replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.deserialized());
      assertEquals(12, storageLevel1.toInt());
      
      storageLevel0.hashCode();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      
      StorageLevel storageLevel2 = StorageLevel.DISK_ONLY_2();
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.toInt());
      
      String string0 = storageLevel2.description();
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertEquals("Serialized 0x Replicated", string0);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(string0);
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.toInt());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = StorageLevel.apply(5, (-87));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertEquals((-87), storageLevel1.replication());
      assertEquals((-87), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.deserialized());
      assertTrue(storageLevel1.useMemory());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(memory, 0 replicas)", string0);
      assertNotNull(string0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = StorageLevel.DISK_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(13, storageLevel1.toInt());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      
      boolean boolean0 = false;
      StorageLevel storageLevel2 = storageLevel0.clone();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useDisk());
      assertEquals(4, storageLevel2.toInt());
      assertFalse(storageLevel2.deserialized());
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(boolean0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertFalse(storageLevel1.equals((Object)storageLevel2));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotSame(storageLevel1, storageLevel2);
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(0, storageLevel1.replication());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertEquals(12, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(0, storageLevel3.replication());
      assertTrue(storageLevel3.useDisk());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      
      StorageLevel storageLevel4 = storageLevel3.clone();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertTrue(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel1);
      assertNotNull(storageLevel4);
      assertEquals(12, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(0, storageLevel3.replication());
      assertTrue(storageLevel3.useDisk());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertEquals(1, storageLevel4.apply$default$4());
      assertTrue(storageLevel4.useMemory());
      assertTrue(storageLevel4.useDisk());
      assertFalse(storageLevel4.isValid());
      assertEquals(0, storageLevel4.replication());
      assertFalse(storageLevel4.deserialized());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel4.toInt());
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      
      String string1 = storageLevel4.description();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertTrue(storageLevel3.equals((Object)storageLevel4));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertTrue(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Disk Memory Serialized 0x Replicated", string1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel1);
      assertNotNull(string1);
      assertEquals(12, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(0, storageLevel3.replication());
      assertTrue(storageLevel3.useDisk());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      assertEquals(1, storageLevel4.apply$default$4());
      assertTrue(storageLevel4.useMemory());
      assertTrue(storageLevel4.useDisk());
      assertFalse(storageLevel4.isValid());
      assertEquals(0, storageLevel4.replication());
      assertFalse(storageLevel4.deserialized());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel4.toInt());
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      
      boolean boolean1 = false;
      int int0 = 0;
      int int1 = (-357);
      StorageLevel storageLevel5 = StorageLevel.apply(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotNull(storageLevel5);
      assertFalse(storageLevel5.isValid());
      assertEquals((-357), storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel5.useOffHeap());
      assertFalse(storageLevel5.useMemory());
      assertEquals(0, storageLevel5.toInt());
      assertEquals((-357), storageLevel5.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.useDisk());
      assertEquals(1, storageLevel5.apply$default$4());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(boolean1);
      assertFalse(storageLevel0.equals((Object)storageLevel5));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel0.equals((Object)storageLevel4));
      assertTrue(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel3));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel5);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel4);
      assertNotSame(storageLevel0, storageLevel3);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      boolean boolean2 = storageLevel3.useOffHeap();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel5));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertTrue(storageLevel3.equals((Object)storageLevel4));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel5);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel4);
      assertNotSame(storageLevel3, storageLevel0);
      assertEquals(12, storageLevel3.toInt());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(0, storageLevel3.replication());
      assertTrue(storageLevel3.useDisk());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      
      int int2 = (-1554);
      int int3 = 1700;
      // Undeclared exception!
      try { 
        StorageLevel.apply(int2, int3);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.replication());
      
      boolean boolean0 = false;
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(false);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.replication());
      
      boolean boolean1 = false;
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals((-889275715), storageLevel0.replication());
      
      String string0 = "StorageLevel(";
      int int0 = (-826);
      StorageLevel storageLevel1 = StorageLevel.apply(false, false, false, (-826));
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertFalse(storageLevel1.useMemory());
      assertFalse(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertEquals((-826), storageLevel1.replication());
      assertEquals((-826), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      
      // Undeclared exception!
      try { 
        storageLevel1.readExternal((ObjectInput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel(0, 0);
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(false);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      String string0 = storageLevel0.description();
      assertEquals("Serialized 0x Replicated", string0);
      assertNotNull(string0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useMemory());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useMemory());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(false);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useMemory());
      
      storageLevel1.org$apache$spark$storage$StorageLevel$$_replication_$eq(0);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.deserialized());
      assertEquals(0, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.useMemory());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(false);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertTrue(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(true);
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(2, storageLevel0.toInt());
      
      StorageLevel storageLevel2 = storageLevel0.clone();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertTrue(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(2, storageLevel0.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.useDisk());
      assertEquals(0, storageLevel2.replication());
      assertEquals(2, storageLevel2.toInt());
      assertFalse(storageLevel2.useMemory());
      assertTrue(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      
      storageLevel2.org$apache$spark$storage$StorageLevel$$_replication_$eq((-1059));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(2, storageLevel0.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(2, storageLevel2.toInt());
      assertEquals((-1059), storageLevel2.replication());
      assertFalse(storageLevel2.useMemory());
      assertTrue(storageLevel2.useOffHeap());
      assertEquals((-1059), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      
      String string1 = storageLevel2.description();
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Serialized -1059x Replicated", string1);
      assertNotSame(storageLevel0, storageLevel2);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(string1);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(2, storageLevel0.toInt());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(2, storageLevel2.toInt());
      assertEquals((-1059), storageLevel2.replication());
      assertFalse(storageLevel2.useMemory());
      assertTrue(storageLevel2.useOffHeap());
      assertEquals((-1059), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.deserialized());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel2.memoryMode());
      
      int int0 = StorageLevel.apply$default$4();
      assertEquals(1, int0);
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_ONLY_SER_2();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotNull(storageLevel3);
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useDisk());
      assertEquals(4, storageLevel3.toInt());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useOffHeap());
      
      storageLevel3.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel2);
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useDisk());
      assertEquals(4, storageLevel3.toInt());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useOffHeap());
      
      boolean boolean0 = storageLevel3.useMemory();
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertTrue(boolean0);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel2);
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useDisk());
      assertEquals(4, storageLevel3.toInt());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel3.deserialized());
      assertEquals(0, storageLevel3.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useMemory());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.useOffHeap());
      
      int int1 = (-331);
      // Undeclared exception!
      try { 
        StorageLevel.fromString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: 
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel1.useDisk());
      assertEquals(0, storageLevel1.replication());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel1.toInt());
      assertFalse(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useMemory());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.OFF_HEAP();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.replication());
      assertTrue(storageLevel0.isValid());
      assertEquals(14, storageLevel0.toInt());
      assertTrue(storageLevel0.useDisk());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(memory, deserialized, -889275715 replicas)", string0);
      assertNotNull(string0);
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      
      MemoryMode memoryMode0 = storageLevel0.memoryMode();
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, false, true, (-320));
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertEquals((-320), storageLevel0.replication());
      assertEquals((-320), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.useMemory());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(true);
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.useMemory());
      
      // Undeclared exception!
      try { 
        storageLevel0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      // Undeclared exception!
      try { 
        storageLevel0.readExternal((ObjectInput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 2601;
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel(2601, 2601);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel(1099, 416);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 2908;
      StorageLevel storageLevel0 = null;
      try {
        storageLevel0 = new StorageLevel(2908, 2908);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_ONLY();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useDisk());
      assertEquals(5, storageLevel1.toInt());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      
      StorageLevel storageLevel2 = StorageLevel.apply(136, (-865));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.useMemory());
      assertEquals((-865), storageLevel2.replication());
      assertTrue(storageLevel2.useDisk());
      assertEquals(1, storageLevel2.apply$default$4());
      assertEquals((-865), storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.deserialized());
      assertEquals(8, storageLevel2.toInt());
      
      StorageLevel storageLevel3 = StorageLevel.MEMORY_AND_DISK_2();
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertTrue(storageLevel3.equals((Object)storageLevel0));
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotSame(storageLevel3, storageLevel1);
      assertNotNull(storageLevel3);
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertTrue(storageLevel3.useDisk());
      assertFalse(storageLevel3.isValid());
      assertFalse(storageLevel3.useOffHeap());
      assertEquals(0, storageLevel3.replication());
      assertEquals(13, storageLevel3.toInt());
      assertTrue(storageLevel3.deserialized());
      assertTrue(storageLevel3.useMemory());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel3.apply$default$4());
      
      StorageLevel storageLevel4 = StorageLevel.MEMORY_ONLY_SER();
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel2);
      assertNotSame(storageLevel4, storageLevel1);
      assertNotNull(storageLevel4);
      assertEquals(1, storageLevel4.apply$default$4());
      assertFalse(storageLevel4.deserialized());
      assertFalse(storageLevel4.useDisk());
      assertEquals(4, storageLevel4.toInt());
      assertFalse(storageLevel4.isValid());
      assertTrue(storageLevel4.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      assertEquals(0, storageLevel4.replication());
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      
      StorageLevel storageLevel5 = StorageLevel.apply(false, false, false, 0);
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel4);
      assertNotNull(storageLevel5);
      assertEquals(0, storageLevel5.replication());
      assertEquals(0, storageLevel5.toInt());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.useMemory());
      assertFalse(storageLevel5.useDisk());
      assertFalse(storageLevel5.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertEquals(1, storageLevel5.apply$default$4());
      assertEquals(0, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
      
      storageLevel5.hashCode();
      assertFalse(storageLevel5.equals((Object)storageLevel3));
      assertFalse(storageLevel5.equals((Object)storageLevel2));
      assertFalse(storageLevel5.equals((Object)storageLevel0));
      assertFalse(storageLevel5.equals((Object)storageLevel1));
      assertFalse(storageLevel5.equals((Object)storageLevel4));
      assertNotSame(storageLevel5, storageLevel3);
      assertNotSame(storageLevel5, storageLevel2);
      assertNotSame(storageLevel5, storageLevel0);
      assertNotSame(storageLevel5, storageLevel1);
      assertNotSame(storageLevel5, storageLevel4);
      assertEquals(0, storageLevel5.replication());
      assertEquals(0, storageLevel5.toInt());
      assertFalse(storageLevel5.deserialized());
      assertFalse(storageLevel5.isValid());
      assertFalse(storageLevel5.useMemory());
      assertFalse(storageLevel5.useDisk());
      assertFalse(storageLevel5.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel5.memoryMode());
      assertEquals(1, storageLevel5.apply$default$4());
      assertEquals(0, storageLevel5.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      
      boolean boolean2 = false;
      int int0 = 8;
      StorageLevel storageLevel1 = StorageLevel.apply(true, true, false, true, 8);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.isValid());
      assertEquals(8, storageLevel1.replication());
      assertTrue(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals(8, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.useDisk());
      assertEquals(13, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, true, 1710);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_2();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(13, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, true, 40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(0 replicas)", string0);
      assertNotNull(string0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = true;
      StorageLevel storageLevel0 = StorageLevel.apply(true, true, false, 8);
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(8, storageLevel0.replication());
      assertEquals(8, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      boolean boolean1 = true;
      int int0 = 0;
      StorageLevel storageLevel1 = StorageLevel.apply(true, true, true, 0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.deserialized());
      assertTrue(storageLevel1.useMemory());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(13, storageLevel1.toInt());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.useOffHeap());
      
      String string0 = storageLevel0.toString();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertEquals("StorageLevel(disk, memory, 8 replicas)", string0);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotNull(string0);
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.isValid());
      assertEquals(8, storageLevel0.replication());
      assertEquals(8, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      
      StorageLevel storageLevel2 = StorageLevel.MEMORY_AND_DISK_SER();
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertNotSame(storageLevel2, storageLevel1);
      assertNotSame(storageLevel2, storageLevel0);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertTrue(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel2.replication());
      assertFalse(storageLevel2.deserialized());
      assertFalse(storageLevel2.isValid());
      assertEquals(4, storageLevel2.toInt());
      assertFalse(storageLevel2.useDisk());
      
      boolean boolean2 = false;
      StorageLevel storageLevel3 = StorageLevel.apply(true, true, false, 0);
      assertFalse(storageLevel3.equals((Object)storageLevel1));
      assertFalse(storageLevel3.equals((Object)storageLevel2));
      assertFalse(storageLevel3.equals((Object)storageLevel0));
      assertNotSame(storageLevel3, storageLevel1);
      assertNotSame(storageLevel3, storageLevel2);
      assertNotSame(storageLevel3, storageLevel0);
      assertNotNull(storageLevel3);
      assertFalse(storageLevel3.useOffHeap());
      assertFalse(storageLevel3.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel3.memoryMode());
      assertEquals(0, storageLevel3.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel3.toInt());
      assertEquals(0, storageLevel3.replication());
      assertTrue(storageLevel3.useMemory());
      assertTrue(storageLevel3.useDisk());
      assertEquals(1, storageLevel3.apply$default$4());
      assertFalse(storageLevel3.isValid());
      
      StorageLevel storageLevel4 = StorageLevel.apply(8, 0);
      assertFalse(storageLevel4.equals((Object)storageLevel1));
      assertFalse(storageLevel4.equals((Object)storageLevel0));
      assertFalse(storageLevel4.equals((Object)storageLevel3));
      assertFalse(storageLevel4.equals((Object)storageLevel2));
      assertNotSame(storageLevel4, storageLevel1);
      assertNotSame(storageLevel4, storageLevel0);
      assertNotSame(storageLevel4, storageLevel3);
      assertNotSame(storageLevel4, storageLevel2);
      assertNotNull(storageLevel4);
      assertEquals(MemoryMode.ON_HEAP, storageLevel4.memoryMode());
      assertTrue(storageLevel4.useDisk());
      assertFalse(storageLevel4.isValid());
      assertFalse(storageLevel4.useOffHeap());
      assertEquals(0, storageLevel4.replication());
      assertFalse(storageLevel4.useMemory());
      assertEquals(0, storageLevel4.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel4.apply$default$4());
      assertFalse(storageLevel4.deserialized());
      assertEquals(8, storageLevel4.toInt());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      
      // Undeclared exception!
      try { 
        StorageLevel.apply(false, false, true, false, 3846);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      
      // Undeclared exception!
      try { 
        storageLevel0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel();
      assertNotNull(storageLevel0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      storageLevel0.writeExternal(objectOutput0);
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(4, storageLevel0.toInt());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      
      StorageLevel storageLevel1 = StorageLevel.apply(1, 0);
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(0, storageLevel1.replication());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useDisk());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.useMemory());
      assertTrue(storageLevel1.deserialized());
      assertEquals(1, storageLevel1.toInt());
      
      storageLevel0.hashCode();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertNotSame(storageLevel0, storageLevel1);
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      
      StorageLevel storageLevel2 = StorageLevel.apply(0, 1);
      assertFalse(storageLevel2.equals((Object)storageLevel0));
      assertFalse(storageLevel2.equals((Object)storageLevel1));
      assertNotSame(storageLevel2, storageLevel0);
      assertNotSame(storageLevel2, storageLevel1);
      assertNotNull(storageLevel2);
      assertFalse(storageLevel2.isValid());
      assertFalse(storageLevel2.useOffHeap());
      assertFalse(storageLevel2.useMemory());
      assertEquals(0, storageLevel2.toInt());
      assertFalse(storageLevel2.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel2.memoryMode());
      assertEquals(1, storageLevel2.apply$default$4());
      assertFalse(storageLevel2.useDisk());
      assertEquals(1, storageLevel2.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel2.replication());
      
      int int0 = storageLevel0.toInt();
      assertFalse(storageLevel0.equals((Object)storageLevel1));
      assertFalse(storageLevel0.equals((Object)storageLevel2));
      assertEquals(0, int0);
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel0, storageLevel2);
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.apply(false, false, false, 1328);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, true, true, (-5261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals((-889275715), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      
      StorageLevel storageLevel1 = storageLevel0.clone();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel0, storageLevel1);
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals((-889275715), storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(5, storageLevel0.toInt());
      assertFalse(storageLevel0.useDisk());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(5, storageLevel1.toInt());
      assertFalse(storageLevel1.isValid());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals((-889275715), storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertTrue(storageLevel1.useMemory());
      assertFalse(storageLevel1.useDisk());
      assertTrue(storageLevel1.deserialized());
      assertEquals((-889275715), storageLevel1.replication());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel(0, 0);
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, true, true, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.apply(false, false, false, false, 622);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.toInt());
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        StorageLevel.apply(true, true, false, true, 1240);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, true, true, false, 0);
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(6, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
      
      boolean boolean0 = storageLevel0.useOffHeap();
      assertTrue(boolean0);
      assertTrue(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(6, storageLevel0.toInt());
      assertEquals(MemoryMode.OFF_HEAP, storageLevel0.memoryMode());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(memory, 0 replicas)", string0);
      assertNotNull(string0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      
      String string1 = storageLevel0.description();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Memory Serialized 0x Replicated", string1);
      assertNotNull(string1);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(4, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.useMemory());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useMemory_$eq(true);
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertTrue(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertTrue(storageLevel1.useMemory());
      assertEquals(12, storageLevel1.toInt());
      assertEquals(1, storageLevel1.apply$default$4());
      assertFalse(storageLevel1.deserialized());
      assertFalse(storageLevel1.isValid());
      assertEquals(0, storageLevel1.replication());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel1.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertTrue(storageLevel1.useDisk());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
      
      String string0 = storageLevel0.toString();
      assertEquals("StorageLevel(memory, 1 replicas)", string0);
      assertNotNull(string0);
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertFalse(storageLevel0.deserialized());
      assertTrue(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      
      boolean boolean0 = storageLevel0.equals(storageLevel0);
      assertTrue(boolean0);
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      assertEquals(1, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.apply((ObjectInput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_deserialized_$eq(true);
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertTrue(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(0, storageLevel0.replication());
      assertEquals(1, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      assertNotNull(storageLevel0);
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(8, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(false);
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.toInt());
      
      int int0 = (-1521);
      // Undeclared exception!
      try { 
        StorageLevel.apply((-1521), 2087);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StorageLevel storageLevel0 = new StorageLevel((-319), (-319));
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useDisk());
      assertEquals((-319), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals((-319), storageLevel0.replication());
      assertTrue(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.toInt());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      assertNotNull(storageLevel0);
      assertTrue(storageLevel0.useMemory());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.deserialized());
      
      int int0 = 1878;
      // Undeclared exception!
      try { 
        StorageLevel.apply(1878, 3399);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useOffHeap_$eq(false);
      assertFalse(storageLevel0.useOffHeap());
      assertFalse(storageLevel0.deserialized());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertFalse(storageLevel0.isValid());
      assertTrue(storageLevel0.useMemory());
      assertEquals(1, storageLevel0.apply$default$4());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(12, storageLevel0.toInt());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.apply((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Off-heap storage level does not support deserialized storage
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 1529;
      // Undeclared exception!
      try { 
        StorageLevel.apply(1529, 1529);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.apply(2120, 2120);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed: Replication restricted to be less than 40 for calculating hash codes
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      
      String string0 = storageLevel0.description();
      assertEquals("Disk Memory Deserialized 0x Replicated", string0);
      assertNotNull(string0);
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useDisk());
      assertTrue(storageLevel0.deserialized());
      assertTrue(storageLevel0.useMemory());
      assertEquals(13, storageLevel0.toInt());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER_2();
      assertNotNull(storageLevel0);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(4, storageLevel0.toInt());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useDisk());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(true);
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.deserialized());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertTrue(storageLevel0.useDisk());
      assertEquals(0, storageLevel0.replication());
      assertTrue(storageLevel0.useMemory());
      assertEquals(12, storageLevel0.toInt());
      assertFalse(storageLevel0.isValid());
      
      StorageLevel storageLevel1 = StorageLevel.MEMORY_AND_DISK_2();
      assertFalse(storageLevel1.equals((Object)storageLevel0));
      assertNotSame(storageLevel1, storageLevel0);
      assertNotNull(storageLevel1);
      assertEquals(1, storageLevel1.apply$default$4());
      assertEquals(0, storageLevel1.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(MemoryMode.ON_HEAP, storageLevel1.memoryMode());
      assertFalse(storageLevel1.isValid());
      assertTrue(storageLevel1.deserialized());
      assertEquals(13, storageLevel1.toInt());
      assertFalse(storageLevel1.useOffHeap());
      assertTrue(storageLevel1.useMemory());
      assertEquals(0, storageLevel1.replication());
      assertTrue(storageLevel1.useDisk());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.NONE();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
      
      int int0 = storageLevel0.toInt();
      assertEquals(0, int0);
      assertFalse(storageLevel0.isValid());
      assertEquals(0, storageLevel0.toInt());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(0, storageLevel0.replication());
      assertEquals(0, storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertEquals(1, storageLevel0.apply$default$4());
      assertFalse(storageLevel0.deserialized());
      assertFalse(storageLevel0.useMemory());
      assertFalse(storageLevel0.useDisk());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      assertNotNull(storageLevel0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
      
      int int0 = storageLevel0.toInt();
      assertEquals(5, int0);
      assertFalse(storageLevel0.isValid());
      assertFalse(storageLevel0.useOffHeap());
      assertEquals(MemoryMode.ON_HEAP, storageLevel0.memoryMode());
      assertEquals(1, storageLevel0.apply$default$4());
      assertTrue(storageLevel0.useMemory());
      assertEquals((-889275715), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
      assertFalse(storageLevel0.useDisk());
      assertEquals(5, storageLevel0.toInt());
      assertTrue(storageLevel0.deserialized());
      assertEquals((-889275715), storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, false, false, false, 4);
      assertEquals(0, storageLevel0.toInt());
      assertEquals(4, storageLevel0.replication());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, false, false, (-2670));
      assertEquals(0, storageLevel0.toInt());
      assertEquals((-2670), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_AND_DISK_SER_2();
      String string0 = storageLevel0.description();
      assertEquals("Disk Memory Serialized 0x Replicated", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply((-1224), (-1224));
      String string0 = storageLevel0.toString();
      assertEquals(8, storageLevel0.toInt());
      assertEquals("StorageLevel(disk, -1224 replicas)", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_SER();
      String string0 = storageLevel0.description();
      assertEquals("Memory Serialized 0x Replicated", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.DISK_ONLY_2();
      int int0 = storageLevel0.toInt();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.apply(false, false, false, true, (-199));
      assertFalse(storageLevel0.useDisk());
      
      storageLevel0.org$apache$spark$storage$StorageLevel$$_useDisk_$eq(true);
      storageLevel0.description();
      StorageLevel storageLevel1 = StorageLevel.apply(true, true, true, (-199));
      storageLevel1.org$apache$spark$storage$StorageLevel$$_replication_$eq((-199));
      String string0 = storageLevel0.description();
      assertEquals("Disk Deserialized -199x Replicated", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StorageLevel storageLevel0 = StorageLevel.MEMORY_ONLY_2();
      storageLevel0.org$apache$spark$storage$StorageLevel$$_replication_$eq((-889275714));
      assertEquals((-889275714), storageLevel0.org$apache$spark$storage$StorageLevel$$_replication());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StorageLevel.MEMORY_AND_DISK_SER();
      String string0 = "7*h+=k\\IGQe";
      // Undeclared exception!
      try { 
        StorageLevel.fromString("7*h+=kIGQe");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: 7*h+=kIGQe
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        StorageLevel.fromString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid StorageLevel: null
         //
         verifyException("org.apache.spark.storage.StorageLevel$", e);
      }
  }
}
