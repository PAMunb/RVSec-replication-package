/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:22:21 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerExecutorAdded;
import org.apache.spark.scheduler.cluster.ExecutorInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerExecutorAdded_ESTest extends SparkListenerExecutorAdded_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "^", executorInfo0);
      ExecutorInfo executorInfo1 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(executorInfo1).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy((-2614L), "", executorInfo1);
      boolean boolean0 = sparkListenerExecutorAdded0.equals(sparkListenerExecutorAdded1);
      assertFalse(boolean0);
      assertEquals((-2614L), sparkListenerExecutorAdded1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "0=\"P9yD3Jz(}p1D)oM", (ExecutorInfo) null);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy(1989L, "&'k1)NIT4v!nfh(1qP", (ExecutorInfo) null);
      long long0 = sparkListenerExecutorAdded1.time();
      assertEquals(1989L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded((-1L), "", executorInfo0);
      long long0 = sparkListenerExecutorAdded0.time();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply((-1L), "J/Ktc*`](}e.t?q+_f", executorInfo0);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy((-1L), "J/Ktc*`](}e.t?q+_f", (ExecutorInfo) null);
      sparkListenerExecutorAdded1.productElement(2);
      assertEquals((-1L), sparkListenerExecutorAdded1.copy$default$1());
      assertEquals((-1L), sparkListenerExecutorAdded0.time());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded((-1489L), (String) null, executorInfo0);
      String string0 = sparkListenerExecutorAdded0.executorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(1L, "<+#|0RJc/mNWp", executorInfo0);
      String string0 = sparkListenerExecutorAdded0.executorId();
      assertEquals("<+#|0RJc/mNWp", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(0L, (String) null, executorInfo0);
      String string0 = sparkListenerExecutorAdded0.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(1L, "f^\"HuhXfP", executorInfo0);
      String string0 = sparkListenerExecutorAdded0.copy$default$2();
      assertEquals("f^\"HuhXfP", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "", (ExecutorInfo) null);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy(1188L, ",", (ExecutorInfo) null);
      long long0 = sparkListenerExecutorAdded1.copy$default$1();
      assertEquals(1188L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded((-1L), "", executorInfo0);
      long long0 = sparkListenerExecutorAdded0.copy$default$1();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "", executorInfo0);
      boolean boolean0 = sparkListenerExecutorAdded0.canEqual(sparkListenerExecutorAdded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply((-1L), "J/Ktc*`](}e.t?q+_f", executorInfo0);
      sparkListenerExecutorAdded0.productElement(2);
      assertEquals((-1L), sparkListenerExecutorAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "/nw04", executorInfo0);
      Object object0 = sparkListenerExecutorAdded0.productElement(1);
      assertEquals("/nw04", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(1L, "<+#|0RJc/mNWp", executorInfo0);
      Object object0 = sparkListenerExecutorAdded0.productElement(0);
      assertEquals(1L, object0);
      
      sparkListenerExecutorAdded0.canEqual(object0);
      assertEquals(1L, sparkListenerExecutorAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply((-125L), "", executorInfo0);
      sparkListenerExecutorAdded0.executorId();
      assertEquals((-125L), sparkListenerExecutorAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply((-2614L), ":", (ExecutorInfo) null);
      sparkListenerExecutorAdded0.executorInfo();
      assertEquals((-2614L), sparkListenerExecutorAdded0.time());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(0L, "scala.Tuple", executorInfo0);
      long long0 = sparkListenerExecutorAdded0.time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(3123L, "", (ExecutorInfo) null);
      sparkListenerExecutorAdded0.productIterator();
      assertEquals(3, sparkListenerExecutorAdded0.productArity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(10L, "-vW=#Xz;Rvx", (ExecutorInfo) null);
      String string0 = sparkListenerExecutorAdded0.productPrefix();
      assertEquals("SparkListenerExecutorAdded", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(10L, "-vW=#Xz;Rvx", (ExecutorInfo) null);
      int int0 = sparkListenerExecutorAdded0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(697L, "scala.Predef$StringAdd$", (ExecutorInfo) null);
      SparkListenerExecutorAdded.unapply(sparkListenerExecutorAdded0);
      assertEquals(697L, sparkListenerExecutorAdded0.copy$default$1());
      assertEquals(697L, sparkListenerExecutorAdded0.time());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn("()", "L%BKm\"oOEUy?K#K:\"", "()", "", "()").when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(1L, (String) null, executorInfo0);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = SparkListenerExecutorAdded.apply(1L, (String) null, executorInfo0);
      boolean boolean0 = sparkListenerExecutorAdded0.equals(sparkListenerExecutorAdded1);
      assertTrue(boolean0);
      assertEquals(1L, sparkListenerExecutorAdded1.time());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "blBT2MLwkQg", executorInfo0);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy(0L, "blBT2MLwkQg", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded1.equals(sparkListenerExecutorAdded0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(executorInfo0).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded((-1L), "", executorInfo0);
      ExecutorInfo executorInfo1 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorInfo1).toString();
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy((-1L), "", executorInfo1);
      boolean boolean0 = sparkListenerExecutorAdded1.equals(sparkListenerExecutorAdded0);
      assertFalse(boolean0);
      assertEquals((-1L), sparkListenerExecutorAdded1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "$()", (ExecutorInfo) null);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = SparkListenerExecutorAdded.apply(0L, "$()", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded1.equals(sparkListenerExecutorAdded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(2863L, "()", (ExecutorInfo) null);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = sparkListenerExecutorAdded0.copy(2863L, (String) null, (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded1.equals(sparkListenerExecutorAdded0);
      assertFalse(boolean0);
      assertEquals(2863L, sparkListenerExecutorAdded1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply((-38L), "", (ExecutorInfo) null);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = new SparkListenerExecutorAdded((-38L), " UX", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded0.equals(sparkListenerExecutorAdded1);
      assertFalse(boolean0);
      assertEquals((-38L), sparkListenerExecutorAdded0.time());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "$()", (ExecutorInfo) null);
      SparkListenerExecutorAdded sparkListenerExecutorAdded1 = SparkListenerExecutorAdded.apply(936L, "$()", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded0.equals(sparkListenerExecutorAdded1);
      assertFalse(sparkListenerExecutorAdded1.equals((Object)sparkListenerExecutorAdded0));
      assertFalse(boolean0);
      assertEquals(936L, sparkListenerExecutorAdded1.time());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(0L, "$()", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "$()", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded0.equals(sparkListenerExecutorAdded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(20L, "scala.math.Ordered$class", (ExecutorInfo) null);
      // Undeclared exception!
      try { 
        sparkListenerExecutorAdded0.productElement(131);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerExecutorAdded", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(1L, "<function1>", (ExecutorInfo) null);
      boolean boolean0 = sparkListenerExecutorAdded0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(2629L, "&x;/w:Kaws", (ExecutorInfo) null);
      ExecutorInfo executorInfo0 = sparkListenerExecutorAdded0.copy$default$3();
      assertNull(executorInfo0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExecutorInfo executorInfo0 = mock(ExecutorInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded(2829L, "", executorInfo0);
      String string0 = sparkListenerExecutorAdded0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Function1<Object, Function1<String, Function1<ExecutorInfo, SparkListenerExecutorAdded>>> function1_0 = SparkListenerExecutorAdded.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded((-2484L), "t9Q;=(Df60b", (ExecutorInfo) null);
      sparkListenerExecutorAdded0.hashCode();
      assertEquals((-2484L), sparkListenerExecutorAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Function1<Tuple3<Object, String, ExecutorInfo>, SparkListenerExecutorAdded> function1_0 = SparkListenerExecutorAdded.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option<Tuple3<Object, String, ExecutorInfo>> option0 = SparkListenerExecutorAdded.unapply((SparkListenerExecutorAdded) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = SparkListenerExecutorAdded.apply(0L, "", (ExecutorInfo) null);
      long long0 = sparkListenerExecutorAdded0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SparkListenerExecutorAdded sparkListenerExecutorAdded0 = new SparkListenerExecutorAdded((-2913L), "&x;/w:Kaws", (ExecutorInfo) null);
      String string0 = sparkListenerExecutorAdded0.toString();
      assertEquals("SparkListenerExecutorAdded(-2913,&x;/w:Kaws,null)", string0);
      assertEquals(3, sparkListenerExecutorAdded0.productArity());
  }
}
