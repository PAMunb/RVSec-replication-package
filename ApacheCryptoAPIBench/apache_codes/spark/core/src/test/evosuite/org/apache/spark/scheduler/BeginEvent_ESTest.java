/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:29:50 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.BeginEvent;
import org.apache.spark.scheduler.Task;
import org.apache.spark.scheduler.TaskInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BeginEvent_ESTest extends BeginEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      boolean boolean0 = beginEvent0.canEqual(beginEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      Object object0 = beginEvent0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      Object object0 = beginEvent0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      Task<?> task0 = beginEvent0.task();
      assertNull(task0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      boolean boolean0 = beginEvent0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      String string0 = beginEvent0.productPrefix();
      assertEquals("BeginEvent", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      TaskInfo taskInfo0 = beginEvent0.taskInfo();
      assertNull(taskInfo0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      int int0 = beginEvent0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      beginEvent0.productIterator();
      assertEquals(2, beginEvent0.productArity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      Option<Tuple2<Task<Object>, TaskInfo>> option0 = BeginEvent.unapply(beginEvent0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      boolean boolean0 = beginEvent0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      boolean boolean0 = beginEvent0.equals(beginEvent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      // Undeclared exception!
      try { 
        beginEvent0.productElement(1362);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.BeginEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      Task<?> task0 = beginEvent0.copy$default$1();
      assertNull(task0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      BeginEvent beginEvent1 = beginEvent0.copy((Task<?>) null, (TaskInfo) null);
      assertNotSame(beginEvent0, beginEvent1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeginEvent beginEvent0 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      BeginEvent beginEvent1 = new BeginEvent((Task<?>) null, (TaskInfo) null);
      boolean boolean0 = beginEvent0.equals(beginEvent1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option<Tuple2<Task<Object>, TaskInfo>> option0 = BeginEvent.unapply((BeginEvent) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<Tuple2<Task<?>, TaskInfo>, BeginEvent> function1_0 = BeginEvent.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      TaskInfo taskInfo0 = beginEvent0.copy$default$2();
      assertNull(taskInfo0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<Task<?>, Function1<TaskInfo, BeginEvent>> function1_0 = BeginEvent.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      beginEvent0.hashCode();
      assertEquals(2, beginEvent0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeginEvent beginEvent0 = BeginEvent.apply((Task<?>) null, (TaskInfo) null);
      String string0 = beginEvent0.toString();
      assertEquals("BeginEvent(null,null)", string0);
      assertEquals(2, beginEvent0.productArity());
  }
}
