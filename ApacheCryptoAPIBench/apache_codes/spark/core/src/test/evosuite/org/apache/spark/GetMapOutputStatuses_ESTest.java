/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:16:42 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.GetMapOutputStatuses;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GetMapOutputStatuses_ESTest extends GetMapOutputStatuses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses((-1072));
      GetMapOutputStatuses getMapOutputStatuses1 = new GetMapOutputStatuses(1073741824);
      boolean boolean0 = getMapOutputStatuses0.equals(getMapOutputStatuses1);
      assertFalse(boolean0);
      assertEquals(1073741824, getMapOutputStatuses1.shuffleId());
      assertFalse(getMapOutputStatuses1.equals((Object)getMapOutputStatuses0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(0);
      int int0 = getMapOutputStatuses0.shuffleId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses((-1072));
      int int0 = getMapOutputStatuses0.shuffleId();
      assertEquals((-1072), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(0);
      GetMapOutputStatuses getMapOutputStatuses1 = getMapOutputStatuses0.copy(0);
      assertTrue(getMapOutputStatuses1.equals((Object)getMapOutputStatuses0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(146);
      int int0 = getMapOutputStatuses0.copy$default$1();
      assertEquals(146, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply((-526));
      int int0 = getMapOutputStatuses0.copy$default$1();
      assertEquals((-526), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(0);
      getMapOutputStatuses0.canEqual(getMapOutputStatuses0);
      assertEquals(0, getMapOutputStatuses0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(3513);
      Object object0 = getMapOutputStatuses0.productElement(0);
      assertEquals(3513, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(1064);
      String string0 = getMapOutputStatuses0.productPrefix();
      assertEquals("GetMapOutputStatuses", string0);
      assertEquals(1064, getMapOutputStatuses0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(0);
      getMapOutputStatuses0.productIterator();
      assertEquals(0, getMapOutputStatuses0.copy$default$1());
      assertEquals(1, getMapOutputStatuses0.productArity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(603);
      int int0 = getMapOutputStatuses0.shuffleId();
      assertEquals(603, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply((-526));
      int int0 = getMapOutputStatuses0.productArity();
      assertEquals((-526), getMapOutputStatuses0.copy$default$1());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses((-537));
      GetMapOutputStatuses getMapOutputStatuses1 = GetMapOutputStatuses.apply((-2274));
      boolean boolean0 = getMapOutputStatuses0.equals(getMapOutputStatuses1);
      assertEquals((-2274), getMapOutputStatuses1.copy$default$1());
      assertFalse(boolean0);
      assertFalse(getMapOutputStatuses1.equals((Object)getMapOutputStatuses0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses((-3071));
      GetMapOutputStatuses getMapOutputStatuses1 = getMapOutputStatuses0.copy((-3071));
      boolean boolean0 = getMapOutputStatuses1.equals(getMapOutputStatuses0);
      assertTrue(boolean0);
      assertEquals((-3071), getMapOutputStatuses1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(162);
      boolean boolean0 = getMapOutputStatuses0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(192);
      boolean boolean0 = getMapOutputStatuses0.equals(getMapOutputStatuses0);
      assertTrue(boolean0);
      assertEquals(192, getMapOutputStatuses0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses((-517));
      // Undeclared exception!
      try { 
        getMapOutputStatuses0.productElement((-517));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.GetMapOutputStatuses", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(1082);
      GetMapOutputStatuses.unapply(getMapOutputStatuses0);
      assertEquals(1082, getMapOutputStatuses0.copy$default$1());
      assertEquals(1082, getMapOutputStatuses0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Function1<Object, GetMapOutputStatuses> function1_0 = GetMapOutputStatuses.andThen((Function1<GetMapOutputStatuses, GetMapOutputStatuses>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option<Object> option0 = GetMapOutputStatuses.unapply((GetMapOutputStatuses) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<GetMapOutputStatuses, GetMapOutputStatuses> function1_0 = GetMapOutputStatuses.compose((Function1<GetMapOutputStatuses, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(577);
      boolean boolean0 = getMapOutputStatuses0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(33554432);
      GetMapOutputStatuses getMapOutputStatuses1 = getMapOutputStatuses0.copy(33554432);
      assertTrue(getMapOutputStatuses1.equals((Object)getMapOutputStatuses0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(0);
      getMapOutputStatuses0.hashCode();
      assertEquals(0, getMapOutputStatuses0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = new GetMapOutputStatuses(0);
      int int0 = getMapOutputStatuses0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GetMapOutputStatuses getMapOutputStatuses0 = GetMapOutputStatuses.apply(4);
      String string0 = getMapOutputStatuses0.toString();
      assertEquals("GetMapOutputStatuses(4)", string0);
  }
}
