/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:31:36 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.JobResult;
import org.apache.spark.scheduler.SparkListenerJobEnd;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerJobEnd_ESTest extends SparkListenerJobEnd_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2503), 11, jobResult0);
      JobResult jobResult1 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult1).toString();
      SparkListenerJobEnd sparkListenerJobEnd1 = SparkListenerJobEnd.apply(11, (-2503), jobResult1);
      boolean boolean0 = sparkListenerJobEnd1.equals(sparkListenerJobEnd0);
      assertFalse(boolean0);
      assertEquals((-2503L), sparkListenerJobEnd1.copy$default$2());
      assertEquals(11, sparkListenerJobEnd1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd(0, 0, jobResult0);
      JobResult jobResult1 = sparkListenerJobEnd0.copy$default$3();
      SparkListenerJobEnd sparkListenerJobEnd1 = sparkListenerJobEnd0.copy(0, 530L, jobResult1);
      long long0 = sparkListenerJobEnd1.time();
      assertEquals(0, sparkListenerJobEnd1.copy$default$1());
      assertEquals(530L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 0, (JobResult) null);
      SparkListenerJobEnd sparkListenerJobEnd1 = sparkListenerJobEnd0.copy((-2805), (-2805), (JobResult) null);
      long long0 = sparkListenerJobEnd1.time();
      assertEquals((-2805L), long0);
      assertEquals((-2805), sparkListenerJobEnd1.copy$default$1());
      assertEquals(0, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(24, 24, (JobResult) null);
      sparkListenerJobEnd0.productElement(2);
      assertEquals(24L, sparkListenerJobEnd0.time());
      assertEquals(24, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 1L, jobResult0);
      sparkListenerJobEnd0.jobResult();
      assertEquals(1L, sparkListenerJobEnd0.time());
      assertEquals(0, sparkListenerJobEnd0.jobId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(1, (-3801L), jobResult0);
      int int0 = sparkListenerJobEnd0.jobId();
      assertEquals(1, int0);
      assertEquals((-3801L), sparkListenerJobEnd0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd((-1932), 0L, (JobResult) null);
      int int0 = sparkListenerJobEnd0.jobId();
      assertEquals((-1932), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 1024L, (JobResult) null);
      SparkListenerJobEnd sparkListenerJobEnd1 = sparkListenerJobEnd0.copy(0, 0, (JobResult) null);
      assertEquals(0, sparkListenerJobEnd0.jobId());
      assertEquals(1024L, sparkListenerJobEnd0.copy$default$2());
      assertEquals(0, sparkListenerJobEnd1.jobId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd(3, 3, jobResult0);
      long long0 = sparkListenerJobEnd0.copy$default$2();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd((-157), (-157), jobResult0);
      long long0 = sparkListenerJobEnd0.copy$default$2();
      assertEquals((-157L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd(0, (-3562L), jobResult0);
      int int0 = sparkListenerJobEnd0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd(3, 3, jobResult0);
      int int0 = sparkListenerJobEnd0.copy$default$1();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd(24, (-1565L), jobResult0);
      Object object0 = sparkListenerJobEnd0.productElement(2);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 0L, jobResult0);
      sparkListenerJobEnd0.productElement(1);
      assertEquals(0, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 0, (JobResult) null);
      Object object0 = sparkListenerJobEnd0.productElement(0);
      assertEquals(0, object0);
      
      sparkListenerJobEnd0.canEqual(object0);
      assertEquals(0, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-3544), (-3544), jobResult0);
      sparkListenerJobEnd0.productIterator();
      assertEquals((-3544L), sparkListenerJobEnd0.time());
      assertEquals(3, sparkListenerJobEnd0.productArity());
      assertEquals((-3544), sparkListenerJobEnd0.jobId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 1024L, (JobResult) null);
      int int0 = sparkListenerJobEnd0.jobId();
      assertEquals(0, int0);
      assertEquals(1024L, sparkListenerJobEnd0.time());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2579), (-2579), (JobResult) null);
      int int0 = sparkListenerJobEnd0.productArity();
      assertEquals(3, int0);
      assertEquals((-2579), sparkListenerJobEnd0.jobId());
      assertEquals((-2579L), sparkListenerJobEnd0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      SparkListenerJobEnd sparkListenerJobEnd0 = new SparkListenerJobEnd((-157), (-157), jobResult0);
      String string0 = sparkListenerJobEnd0.productPrefix();
      assertEquals("SparkListenerJobEnd", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 0, (JobResult) null);
      sparkListenerJobEnd0.jobResult();
      assertEquals(0, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 0, (JobResult) null);
      sparkListenerJobEnd0.time();
      assertEquals(0, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(11, 11, jobResult0);
      JobResult jobResult1 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(jobResult1).toString();
      SparkListenerJobEnd sparkListenerJobEnd1 = SparkListenerJobEnd.apply(11, 11, jobResult1);
      boolean boolean0 = sparkListenerJobEnd1.equals(sparkListenerJobEnd0);
      assertFalse(boolean0);
      assertEquals(11, sparkListenerJobEnd1.copy$default$1());
      assertEquals(11L, sparkListenerJobEnd1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(11, 14, jobResult0);
      JobResult jobResult1 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(jobResult1).toString();
      SparkListenerJobEnd sparkListenerJobEnd1 = SparkListenerJobEnd.apply(11, 11, jobResult1);
      boolean boolean0 = sparkListenerJobEnd1.equals(sparkListenerJobEnd0);
      assertEquals(11, sparkListenerJobEnd1.copy$default$1());
      assertEquals(11L, sparkListenerJobEnd1.time());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2), (-6), jobResult0);
      JobResult jobResult1 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(jobResult1).toString();
      SparkListenerJobEnd sparkListenerJobEnd1 = SparkListenerJobEnd.apply((-6), (-6), jobResult1);
      boolean boolean0 = sparkListenerJobEnd1.equals(sparkListenerJobEnd0);
      assertFalse(boolean0);
      assertEquals((-6L), sparkListenerJobEnd1.time());
      assertEquals((-6), sparkListenerJobEnd1.jobId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(2210, 2210, jobResult0);
      SparkListenerJobEnd sparkListenerJobEnd1 = SparkListenerJobEnd.apply(2210, 2210, (JobResult) null);
      boolean boolean0 = sparkListenerJobEnd1.equals(sparkListenerJobEnd0);
      assertFalse(boolean0);
      assertEquals(2210L, sparkListenerJobEnd1.copy$default$2());
      assertEquals(2210, sparkListenerJobEnd1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(2045, 2045, (JobResult) null);
      boolean boolean0 = sparkListenerJobEnd0.equals((Object) null);
      assertEquals(2045L, sparkListenerJobEnd0.time());
      assertEquals(2045, sparkListenerJobEnd0.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-30), (-30), (JobResult) null);
      boolean boolean0 = sparkListenerJobEnd0.equals(sparkListenerJobEnd0);
      assertEquals((-30L), sparkListenerJobEnd0.time());
      assertEquals((-30), sparkListenerJobEnd0.jobId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(11, 11, (JobResult) null);
      // Undeclared exception!
      try { 
        sparkListenerJobEnd0.productElement(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerJobEnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Tuple3<Object, Object, JobResult>, SparkListenerJobEnd> function1_0 = SparkListenerJobEnd.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-86), 0L, jobResult0);
      sparkListenerJobEnd0.copy$default$2();
      assertEquals((-86), sparkListenerJobEnd0.jobId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2872), (-2872), (JobResult) null);
      sparkListenerJobEnd0.hashCode();
      assertEquals((-2872L), sparkListenerJobEnd0.time());
      assertEquals((-2872), sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(1188, 1188, (JobResult) null);
      SparkListenerJobEnd sparkListenerJobEnd1 = sparkListenerJobEnd0.copy(1188, 1188, (JobResult) null);
      assertTrue(sparkListenerJobEnd1.equals((Object)sparkListenerJobEnd0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2872), (-2872), (JobResult) null);
      String string0 = sparkListenerJobEnd0.toString();
      assertEquals(3, sparkListenerJobEnd0.productArity());
      assertEquals("SparkListenerJobEnd(-2872,-2872,null)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(1714, 1714, (JobResult) null);
      sparkListenerJobEnd0.logEvent();
      assertEquals(1714L, sparkListenerJobEnd0.copy$default$2());
      assertEquals(1714, sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply(0, 1024L, (JobResult) null);
      sparkListenerJobEnd0.copy$default$3();
      assertEquals(0, sparkListenerJobEnd0.jobId());
      assertEquals(1024L, sparkListenerJobEnd0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Function1<Object, Function1<Object, Function1<JobResult, SparkListenerJobEnd>>> function1_0 = SparkListenerJobEnd.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JobResult jobResult0 = mock(JobResult.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(jobResult0).toString();
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-59670716), (-59670716), jobResult0);
      sparkListenerJobEnd0.canEqual(sparkListenerJobEnd0);
      assertEquals((-59670716L), sparkListenerJobEnd0.copy$default$2());
      assertEquals((-59670716), sparkListenerJobEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2048144789), (-2048144789), (JobResult) null);
      int int0 = sparkListenerJobEnd0.copy$default$1();
      assertEquals((-2048144789L), sparkListenerJobEnd0.time());
      assertEquals((-2048144789), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option<Tuple3<Object, Object, JobResult>> option0 = SparkListenerJobEnd.unapply((SparkListenerJobEnd) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SparkListenerJobEnd sparkListenerJobEnd0 = SparkListenerJobEnd.apply((-2579), (-2579), (JobResult) null);
      SparkListenerJobEnd.unapply(sparkListenerJobEnd0);
      assertEquals((-2579L), sparkListenerJobEnd0.time());
      assertEquals((-2579), sparkListenerJobEnd0.copy$default$1());
      assertEquals((-2579), sparkListenerJobEnd0.jobId());
  }
}
