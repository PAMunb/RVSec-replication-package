/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:25:20 GMT 2022
 */

package org.apache.spark.deploy.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import org.apache.spark.deploy.rest.CreateSubmissionResponse;
import org.apache.spark.deploy.rest.RestSubmissionClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function0;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RestSubmissionClient_ESTest extends RestSubmissionClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("");
      // Undeclared exception!
      try { 
        restSubmissionClient0.org$apache$spark$deploy$rest$RestSubmissionClient$$reportSubmissionStatus((CreateSubmissionResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.deploy.rest.RestSubmissionClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = null;
      try {
        restSubmissionClient0 = new RestSubmissionClient((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("");
      // Undeclared exception!
      try { 
        restSubmissionClient0.org$apache$spark$deploy$rest$RestSubmissionClient$$validateMaster("r-^}xT.<iLGBg@pgX[o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This REST client only supports master URLs that start with one of the following: spark://,mesos://
         //
         verifyException("org.apache.spark.deploy.rest.RestSubmissionClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.initializeLogIfNecessary(false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.logInfo((Function0<String>) null);
      restSubmissionClient0.org$apache$spark$internal$Logging$$log_();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.org$apache$spark$internal$Logging$$log_();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("E.0`&]`5 Qh");
      restSubmissionClient0.log();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("E.0`&]`5 Qh");
      restSubmissionClient0.logName();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RestSubmissionClient.PROTOCOL_VERSION();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("");
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      restSubmissionClient0.logInfo(function0_0, throwable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("E.0`&]`5 Qh");
      restSubmissionClient0.requestSubmissionStatus$default$2();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.initializeLogIfNecessary$default$2();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.logError((Function0<String>) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.org$apache$spark$deploy$rest$RestSubmissionClient$$handleConnectionException(";.3c?");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      restSubmissionClient0.logTrace((Function0<String>) null, (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient("(~em}oy3wAk)L;4-");
      // Undeclared exception!
      try { 
        restSubmissionClient0.requestSubmissionStatus("org.apache.spark.deploy.rest.RestSubmissionClient$$anonfun$org$apache$spark$deploy$rest$RestSubmissionClient$$get$1", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This REST client only supports master URLs that start with one of the following: spark://,mesos://
         //
         verifyException("org.apache.spark.deploy.rest.RestSubmissionClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RestSubmissionClient restSubmissionClient0 = new RestSubmissionClient(";.3c?");
      URL uRL0 = restSubmissionClient0.org$apache$spark$deploy$rest$RestSubmissionClient$$getKillUrl("jGHNqO>`\"XP`", "`GG'r^&");
      assertEquals("http://jGHNqO>`\"XP`/v1/submissions/kill/`GG'r^&", uRL0.toString());
  }
}
