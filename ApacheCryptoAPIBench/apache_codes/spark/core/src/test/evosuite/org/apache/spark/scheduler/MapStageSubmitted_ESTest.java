/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:56:50 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.spark.ShuffleDependency;
import org.apache.spark.scheduler.DAGSchedulerSuite;
import org.apache.spark.scheduler.JobListener;
import org.apache.spark.scheduler.MapStageSubmitted;
import org.apache.spark.util.CallSite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapStageSubmitted_ESTest extends MapStageSubmitted_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(0, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      int int0 = mapStageSubmitted0.jobId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(552, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      int int0 = mapStageSubmitted0.jobId();
      assertEquals(552, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(718, (ShuffleDependency<?, ?, ?>) null, callSite0, jobListener0, (Properties) null);
      mapStageSubmitted0.dependency();
      assertEquals(718, mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(shuffleDependency0).toString();
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(0, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      ShuffleDependency<?, ?, ?> shuffleDependency1 = mapStageSubmitted0.dependency();
      CallSite callSite1 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(callSite1).toString();
      JobListener jobListener1 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jobListener1).toString();
      MapStageSubmitted mapStageSubmitted1 = mapStageSubmitted0.copy(0, shuffleDependency1, callSite1, jobListener1, (Properties) null);
      assertEquals(0, mapStageSubmitted0.copy$default$1());
      assertEquals(0, mapStageSubmitted1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shuffleDependency0).toString();
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(341, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency1 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shuffleDependency1).toString();
      CallSite callSite1 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(callSite1).toString();
      MapStageSubmitted mapStageSubmitted1 = mapStageSubmitted0.copy(341, shuffleDependency1, callSite1, (JobListener) null, (Properties) null);
      mapStageSubmitted1.listener();
      assertEquals(341, mapStageSubmitted1.jobId());
      assertEquals(341, mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shuffleDependency0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(3, shuffleDependency0, (CallSite) null, jobListener0, (Properties) null);
      mapStageSubmitted0.copy$default$4();
      assertEquals(3, mapStageSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(0, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      int int0 = mapStageSubmitted0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shuffleDependency0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(0, shuffleDependency0, (CallSite) null, jobListener0, (Properties) null);
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency1 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(shuffleDependency1).toString();
      JobListener jobListener1 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jobListener1).toString();
      MapStageSubmitted mapStageSubmitted1 = mapStageSubmitted0.copy((-1976), shuffleDependency1, (CallSite) null, jobListener1, (Properties) null);
      int int0 = mapStageSubmitted1.copy$default$1();
      assertEquals((-1976), int0);
      assertEquals(0, mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(1371, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      boolean boolean0 = mapStageSubmitted0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shuffleDependency0).toString();
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(2315, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      mapStageSubmitted0.productElement(4);
      assertEquals(2315, mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply((-1), (ShuffleDependency<?, ?, ?>) null, callSite0, jobListener0, (Properties) null);
      mapStageSubmitted0.productElement(1);
      assertEquals((-1), mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted((-1761), shuffleDependency0, callSite0, jobListener0, (Properties) null);
      Object object0 = mapStageSubmitted0.productElement(0);
      assertEquals((-1761), object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn("*rvm^36za`\"~;U+;", "scala.Tuple2").when(shuffleDependency0).toString();
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn("*rvm^36za`\"~;U+;", "org.apache.spark.scheduler.MapStageSubmitted$").when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn("g", ">IAv,k?w", (String) null, "org.apache.spark.scheduler.MapStageSubmitted$").when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(20, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      mapStageSubmitted0.productElement(3);
      assertEquals(20, mapStageSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(992, shuffleDependency0, (CallSite) null, jobListener0, (Properties) null);
      Object object0 = mapStageSubmitted0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(1691, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      String string0 = mapStageSubmitted0.productPrefix();
      assertEquals("MapStageSubmitted", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(0, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      mapStageSubmitted0.productIterator();
      assertEquals(0, mapStageSubmitted0.copy$default$1());
      assertEquals(5, mapStageSubmitted0.productArity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply((-1), (ShuffleDependency<?, ?, ?>) null, callSite0, jobListener0, (Properties) null);
      mapStageSubmitted0.properties();
      assertEquals((-1), mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(0, shuffleDependency0, (CallSite) null, (JobListener) null, (Properties) null);
      CallSite callSite0 = mapStageSubmitted0.callSite();
      assertNull(callSite0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted((-1761), shuffleDependency0, callSite0, jobListener0, (Properties) null);
      int int0 = mapStageSubmitted0.jobId();
      assertEquals((-1761), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shuffleDependency0).toString();
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(2315, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      int int0 = mapStageSubmitted0.productArity();
      assertEquals(5, int0);
      assertEquals(2315, mapStageSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(shuffleDependency0).toString();
      CallSite callSite0 = mock(CallSite.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callSite0).toString();
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(jobListener0).toString();
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(341, shuffleDependency0, callSite0, jobListener0, (Properties) null);
      mapStageSubmitted0.listener();
      assertEquals(341, mapStageSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply((-544), (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      MapStageSubmitted.unapply(mapStageSubmitted0);
      assertEquals((-544), mapStageSubmitted0.copy$default$1());
      assertEquals((-544), mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(654, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      boolean boolean0 = mapStageSubmitted0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(658, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      // Undeclared exception!
      try { 
        mapStageSubmitted0.productElement(658);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.MapStageSubmitted", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(654, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      mapStageSubmitted0.hashCode();
      assertEquals(654, mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      JobListener jobListener0 = mock(JobListener.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(1, shuffleDependency0, (CallSite) null, jobListener0, (Properties) null);
      int int0 = mapStageSubmitted0.copy$default$1();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Properties properties0 = MapStageSubmitted.$lessinit$greater$default$5();
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Properties properties0 = MapStageSubmitted.apply$default$5();
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Tuple5<Object, ShuffleDependency<?, ?, ?>, CallSite, JobListener, Properties>, MapStageSubmitted> function1_0 = MapStageSubmitted.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply(1407, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      mapStageSubmitted0.copy$default$3();
      assertEquals(1407, mapStageSubmitted0.jobId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply((-259), (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      mapStageSubmitted0.copy$default$2();
      assertEquals((-259), mapStageSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener> shuffleDependency0 = (ShuffleDependency<DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener, DAGSchedulerSuite.SimpleListener>) mock(ShuffleDependency.class, new ViolatedAssumptionAnswer());
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(0, shuffleDependency0, (CallSite) null, (JobListener) null, (Properties) null);
      JobListener jobListener0 = mapStageSubmitted0.copy$default$4();
      assertNull(jobListener0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option<Tuple5<Object, ShuffleDependency<Object, Object, Object>, CallSite, JobListener, Properties>> option0 = MapStageSubmitted.unapply((MapStageSubmitted) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = MapStageSubmitted.apply((-3087), (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      mapStageSubmitted0.canEqual(mapStageSubmitted0);
      assertEquals((-3087), mapStageSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted(94, (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      Properties properties0 = mapStageSubmitted0.copy$default$5();
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Function1<Object, Function1<ShuffleDependency<?, ?, ?>, Function1<CallSite, Function1<JobListener, Function1<Properties, MapStageSubmitted>>>>> function1_0 = MapStageSubmitted.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MapStageSubmitted mapStageSubmitted0 = new MapStageSubmitted((-430675100), (ShuffleDependency<?, ?, ?>) null, (CallSite) null, (JobListener) null, (Properties) null);
      String string0 = mapStageSubmitted0.toString();
      assertEquals("MapStageSubmitted(-430675100,null,null,null,null)", string0);
      assertEquals(5, mapStageSubmitted0.productArity());
  }
}
