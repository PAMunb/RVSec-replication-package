/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:41:39 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerBlockManagerRemoved;
import org.apache.spark.storage.BlockManagerId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerBlockManagerRemoved_ESTest extends SparkListenerBlockManagerRemoved_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, blockManagerId0);
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved1 = sparkListenerBlockManagerRemoved0.copy(638L, (BlockManagerId) null);
      boolean boolean0 = sparkListenerBlockManagerRemoved1.equals(sparkListenerBlockManagerRemoved0);
      assertEquals(638L, sparkListenerBlockManagerRemoved1.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, blockManagerId0);
      long long0 = sparkListenerBlockManagerRemoved0.time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply(1L, blockManagerId0);
      long long0 = sparkListenerBlockManagerRemoved0.time();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply(0L, (BlockManagerId) null);
      Object object0 = sparkListenerBlockManagerRemoved0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, blockManagerId0);
      BlockManagerId blockManagerId1 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("P+").when(blockManagerId1).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved1 = sparkListenerBlockManagerRemoved0.copy((-592L), blockManagerId1);
      assertEquals((-592L), sparkListenerBlockManagerRemoved1.time());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(1019L, (BlockManagerId) null);
      long long0 = sparkListenerBlockManagerRemoved0.copy$default$1();
      assertEquals(1019L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply((-1224L), blockManagerId0);
      long long0 = sparkListenerBlockManagerRemoved0.copy$default$1();
      assertEquals((-1224L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(1L, (BlockManagerId) null);
      boolean boolean0 = sparkListenerBlockManagerRemoved0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved((-231L), blockManagerId0);
      Object object0 = sparkListenerBlockManagerRemoved0.productElement(0);
      assertEquals((-231L), object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(1707L, blockManagerId0);
      Object object0 = sparkListenerBlockManagerRemoved0.productElement(1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply(1L, blockManagerId0);
      sparkListenerBlockManagerRemoved0.productIterator();
      assertEquals(2, sparkListenerBlockManagerRemoved0.productArity());
      assertEquals(1L, sparkListenerBlockManagerRemoved0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply(0L, (BlockManagerId) null);
      int int0 = sparkListenerBlockManagerRemoved0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, (BlockManagerId) null);
      BlockManagerId blockManagerId0 = sparkListenerBlockManagerRemoved0.blockManagerId();
      assertNull(blockManagerId0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply((-190L), blockManagerId0);
      long long0 = sparkListenerBlockManagerRemoved0.time();
      assertEquals((-190L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, (BlockManagerId) null);
      String string0 = sparkListenerBlockManagerRemoved0.productPrefix();
      assertEquals("SparkListenerBlockManagerRemoved", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(19L, blockManagerId0);
      BlockManagerId blockManagerId1 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("h+").when(blockManagerId1).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved1 = sparkListenerBlockManagerRemoved0.copy(0L, blockManagerId1);
      boolean boolean0 = sparkListenerBlockManagerRemoved1.equals(sparkListenerBlockManagerRemoved0);
      assertFalse(boolean0);
      assertEquals(19L, sparkListenerBlockManagerRemoved0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("zV!9c!3=IE|LR]r0=").when(blockManagerId0).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, blockManagerId0);
      BlockManagerId blockManagerId1 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("h+", "zV!9c!3=IE|LR]r0=").when(blockManagerId1).toString();
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved1 = sparkListenerBlockManagerRemoved0.copy(0L, blockManagerId1);
      boolean boolean0 = sparkListenerBlockManagerRemoved1.equals(sparkListenerBlockManagerRemoved0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply((-1929L), (BlockManagerId) null);
      boolean boolean0 = sparkListenerBlockManagerRemoved0.equals((Object) null);
      assertEquals((-1929L), sparkListenerBlockManagerRemoved0.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved((-1L), (BlockManagerId) null);
      boolean boolean0 = sparkListenerBlockManagerRemoved0.equals(sparkListenerBlockManagerRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply(1017L, (BlockManagerId) null);
      SparkListenerBlockManagerRemoved.unapply(sparkListenerBlockManagerRemoved0);
      assertEquals(1017L, sparkListenerBlockManagerRemoved0.time());
      assertEquals(1017L, sparkListenerBlockManagerRemoved0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply(648L, (BlockManagerId) null);
      sparkListenerBlockManagerRemoved0.hashCode();
      assertEquals(648L, sparkListenerBlockManagerRemoved0.time());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option<Tuple2<Object, BlockManagerId>> option0 = SparkListenerBlockManagerRemoved.unapply((SparkListenerBlockManagerRemoved) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, (BlockManagerId) null);
      long long0 = sparkListenerBlockManagerRemoved0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Function1<Object, Function1<BlockManagerId, SparkListenerBlockManagerRemoved>> function1_0 = SparkListenerBlockManagerRemoved.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(1L, (BlockManagerId) null);
      BlockManagerId blockManagerId0 = sparkListenerBlockManagerRemoved0.copy$default$2();
      assertNull(blockManagerId0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = new SparkListenerBlockManagerRemoved(0L, (BlockManagerId) null);
      boolean boolean0 = sparkListenerBlockManagerRemoved0.canEqual(sparkListenerBlockManagerRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply((-2L), (BlockManagerId) null);
      sparkListenerBlockManagerRemoved0.logEvent();
      assertEquals((-2L), sparkListenerBlockManagerRemoved0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply((-5327L), (BlockManagerId) null);
      String string0 = sparkListenerBlockManagerRemoved0.toString();
      assertEquals("SparkListenerBlockManagerRemoved(-5327,null)", string0);
      assertEquals(2, sparkListenerBlockManagerRemoved0.productArity());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Tuple2<Object, BlockManagerId>, SparkListenerBlockManagerRemoved> function1_0 = SparkListenerBlockManagerRemoved.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparkListenerBlockManagerRemoved sparkListenerBlockManagerRemoved0 = SparkListenerBlockManagerRemoved.apply((-5354L), (BlockManagerId) null);
      // Undeclared exception!
      try { 
        sparkListenerBlockManagerRemoved0.productElement(5022);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerBlockManagerRemoved", e);
      }
  }
}
