/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:35:26 GMT 2022
 */

package org.apache.spark.deploy.history;

//import org.junit.Test;
//import static org.junit.Assert.*;
//import static org.evosuite.shaded.org.mockito.Mockito.*;
//import static org.evosuite.runtime.EvoAssertions.*;
//import org.apache.spark.deploy.history.CacheKey;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.evosuite.runtime.ViolatedAssumptionAnswer;
//import org.junit.runner.RunWith;
//import scala.Function1;
//import scala.Option;
//import scala.PartialFunction;
//import scala.Tuple2;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CacheKey_ESTest {// extends CacheKey_ESTest_scaffolding {

//  @Test(timeout = 4000)
//  public void test00()  throws Throwable  {
//      Option<Option<String>> option0 = (Option<Option<String>>) mock(Option.class, new ViolatedAssumptionAnswer());
//      doReturn((Object) null).when(option0).getOrElse(any(scala.Function0.class));
//      Option<String> option1 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
//      doReturn("scala.Predef$StringAdd$").when(option1).toString();
//      doReturn(option0).when(option1).map(any(scala.Function1.class));
//      CacheKey cacheKey0 = new CacheKey("]xq(~c:-\"2NSP,Xq", option1);
//      String string0 = cacheKey0.toString();
//      assertEquals("]xq(~c:-\"2NSP,Xqnull", string0);
//  }
//
////  @Test(timeout = 4000)
////  public void test01()  throws Throwable  {
////      None. none_0 = mock(None..class, new ViolatedAssumptionAnswer());
////      doReturn("scala.collection.IndexedSsq$").when(none_0).toString();
////      Option<None.> option0 = (Option<None.>) mock(Option.class, new ViolatedAssumptionAnswer());
////      doReturn((PartialFunction.Lifted<None., None.>) null, none_0).when(option0).getOrElse(any(scala.Function0.class));
////      Option<String> option1 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
////      doReturn("]xq(~c:-\"2NSP,Xq", "]xq(~c:-\"2NSP,Xq").when(option1).toString();
////      doReturn(option0, option0).when(option1).map(any(scala.Function1.class));
////      CacheKey cacheKey0 = CacheKey.apply((String) null, option1);
////      Object object0 = cacheKey0.productElement(1);
////      assertNotNull(object0);
////  }
//
//  @Test(timeout = 4000)
//  public void test02()  throws Throwable  {
//      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
//      doReturn((String) null, (String) null).when(option0).toString();
//      doReturn((Option) null, (Option) null).when(option0).map(any(scala.Function1.class));
//      CacheKey cacheKey0 = new CacheKey("", option0);
//      Option<String> option1 = cacheKey0.copy$default$2();
//      CacheKey cacheKey1 = CacheKey.apply((String) null, option1);
//      String string0 = cacheKey1.copy$default$1();
//      assertNull(string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test03()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("", (Option<String>) null);
//      String string0 = cacheKey0.copy$default$1();
//      assertEquals("", string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test04()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("", (Option<String>) null);
//      boolean boolean0 = cacheKey0.canEqual(cacheKey0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test05()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("CacheKey", (Option<String>) null);
//      Option<String> option0 = cacheKey0.attemptId();
//      assertNull(option0);
//  }
//
//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("CacheKey", (Option<String>) null);
//      CacheKey cacheKey1 = cacheKey0.copy((String) null, (Option<String>) null);
//      String string0 = cacheKey1.appId();
//      assertNull(string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test07()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("", (Option<String>) null);
//      String string0 = cacheKey0.appId();
//      assertEquals("", string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test08()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply((String) null, (Option<String>) null);
//      Object object0 = cacheKey0.productElement(0);
//      assertNull(object0);
//  }
//
//  @Test(timeout = 4000)
//  public void test09()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("CacheKey", (Option<String>) null);
//      String string0 = cacheKey0.appId();
//      assertEquals("CacheKey", string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test10()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("", (Option<String>) null);
//      Option<Tuple2<String, Option<String>>> option0 = CacheKey.unapply(cacheKey0);
//      assertNotNull(option0);
//  }
//
//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("hVN", (Option<String>) null);
//      CacheKey cacheKey1 = CacheKey.apply("hVN", (Option<String>) null);
//      boolean boolean0 = cacheKey0.equals(cacheKey1);
//      assertTrue(boolean0);
//  }
//
////  @Test(timeout = 4000)
////  public void test12()  throws Throwable  {
////      None. none_0 = mock(None..class, new ViolatedAssumptionAnswer());
////      doReturn("scala.collection.IndexedSsq$").when(none_0).toString();
////      Option<None.> option0 = (Option<None.>) mock(Option.class, new ViolatedAssumptionAnswer());
////      doReturn((PartialFunction.Lifted<None., None.>) null, none_0).when(option0).getOrElse(any(scala.Function0.class));
////      Option<String> option1 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
////      doReturn("]xq(~c:-\"2NSP,Xq", "]xq(~c:-\"2NSP,Xq", "]xq(~c:-\"2NSP,Xq").when(option1).toString();
////      doReturn(option0, option0, (Option) null, (Option) null).when(option1).map(any(scala.Function1.class));
////      CacheKey cacheKey0 = CacheKey.apply((String) null, option1);
////      Option<String> option2 = cacheKey0.attemptId();
////      CacheKey cacheKey1 = CacheKey.apply((String) null, option2);
////      boolean boolean0 = cacheKey0.equals(cacheKey1);
////      assertTrue(boolean0);
////  }
//
////  @Test(timeout = 4000)
////  public void test13()  throws Throwable  {
////      None. none_0 = mock(None..class, new ViolatedAssumptionAnswer());
////      doReturn("scala.collection.IndexedSsq$").when(none_0).toString();
////      Option<None.> option0 = (Option<None.>) mock(Option.class, new ViolatedAssumptionAnswer());
////      doReturn((PartialFunction.Lifted<None., None.>) null, none_0).when(option0).getOrElse(any(scala.Function0.class));
////      Option<String> option1 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
////      doReturn("]xq(~c:-\"2NSP,Xq").when(option1).toString();
////      doReturn(option0, option0).when(option1).map(any(scala.Function1.class));
////      CacheKey cacheKey0 = CacheKey.apply((String) null, option1);
////      Option<String> option2 = cacheKey0.attemptId();
////      CacheKey cacheKey1 = new CacheKey("]xq(~c:-\"2NSP,Xq", option2);
////      boolean boolean0 = cacheKey0.equals(cacheKey1);
////      assertFalse(cacheKey1.equals((Object)cacheKey0));
////      assertFalse(boolean0);
////  }
//
//  @Test(timeout = 4000)
//  public void test14()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("JN", (Option<String>) null);
//      CacheKey cacheKey1 = CacheKey.apply("H", (Option<String>) null);
//      boolean boolean0 = cacheKey0.equals(cacheKey1);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test15()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("CacheKey", (Option<String>) null);
//      boolean boolean0 = cacheKey0.equals((Object) null);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test16()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("", (Option<String>) null);
//      boolean boolean0 = cacheKey0.equals(cacheKey0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test17()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("p5>s%x_SL]=qH ", (Option<String>) null);
//      // Undeclared exception!
//      try { 
//        cacheKey0.productElement((-1396));
//        fail("Expecting exception: IndexOutOfBoundsException");
//      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // java.lang.Integer@0000000006
//         //
//         verifyException("org.apache.spark.deploy.history.CacheKey", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test18()  throws Throwable  {
//      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
//      doReturn((String) null).when(option0).toString();
//      doReturn((Option) null).when(option0).map(any(scala.Function1.class));
//      CacheKey cacheKey0 = new CacheKey("org.apache.spark.deploy.history.CacheKey$", option0);
//      // Undeclared exception!
//      try { 
//        cacheKey0.toString();
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.spark.deploy.history.CacheKey", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test19()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("&{k98%H", (Option<String>) null);
//      String string0 = cacheKey0.productPrefix();
//      assertEquals("CacheKey", string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test20()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("Q", (Option<String>) null);
//      Option<String> option0 = cacheKey0.copy$default$2();
//      assertNull(option0);
//  }
//
//  @Test(timeout = 4000)
//  public void test21()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("head of empty stream", (Option<String>) null);
//      String string0 = cacheKey0.copy$default$1();
//      assertEquals("head of empty stream", string0);
//  }
//
//  @Test(timeout = 4000)
//  public void test22()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("&{k98%H", (Option<String>) null);
//      cacheKey0.hashCode();
//      assertEquals(2, cacheKey0.productArity());
//  }
//
//  @Test(timeout = 4000)
//  public void test23()  throws Throwable  {
//      Option<Tuple2<String, Option<String>>> option0 = CacheKey.unapply((CacheKey) null);
//      assertNotNull(option0);
//  }
//
//  @Test(timeout = 4000)
//  public void test24()  throws Throwable  {
//      CacheKey cacheKey0 = new CacheKey("scala.Predef$Triple$", (Option<String>) null);
//      cacheKey0.productIterator();
//      assertEquals(2, cacheKey0.productArity());
//  }
//
//  @Test(timeout = 4000)
//  public void test25()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("CacheKey", (Option<String>) null);
//      boolean boolean0 = cacheKey0.canEqual((Object) null);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test26()  throws Throwable  {
//      Function1<Tuple2<String, Option<String>>, CacheKey> function1_0 = CacheKey.tupled();
//      assertNotNull(function1_0);
//  }
//
//  @Test(timeout = 4000)
//  public void test27()  throws Throwable  {
//      CacheKey cacheKey0 = CacheKey.apply("Cache*e ", (Option<String>) null);
//      int int0 = cacheKey0.productArity();
//      assertEquals(2, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test28()  throws Throwable  {
//      Function1<String, Function1<Option<String>, CacheKey>> function1_0 = CacheKey.curried();
//      assertNotNull(function1_0);
//  }
}
