/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:13:40 GMT 2022
 */

package org.apache.spark.storage.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.storage.memory.SerializedMemoryEntry;
import org.apache.spark.util.io.ChunkedByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple3;
import scala.reflect.ClassTag;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializedMemoryEntry_ESTest extends SerializedMemoryEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "empty.last").when(chunkedByteBuffer0).toString();
      doReturn(1L).when(chunkedByteBuffer0).size();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer1 = serializedMemoryEntry0.buffer();
      SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      MemoryMode memoryMode1 = (MemoryMode)serializedMemoryEntry0.productElement(1);
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = new SerializedMemoryEntry<MemoryMode>(chunkedByteBuffer1, memoryMode0, (ClassTag<MemoryMode>) null);
      SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode1, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      long long0 = serializedMemoryEntry1.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassTag<MemoryMode> classTag0 = (ClassTag<MemoryMode>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("6im0M8e", "6im0M8e").when(classTag0).toString();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, (MemoryMode) null, classTag0);
      serializedMemoryEntry0.memoryMode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "empty.last").when(chunkedByteBuffer0).toString();
      doReturn(1L).when(chunkedByteBuffer0).size();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer1 = serializedMemoryEntry0.buffer();
      MemoryMode memoryMode1 = (MemoryMode)serializedMemoryEntry0.productElement(1);
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = new SerializedMemoryEntry<MemoryMode>(chunkedByteBuffer1, memoryMode0, (ClassTag<MemoryMode>) null);
      SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode1, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      serializedMemoryEntry1.size();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry2 = serializedMemoryEntry0.copy(chunkedByteBuffer1, memoryMode1, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      assertEquals(0L, serializedMemoryEntry2.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("F'g#'kS&sveDWCz6", (String) null, (String) null, (String) null).when(chunkedByteBuffer0).toString();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer1 = serializedMemoryEntry0.buffer();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry1 = SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      MemoryMode memoryMode1 = serializedMemoryEntry1.memoryMode();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry2 = serializedMemoryEntry0.copy(chunkedByteBuffer1, memoryMode1, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      assertNotSame(serializedMemoryEntry1, serializedMemoryEntry2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("rRh@6i%f]", "rRh@6i%f]", "scala.collection.generic.Growable$class", "scala.collection.generic.Growable$class", (String) null).when(chunkedByteBuffer0).toString();
      doReturn((-901L), (-670L)).when(chunkedByteBuffer0).size();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer1 = serializedMemoryEntry0.buffer();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry1 = SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry2 = new SerializedMemoryEntry<MemoryMode>(chunkedByteBuffer1, memoryMode0, (ClassTag<MemoryMode>) null);
      MemoryMode memoryMode1 = serializedMemoryEntry1.memoryMode();
      SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode1, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      serializedMemoryEntry2.size();
      serializedMemoryEntry1.size();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry3 = serializedMemoryEntry0.copy(chunkedByteBuffer1, memoryMode1, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      assertEquals("SerializedMemoryEntry", serializedMemoryEntry3.productPrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassTag<MemoryMode> classTag0 = (ClassTag<MemoryMode>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("6im0M8e", "6im0M8e").when(classTag0).toString();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, (MemoryMode) null, classTag0);
      serializedMemoryEntry0.copy$default$2();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      ClassTag<SerializedMemoryEntry<MemoryMode>> classTag0 = serializedMemoryEntry0.classTag();
      assertNull(classTag0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry1 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      boolean boolean0 = serializedMemoryEntry0.canEqual(serializedMemoryEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer0 = serializedMemoryEntry0.buffer();
      assertNull(chunkedByteBuffer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      Object object0 = serializedMemoryEntry0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      Object object0 = serializedMemoryEntry0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      String string0 = serializedMemoryEntry0.productPrefix();
      assertEquals("SerializedMemoryEntry", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ClassTag<SerializedMemoryEntry<MemoryMode>> classTag0 = (ClassTag<SerializedMemoryEntry<MemoryMode>>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(classTag0).toString();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, classTag0);
      ClassTag<MemoryMode> classTag1 = serializedMemoryEntry0.copy$default$3();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, memoryMode0, classTag1);
      ClassTag<MemoryMode> classTag2 = serializedMemoryEntry1.classTag();
      assertSame(classTag1, classTag2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      int int0 = serializedMemoryEntry0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      serializedMemoryEntry0.productIterator();
      assertEquals(3, serializedMemoryEntry0.productArity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      boolean boolean0 = serializedMemoryEntry0.canEqual(memoryMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      Option<Tuple3<ChunkedByteBuffer, MemoryMode, ClassTag<SerializedMemoryEntry<MemoryMode>>>> option0 = SerializedMemoryEntry.unapply(serializedMemoryEntry0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ClassTag<MemoryMode> classTag0 = (ClassTag<MemoryMode>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("6im0M8e", "6im0M8e", "6im0M8e", "6im0M8e", "6im0M8e").when(classTag0).toString();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, classTag0);
      ClassTag<SerializedMemoryEntry<MemoryMode>> classTag1 = serializedMemoryEntry0.copy$default$3();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry1 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, classTag1);
      boolean boolean0 = serializedMemoryEntry0.equals(serializedMemoryEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ClassTag<MemoryMode> classTag0 = (ClassTag<MemoryMode>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("MaTKz<|$)4P-p$yi").when(classTag0).toString();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, memoryMode0, classTag0);
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      boolean boolean0 = serializedMemoryEntry1.equals(serializedMemoryEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      MemoryMode memoryMode1 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry1 = serializedMemoryEntry0.copy((ChunkedByteBuffer) null, memoryMode1, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      boolean boolean0 = serializedMemoryEntry0.equals(serializedMemoryEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassTag<MemoryMode> classTag0 = (ClassTag<MemoryMode>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("6im0M8e", "6im0M8e", "6im0M8e").when(classTag0).toString();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, (MemoryMode) null, classTag0);
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, (MemoryMode) null, (ClassTag<MemoryMode>) null);
      boolean boolean0 = serializedMemoryEntry0.equals(serializedMemoryEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ClassTag<MemoryMode> classTag0 = (ClassTag<MemoryMode>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("6im0M8e", "6im0M8e", "6im0M8e", "6im0M8e").when(classTag0).toString();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, (MemoryMode) null, classTag0);
      ClassTag<SerializedMemoryEntry<MemoryMode>> classTag1 = serializedMemoryEntry0.copy$default$3();
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry1 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, classTag1);
      boolean boolean0 = serializedMemoryEntry0.equals(serializedMemoryEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(chunkedByteBuffer0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer1 = serializedMemoryEntry0.buffer();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = new SerializedMemoryEntry<MemoryMode>(chunkedByteBuffer1, memoryMode0, (ClassTag<MemoryMode>) null);
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry2 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>(chunkedByteBuffer1, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      MemoryMode memoryMode1 = (MemoryMode)serializedMemoryEntry2.productElement(1);
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry3 = serializedMemoryEntry1.copy((ChunkedByteBuffer) null, memoryMode1, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      boolean boolean0 = serializedMemoryEntry2.equals(serializedMemoryEntry3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(chunkedByteBuffer0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>(chunkedByteBuffer0, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer1 = serializedMemoryEntry0.copy$default$1();
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry1 = new SerializedMemoryEntry<MemoryMode>(chunkedByteBuffer1, memoryMode0, (ClassTag<MemoryMode>) null);
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry2 = SerializedMemoryEntry.apply(chunkedByteBuffer1, memoryMode0, (ClassTag<MemoryMode>) null);
      boolean boolean0 = serializedMemoryEntry2.equals(serializedMemoryEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      boolean boolean0 = serializedMemoryEntry0.equals(memoryMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      boolean boolean0 = serializedMemoryEntry0.equals(serializedMemoryEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = new SerializedMemoryEntry<MemoryMode>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      // Undeclared exception!
      try { 
        serializedMemoryEntry0.productElement((-1151));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.storage.memory.SerializedMemoryEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<Tuple3<MemoryMode, MemoryMode, MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<Tuple3<MemoryMode, MemoryMode, MemoryMode>>) null);
      // Undeclared exception!
      try { 
        serializedMemoryEntry0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.SerializedMemoryEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option<Tuple3<ChunkedByteBuffer, MemoryMode, ClassTag<SerializedMemoryEntry<MemoryMode>>>> option0 = SerializedMemoryEntry.unapply((SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      serializedMemoryEntry0.hashCode();
      assertEquals(3, serializedMemoryEntry0.productArity());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      ClassTag<MemoryMode> classTag0 = serializedMemoryEntry0.copy$default$3();
      assertNull(classTag0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      String string0 = serializedMemoryEntry0.toString();
      assertEquals("SerializedMemoryEntry(null,OFF_HEAP,null)", string0);
      assertEquals(3, serializedMemoryEntry0.productArity());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      SerializedMemoryEntry<MemoryMode> serializedMemoryEntry0 = SerializedMemoryEntry.apply((ChunkedByteBuffer) null, memoryMode0, (ClassTag<MemoryMode>) null);
      MemoryMode memoryMode1 = serializedMemoryEntry0.copy$default$2();
      assertEquals(MemoryMode.OFF_HEAP, memoryMode1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>> serializedMemoryEntry0 = new SerializedMemoryEntry<SerializedMemoryEntry<MemoryMode>>((ChunkedByteBuffer) null, memoryMode0, (ClassTag<SerializedMemoryEntry<MemoryMode>>) null);
      ChunkedByteBuffer chunkedByteBuffer0 = serializedMemoryEntry0.copy$default$1();
      assertNull(chunkedByteBuffer0);
  }
}
