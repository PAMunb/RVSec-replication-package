/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:54:11 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.StreamBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamBlockId_ESTest extends StreamBlockId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1, (long) 1);
      StreamBlockId streamBlockId1 = streamBlockId0.copy(1, (-3491L));
      boolean boolean0 = streamBlockId0.equals(streamBlockId1);
      assertEquals(1L, streamBlockId0.uniqueId());
      assertFalse(streamBlockId1.equals((Object)streamBlockId0));
      assertEquals(1, streamBlockId0.streamId());
      assertEquals(1, streamBlockId1.streamId());
      assertEquals((-3491L), streamBlockId1.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(0, 0L);
      streamBlockId0.uniqueId();
      assertEquals(0, streamBlockId0.streamId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(3702, 1L);
      long long0 = streamBlockId0.uniqueId();
      assertEquals(1L, long0);
      assertEquals(3702, streamBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(457, 457);
      int int0 = streamBlockId0.streamId();
      assertEquals(457, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId((-1711), 822L);
      int int0 = streamBlockId0.streamId();
      assertEquals((-1711), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(0, (-1926L));
      StreamBlockId streamBlockId1 = streamBlockId0.copy(0, 0);
      assertEquals(0, streamBlockId1.streamId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(2, 0L);
      StreamBlockId streamBlockId1 = streamBlockId0.copy((-4867), (-1L));
      boolean boolean0 = streamBlockId0.equals(streamBlockId1);
      assertFalse(boolean0);
      assertEquals((-1L), streamBlockId1.uniqueId());
      assertEquals((-4867), streamBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId((-889275714), 0L);
      long long0 = streamBlockId0.copy$default$2();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply((-1901), (-2817L));
      long long0 = streamBlockId0.copy$default$2();
      assertEquals((-1901), streamBlockId0.copy$default$1());
      assertEquals((-2817L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(0, 0);
      int int0 = streamBlockId0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId((-117), (-117));
      int int0 = streamBlockId0.copy$default$1();
      assertEquals((-117), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1, (long) 1);
      Object object0 = streamBlockId0.productElement(0);
      assertEquals(1, object0);
      
      streamBlockId0.canEqual(object0);
      assertEquals(1L, streamBlockId0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(0, 0L);
      int int0 = streamBlockId0.productArity();
      assertEquals(0, streamBlockId0.streamId());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(0, 0L);
      int int0 = streamBlockId0.streamId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId((-117), (-117));
      boolean boolean0 = streamBlockId0.canEqual(streamBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(0, (-1926L));
      long long0 = streamBlockId0.uniqueId();
      assertEquals((-1926L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(648, 648);
      StreamBlockId.unapply(streamBlockId0);
      assertEquals(648, streamBlockId0.streamId());
      assertEquals(648L, streamBlockId0.uniqueId());
      assertEquals(648, streamBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply((-581), (long) (-581));
      StreamBlockId streamBlockId1 = StreamBlockId.apply((-581), 1530L);
      boolean boolean0 = streamBlockId0.equals(streamBlockId1);
      assertEquals(1530L, streamBlockId1.uniqueId());
      assertEquals((-581), streamBlockId1.streamId());
      assertFalse(boolean0);
      assertFalse(streamBlockId1.equals((Object)streamBlockId0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(726, (long) 726);
      StreamBlockId streamBlockId1 = new StreamBlockId(3615, 726);
      boolean boolean0 = streamBlockId0.equals(streamBlockId1);
      assertFalse(boolean0);
      assertFalse(streamBlockId1.equals((Object)streamBlockId0));
      assertEquals(726L, streamBlockId0.uniqueId());
      assertEquals(726, streamBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId((-5), (-5));
      boolean boolean0 = streamBlockId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1, (long) 1);
      boolean boolean0 = streamBlockId0.equals(streamBlockId0);
      assertEquals(1, streamBlockId0.copy$default$1());
      assertEquals(1L, streamBlockId0.uniqueId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1364, (long) 1364);
      // Undeclared exception!
      try { 
        streamBlockId0.productElement(1364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000004
         //
         verifyException("org.apache.spark.storage.StreamBlockId", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1, (long) 1);
      Object object0 = streamBlockId0.productElement(1);
      assertEquals(1, streamBlockId0.streamId());
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(2383, (long) 2383);
      long long0 = streamBlockId0.copy$default$2();
      assertEquals(2383L, long0);
      assertEquals(2383, streamBlockId0.streamId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(1073741824, 0L);
      int int0 = streamBlockId0.copy$default$1();
      assertEquals(1073741824, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(648, 648);
      StreamBlockId streamBlockId1 = streamBlockId0.copy(648, 648);
      assertTrue(streamBlockId1.equals((Object)streamBlockId0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(815, 815);
      streamBlockId0.hashCode();
      assertEquals(815L, streamBlockId0.uniqueId());
      assertEquals(815, streamBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(648, 648);
      String string0 = streamBlockId0.name();
      assertEquals("input-648-648", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Object, Function1<Object, StreamBlockId>> function1_0 = StreamBlockId.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1364, (long) 1364);
      streamBlockId0.productIterator();
      assertEquals(1364L, streamBlockId0.copy$default$2());
      assertEquals(1364, streamBlockId0.streamId());
      assertEquals(2, streamBlockId0.productArity());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StreamBlockId streamBlockId0 = new StreamBlockId(648, 648);
      String string0 = streamBlockId0.productPrefix();
      assertEquals("StreamBlockId", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option<Tuple2<Object, Object>> option0 = StreamBlockId.unapply((StreamBlockId) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StreamBlockId streamBlockId0 = StreamBlockId.apply(1, (long) 1);
      StreamBlockId streamBlockId1 = new StreamBlockId(1, 1);
      boolean boolean0 = streamBlockId1.equals(streamBlockId0);
      assertEquals(1L, streamBlockId1.uniqueId());
      assertTrue(boolean0);
      assertEquals(1, streamBlockId1.streamId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function1<Tuple2<Object, Object>, StreamBlockId> function1_0 = StreamBlockId.tupled();
      assertNotNull(function1_0);
  }
}
