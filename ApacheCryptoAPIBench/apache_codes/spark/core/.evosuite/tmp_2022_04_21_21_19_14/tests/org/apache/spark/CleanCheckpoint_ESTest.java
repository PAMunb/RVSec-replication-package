/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:16:57 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.CleanCheckpoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleanCheckpoint_ESTest extends CleanCheckpoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(4079);
      CleanCheckpoint cleanCheckpoint1 = cleanCheckpoint0.copy((-430675100));
      boolean boolean0 = cleanCheckpoint1.equals(cleanCheckpoint0);
      assertFalse(boolean0);
      assertFalse(cleanCheckpoint0.equals((Object)cleanCheckpoint1));
      assertEquals(4079, cleanCheckpoint0.rddId());
      assertEquals((-430675100), cleanCheckpoint1.rddId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(1732);
      CleanCheckpoint cleanCheckpoint1 = cleanCheckpoint0.copy(0);
      int int0 = cleanCheckpoint1.rddId();
      assertEquals(1732, cleanCheckpoint0.rddId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(1);
      int int0 = cleanCheckpoint0.rddId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint(1198);
      CleanCheckpoint cleanCheckpoint1 = cleanCheckpoint0.copy(0);
      assertEquals(0, cleanCheckpoint1.rddId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply((-1021));
      CleanCheckpoint cleanCheckpoint1 = cleanCheckpoint0.copy(2898);
      assertEquals((-1021), cleanCheckpoint0.rddId());
      assertEquals(2898, cleanCheckpoint1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(0);
      int int0 = cleanCheckpoint0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint(1462);
      int int0 = cleanCheckpoint0.copy$default$1();
      assertEquals(1462, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(0);
      cleanCheckpoint0.canEqual((Object) null);
      assertEquals(0, cleanCheckpoint0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(1);
      Object object0 = cleanCheckpoint0.productElement(0);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply((-37));
      cleanCheckpoint0.productIterator();
      assertEquals((-37), cleanCheckpoint0.rddId());
      assertEquals(1, cleanCheckpoint0.productArity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint((-1021));
      int int0 = cleanCheckpoint0.rddId();
      assertEquals((-1021), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint(1198);
      boolean boolean0 = cleanCheckpoint0.canEqual(cleanCheckpoint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint(0);
      String string0 = cleanCheckpoint0.productPrefix();
      assertEquals("CleanCheckpoint", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint((-889275714));
      int int0 = cleanCheckpoint0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply((-1));
      CleanCheckpoint cleanCheckpoint1 = CleanCheckpoint.apply((-2048144789));
      boolean boolean0 = cleanCheckpoint0.equals(cleanCheckpoint1);
      assertFalse(boolean0);
      assertFalse(cleanCheckpoint1.equals((Object)cleanCheckpoint0));
      assertEquals((-2048144789), cleanCheckpoint1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint((-1));
      boolean boolean0 = cleanCheckpoint0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(1);
      boolean boolean0 = cleanCheckpoint0.equals(cleanCheckpoint0);
      assertTrue(boolean0);
      assertEquals(1, cleanCheckpoint0.rddId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint(2123);
      // Undeclared exception!
      try { 
        cleanCheckpoint0.productElement(2123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.CleanCheckpoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply((-401));
      CleanCheckpoint.unapply(cleanCheckpoint0);
      assertEquals((-401), cleanCheckpoint0.copy$default$1());
      assertEquals((-401), cleanCheckpoint0.rddId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply((-1021));
      int int0 = cleanCheckpoint0.copy$default$1();
      assertEquals((-1021), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<CleanCheckpoint, CleanCheckpoint> function1_0 = CleanCheckpoint.compose((Function1<CleanCheckpoint, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply(0);
      cleanCheckpoint0.hashCode();
      assertEquals(0, cleanCheckpoint0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = new CleanCheckpoint((-37));
      CleanCheckpoint cleanCheckpoint1 = cleanCheckpoint0.copy((-37));
      boolean boolean0 = cleanCheckpoint0.equals(cleanCheckpoint1);
      assertTrue(boolean0);
      assertEquals((-37), cleanCheckpoint1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option<Object> option0 = CleanCheckpoint.unapply((CleanCheckpoint) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function1<Object, CleanCheckpoint> function1_0 = CleanCheckpoint.andThen((Function1<CleanCheckpoint, CleanCheckpoint>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CleanCheckpoint cleanCheckpoint0 = CleanCheckpoint.apply((-220));
      String string0 = cleanCheckpoint0.toString();
      assertEquals("CleanCheckpoint(-220)", string0);
  }
}
