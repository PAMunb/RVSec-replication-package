/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:56:09 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerStageCompleted;
import org.apache.spark.scheduler.StageInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerStageCompleted_ESTest extends SparkListenerStageCompleted_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StageInfo stageInfo0 = mock(StageInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(stageInfo0).toString();
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply(stageInfo0);
      Object object0 = sparkListenerStageCompleted0.productElement(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      boolean boolean0 = sparkListenerStageCompleted0.canEqual(sparkListenerStageCompleted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      Object object0 = sparkListenerStageCompleted0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      StageInfo stageInfo0 = sparkListenerStageCompleted0.stageInfo();
      assertNull(stageInfo0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StageInfo stageInfo0 = mock(StageInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(stageInfo0).toString();
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply(stageInfo0);
      int int0 = sparkListenerStageCompleted0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      sparkListenerStageCompleted0.productIterator();
      assertEquals(1, sparkListenerStageCompleted0.productArity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      boolean boolean0 = sparkListenerStageCompleted0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      boolean boolean0 = sparkListenerStageCompleted0.equals(sparkListenerStageCompleted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      // Undeclared exception!
      try { 
        sparkListenerStageCompleted0.productElement(1633);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerStageCompleted", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option<StageInfo> option0 = SparkListenerStageCompleted.unapply((SparkListenerStageCompleted) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      sparkListenerStageCompleted0.hashCode();
      assertEquals(1, sparkListenerStageCompleted0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      SparkListenerStageCompleted sparkListenerStageCompleted1 = sparkListenerStageCompleted0.copy((StageInfo) null);
      assertEquals("SparkListenerStageCompleted", sparkListenerStageCompleted1.productPrefix());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Function1<StageInfo, StageInfo> function1_0 = SparkListenerStageCompleted.andThen((Function1<SparkListenerStageCompleted, StageInfo>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      boolean boolean0 = sparkListenerStageCompleted0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      StageInfo stageInfo0 = sparkListenerStageCompleted0.copy$default$1();
      assertNull(stageInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Function1<StageInfo, SparkListenerStageCompleted> function1_0 = SparkListenerStageCompleted.compose((Function1<StageInfo, StageInfo>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      boolean boolean0 = sparkListenerStageCompleted0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      String string0 = sparkListenerStageCompleted0.toString();
      assertEquals("SparkListenerStageCompleted(null)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = new SparkListenerStageCompleted((StageInfo) null);
      String string0 = sparkListenerStageCompleted0.productPrefix();
      assertEquals("SparkListenerStageCompleted", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerStageCompleted sparkListenerStageCompleted0 = SparkListenerStageCompleted.apply((StageInfo) null);
      Option<StageInfo> option0 = SparkListenerStageCompleted.unapply(sparkListenerStageCompleted0);
      assertNotNull(option0);
  }
}
