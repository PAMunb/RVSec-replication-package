/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:02:37 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerBlockManagerAdded;
import org.apache.spark.storage.BlockManagerId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerBlockManagerAdded_ESTest extends SparkListenerBlockManagerAdded_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3005L), (BlockManagerId) null, (-3005L), (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = sparkListenerBlockManagerAdded0.copy((-3005L), (BlockManagerId) null, (-1687L), (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded1.equals(sparkListenerBlockManagerAdded0);
      assertEquals((-1687L), sparkListenerBlockManagerAdded1.maxMem());
      assertFalse(boolean0);
      assertEquals((-3005L), sparkListenerBlockManagerAdded0.maxMem());
      assertFalse(sparkListenerBlockManagerAdded0.equals((Object)sparkListenerBlockManagerAdded1));
      assertEquals((-3005L), sparkListenerBlockManagerAdded0.time());
      assertEquals((-3005L), sparkListenerBlockManagerAdded1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(0L, blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      BlockManagerId blockManagerId1 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = new SparkListenerBlockManagerAdded((-2414L), blockManagerId1, 0L, (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.equals(sparkListenerBlockManagerAdded1);
      assertFalse(boolean0);
      assertEquals((-2414L), sparkListenerBlockManagerAdded1.time());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(0L, (BlockManagerId) null, (-535L), (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-693L), blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.time();
      assertEquals((-693L), long0);
      assertEquals(0L, sparkListenerBlockManagerAdded0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("scala.collection.AbstractSet", "scala.collection.AbstractSet", "scala.collection.AbstractSet", (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-693L), blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.productElement(1);
      assertEquals((-693L), sparkListenerBlockManagerAdded0.time());
      assertEquals(0L, sparkListenerBlockManagerAdded0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-13L), blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.maxMem();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("", "7)@>/'K!<<F~wzN").when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(4195L, blockManagerId0, 1L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.maxMem();
      assertEquals(4195L, sparkListenerBlockManagerAdded0.copy$default$1());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(0L, (BlockManagerId) null, (-535L), (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = sparkListenerBlockManagerAdded0.copy(0L, (BlockManagerId) null, 0L, (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded1.copy$default$3();
      assertEquals((-535L), sparkListenerBlockManagerAdded0.copy$default$3());
      assertEquals((-535L), sparkListenerBlockManagerAdded0.maxMem());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn("", "7)@>/'K!<<F~wzN").when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(4195L, blockManagerId0, 1L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.copy$default$3();
      assertEquals(1L, long0);
      assertEquals(4195L, sparkListenerBlockManagerAdded0.time());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(1L, blockManagerId0, 1L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.copy$default$1();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-29L), blockManagerId0, 1L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.copy$default$1();
      assertEquals((-29L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(0L, blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.canEqual(sparkListenerBlockManagerAdded0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(0L, (BlockManagerId) null, (-535L), (Option<Object>) null, (Option<Object>) null);
      Object object0 = sparkListenerBlockManagerAdded0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(1271L, blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      Object object0 = sparkListenerBlockManagerAdded0.productElement(4);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3031L), (BlockManagerId) null, (-3031L), (Option<Object>) null, (Option<Object>) null);
      Object object0 = sparkListenerBlockManagerAdded0.productElement(0);
      assertEquals((-3031L), object0);
      assertEquals((-3031L), sparkListenerBlockManagerAdded0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(0L, (BlockManagerId) null, 0L, (Option<Object>) null, (Option<Object>) null);
      Object object0 = sparkListenerBlockManagerAdded0.productElement(3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-504L), (BlockManagerId) null, 1, (Option<Object>) null, (Option<Object>) null);
      Object object0 = sparkListenerBlockManagerAdded0.productElement(2);
      assertEquals(1L, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(1L, (BlockManagerId) null, (-693L), (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.maxMem();
      assertEquals((-693L), long0);
      assertEquals(1L, sparkListenerBlockManagerAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(1L, (BlockManagerId) null, (-693L), (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.blockManagerId();
      assertEquals((-693L), sparkListenerBlockManagerAdded0.copy$default$3());
      assertEquals(1L, sparkListenerBlockManagerAdded0.time());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-504L), (BlockManagerId) null, 1, (Option<Object>) null, (Option<Object>) null);
      Option<Object> option0 = sparkListenerBlockManagerAdded0.maxOnHeapMem();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-3873L), blockManagerId0, (-2200L), (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.productIterator();
      assertEquals(5, sparkListenerBlockManagerAdded0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(2186L, (BlockManagerId) null, 2186L, (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.maxOffHeapMem();
      assertEquals(2186L, sparkListenerBlockManagerAdded0.maxMem());
      assertEquals(2186L, sparkListenerBlockManagerAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(4195L, blockManagerId0, 1L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.time();
      assertEquals(1L, sparkListenerBlockManagerAdded0.maxMem());
      assertEquals(4195L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-535L), (BlockManagerId) null, (-535L), (Option<Object>) null, (Option<Object>) null);
      int int0 = sparkListenerBlockManagerAdded0.productArity();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(0L, blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(1L, blockManagerId0, 0L, (Option<Object>) null, (Option<Object>) null);
      String string0 = sparkListenerBlockManagerAdded0.productPrefix();
      assertEquals("SparkListenerBlockManagerAdded", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(1108L, (BlockManagerId) null, 1108L, (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded.unapply(sparkListenerBlockManagerAdded0);
      assertEquals(1108L, sparkListenerBlockManagerAdded0.copy$default$3());
      assertEquals(1108L, sparkListenerBlockManagerAdded0.time());
      assertEquals(1108L, sparkListenerBlockManagerAdded0.maxMem());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3031L), blockManagerId0, (-3031L), (Option<Object>) null, (Option<Object>) null);
      BlockManagerId blockManagerId1 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(blockManagerId1).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = sparkListenerBlockManagerAdded0.copy((-3031L), blockManagerId1, (-6480L), (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.equals(sparkListenerBlockManagerAdded1);
      assertFalse(boolean0);
      assertEquals((-3031L), sparkListenerBlockManagerAdded1.copy$default$1());
      assertEquals((-3031L), sparkListenerBlockManagerAdded0.maxMem());
      assertEquals((-3031L), sparkListenerBlockManagerAdded0.time());
      assertEquals((-6480L), sparkListenerBlockManagerAdded1.maxMem());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(4067L, blockManagerId0, 4067L, (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = sparkListenerBlockManagerAdded0.copy(4067L, (BlockManagerId) null, 350L, (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded1.equals(sparkListenerBlockManagerAdded0);
      assertFalse(boolean0);
      assertEquals(350L, sparkListenerBlockManagerAdded1.maxMem());
      assertEquals(4067L, sparkListenerBlockManagerAdded0.copy$default$3());
      assertEquals(4067L, sparkListenerBlockManagerAdded1.copy$default$1());
      assertEquals(4067L, sparkListenerBlockManagerAdded0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockManagerId blockManagerId0 = mock(BlockManagerId.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(blockManagerId0).toString();
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-3873L), blockManagerId0, (-2200L), (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = SparkListenerBlockManagerAdded.apply((-3873L), blockManagerId0, (-3873L), (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded1.equals(sparkListenerBlockManagerAdded0);
      assertFalse(boolean0);
      assertFalse(sparkListenerBlockManagerAdded0.equals((Object)sparkListenerBlockManagerAdded1));
      assertEquals((-3873L), sparkListenerBlockManagerAdded1.copy$default$3());
      assertEquals((-3873L), sparkListenerBlockManagerAdded1.time());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3005L), (BlockManagerId) null, (-3005L), (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = sparkListenerBlockManagerAdded0.copy(339L, (BlockManagerId) null, (-3005L), (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.equals(sparkListenerBlockManagerAdded1);
      assertFalse(sparkListenerBlockManagerAdded1.equals((Object)sparkListenerBlockManagerAdded0));
      assertEquals((-3005L), sparkListenerBlockManagerAdded0.copy$default$1());
      assertFalse(boolean0);
      assertEquals(339L, sparkListenerBlockManagerAdded1.time());
      assertEquals((-3005L), sparkListenerBlockManagerAdded0.maxMem());
      assertEquals((-3005L), sparkListenerBlockManagerAdded1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(2212L, (BlockManagerId) null, 2212L, (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.equals((Object) null);
      assertEquals(2212L, sparkListenerBlockManagerAdded0.maxMem());
      assertEquals(2212L, sparkListenerBlockManagerAdded0.time());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3042L), (BlockManagerId) null, (-3042L), (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.equals(sparkListenerBlockManagerAdded0);
      assertEquals((-3042L), sparkListenerBlockManagerAdded0.copy$default$1());
      assertEquals((-3042L), sparkListenerBlockManagerAdded0.maxMem());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(1L, (BlockManagerId) null, 1L, (Option<Object>) null, (Option<Object>) null);
      // Undeclared exception!
      try { 
        sparkListenerBlockManagerAdded0.productElement(2146790911);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SparkListenerBlockManagerAdded", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option<Tuple5<Object, BlockManagerId, Object, Option<Object>, Option<Object>>> option0 = SparkListenerBlockManagerAdded.unapply((SparkListenerBlockManagerAdded) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-535L), (BlockManagerId) null, (-535L), (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.hashCode();
      assertEquals((-535L), sparkListenerBlockManagerAdded0.maxMem());
      assertEquals((-535L), sparkListenerBlockManagerAdded0.time());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Function1<Tuple5<Object, BlockManagerId, Object, Option<Object>, Option<Object>>, SparkListenerBlockManagerAdded> function1_0 = SparkListenerBlockManagerAdded.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Function1<Object, Function1<BlockManagerId, Function1<Object, Function1<Option<Object>, Function1<Option<Object>, SparkListenerBlockManagerAdded>>>>> function1_0 = SparkListenerBlockManagerAdded.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded(2183L, (BlockManagerId) null, 2183L, (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option<Object> option0 = SparkListenerBlockManagerAdded.$lessinit$greater$default$5();
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option<Object> option0 = SparkListenerBlockManagerAdded.apply$default$4();
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(0L, (BlockManagerId) null, 0L, (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3031L), (BlockManagerId) null, (-3031L), (Option<Object>) null, (Option<Object>) null);
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded1 = sparkListenerBlockManagerAdded0.copy((-3031L), (BlockManagerId) null, (-3031L), (Option<Object>) null, (Option<Object>) null);
      boolean boolean0 = sparkListenerBlockManagerAdded1.equals(sparkListenerBlockManagerAdded0);
      assertEquals((-3031L), sparkListenerBlockManagerAdded0.maxMem());
      assertEquals((-3031L), sparkListenerBlockManagerAdded1.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3031L), (BlockManagerId) null, (-3031L), (Option<Object>) null, (Option<Object>) null);
      long long0 = sparkListenerBlockManagerAdded0.copy$default$3();
      assertEquals((-3031L), long0);
      assertEquals((-3031L), sparkListenerBlockManagerAdded0.time());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = new SparkListenerBlockManagerAdded((-2989L), (BlockManagerId) null, (-2989L), (Option<Object>) null, (Option<Object>) null);
      BlockManagerId blockManagerId0 = sparkListenerBlockManagerAdded0.copy$default$2();
      assertNull(blockManagerId0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option<Object> option0 = SparkListenerBlockManagerAdded.$lessinit$greater$default$4();
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(2212L, (BlockManagerId) null, 2212L, (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.copy$default$4();
      assertEquals(2212L, sparkListenerBlockManagerAdded0.time());
      assertEquals(2212L, sparkListenerBlockManagerAdded0.maxMem());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply(3664L, (BlockManagerId) null, 3664L, (Option<Object>) null, (Option<Object>) null);
      String string0 = sparkListenerBlockManagerAdded0.toString();
      assertEquals(5, sparkListenerBlockManagerAdded0.productArity());
      assertEquals("SparkListenerBlockManagerAdded(3664,null,3664,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SparkListenerBlockManagerAdded sparkListenerBlockManagerAdded0 = SparkListenerBlockManagerAdded.apply((-3000L), (BlockManagerId) null, (-3000L), (Option<Object>) null, (Option<Object>) null);
      sparkListenerBlockManagerAdded0.copy$default$5();
      assertEquals((-3000L), sparkListenerBlockManagerAdded0.time());
      assertEquals((-3000L), sparkListenerBlockManagerAdded0.maxMem());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option<Object> option0 = SparkListenerBlockManagerAdded.apply$default$5();
      assertNotNull(option0);
  }
}
