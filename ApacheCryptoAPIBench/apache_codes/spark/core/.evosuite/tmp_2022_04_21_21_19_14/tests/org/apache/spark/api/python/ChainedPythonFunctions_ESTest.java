/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:58:17 GMT 2022
 */

package org.apache.spark.api.python;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.api.python.ChainedPythonFunctions;
import org.apache.spark.api.python.PythonFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.collection.Seq;
import scala.collection.mutable.Queue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChainedPythonFunctions_ESTest extends ChainedPythonFunctions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply((Seq<PythonFunction>) null);
      Seq<PythonFunction> seq0 = chainedPythonFunctions0.funcs();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply(seq0);
      Seq<PythonFunction> seq1 = chainedPythonFunctions0.copy$default$1();
      assertSame(seq1, seq0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions(seq0);
      Object object0 = chainedPythonFunctions0.productElement(0);
      boolean boolean0 = chainedPythonFunctions0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      Object object0 = chainedPythonFunctions0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply(seq0);
      Seq<PythonFunction> seq1 = chainedPythonFunctions0.funcs();
      assertSame(seq1, seq0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply(seq0);
      boolean boolean0 = chainedPythonFunctions0.canEqual(chainedPythonFunctions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      int int0 = chainedPythonFunctions0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply(seq0);
      ChainedPythonFunctions chainedPythonFunctions1 = new ChainedPythonFunctions(seq0);
      boolean boolean0 = chainedPythonFunctions1.equals(chainedPythonFunctions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply(seq0);
      ChainedPythonFunctions chainedPythonFunctions1 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      boolean boolean0 = chainedPythonFunctions1.equals(chainedPythonFunctions0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seq<PythonFunction> seq0 = (Seq<PythonFunction>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(seq0).toString();
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions(seq0);
      ChainedPythonFunctions chainedPythonFunctions1 = chainedPythonFunctions0.copy((Seq<PythonFunction>) null);
      boolean boolean0 = chainedPythonFunctions0.equals(chainedPythonFunctions1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply((Seq<PythonFunction>) null);
      boolean boolean0 = chainedPythonFunctions0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      boolean boolean0 = chainedPythonFunctions0.equals(chainedPythonFunctions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      // Undeclared exception!
      try { 
        chainedPythonFunctions0.productElement(3059);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.api.python.ChainedPythonFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply((Seq<PythonFunction>) null);
      Option<Seq<PythonFunction>> option0 = ChainedPythonFunctions.unapply(chainedPythonFunctions0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      String string0 = chainedPythonFunctions0.toString();
      assertEquals("ChainedPythonFunctions(null)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Function1<Queue<Queue>, ChainedPythonFunctions> function1_0 = ChainedPythonFunctions.compose((Function1<Queue<Queue>, Seq<PythonFunction>>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply((Seq<PythonFunction>) null);
      ChainedPythonFunctions chainedPythonFunctions1 = chainedPythonFunctions0.copy((Seq<PythonFunction>) null);
      boolean boolean0 = chainedPythonFunctions1.equals(chainedPythonFunctions0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      String string0 = chainedPythonFunctions0.productPrefix();
      assertEquals("ChainedPythonFunctions", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      chainedPythonFunctions0.hashCode();
      assertEquals(1, chainedPythonFunctions0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = new ChainedPythonFunctions((Seq<PythonFunction>) null);
      Seq<PythonFunction> seq0 = chainedPythonFunctions0.copy$default$1();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Seq<PythonFunction>> option0 = ChainedPythonFunctions.unapply((ChainedPythonFunctions) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<Seq<PythonFunction>, Queue<Queue>> function1_0 = ChainedPythonFunctions.andThen((Function1<ChainedPythonFunctions, Queue<Queue>>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ChainedPythonFunctions chainedPythonFunctions0 = ChainedPythonFunctions.apply((Seq<PythonFunction>) null);
      chainedPythonFunctions0.productIterator();
      assertEquals(1, chainedPythonFunctions0.productArity());
  }
}
