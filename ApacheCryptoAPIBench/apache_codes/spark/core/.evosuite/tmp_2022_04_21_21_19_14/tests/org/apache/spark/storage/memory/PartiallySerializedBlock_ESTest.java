/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:22:45 GMT 2022
 */

package org.apache.spark.storage.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.serializer.SerializationStream;
import org.apache.spark.serializer.SerializerManager;
import org.apache.spark.storage.BlockId;
import org.apache.spark.storage.memory.MemoryStore;
import org.apache.spark.storage.memory.PartiallySerializedBlock;
import org.apache.spark.storage.memory.RedirectableOutputStream;
import org.apache.spark.util.io.ChunkedByteBuffer;
import org.apache.spark.util.io.ChunkedByteBufferOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Iterator;
import scala.reflect.ClassTag;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PartiallySerializedBlock_ESTest extends PartiallySerializedBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn("").when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn("").when(redirectableOutputStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(chunkedByteBuffer0).toString();
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn(chunkedByteBuffer0).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, (-171L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.discard();
      partiallySerializedBlock0.unrollMemory();
      MemoryMode memoryMode1 = MemoryMode.ON_HEAP;
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream1 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream1 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream1 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag1 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock1 = new PartiallySerializedBlock<Object>((MemoryStore) null, (SerializerManager) null, blockId1, serializationStream1, redirectableOutputStream1, (-171L), memoryMode1, chunkedByteBufferOutputStream1, iterator1, classTag1);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.finishWritingToStream(outputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot call methods on a discarded PartiallySerializedBlock
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn("").when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(redirectableOutputStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(chunkedByteBuffer0).toString();
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn(chunkedByteBuffer0).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, (-171L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.discard();
      partiallySerializedBlock0.unrollMemory();
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.valuesIterator();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot call methods on a discarded PartiallySerializedBlock
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore0, (SerializerManager) null, blockId0, (SerializationStream) null, (RedirectableOutputStream) null, 2898L, memoryMode0, chunkedByteBufferOutputStream0, iterator0, (ClassTag<Integer>) null);
      MemoryStore memoryStore1 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode1 = MemoryMode.OFF_HEAP;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(chunkedByteBuffer0).toString();
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream1 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn(chunkedByteBuffer0).when(chunkedByteBufferOutputStream1).toChunkedByteBuffer();
      Iterator<Integer> iterator1 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock1 = new PartiallySerializedBlock<Integer>(memoryStore1, (SerializerManager) null, blockId1, (SerializationStream) null, (RedirectableOutputStream) null, 3049L, memoryMode1, chunkedByteBufferOutputStream1, iterator1, (ClassTag<Integer>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock1.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(serializerManager0).dataDeserializeStream(any(org.apache.spark.storage.BlockId.class) , any(java.io.InputStream.class) , any(scala.reflect.ClassTag.class));
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn("?jz),u/").when(serializationStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(chunkedByteBuffer0).toString();
      doReturn((InputStream) null).when(chunkedByteBuffer0).toInputStream(anyBoolean());
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn(chunkedByteBuffer0).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, (RedirectableOutputStream) null, (-7400L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.valuesIterator();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      MemoryStore memoryStore1 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager1 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream1 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode1 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore1, serializerManager1, blockId1, serializationStream1, (RedirectableOutputStream) null, 0L, memoryMode1, chunkedByteBufferOutputStream0, iterator0, (ClassTag<Integer>) null);
      partiallySerializedBlock0.getUnrolledChunkedByteBuffer();
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream1 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator1 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Integer> classTag0 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock1 = new PartiallySerializedBlock<Integer>(memoryStore0, serializerManager0, blockId0, serializationStream0, (RedirectableOutputStream) null, 1L, memoryMode0, chunkedByteBufferOutputStream1, iterator1, classTag0);
      partiallySerializedBlock1.unrollMemory();
      MemoryStore memoryStore2 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager2 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId2 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream2 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode2 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream2 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream2).toChunkedByteBuffer();
      Iterator<Object> iterator2 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag1 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock2 = new PartiallySerializedBlock<Object>(memoryStore2, serializerManager2, blockId2, serializationStream2, (RedirectableOutputStream) null, 1L, memoryMode2, chunkedByteBufferOutputStream2, iterator2, classTag1);
      // Undeclared exception!
      try { 
        partiallySerializedBlock2.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream1 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream1 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream2 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>((MemoryStore) null, (SerializerManager) null, blockId1, serializationStream2, (RedirectableOutputStream) null, 0L, memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.unrollMemory();
      BlockId blockId2 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode1 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream1 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream1).toChunkedByteBuffer();
      Iterator<Integer> iterator1 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Integer> classTag1 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock1 = new PartiallySerializedBlock<Integer>((MemoryStore) null, (SerializerManager) null, blockId2, serializationStream0, redirectableOutputStream1, (-2276L), memoryMode1, chunkedByteBufferOutputStream1, iterator1, classTag1);
      // Undeclared exception!
      try { 
        partiallySerializedBlock1.finishWritingToStream(redirectableOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn("").when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn("").when(redirectableOutputStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(chunkedByteBuffer0).toString();
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn(chunkedByteBuffer0).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, (-171L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.discard();
      partiallySerializedBlock0.discard();
      partiallySerializedBlock0.unrollMemory();
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream1 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream1 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      BlockId blockId2 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream2 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, (BlockId) null, serializationStream0, redirectableOutputStream0, (-4283L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.unrollMemory();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, (-171L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.unrollMemory();
      partiallySerializedBlock0.getUnrolledChunkedByteBuffer();
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.valuesIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Integer> classTag0 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, 0L, memoryMode0, (ChunkedByteBufferOutputStream) null, iterator0, classTag0);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.getUnrolledChunkedByteBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ClassTag<Integer> classTag0 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore0, (SerializerManager) null, blockId0, serializationStream0, redirectableOutputStream0, 0L, memoryMode0, (ChunkedByteBufferOutputStream) null, (Iterator<Integer>) null, classTag0);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.org$apache$spark$storage$memory$PartiallySerializedBlock$$unrolledBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, (SerializerManager) null, blockId0, serializationStream0, redirectableOutputStream0, (-1147L), memoryMode0, (ChunkedByteBufferOutputStream) null, iterator0, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.finishWritingToStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, (RedirectableOutputStream) null, 0, memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.getUnrolledChunkedByteBuffer();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, 950L, memoryMode0, chunkedByteBufferOutputStream0, iterator0, (ClassTag<Integer>) null);
      partiallySerializedBlock0.org$apache$spark$storage$memory$PartiallySerializedBlock$$unrolledBuffer();
      SerializerManager serializerManager1 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream1 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream1 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode1 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream1 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream1).toChunkedByteBuffer();
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock1 = new PartiallySerializedBlock<Object>((MemoryStore) null, serializerManager1, blockId1, serializationStream1, redirectableOutputStream1, 3510L, memoryMode1, chunkedByteBufferOutputStream1, iterator1, classTag0);
      partiallySerializedBlock1.getUnrolledChunkedByteBuffer();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Integer> classTag0 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, (-1L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.org$apache$spark$storage$memory$PartiallySerializedBlock$$unrolledBuffer();
      MemoryStore memoryStore1 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      partiallySerializedBlock0.org$apache$spark$storage$memory$PartiallySerializedBlock$$unrolledBuffer();
      SerializerManager serializerManager1 = null;
      BlockId blockId1 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream1 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream1 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      long long0 = (-3696L);
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream1 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      partiallySerializedBlock0.org$apache$spark$storage$memory$PartiallySerializedBlock$$unrolledBuffer();
      ClassTag<Object> classTag1 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.finishWritingToStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, (SerializerManager) null, blockId0, (SerializationStream) null, (RedirectableOutputStream) null, 0, memoryMode0, chunkedByteBufferOutputStream0, iterator0, (ClassTag<Object>) null);
      partiallySerializedBlock0.getUnrolledChunkedByteBuffer();
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(redirectableOutputStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Integer> classTag0 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Integer> partiallySerializedBlock0 = new PartiallySerializedBlock<Integer>(memoryStore0, serializerManager0, blockId0, (SerializationStream) null, redirectableOutputStream0, (-981L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      partiallySerializedBlock0.org$apache$spark$storage$memory$PartiallySerializedBlock$$unrolledBuffer();
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, redirectableOutputStream0, 778L, memoryMode0, chunkedByteBufferOutputStream0, (Iterator<Object>) null, classTag0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.finishWritingToStream(outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializationStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, serializationStream0, (RedirectableOutputStream) null, (-7400L), memoryMode0, chunkedByteBufferOutputStream0, iterator0, classTag0);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.valuesIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializationStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, (SerializerManager) null, blockId0, serializationStream0, (RedirectableOutputStream) null, 64L, memoryMode0, (ChunkedByteBufferOutputStream) null, iterator0, classTag0);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.valuesIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, (SerializationStream) null, (RedirectableOutputStream) null, 0, memoryMode0, chunkedByteBufferOutputStream0, iterator0, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.finishWritingToStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = null;
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = null;
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = null;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, (SerializerManager) null, blockId0, serializationStream0, (RedirectableOutputStream) null, 9223372036854775807L, memoryMode0, (ChunkedByteBufferOutputStream) null, iterator0, classTag0);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.valuesIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(redirectableOutputStream0).toString();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, (SerializerManager) null, blockId0, serializationStream0, redirectableOutputStream0, (-1147L), memoryMode0, (ChunkedByteBufferOutputStream) null, iterator0, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, blockId0, (SerializationStream) null, (RedirectableOutputStream) null, 0, memoryMode0, chunkedByteBufferOutputStream0, (Iterator<Object>) null, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.valuesIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = mock(BlockId.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = mock(ChunkedByteBufferOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((ChunkedByteBuffer) null).when(chunkedByteBufferOutputStream0).toChunkedByteBuffer();
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, (SerializerManager) null, blockId0, (SerializationStream) null, (RedirectableOutputStream) null, 0, memoryMode0, chunkedByteBufferOutputStream0, iterator0, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MemoryStore memoryStore0 = mock(MemoryStore.class, new ViolatedAssumptionAnswer());
      SerializerManager serializerManager0 = mock(SerializerManager.class, new ViolatedAssumptionAnswer());
      BlockId blockId0 = null;
      SerializationStream serializationStream0 = mock(SerializationStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(serializationStream0).toString();
      RedirectableOutputStream redirectableOutputStream0 = mock(RedirectableOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(redirectableOutputStream0).toString();
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ChunkedByteBufferOutputStream chunkedByteBufferOutputStream0 = null;
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      PartiallySerializedBlock<Object> partiallySerializedBlock0 = new PartiallySerializedBlock<Object>(memoryStore0, serializerManager0, (BlockId) null, serializationStream0, redirectableOutputStream0, (-83L), memoryMode0, (ChunkedByteBufferOutputStream) null, iterator0, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        partiallySerializedBlock0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.memory.PartiallySerializedBlock", e);
      }
  }
}
