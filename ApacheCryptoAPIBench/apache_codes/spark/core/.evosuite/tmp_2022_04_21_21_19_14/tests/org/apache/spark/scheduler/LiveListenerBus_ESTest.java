/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:49:35 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.metrics.MetricsSystem;
import org.apache.spark.scheduler.AsyncEventQueue;
import org.apache.spark.scheduler.BasicJobCounter;
import org.apache.spark.scheduler.LiveListenerBus;
import org.apache.spark.scheduler.LiveListenerBusMetrics;
import org.apache.spark.scheduler.SparkListenerEvent;
import org.apache.spark.scheduler.SparkListenerInterface;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Seq;
import scala.collection.immutable.Set;
import scala.collection.mutable.ListBuffer;
import scala.reflect.ClassTag;
import scala.util.DynamicVariable;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LiveListenerBus_ESTest extends LiveListenerBus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      ListBuffer<SparkListenerEvent> listBuffer0 = liveListenerBus0.queuedEvents();
      assertNull(listBuffer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      SparkListenerEvent sparkListenerEvent0 = mock(SparkListenerEvent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sparkListenerEvent0).toString();
      liveListenerBus0.post(sparkListenerEvent0);
      ListBuffer<SparkListenerEvent> listBuffer0 = liveListenerBus0.queuedEvents();
      assertNotNull(listBuffer0);
      assertTrue(listBuffer0.isTraversableAgain());
      assertEquals(1, listBuffer0.size());
      assertEquals(1, listBuffer0.length());
      assertEquals("ListBuffer", listBuffer0.stringPrefix());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      liveListenerBus0.stop();
      AtomicBoolean atomicBoolean0 = liveListenerBus0.org$apache$spark$scheduler$LiveListenerBus$$stopped();
      assertNotNull(atomicBoolean0);
      assertTrue(atomicBoolean0.get());
      assertEquals("true", atomicBoolean0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      AtomicBoolean atomicBoolean0 = liveListenerBus0.org$apache$spark$scheduler$LiveListenerBus$$started();
      assertNotNull(atomicBoolean0);
      assertEquals("true", atomicBoolean0.toString());
      assertTrue(atomicBoolean0.get());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      liveListenerBus0.stop();
      SparkListenerInterface sparkListenerInterface0 = mock(SparkListenerInterface.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        liveListenerBus0.addToStatusQueue(sparkListenerInterface0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // LiveListenerBus is stopped.
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      liveListenerBus0.stop();
      SparkListenerInterface sparkListenerInterface0 = mock(SparkListenerInterface.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        liveListenerBus0.addToSharedQueue(sparkListenerInterface0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // LiveListenerBus is stopped.
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      liveListenerBus0.stop();
      SparkListenerInterface sparkListenerInterface0 = mock(SparkListenerInterface.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        liveListenerBus0.addToManagementQueue(sparkListenerInterface0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // LiveListenerBus is stopped.
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      SparkListenerInterface sparkListenerInterface0 = mock(SparkListenerInterface.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.stop();
      // Undeclared exception!
      try { 
        liveListenerBus0.addToEventLogQueue(sparkListenerInterface0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // LiveListenerBus is stopped.
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      CopyOnWriteArrayList<AsyncEventQueue> copyOnWriteArrayList0 = liveListenerBus0.org$apache$spark$scheduler$LiveListenerBus$$queues();
      assertNotNull(copyOnWriteArrayList0);
      assertEquals("[]", copyOnWriteArrayList0.toString());
      assertEquals(0, copyOnWriteArrayList0.size());
      assertTrue(copyOnWriteArrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      AtomicBoolean atomicBoolean0 = liveListenerBus0.org$apache$spark$scheduler$LiveListenerBus$$stopped();
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      AtomicBoolean atomicBoolean0 = liveListenerBus0.org$apache$spark$scheduler$LiveListenerBus$$started();
      assertNotNull(atomicBoolean0);
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      LiveListenerBusMetrics liveListenerBusMetrics0 = liveListenerBus0.metrics();
      assertNotNull(liveListenerBusMetrics0);
      assertEquals("LiveListenerBus", liveListenerBusMetrics0.sourceName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      // Undeclared exception!
      try { 
        liveListenerBus0.stop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Attempted to stop bus that has not yet started!
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start((SparkContext) null, metricsSystem0);
      MetricsSystem metricsSystem1 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        liveListenerBus0.start((SparkContext) null, metricsSystem1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // LiveListenerBus already started.
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      LiveListenerBus liveListenerBus1 = new LiveListenerBus((SparkConf) null);
      assertNotNull(liveListenerBus1);
      assertFalse(liveListenerBus1.equals((Object)liveListenerBus0));
      
      ListBuffer<SparkListenerEvent> listBuffer0 = liveListenerBus1.queuedEvents();
      assertNotSame(liveListenerBus1, liveListenerBus0);
      assertNotNull(listBuffer0);
      assertFalse(liveListenerBus1.equals((Object)liveListenerBus0));
      assertEquals(0, listBuffer0.length());
      assertEquals(0, listBuffer0.size());
      assertTrue(listBuffer0.isTraversableAgain());
      assertEquals("ListBuffer", listBuffer0.stringPrefix());
      
      liveListenerBus0.queuedEvents_$eq(listBuffer0);
      assertNotSame(liveListenerBus0, liveListenerBus1);
      assertNotSame(liveListenerBus1, liveListenerBus0);
      assertFalse(liveListenerBus0.equals((Object)liveListenerBus1));
      assertFalse(liveListenerBus1.equals((Object)liveListenerBus0));
      assertEquals(0, listBuffer0.length());
      assertEquals(0, listBuffer0.size());
      assertTrue(listBuffer0.isTraversableAgain());
      assertEquals("ListBuffer", listBuffer0.stringPrefix());
      
      SparkListenerEvent sparkListenerEvent0 = mock(SparkListenerEvent.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.post(sparkListenerEvent0);
      assertNotSame(liveListenerBus0, liveListenerBus1);
      assertFalse(liveListenerBus0.equals((Object)liveListenerBus1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      LiveListenerBus liveListenerBus0 = new LiveListenerBus(sparkConf0);
      assertNotNull(liveListenerBus0);
      
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      SparkListenerEvent sparkListenerEvent0 = mock(SparkListenerEvent.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.post(sparkListenerEvent0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      liveListenerBus0.stop();
      liveListenerBus0.post((SparkListenerEvent) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start(sparkContext0, metricsSystem0);
      liveListenerBus0.stop();
      SparkListenerInterface sparkListenerInterface0 = mock(SparkListenerInterface.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        liveListenerBus0.addToQueue(sparkListenerInterface0, "i\"EX|K");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // LiveListenerBus is stopped.
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      MetricsSystem metricsSystem0 = mock(MetricsSystem.class, new ViolatedAssumptionAnswer());
      liveListenerBus0.start((SparkContext) null, metricsSystem0);
      liveListenerBus0.stop();
      liveListenerBus0.stop();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      // Undeclared exception!
      try { 
        liveListenerBus0.addToSharedQueue((SparkListenerInterface) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.spark.internal.config.package$
         //
         verifyException("org.apache.spark.scheduler.AsyncEventQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      List<SparkListenerInterface> list0 = liveListenerBus0.listeners();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      // Undeclared exception!
      try { 
        liveListenerBus0.addToEventLogQueue((SparkListenerInterface) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.spark.internal.config.package$
         //
         verifyException("org.apache.spark.scheduler.AsyncEventQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DynamicVariable<Object> dynamicVariable0 = LiveListenerBus.withinListenerThread();
      assertNotNull(dynamicVariable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      // Undeclared exception!
      try { 
        liveListenerBus0.addToManagementQueue((SparkListenerInterface) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.spark.internal.config.package$
         //
         verifyException("org.apache.spark.scheduler.AsyncEventQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      Seq<BasicJobCounter> seq0 = liveListenerBus0.findListenersByClass((ClassTag<BasicJobCounter>) null);
      assertTrue(seq0.isTraversableAgain());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      // Undeclared exception!
      try { 
        liveListenerBus0.start((SparkContext) null, (MetricsSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.LiveListenerBus", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      Set<String> set0 = liveListenerBus0.activeQueues();
      assertTrue(set0.isTraversableAgain());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      // Undeclared exception!
      try { 
        liveListenerBus0.addToStatusQueue((SparkListenerInterface) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.spark.internal.config.package$
         //
         verifyException("org.apache.spark.scheduler.AsyncEventQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      // Undeclared exception!
      try { 
        liveListenerBus0.addToQueue((SparkListenerInterface) null, "spark.blacklist.stage.maxFailedExecutorsPerNode");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.spark.internal.config.package$
         //
         verifyException("org.apache.spark.scheduler.AsyncEventQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      liveListenerBus0.removeListener((SparkListenerInterface) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = new LiveListenerBus((SparkConf) null);
      liveListenerBus0.waitUntilEmpty(5247L);
  }
}
