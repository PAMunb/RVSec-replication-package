/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:51:45 GMT 2022
 */

package org.apache.spark.deploy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.deploy.Command;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple6;
import scala.collection.Map;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Command_ESTest extends Command_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Command command0 = new Command("?'/X3t)q>5UrLwb", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Command command1 = command0.copy((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command1.mainClass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Command command0 = Command.apply("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Command command1 = command0.copy("scala.Predef$StringFormat$", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command1.mainClass();
      assertEquals("scala.Predef$StringFormat$", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Command command0 = new Command((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Command command0 = new Command("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Command command1 = command0.copy("NO-owMun(4?", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command1.copy$default$1();
      assertEquals("NO-owMun(4?", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Command command0 = new Command("aZl on cty qu^eue", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command0.canEqual(command0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Command command0 = new Command((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Object object0 = command0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Command command0 = new Command("aZl on cty qu^eue", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Object object0 = command0.productElement(0);
      assertEquals("aZl on cty qu^eue", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Command command0 = new Command("scala.runtime.ScalaRunTime$", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Object object0 = command0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Command command0 = Command.apply("empty.maxBy", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Object object0 = command0.productElement(5);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Command command0 = Command.apply("empty.maxBy", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Object object0 = command0.productElement(4);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Command command0 = Command.apply("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Object object0 = command0.productElement(3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Command command0 = new Command("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Map<String, String> map0 = command0.environment();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Command command0 = Command.apply("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.arguments();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Command command0 = new Command("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      int int0 = command0.productArity();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Command command0 = Command.apply("org.apache.spark.deploy.Command$", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      command0.productIterator();
      assertEquals(6, command0.productArity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Command command0 = new Command("?OHuLgxjDQrp{jm", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command0.productPrefix();
      assertEquals("Command", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Command command0 = new Command((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.classPathEntries();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Command command0 = Command.apply("0RaQ#=Gc 1Q/T", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.javaOpts();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Command command0 = Command.apply("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command0.mainClass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Command command0 = new Command((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.libraryPathEntries();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Command command0 = new Command("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Option<Tuple6<String, Seq<String>, Map<String, String>, Seq<String>, Seq<String>, Seq<String>>> option0 = Command.unapply(command0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Command command0 = new Command((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Command command1 = command0.copy("W3b=K^S", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command0.equals(command1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Command command0 = new Command((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Command command1 = Command.apply("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command1.equals(command0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Command command0 = Command.apply((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Command command1 = Command.apply((String) null, (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command1.equals(command0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Command command0 = new Command("tail on empty queue", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command0.equals("tail on empty queue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Command command0 = Command.apply("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command0.equals(command0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Command command0 = Command.apply("5;1{4BwHPq-", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      // Undeclared exception!
      try { 
        command0.productElement(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.deploy.Command", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Command command0 = new Command("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.copy$default$2();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Command command0 = new Command("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      boolean boolean0 = command0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Command command0 = new Command("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.copy$default$4();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option<Tuple6<String, Seq<String>, Map<String, String>, Seq<String>, Seq<String>, Seq<String>>> option0 = Command.unapply((Command) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Command command0 = new Command("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Command command0 = Command.apply("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Map<String, String> map0 = command0.copy$default$3();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Command command0 = new Command("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.copy$default$5();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Function1<Tuple6<String, Seq<String>, Map<String, String>, Seq<String>, Seq<String>, Seq<String>>, Command> function1_0 = Command.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Command command0 = Command.apply("", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      String string0 = command0.toString();
      assertEquals("Command(,null,null,null,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Command command0 = Command.apply("tail on empty queue", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      command0.hashCode();
      assertEquals(6, command0.productArity());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Command command0 = new Command("W8^.2X:.=MVhK", (Seq<String>) null, (Map<String, String>) null, (Seq<String>) null, (Seq<String>) null, (Seq<String>) null);
      Seq<String> seq0 = command0.copy$default$6();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Function1<String, Function1<Seq<String>, Function1<Map<String, String>, Function1<Seq<String>, Function1<Seq<String>, Function1<Seq<String>, Command>>>>>> function1_0 = Command.curried();
      assertNotNull(function1_0);
  }
}
