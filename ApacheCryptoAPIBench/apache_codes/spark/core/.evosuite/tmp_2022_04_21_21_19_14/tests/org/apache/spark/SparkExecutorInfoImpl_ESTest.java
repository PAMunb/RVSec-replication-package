/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:55:05 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.spark.SparkExecutorInfoImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkExecutorInfoImpl_ESTest extends SparkExecutorInfoImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("", 2242, 0L, 0);
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals(0, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(2242, sparkExecutorInfoImpl0.port());
      assertEquals("", sparkExecutorInfoImpl0.host());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      
      int int0 = sparkExecutorInfoImpl0.port();
      assertEquals(2242, int0);
      assertEquals(0, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(2242, sparkExecutorInfoImpl0.port());
      assertEquals("", sparkExecutorInfoImpl0.host());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl((String) null, (-1), (-1), (-1));
      assertNotNull(sparkExecutorInfoImpl0);
      assertNull(sparkExecutorInfoImpl0.host());
      assertEquals((-1L), sparkExecutorInfoImpl0.cacheSize());
      assertEquals((-1), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
      
      int int0 = sparkExecutorInfoImpl0.port();
      assertEquals((-1), int0);
      assertNull(sparkExecutorInfoImpl0.host());
      assertEquals((-1L), sparkExecutorInfoImpl0.cacheSize());
      assertEquals((-1), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("[+y*\"nypx3b#0^ Ik+0", (-1), 0L, 0);
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals("[+y*\"nypx3b#0^ Ik+0", sparkExecutorInfoImpl0.host());
      assertEquals(0, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
      
      int int0 = sparkExecutorInfoImpl0.numRunningTasks();
      assertEquals(0, int0);
      assertEquals("[+y*\"nypx3b#0^ Ik+0", sparkExecutorInfoImpl0.host());
      assertEquals(0, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl(".~r`:R&*~<}H^Mn^r", 1, 1, 1);
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals(".~r`:R&*~<}H^Mn^r", sparkExecutorInfoImpl0.host());
      assertEquals(1, sparkExecutorInfoImpl0.port());
      assertEquals(1, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(1L, sparkExecutorInfoImpl0.cacheSize());
      
      int int0 = sparkExecutorInfoImpl0.numRunningTasks();
      assertEquals(1, int0);
      assertEquals(".~r`:R&*~<}H^Mn^r", sparkExecutorInfoImpl0.host());
      assertEquals(1, sparkExecutorInfoImpl0.port());
      assertEquals(1, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(1L, sparkExecutorInfoImpl0.cacheSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl((String) null, (-1), (-1), (-1));
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals((-1), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
      assertNull(sparkExecutorInfoImpl0.host());
      assertEquals((-1L), sparkExecutorInfoImpl0.cacheSize());
      
      String string0 = sparkExecutorInfoImpl0.host();
      assertNull(string0);
      assertEquals((-1), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
      assertNull(sparkExecutorInfoImpl0.host());
      assertEquals((-1L), sparkExecutorInfoImpl0.cacheSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("", 2242, 0L, 0);
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals(0, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(2242, sparkExecutorInfoImpl0.port());
      assertEquals("", sparkExecutorInfoImpl0.host());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      
      String string0 = sparkExecutorInfoImpl0.host();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(2242, sparkExecutorInfoImpl0.port());
      assertEquals("", sparkExecutorInfoImpl0.host());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl(".~r`:R&*~<}H^Mn^r", 1, 1, 1);
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals(1, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(1L, sparkExecutorInfoImpl0.cacheSize());
      assertEquals(1, sparkExecutorInfoImpl0.port());
      assertEquals(".~r`:R&*~<}H^Mn^r", sparkExecutorInfoImpl0.host());
      
      long long0 = sparkExecutorInfoImpl0.cacheSize();
      assertEquals(1L, long0);
      assertEquals(1, sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals(1L, sparkExecutorInfoImpl0.cacheSize());
      assertEquals(1, sparkExecutorInfoImpl0.port());
      assertEquals(".~r`:R&*~<}H^Mn^r", sparkExecutorInfoImpl0.host());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl((String) null, (-1), (-1), (-1));
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals((-1L), sparkExecutorInfoImpl0.cacheSize());
      assertNull(sparkExecutorInfoImpl0.host());
      assertEquals((-1), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
      
      long long0 = sparkExecutorInfoImpl0.cacheSize();
      assertEquals((-1L), long0);
      assertEquals((-1L), sparkExecutorInfoImpl0.cacheSize());
      assertNull(sparkExecutorInfoImpl0.host());
      assertEquals((-1), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals((-1), sparkExecutorInfoImpl0.port());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("nNp1", 0, 0, (-1859));
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals(0, sparkExecutorInfoImpl0.port());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      assertEquals("nNp1", sparkExecutorInfoImpl0.host());
      assertEquals((-1859), sparkExecutorInfoImpl0.numRunningTasks());
      
      int int0 = sparkExecutorInfoImpl0.port();
      assertEquals(0, int0);
      assertEquals(0, sparkExecutorInfoImpl0.port());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      assertEquals("nNp1", sparkExecutorInfoImpl0.host());
      assertEquals((-1859), sparkExecutorInfoImpl0.numRunningTasks());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("nNp1", 0, 0, (-1859));
      assertNotNull(sparkExecutorInfoImpl0);
      assertEquals(0, sparkExecutorInfoImpl0.port());
      assertEquals((-1859), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals("nNp1", sparkExecutorInfoImpl0.host());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
      
      long long0 = sparkExecutorInfoImpl0.cacheSize();
      assertEquals(0L, long0);
      assertEquals(0, sparkExecutorInfoImpl0.port());
      assertEquals((-1859), sparkExecutorInfoImpl0.numRunningTasks());
      assertEquals("nNp1", sparkExecutorInfoImpl0.host());
      assertEquals(0L, sparkExecutorInfoImpl0.cacheSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("nNp1", 0, 0, (-1859));
      String string0 = sparkExecutorInfoImpl0.host();
      assertEquals("nNp1", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkExecutorInfoImpl sparkExecutorInfoImpl0 = new SparkExecutorInfoImpl("nNp1", 0, 0, (-1859));
      int int0 = sparkExecutorInfoImpl0.numRunningTasks();
      assertEquals((-1859), int0);
  }
}
