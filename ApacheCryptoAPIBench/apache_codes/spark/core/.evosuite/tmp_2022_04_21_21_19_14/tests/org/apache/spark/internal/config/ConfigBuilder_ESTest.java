/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:03:48 GMT 2022
 */

package org.apache.spark.internal.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.spark.internal.config.ConfigBuilder;
import org.apache.spark.internal.config.ConfigEntry;
import org.apache.spark.network.util.ByteUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.collection.immutable.List;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConfigBuilder_ESTest extends ConfigBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      assertTrue(configBuilder0._public());
      
      ConfigBuilder configBuilder1 = configBuilder0.internal();
      configBuilder1.withAlternative("");
      assertFalse(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("RKEMoVpMj*<P/x");
      configBuilder0.productElement(0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("");
      ConfigBuilder configBuilder1 = configBuilder0.copy((String) null);
      configBuilder1.key();
      assertTrue(configBuilder1._public());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply(")F");
      configBuilder0.key();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      ConfigBuilder configBuilder1 = configBuilder0.copy((String) null);
      configBuilder1.copy$default$1();
      assertTrue(configBuilder1._public());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("E4:pNgTqc.`@hUJlvC");
      configBuilder0.copy$default$1();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply(")F");
      configBuilder0.canEqual(configBuilder0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("^3)jO&!v;<,@)%,M");
      assertTrue(configBuilder0._public());
      
      ConfigBuilder configBuilder1 = configBuilder0.internal();
      boolean boolean0 = configBuilder1._public();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("E4:pNgTqc.`@hUJlvC");
      ConfigBuilder configBuilder1 = configBuilder0.doc("E4:pNgTqc.`@hUJlvC");
      configBuilder1._doc();
      assertTrue(configBuilder1._public());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("sHzuzV?`pt rdC!99Y");
      configBuilder0._alternatives_$eq((List<String>) null);
      configBuilder0._alternatives();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder((String) null);
      configBuilder0.productElement(0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0.key();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder((String) null);
      configBuilder0.canEqual((Object) null);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0._alternatives();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0._doc_$eq((String) null);
      configBuilder0._doc();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("scala.package$$anon$1");
      boolean boolean0 = configBuilder0._public();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0.productIterator();
      assertEquals(1, configBuilder0.productArity());
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("");
      String string0 = configBuilder0.productPrefix();
      assertEquals("ConfigBuilder", string0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("^3)jO&!v;<,@)%,M");
      int int0 = configBuilder0.productArity();
      assertEquals(1, int0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply((String) null);
      configBuilder0._doc();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("^L");
      configBuilder0._alternatives_$eq((List<String>) null);
      // Undeclared exception!
      try { 
        configBuilder0.withAlternative("^L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.internal.config.ConfigBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("scala.StringContext");
      ConfigBuilder.unapply(configBuilder0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      ConfigBuilder configBuilder1 = configBuilder0.copy("org.apache.spark.internal.config.ConfigBuilder$$anonfun$fallbackConf$1");
      boolean boolean0 = configBuilder1.equals(configBuilder0);
      assertFalse(boolean0);
      assertTrue(configBuilder1._public());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply((String) null);
      ConfigBuilder configBuilder1 = ConfigBuilder.apply((String) null);
      boolean boolean0 = configBuilder0.equals(configBuilder1);
      assertTrue(boolean0);
      assertTrue(configBuilder1._public());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("");
      ConfigBuilder configBuilder1 = configBuilder0.copy((String) null);
      boolean boolean0 = configBuilder1.equals(configBuilder0);
      assertFalse(boolean0);
      assertTrue(configBuilder1._public());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("8Ul&\"gxa'lC\"*y");
      boolean boolean0 = configBuilder0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("scala.package$$anon$1");
      boolean boolean0 = configBuilder0.equals(configBuilder0);
      assertTrue(boolean0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("PDXOx");
      // Undeclared exception!
      try { 
        configBuilder0.productElement((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.internal.config.ConfigBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("e4TcH@OF+\u0007");
      ConfigEntry<ConfigBuilder> configEntry0 = (ConfigEntry<ConfigBuilder>) mock(ConfigEntry.class, new ViolatedAssumptionAnswer());
      doReturn((Function1) null).when(configEntry0).stringConverter();
      doReturn((Function1) null).when(configEntry0).valueConverter();
      // Undeclared exception!
      try { 
        configBuilder0.fallbackConf(configEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Config entry e4TcH@OF+\u0007 already registered!
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0.stringConf();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option<String> option0 = ConfigBuilder.unapply((ConfigBuilder) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      assertTrue(configBuilder0._public());
      
      configBuilder0.internal();
      configBuilder0.doc("org.apache.spark.internal.config.ConfigBuilder$$anonfun$doubleConf$1$$anonfun$apply$4");
      assertFalse(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("org.apache.spark.internal.config.ConfigBuilder$$anonfun$boleanConf$1");
      configBuilder0.hashCode();
      assertTrue(configBuilder0._public());
      assertEquals(1, configBuilder0.productArity());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function1<ConfigBuilder, ConfigBuilder> function1_0 = ConfigBuilder.compose((Function1<ConfigBuilder, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("");
      ConfigBuilder configBuilder1 = configBuilder0.copy("");
      boolean boolean0 = configBuilder0.equals(configBuilder1);
      assertTrue(configBuilder1._public());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Function1<String, ConfigBuilder> function1_0 = ConfigBuilder.andThen((Function1<ConfigBuilder, ConfigBuilder>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("scala.StringContext");
      configBuilder0.regexConf();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("scala.StringContext");
      configBuilder0.longConf();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0.intConf();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0.copy$default$1();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("Char");
      ByteUnit byteUnit0 = ByteUnit.GiB;
      configBuilder0.bytesConf(byteUnit0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      configBuilder0.doubleConf();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("K");
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      configBuilder0.timeConf(timeUnit0);
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("");
      // Undeclared exception!
      try { 
        configBuilder0.fallbackConf((ConfigEntry<.colon.colon<.colon.colon>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.internal.config.FallbackConfigEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("org.apache.spark.internal.config.ConfigBuilder$$anonfun$fallbackConf$1");
      configBuilder0.booleanConf();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConfigBuilder configBuilder0 = new ConfigBuilder("LCM0A!~\"KN57x");
      configBuilder0._onCreate();
      assertTrue(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("");
      String string0 = configBuilder0.toString();
      assertTrue(configBuilder0._public());
      assertEquals("ConfigBuilder()", string0);
      assertEquals(1, configBuilder0.productArity());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("scala.Product$class");
      assertTrue(configBuilder0._public());
      
      configBuilder0._public_$eq(false);
      assertFalse(configBuilder0._public());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConfigBuilder configBuilder0 = ConfigBuilder.apply("org.apache.spark.internal.config.ConfigBuilder$$anonfun$fallbackConf$1");
      ConfigBuilder configBuilder1 = configBuilder0.withAlternative("org.apache.spark.internal.config.ConfigBuilder$$anonfun$fallbackConf$1");
      assertTrue(configBuilder1._public());
  }
}
