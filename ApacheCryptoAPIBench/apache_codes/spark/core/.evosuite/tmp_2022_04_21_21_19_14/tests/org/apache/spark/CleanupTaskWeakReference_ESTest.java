/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:59:39 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.lang.ref.ReferenceQueue;
import org.apache.spark.CleanupTask;
import org.apache.spark.CleanupTaskWeakReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleanupTaskWeakReference_ESTest extends CleanupTaskWeakReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CleanupTask cleanupTask0 = mock(CleanupTask.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cleanupTask0).toString();
      CleanupTaskWeakReference cleanupTaskWeakReference0 = new CleanupTaskWeakReference(cleanupTask0, (Object) null, (ReferenceQueue<Object>) null);
      assertFalse(cleanupTaskWeakReference0.isEnqueued());
      assertNotNull(cleanupTaskWeakReference0);
      
      CleanupTask cleanupTask1 = cleanupTaskWeakReference0.task();
      assertFalse(cleanupTaskWeakReference0.isEnqueued());
      assertNotNull(cleanupTask1);
      assertSame(cleanupTask1, cleanupTask0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReferenceQueue<Object> referenceQueue0 = (ReferenceQueue<Object>) mock(ReferenceQueue.class, new ViolatedAssumptionAnswer());
      CleanupTaskWeakReference cleanupTaskWeakReference0 = new CleanupTaskWeakReference((CleanupTask) null, (Object) null, referenceQueue0);
      assertFalse(cleanupTaskWeakReference0.isEnqueued());
      assertNotNull(cleanupTaskWeakReference0);
      
      CleanupTask cleanupTask0 = cleanupTaskWeakReference0.task();
      assertFalse(cleanupTaskWeakReference0.isEnqueued());
      assertNull(cleanupTask0);
  }
}
