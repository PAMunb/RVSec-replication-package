/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:12:47 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerUnpersistRDD;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerUnpersistRDD_ESTest extends SparkListenerUnpersistRDD_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply((-3254));
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD1 = SparkListenerUnpersistRDD.apply(4);
      boolean boolean0 = sparkListenerUnpersistRDD0.equals(sparkListenerUnpersistRDD1);
      assertEquals(4, sparkListenerUnpersistRDD1.copy$default$1());
      assertFalse(sparkListenerUnpersistRDD1.equals((Object)sparkListenerUnpersistRDD0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD(25);
      int int0 = sparkListenerUnpersistRDD0.rddId();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(0);
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD1 = sparkListenerUnpersistRDD0.copy((-4668));
      int int0 = sparkListenerUnpersistRDD1.rddId();
      assertEquals((-4668), int0);
      assertEquals(0, sparkListenerUnpersistRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(2);
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD1 = sparkListenerUnpersistRDD0.copy(0);
      assertEquals(0, sparkListenerUnpersistRDD1.rddId());
      assertEquals(2, sparkListenerUnpersistRDD0.rddId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(3942);
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD1 = sparkListenerUnpersistRDD0.copy(3942);
      assertTrue(sparkListenerUnpersistRDD1.equals((Object)sparkListenerUnpersistRDD0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(3680);
      int int0 = sparkListenerUnpersistRDD0.copy$default$1();
      assertEquals(3680, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-889275714));
      int int0 = sparkListenerUnpersistRDD0.copy$default$1();
      assertEquals((-889275714), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(1564);
      Object object0 = sparkListenerUnpersistRDD0.productElement(0);
      assertEquals(1564, object0);
      
      sparkListenerUnpersistRDD0.canEqual(object0);
      assertEquals(1564, sparkListenerUnpersistRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(0);
      int int0 = sparkListenerUnpersistRDD0.rddId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD(25);
      boolean boolean0 = sparkListenerUnpersistRDD0.canEqual(sparkListenerUnpersistRDD0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply(3680);
      String string0 = sparkListenerUnpersistRDD0.productPrefix();
      assertEquals("SparkListenerUnpersistRDD", string0);
      assertEquals(3680, sparkListenerUnpersistRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-2283));
      int int0 = sparkListenerUnpersistRDD0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD(232);
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD1 = new SparkListenerUnpersistRDD((-2117));
      boolean boolean0 = sparkListenerUnpersistRDD0.equals(sparkListenerUnpersistRDD1);
      assertFalse(sparkListenerUnpersistRDD1.equals((Object)sparkListenerUnpersistRDD0));
      assertFalse(boolean0);
      assertEquals((-2117), sparkListenerUnpersistRDD1.rddId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-2117));
      boolean boolean0 = sparkListenerUnpersistRDD0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-3254));
      boolean boolean0 = sparkListenerUnpersistRDD0.equals(sparkListenerUnpersistRDD0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply((-3254));
      // Undeclared exception!
      try { 
        sparkListenerUnpersistRDD0.productElement((-3254));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerUnpersistRDD", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply((-1194));
      SparkListenerUnpersistRDD.unapply(sparkListenerUnpersistRDD0);
      assertEquals((-1194), sparkListenerUnpersistRDD0.rddId());
      assertEquals((-1194), sparkListenerUnpersistRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-222));
      String string0 = sparkListenerUnpersistRDD0.toString();
      assertEquals("SparkListenerUnpersistRDD(-222)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply((-2236));
      sparkListenerUnpersistRDD0.productIterator();
      assertEquals((-2236), sparkListenerUnpersistRDD0.rddId());
      assertEquals(1, sparkListenerUnpersistRDD0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD(0);
      int int0 = sparkListenerUnpersistRDD0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-2283));
      boolean boolean0 = sparkListenerUnpersistRDD0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option<Object> option0 = SparkListenerUnpersistRDD.unapply((SparkListenerUnpersistRDD) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Function1<Object, SparkListenerUnpersistRDD> function1_0 = SparkListenerUnpersistRDD.andThen((Function1<SparkListenerUnpersistRDD, SparkListenerUnpersistRDD>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Function1<SparkListenerUnpersistRDD, SparkListenerUnpersistRDD> function1_0 = SparkListenerUnpersistRDD.compose((Function1<SparkListenerUnpersistRDD, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = new SparkListenerUnpersistRDD((-2258));
      sparkListenerUnpersistRDD0.hashCode();
      assertEquals((-2258), sparkListenerUnpersistRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD0 = SparkListenerUnpersistRDD.apply((-3213));
      SparkListenerUnpersistRDD sparkListenerUnpersistRDD1 = sparkListenerUnpersistRDD0.copy((-3213));
      boolean boolean0 = sparkListenerUnpersistRDD0.equals(sparkListenerUnpersistRDD1);
      assertEquals((-3213), sparkListenerUnpersistRDD1.copy$default$1());
      assertTrue(boolean0);
  }
}
