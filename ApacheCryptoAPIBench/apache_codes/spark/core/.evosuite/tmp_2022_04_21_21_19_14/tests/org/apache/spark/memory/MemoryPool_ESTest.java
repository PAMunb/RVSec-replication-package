/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:32:02 GMT 2022
 */

package org.apache.spark.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.memory.ExecutionMemoryPool;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.memory.StorageMemoryPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.runtime.BoxedUnit;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MemoryPool_ESTest extends MemoryPool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      executionMemoryPool0.incrementPoolSize(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      executionMemoryPool0.memoryUsed();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool(memoryMode0, memoryMode0);
      storageMemoryPool0.incrementPoolSize(5449L);
      storageMemoryPool0.memoryFree();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool((Object) null, memoryMode0);
      Function1<Object, BoxedUnit> function1_0 = executionMemoryPool0.acquireMemory$default$3();
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool(function1_0, memoryMode0);
      storageMemoryPool0.org$apache$spark$memory$StorageMemoryPool$$_memoryUsed = 5449L;
      storageMemoryPool0.memoryFree();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool((Object) null, memoryMode0);
      // Undeclared exception!
      try { 
        storageMemoryPool0.poolSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool((Object) null, memoryMode0);
      // Undeclared exception!
      try { 
        storageMemoryPool0.memoryUsed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.StorageMemoryPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool((Object) null, memoryMode0);
      // Undeclared exception!
      try { 
        storageMemoryPool0.memoryFree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool((Object) null, memoryMode0);
      // Undeclared exception!
      try { 
        executionMemoryPool0.incrementPoolSize(25L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool((Object) null, memoryMode0);
      // Undeclared exception!
      try { 
        storageMemoryPool0.decrementPoolSize(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      // Undeclared exception!
      try { 
        executionMemoryPool0.decrementPoolSize(1024L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      executionMemoryPool0.decrementPoolSize(0L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      // Undeclared exception!
      try { 
        executionMemoryPool0.decrementPoolSize((-1419L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      executionMemoryPool0.incrementPoolSize(1076L);
      executionMemoryPool0.decrementPoolSize(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      // Undeclared exception!
      try { 
        executionMemoryPool0.incrementPoolSize((-911L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      StorageMemoryPool storageMemoryPool0 = new StorageMemoryPool(memoryMode0, memoryMode0);
      storageMemoryPool0.memoryFree();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      ExecutionMemoryPool executionMemoryPool0 = new ExecutionMemoryPool(memoryMode0, memoryMode0);
      executionMemoryPool0.poolSize();
  }
}
