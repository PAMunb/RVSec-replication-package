/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:35:56 GMT 2022
 */

package org.apache.spark.util.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.spark.util.random.GapSamplingReplacement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GapSamplingReplacement_ESTest extends GapSamplingReplacement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GapSamplingReplacement.$lessinit$greater$default$3();
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(5.0E-11, random0, 5.0E-11);
      Random random1 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement1 = new GapSamplingReplacement(5.0E-11, random1, 5.0E-11);
      GapSamplingReplacement gapSamplingReplacement2 = null;
      try {
        gapSamplingReplacement2 = new GapSamplingReplacement(5.0E-11, random0, (-3654.781100483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: epsilon (-3654.781100483) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(0.06, random0, 0.06);
      gapSamplingReplacement0.sample();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GapSamplingReplacement.$lessinit$greater$default$3();
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(5.0E-11, random0, 5.0E-11);
      gapSamplingReplacement0.f();
      GapSamplingReplacement.$lessinit$greater$default$3();
      GapSamplingReplacement.$lessinit$greater$default$3();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.q();
      gapSamplingReplacement0.sample();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.rng();
      GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.rng();
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.poissonGE1();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement(1038.05099637, random0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: epsilon (0.0) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement(1332.91495659601, (Random) null, 1332.91495659601);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(1466.110823709408, random0, 1466.110823709408);
      GapSamplingReplacement.$lessinit$greater$default$3();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.rng();
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.rng();
      gapSamplingReplacement0.rng();
      gapSamplingReplacement0.poissonGE1();
      GapSamplingReplacement.$lessinit$greater$default$3();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.f();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.q();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.poissonGE1();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.poissonGE1();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.poissonGE1();
      gapSamplingReplacement0.q();
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.poissonGE1();
      gapSamplingReplacement0.rng();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.poissonGE1();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.poissonGE1();
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.q();
      GapSamplingReplacement.$lessinit$greater$default$3();
      gapSamplingReplacement0.q();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement(291.3275159774456, random0, (-2509.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: epsilon (-2509.0) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement(2939.0, random0, (-1331.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: epsilon (-1331.0) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GapSamplingReplacement.$lessinit$greater$default$2();
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(3.141592653589793, random0, 585.349);
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.poissonGE1();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.q();
      GapSamplingReplacement.$lessinit$greater$default$3();
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.rng();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.rng();
      gapSamplingReplacement0.poissonGE1();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(292.2173714, random0, 292.2173714);
      gapSamplingReplacement0.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(3.141592653589793, random0, 3.141592653589793);
      gapSamplingReplacement0.q();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = new GapSamplingReplacement(1.0, random0, 1276.052783067);
      gapSamplingReplacement0.f();
      gapSamplingReplacement0.q();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.sample();
      gapSamplingReplacement0.sample();
      GapSamplingReplacement.$lessinit$greater$default$2();
      gapSamplingReplacement0.rng();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement((-691.6870316804464), random0, (-728.145));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (-691.6870316804464) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement((-796.0), random0, (-796.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (-796.0) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random random0 = GapSamplingReplacement.$lessinit$greater$default$2();
      GapSamplingReplacement gapSamplingReplacement0 = null;
      try {
        gapSamplingReplacement0 = new GapSamplingReplacement(0.0, random0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (0.0) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }
}
