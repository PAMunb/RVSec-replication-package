/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:01:46 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.TestBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TestBlockId_ESTest extends TestBlockId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId((String) null);
      Object object0 = testBlockId0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId((String) null);
      String string0 = testBlockId0.id();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("");
      String string0 = testBlockId0.id();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId((String) null);
      String string0 = testBlockId0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("");
      String string0 = testBlockId0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId((String) null);
      boolean boolean0 = testBlockId0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("L.2");
      Object object0 = testBlockId0.productElement(0);
      assertEquals("L.2", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("Stream");
      String string0 = testBlockId0.id();
      assertEquals("Stream", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("Stream");
      int int0 = testBlockId0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("");
      boolean boolean0 = testBlockId0.canEqual(testBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("m()0R^2f&sRT");
      Option<String> option0 = TestBlockId.unapply(testBlockId0);
      assertEquals(1, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("org.apache.spark.storage.SuffleBockId");
      TestBlockId testBlockId1 = testBlockId0.copy("");
      boolean boolean0 = testBlockId0.equals(testBlockId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply((String) null);
      TestBlockId testBlockId1 = new TestBlockId("");
      boolean boolean0 = testBlockId0.equals(testBlockId1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply((String) null);
      TestBlockId testBlockId1 = TestBlockId.apply((String) null);
      boolean boolean0 = testBlockId1.equals(testBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply(")*pCCP4,Me>:go!z^eE");
      boolean boolean0 = testBlockId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply("scala.collection.IndexeSeq$$on$1");
      boolean boolean0 = testBlockId0.equals(testBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply("");
      // Undeclared exception!
      try { 
        testBlockId0.productElement(2071);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000004
         //
         verifyException("org.apache.spark.storage.TestBlockId", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply("'[;*:><$zR`]Gv`W9fH");
      String string0 = testBlockId0.name();
      assertEquals("test_'[;*:><$zR`]Gv`W9fH", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("");
      testBlockId0.productIterator();
      assertEquals(1, testBlockId0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option<String> option0 = TestBlockId.unapply((TestBlockId) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<TestBlockId, TestBlockId> function1_0 = TestBlockId.compose((Function1<TestBlockId, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply("Ge$q1)rE,,O]");
      TestBlockId testBlockId1 = TestBlockId.apply("Ge$q1)rE,,O]");
      boolean boolean0 = testBlockId0.equals(testBlockId1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("m(/0R^2f&ERT");
      testBlockId0.hashCode();
      assertEquals(1, testBlockId0.productArity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestBlockId testBlockId0 = new TestBlockId("");
      String string0 = testBlockId0.productPrefix();
      assertEquals("TestBlockId", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function1<String, TestBlockId> function1_0 = TestBlockId.andThen((Function1<TestBlockId, TestBlockId>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestBlockId testBlockId0 = TestBlockId.apply("...");
      String string0 = testBlockId0.copy$default$1();
      assertEquals("...", string0);
  }
}
