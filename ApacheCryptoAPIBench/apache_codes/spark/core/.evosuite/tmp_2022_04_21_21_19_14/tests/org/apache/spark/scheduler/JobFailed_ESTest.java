/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:01:03 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.JobFailed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JobFailed_ESTest extends JobFailed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      boolean boolean0 = jobFailed0.canEqual(jobFailed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      Object object0 = jobFailed0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      jobFailed0.productIterator();
      assertEquals(1, jobFailed0.productArity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      Exception exception0 = jobFailed0.exception();
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      boolean boolean0 = jobFailed0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      int int0 = jobFailed0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      String string0 = jobFailed0.productPrefix();
      assertEquals("JobFailed", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      Option<Exception> option0 = JobFailed.unapply(jobFailed0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      boolean boolean0 = jobFailed0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      boolean boolean0 = jobFailed0.equals(jobFailed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      // Undeclared exception!
      try { 
        jobFailed0.productElement((-1670));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.JobFailed", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option<Exception> option0 = JobFailed.unapply((JobFailed) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Function1<Exception, Exception> function1_0 = JobFailed.andThen((Function1<JobFailed, Exception>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      Exception exception0 = jobFailed0.copy$default$1();
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      jobFailed0.hashCode();
      assertEquals(1, jobFailed0.productArity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JobFailed jobFailed0 = new JobFailed((Exception) null);
      JobFailed jobFailed1 = jobFailed0.copy((Exception) null);
      boolean boolean0 = jobFailed1.equals(jobFailed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JobFailed jobFailed0 = JobFailed.apply((Exception) null);
      String string0 = jobFailed0.toString();
      assertEquals("JobFailed(null)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<Exception, JobFailed> function1_0 = JobFailed.compose((Function1<Exception, Exception>) null);
      assertNotNull(function1_0);
  }
}
