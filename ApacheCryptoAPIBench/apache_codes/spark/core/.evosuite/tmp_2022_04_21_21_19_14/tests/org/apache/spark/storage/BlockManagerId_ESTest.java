/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:08:25 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.spark.storage.BlockManagerId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockManagerId_ESTest extends BlockManagerId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("java.class.version", "scala.collection.BufferedIterator$class", 125, (Option<String>) null);
      blockManagerId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("E", "E", 125, (Option<String>) null);
      blockManagerId0.topologyInfo();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn(1).when(objectInput0).readInt();
      doReturn("org.apache.spark.storage.BlockManagerId", "org.apache.log4j.WriterAppender", "5]R>2[efV").when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      blockManagerId0.port();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$port__$eq((-3395));
      blockManagerId0.port();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$topologyInfo__$eq((Option<String>) null);
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$topologyInfo_();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$port__$eq(3);
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$port_();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("", "", 1031, (Option<String>) null);
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host__$eq("BlockManagerId(");
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host_();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("@d::@afT", "", 3, (Option<String>) null);
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host_();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$executorId_();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$executorId__$eq("d ]G)ry}f{T");
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$executorId_();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn(40).when(objectInput0).readInt();
      doReturn("H8f|&Fu4Unf", "H8f|&Fu4Unf", (String) null).when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      blockManagerId0.host();
      assertEquals(40, blockManagerId0.port());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId("", "", 596, (Option<String>) null);
      blockManagerId0.host();
      assertEquals(596, blockManagerId0.org$apache$spark$storage$BlockManagerId$$port_());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$executorId__$eq("java.class.version");
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host__$eq("java.class.version");
      BlockManagerId blockManagerId1 = BlockManagerId.getCachedBlockManagerId(blockManagerId0);
      assertEquals(0, blockManagerId1.port());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn((-3019)).when(objectInput0).readInt();
      doReturn("", "").when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      BlockManagerId blockManagerId1 = BlockManagerId.getCachedBlockManagerId(blockManagerId0);
      assertEquals((-3019), blockManagerId1.port());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      String string0 = blockManagerId0.executorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("E", "E", 125, (Option<String>) null);
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(125).when(objectInput0).readInt();
      doReturn("", "E").when(objectInput0).readUTF();
      blockManagerId0.readExternal(objectInput0);
      blockManagerId0.executorId();
      assertEquals(125, blockManagerId0.port());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn((-7)).when(objectInput0).readInt();
      doReturn("o2~;! y|9OdG2(;n", "o2~;! y|9OdG2(;n", (String) null).when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      int int0 = blockManagerId0.org$apache$spark$storage$BlockManagerId$$port_();
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      // Undeclared exception!
      try { 
        BlockManagerId.getCachedBlockManagerId(blockManagerId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.BlockManagerId", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BlockManagerId.apply((String) null, (String) null, 1170, (Option<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.BlockManagerId", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        BlockManagerId.apply("org.apache.spark.storage.BlockManagerId$$anonfun$readExternal$1", "org.apache.spark.storage.BlockManagerId$$anonfun$readExternal$1", (-3990), (Option<String>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0).when(objectInput0).readInt();
      doReturn((String) null, (String) null).when(objectInput0).readUTF();
      // Undeclared exception!
      try { 
        BlockManagerId.apply(objectInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.BlockManagerId", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("java.class.version", "scala.collection.BufferedIterator$class", 125, (Option<String>) null);
      boolean boolean0 = blockManagerId0.equals(blockManagerId0);
      assertEquals(125, blockManagerId0.port());
      assertEquals("java.class.version", blockManagerId0.executorId());
      assertEquals("scala.collection.BufferedIterator$class", blockManagerId0.host());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host__$eq("");
      BlockManagerId blockManagerId1 = new BlockManagerId();
      boolean boolean0 = blockManagerId0.equals(blockManagerId1);
      assertEquals(0, blockManagerId1.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host__$eq("java.class.version");
      boolean boolean0 = blockManagerId0.equals(blockManagerId0);
      assertTrue(boolean0);
      assertEquals(0, blockManagerId0.port());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$port__$eq(65535);
      BlockManagerId blockManagerId1 = new BlockManagerId();
      boolean boolean0 = blockManagerId1.equals(blockManagerId0);
      assertEquals(65535, blockManagerId0.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$executorId__$eq("");
      boolean boolean0 = blockManagerId0.equals(blockManagerId0);
      assertEquals(0, blockManagerId0.port());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      Option<String> option0 = blockManagerId0.topologyInfo();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      // Undeclared exception!
      try { 
        blockManagerId0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.storage.BlockManagerId", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn(1543).when(objectInput0).readInt();
      doReturn("", "", (String) null).when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$executorId_();
      assertEquals(1543, blockManagerId0.port());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      // Undeclared exception!
      try { 
        blockManagerId0.readExternal((ObjectInput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      String string0 = blockManagerId0.org$apache$spark$storage$BlockManagerId$$host_();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      int int0 = blockManagerId0.port();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      String string0 = blockManagerId0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      int int0 = blockManagerId0.org$apache$spark$storage$BlockManagerId$$port_();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      Option<String> option0 = blockManagerId0.org$apache$spark$storage$BlockManagerId$$topologyInfo_();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$topologyInfo__$eq((Option<String>) null);
      BlockManagerId blockManagerId1 = new BlockManagerId();
      boolean boolean0 = blockManagerId0.equals(blockManagerId1);
      assertFalse(boolean0);
      assertEquals(0, blockManagerId1.port());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("java.class.version", "scala.collection.BufferedIterator$class", 125, (Option<String>) null);
      String string0 = blockManagerId0.executorId();
      assertEquals(125, blockManagerId0.port());
      assertEquals("scala.collection.BufferedIterator$class", blockManagerId0.org$apache$spark$storage$BlockManagerId$$host_());
      assertEquals("java.class.version", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      BlockManagerId blockManagerId1 = BlockManagerId.apply("xRV]#>D1Rgj4z1dT&{", "xRV]#>D1Rgj4z1dT&{", 1380, (Option<String>) null);
      boolean boolean0 = blockManagerId0.equals(blockManagerId1);
      assertEquals(1380, blockManagerId1.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      boolean boolean0 = blockManagerId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(objectInput0).readBoolean();
      doReturn(2).when(objectInput0).readInt();
      doReturn("\" to ", "\" to ", "").when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      assertEquals(2, blockManagerId0.port());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      ObjectOutput objectOutput0 = mock(ObjectOutput.class, new ViolatedAssumptionAnswer());
      blockManagerId0.writeExternal(objectOutput0);
      assertEquals(0, blockManagerId0.port());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      boolean boolean0 = blockManagerId0.isDriver();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("E", "E", 125, (Option<String>) null);
      boolean boolean0 = blockManagerId0.isDriver();
      assertEquals(125, blockManagerId0.port());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      blockManagerId0.org$apache$spark$storage$BlockManagerId$$host__$eq("o}Z=}z");
      // Undeclared exception!
      try { 
        blockManagerId0.hostPort();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BlockManagerId blockManagerId0 = null;
      try {
        blockManagerId0 = new BlockManagerId("W@?r", "W@?r", (-2735), (Option<String>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("java.class.version", "java.class.version", 125, (Option<String>) null);
      BlockManagerId blockManagerId1 = BlockManagerId.getCachedBlockManagerId(blockManagerId0);
      assertEquals(125, blockManagerId1.port());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      // Undeclared exception!
      try { 
        blockManagerId0.writeExternal((ObjectOutput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BlockManagerId blockManagerId0 = new BlockManagerId();
      String string0 = blockManagerId0.toString();
      assertEquals("BlockManagerId(null, null, 0, None)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentHashMap<BlockManagerId, BlockManagerId> concurrentHashMap0 = BlockManagerId.blockManagerIdCache();
      assertFalse(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ObjectInput objectInput0 = mock(ObjectInput.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInput0).readBoolean();
      doReturn(0).when(objectInput0).readInt();
      doReturn("v,ZkMyb##Yw11+7", "").when(objectInput0).readUTF();
      BlockManagerId blockManagerId0 = BlockManagerId.apply(objectInput0);
      assertEquals(0, blockManagerId0.org$apache$spark$storage$BlockManagerId$$port_());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option<String> option0 = BlockManagerId.apply$default$4();
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BlockManagerId blockManagerId0 = BlockManagerId.apply("E", "E", 125, (Option<String>) null);
      String string0 = blockManagerId0.hostPort();
      assertEquals("E:125", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        BlockManagerId.apply((ObjectInput) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.spark.util.Utils$", e);
      }
  }
}
