/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:15:52 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.TaskSet;
import org.apache.spark.scheduler.TaskSetFailed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskSetFailed_ESTest extends TaskSetFailed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "4r P)?e{hbWxc`bW", (Option<Throwable>) null);
      String string0 = taskSetFailed0.reason();
      assertEquals("4r P)?e{hbWxc`bW", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "4r P)?e{hbWxc`bW", (Option<Throwable>) null);
      TaskSetFailed taskSetFailed1 = taskSetFailed0.copy((TaskSet) null, "", (Option<Throwable>) null);
      String string0 = taskSetFailed1.reason();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "&BPY5iG^u=", (Option<Throwable>) null);
      String string0 = taskSetFailed0.copy$default$2();
      assertEquals("&BPY5iG^u=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "M,o$w\"&", (Option<Throwable>) null);
      TaskSetFailed taskSetFailed1 = taskSetFailed0.copy((TaskSet) null, "", (Option<Throwable>) null);
      String string0 = taskSetFailed1.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "&BPY5iG^u=", (Option<Throwable>) null);
      boolean boolean0 = taskSetFailed0.canEqual("scala.collection.mutable.AbstractSeq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "&BPY5iG^u=", (Option<Throwable>) null);
      Object object0 = taskSetFailed0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "&BPY5iG^u=", (Option<Throwable>) null);
      Object object0 = taskSetFailed0.productElement(1);
      assertEquals("&BPY5iG^u=", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "b@Y]%o#", (Option<Throwable>) null);
      Object object0 = taskSetFailed0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "", (Option<Throwable>) null);
      TaskSet taskSet0 = taskSetFailed0.taskSet();
      assertNull(taskSet0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = new TaskSetFailed((TaskSet) null, (String) null, (Option<Throwable>) null);
      int int0 = taskSetFailed0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "^B!", (Option<Throwable>) null);
      taskSetFailed0.productIterator();
      assertEquals(3, taskSetFailed0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "scala.runtime.AbstractPartialFunction", (Option<Throwable>) null);
      Option<Throwable> option0 = taskSetFailed0.exception();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = new TaskSetFailed((TaskSet) null, "W`", (Option<Throwable>) null);
      String string0 = taskSetFailed0.productPrefix();
      assertEquals("TaskSetFailed", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, (String) null, (Option<Throwable>) null);
      String string0 = taskSetFailed0.reason();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "&BPY5iG^u=", (Option<Throwable>) null);
      Option<Tuple3<TaskSet, String, Option<Throwable>>> option0 = TaskSetFailed.unapply(taskSetFailed0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = new TaskSetFailed((TaskSet) null, "org.apache.spark.scheduler.TaskSetFailed$", (Option<Throwable>) null);
      TaskSetFailed taskSetFailed1 = TaskSetFailed.apply((TaskSet) null, "org.apache.spark.scheduler.TaskSetFailed$", (Option<Throwable>) null);
      boolean boolean0 = taskSetFailed1.equals(taskSetFailed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, (String) null, (Option<Throwable>) null);
      TaskSetFailed taskSetFailed1 = TaskSetFailed.apply((TaskSet) null, "org.apachespark.scheduler.TaskSetFailed$", (Option<Throwable>) null);
      boolean boolean0 = taskSetFailed1.equals(taskSetFailed0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "P", (Option<Throwable>) null);
      boolean boolean0 = taskSetFailed0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = new TaskSetFailed((TaskSet) null, "org.apache.spark.scheduler.TaskSetFailed$", (Option<Throwable>) null);
      boolean boolean0 = taskSetFailed0.equals(taskSetFailed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "S#+pS'hGOCWI2", (Option<Throwable>) null);
      // Undeclared exception!
      try { 
        taskSetFailed0.productElement(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.TaskSetFailed", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<Tuple3<TaskSet, String, Option<Throwable>>, TaskSetFailed> function1_0 = TaskSetFailed.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option<Tuple3<TaskSet, String, Option<Throwable>>> option0 = TaskSetFailed.unapply((TaskSetFailed) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = new TaskSetFailed((TaskSet) null, "org.apache.spark.scheduler.TaskSetFailed$", (Option<Throwable>) null);
      boolean boolean0 = taskSetFailed0.canEqual(taskSetFailed0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Function1<TaskSet, Function1<String, Function1<Option<Throwable>, TaskSetFailed>>> function1_0 = TaskSetFailed.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "scala.UninitializedFieldError$", (Option<Throwable>) null);
      Option<Throwable> option0 = taskSetFailed0.copy$default$3();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "drYI.Tb", (Option<Throwable>) null);
      String string0 = taskSetFailed0.toString();
      assertEquals("TaskSetFailed(null,drYI.Tb,null)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, (String) null, (Option<Throwable>) null);
      String string0 = taskSetFailed0.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = TaskSetFailed.apply((TaskSet) null, "ucn", (Option<Throwable>) null);
      TaskSet taskSet0 = taskSetFailed0.copy$default$1();
      assertNull(taskSet0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaskSetFailed taskSetFailed0 = new TaskSetFailed((TaskSet) null, (String) null, (Option<Throwable>) null);
      taskSetFailed0.hashCode();
      assertEquals(3, taskSetFailed0.productArity());
  }
}
