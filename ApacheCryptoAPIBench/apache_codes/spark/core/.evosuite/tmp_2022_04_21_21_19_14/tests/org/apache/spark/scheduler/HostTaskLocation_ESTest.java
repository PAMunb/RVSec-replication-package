/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:52:36 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.HostTaskLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HostTaskLocation_ESTest extends HostTaskLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("5*.hBf<AF;8:");
      HostTaskLocation hostTaskLocation1 = hostTaskLocation0.copy((String) null);
      String string0 = hostTaskLocation1.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("");
      String string0 = hostTaskLocation0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("x2E/2q)JovZD}Z)^< ");
      Object object0 = hostTaskLocation0.productElement(0);
      assertEquals("x2E/2q)JovZD}Z)^< ", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply((String) null);
      String string0 = hostTaskLocation0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("");
      String string0 = hostTaskLocation0.host();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("org.apache.spark.scheduler.HostTaskLocation");
      String string0 = hostTaskLocation0.copy$default$1();
      assertEquals("org.apache.spark.scheduler.HostTaskLocation", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("");
      String string0 = hostTaskLocation0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("");
      boolean boolean0 = hostTaskLocation0.canEqual(";Jl3c^<a){M].p*:>E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply((String) null);
      Object object0 = hostTaskLocation0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("@/w43z;1g");
      boolean boolean0 = hostTaskLocation0.canEqual(hostTaskLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("<YcVe)tt4&U:K'n_)");
      int int0 = hostTaskLocation0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation((String) null);
      Option<String> option0 = HostTaskLocation.unapply(hostTaskLocation0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("|j?M:`!^9\";\"~9_C~");
      HostTaskLocation hostTaskLocation1 = new HostTaskLocation("");
      boolean boolean0 = hostTaskLocation0.equals(hostTaskLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply((String) null);
      HostTaskLocation hostTaskLocation1 = new HostTaskLocation("<YcVe)tt4&U:K'n_)");
      boolean boolean0 = hostTaskLocation0.equals(hostTaskLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply((String) null);
      HostTaskLocation hostTaskLocation1 = HostTaskLocation.apply((String) null);
      boolean boolean0 = hostTaskLocation0.equals(hostTaskLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("");
      boolean boolean0 = hostTaskLocation0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("s");
      boolean boolean0 = hostTaskLocation0.equals(hostTaskLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("/Xm Oa]?mr");
      // Undeclared exception!
      try { 
        hostTaskLocation0.productElement(1507);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.HostTaskLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply((String) null);
      String string0 = hostTaskLocation0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("<YcVe)tt4&U:K'n_)");
      hostTaskLocation0.hashCode();
      assertEquals(1, hostTaskLocation0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("");
      HostTaskLocation hostTaskLocation1 = new HostTaskLocation("");
      boolean boolean0 = hostTaskLocation0.equals(hostTaskLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<HostTaskLocation, HostTaskLocation> function1_0 = HostTaskLocation.compose((Function1<HostTaskLocation, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = new HostTaskLocation("cR3|$gkj~P");
      String string0 = hostTaskLocation0.toString();
      assertEquals("cR3|$gkj~P", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("g/RD!w6gt?");
      String string0 = hostTaskLocation0.productPrefix();
      assertEquals("HostTaskLocation", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("g/RD!w6gt?");
      hostTaskLocation0.productIterator();
      assertEquals(1, hostTaskLocation0.productArity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function1<String, HostTaskLocation> function1_0 = HostTaskLocation.andThen((Function1<HostTaskLocation, HostTaskLocation>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option<String> option0 = HostTaskLocation.unapply((HostTaskLocation) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HostTaskLocation hostTaskLocation0 = HostTaskLocation.apply("g/RD!w6gt?");
      String string0 = hostTaskLocation0.host();
      assertEquals("g/RD!w6gt?", string0);
  }
}
