/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:14:52 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.CleanRDD;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleanRDD_ESTest extends CleanRDD_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply(3);
      CleanRDD cleanRDD1 = cleanRDD0.copy(263);
      boolean boolean0 = cleanRDD0.equals(cleanRDD1);
      assertFalse(boolean0);
      assertEquals(263, cleanRDD1.copy$default$1());
      assertFalse(cleanRDD1.equals((Object)cleanRDD0));
      assertEquals(3, cleanRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(0);
      int int0 = cleanRDD0.rddId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(407);
      int int0 = cleanRDD0.rddId();
      assertEquals(407, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(2297);
      CleanRDD cleanRDD1 = cleanRDD0.copy(0);
      assertEquals(0, cleanRDD1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply((-31));
      CleanRDD cleanRDD1 = cleanRDD0.copy((-2378));
      assertEquals((-31), cleanRDD0.copy$default$1());
      assertEquals((-2378), cleanRDD1.rddId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(0);
      int int0 = cleanRDD0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply(4);
      int int0 = cleanRDD0.copy$default$1();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply((-131));
      cleanRDD0.canEqual((Object) null);
      assertEquals((-131), cleanRDD0.rddId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply(0);
      assertEquals(0, cleanRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(0);
      Object object0 = cleanRDD0.productElement(0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-4160));
      String string0 = cleanRDD0.productPrefix();
      assertEquals("CleanRDD", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-1565));
      boolean boolean0 = cleanRDD0.canEqual(cleanRDD0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-1086));
      cleanRDD0.productIterator();
      assertEquals(1, cleanRDD0.productArity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-4160));
      int int0 = cleanRDD0.rddId();
      assertEquals((-4160), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply((-889275719));
      int int0 = cleanRDD0.productArity();
      assertEquals(1, int0);
      assertEquals((-889275719), cleanRDD0.rddId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(940);
      CleanRDD.unapply(cleanRDD0);
      assertEquals(940, cleanRDD0.copy$default$1());
      assertEquals(940, cleanRDD0.rddId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(607);
      CleanRDD cleanRDD1 = CleanRDD.apply((-1));
      boolean boolean0 = cleanRDD0.equals(cleanRDD1);
      assertFalse(boolean0);
      assertFalse(cleanRDD1.equals((Object)cleanRDD0));
      assertEquals((-1), cleanRDD1.rddId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-4003));
      boolean boolean0 = cleanRDD0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply(648);
      boolean boolean0 = cleanRDD0.equals(cleanRDD0);
      assertTrue(boolean0);
      assertEquals(648, cleanRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD(20);
      // Undeclared exception!
      try { 
        cleanRDD0.productElement(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.CleanRDD", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Object> option0 = CleanRDD.unapply((CleanRDD) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<Object, CleanRDD> function1_0 = CleanRDD.andThen((Function1<CleanRDD, CleanRDD>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-1086));
      CleanRDD cleanRDD1 = CleanRDD.apply((-1086));
      boolean boolean0 = cleanRDD0.equals(cleanRDD1);
      assertTrue(boolean0);
      assertEquals((-1086), cleanRDD0.rddId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply(3300);
      String string0 = cleanRDD0.toString();
      assertEquals("CleanRDD(3300)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CleanRDD cleanRDD0 = new CleanRDD((-1565));
      int int0 = cleanRDD0.copy$default$1();
      assertEquals((-1565), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CleanRDD cleanRDD0 = CleanRDD.apply((-889275719));
      cleanRDD0.hashCode();
      assertEquals((-889275719), cleanRDD0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Function1<CleanRDD, CleanRDD> function1_0 = CleanRDD.compose((Function1<CleanRDD, Object>) null);
      assertNotNull(function1_0);
  }
}
