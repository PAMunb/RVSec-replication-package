/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:37:53 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.TaskCommitDenied;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;
import scala.collection.Iterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskCommitDenied_ESTest extends TaskCommitDenied_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(1043, (-3933), 1043);
      assertNotNull(taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-3933), taskCommitDenied0.copy$default$2());
      assertEquals((-3933), taskCommitDenied0.partitionID());
      assertEquals(1043, taskCommitDenied0.attemptNumber());
      assertEquals(1043, taskCommitDenied0.jobID());
      assertEquals(1043, taskCommitDenied0.copy$default$3());
      assertEquals(1043, taskCommitDenied0.copy$default$1());
      
      TaskCommitDenied taskCommitDenied1 = TaskCommitDenied.apply(1043, 1043, 0);
      assertNotNull(taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(1043, taskCommitDenied1.partitionID());
      assertEquals(1043, taskCommitDenied1.copy$default$1());
      assertEquals(0, taskCommitDenied1.attemptNumber());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(1043, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(1043, taskCommitDenied1.copy$default$2());
      assertEquals(0, taskCommitDenied1.copy$default$3());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-3933), taskCommitDenied0.copy$default$2());
      assertEquals((-3933), taskCommitDenied0.partitionID());
      assertEquals(1043, taskCommitDenied0.attemptNumber());
      assertEquals(1043, taskCommitDenied0.jobID());
      assertEquals(1043, taskCommitDenied0.copy$default$3());
      assertEquals(1043, taskCommitDenied0.copy$default$1());
      assertEquals(1043, taskCommitDenied1.partitionID());
      assertEquals(1043, taskCommitDenied1.copy$default$1());
      assertEquals(0, taskCommitDenied1.attemptNumber());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(1043, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(1043, taskCommitDenied1.copy$default$2());
      assertEquals(0, taskCommitDenied1.copy$default$3());
      assertFalse(taskCommitDenied0.equals((Object)taskCommitDenied1));
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-4422), (-4422), (-4422));
      assertNotNull(taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals((-4422), taskCommitDenied0.copy$default$3());
      assertEquals((-4422), taskCommitDenied0.attemptNumber());
      assertEquals((-4422), taskCommitDenied0.copy$default$1());
      assertEquals((-4422), taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-4422), taskCommitDenied0.copy$default$2());
      assertEquals((-4422), taskCommitDenied0.jobID());
      
      TaskCommitDenied taskCommitDenied1 = new TaskCommitDenied(711, (-595), 55);
      assertNotNull(taskCommitDenied1);
      assertEquals((-595), taskCommitDenied1.copy$default$2());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals((-595), taskCommitDenied1.partitionID());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals(55, taskCommitDenied1.attemptNumber());
      assertEquals(711, taskCommitDenied1.copy$default$1());
      assertEquals(55, taskCommitDenied1.copy$default$3());
      assertEquals(711, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals((-4422), taskCommitDenied0.copy$default$3());
      assertEquals((-4422), taskCommitDenied0.attemptNumber());
      assertEquals((-4422), taskCommitDenied0.copy$default$1());
      assertEquals((-4422), taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-4422), taskCommitDenied0.copy$default$2());
      assertEquals((-4422), taskCommitDenied0.jobID());
      assertEquals((-595), taskCommitDenied1.copy$default$2());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals((-595), taskCommitDenied1.partitionID());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals(55, taskCommitDenied1.attemptNumber());
      assertEquals(711, taskCommitDenied1.copy$default$1());
      assertEquals(55, taskCommitDenied1.copy$default$3());
      assertEquals(711, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertFalse(taskCommitDenied0.equals((Object)taskCommitDenied1));
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(929, 8, 3);
      assertNotNull(taskCommitDenied0);
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(929, taskCommitDenied0.copy$default$1());
      assertEquals(3, taskCommitDenied0.attemptNumber());
      assertEquals(3, taskCommitDenied0.copy$default$3());
      assertEquals(929, taskCommitDenied0.jobID());
      assertEquals(8, taskCommitDenied0.copy$default$2());
      assertEquals(8, taskCommitDenied0.partitionID());
      
      int int0 = taskCommitDenied0.partitionID();
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(929, taskCommitDenied0.copy$default$1());
      assertEquals(3, taskCommitDenied0.attemptNumber());
      assertEquals(3, taskCommitDenied0.copy$default$3());
      assertEquals(929, taskCommitDenied0.jobID());
      assertEquals(8, taskCommitDenied0.copy$default$2());
      assertEquals(8, taskCommitDenied0.partitionID());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied((-1), (-1), 0);
      assertNotNull(taskCommitDenied0);
      assertEquals((-1), taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals((-1), taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-1), taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals((-1), taskCommitDenied0.copy$default$2());
      
      int int0 = taskCommitDenied0.partitionID();
      assertEquals((-1), taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals((-1), taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-1), taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals((-1), taskCommitDenied0.copy$default$2());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, (-374), (-374));
      assertNotNull(taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals((-374), taskCommitDenied0.partitionID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-374), taskCommitDenied0.attemptNumber());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-374), taskCommitDenied0.copy$default$3());
      assertEquals((-374), taskCommitDenied0.copy$default$2());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      
      int int0 = taskCommitDenied0.jobID();
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals((-374), taskCommitDenied0.partitionID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-374), taskCommitDenied0.attemptNumber());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-374), taskCommitDenied0.copy$default$3());
      assertEquals((-374), taskCommitDenied0.copy$default$2());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, (-1364), 46);
      assertNotNull(taskCommitDenied0);
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals((-1364), taskCommitDenied0.partitionID());
      assertEquals(46, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(46, taskCommitDenied0.attemptNumber());
      assertEquals((-1364), taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      
      TaskCommitDenied taskCommitDenied1 = taskCommitDenied0.copy((-2238), 32767, 1);
      assertNotNull(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals((-1364), taskCommitDenied0.partitionID());
      assertEquals(46, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(46, taskCommitDenied0.attemptNumber());
      assertEquals((-1364), taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(32767, taskCommitDenied1.copy$default$2());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(1, taskCommitDenied1.copy$default$3());
      assertEquals((-2238), taskCommitDenied1.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(1, taskCommitDenied1.attemptNumber());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals(32767, taskCommitDenied1.partitionID());
      assertEquals((-2238), taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      
      int int0 = taskCommitDenied1.jobID();
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals((-1364), taskCommitDenied0.partitionID());
      assertEquals(46, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(46, taskCommitDenied0.attemptNumber());
      assertEquals((-1364), taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(32767, taskCommitDenied1.copy$default$2());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(1, taskCommitDenied1.copy$default$3());
      assertEquals((-2238), taskCommitDenied1.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(1, taskCommitDenied1.attemptNumber());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals(32767, taskCommitDenied1.partitionID());
      assertEquals((-2238), taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied0.equals((Object)taskCommitDenied1));
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      assertEquals((-2238), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-2128), 2205, 495);
      assertNotNull(taskCommitDenied0);
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      
      TaskCommitDenied taskCommitDenied1 = taskCommitDenied0.copy((-2128), 2205, 1);
      assertNotNull(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      assertEquals(1, taskCommitDenied1.attemptNumber());
      assertEquals(2205, taskCommitDenied1.partitionID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(1, taskCommitDenied1.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals((-2128), taskCommitDenied1.jobID());
      assertEquals((-2128), taskCommitDenied1.copy$default$1());
      assertEquals(2205, taskCommitDenied1.copy$default$2());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      
      boolean boolean0 = taskCommitDenied1.equals(taskCommitDenied0);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      assertEquals(1, taskCommitDenied1.attemptNumber());
      assertEquals(2205, taskCommitDenied1.partitionID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(1, taskCommitDenied1.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals((-2128), taskCommitDenied1.jobID());
      assertEquals((-2128), taskCommitDenied1.copy$default$1());
      assertEquals(2205, taskCommitDenied1.copy$default$2());
      assertFalse(taskCommitDenied0.equals((Object)taskCommitDenied1));
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied((-1), (-1), 0);
      assertNotNull(taskCommitDenied0);
      assertEquals((-1), taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals((-1), taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals((-1), taskCommitDenied0.copy$default$2());
      assertEquals((-1), taskCommitDenied0.jobID());
      
      TaskCommitDenied taskCommitDenied1 = taskCommitDenied0.copy(0, (-1), 0);
      assertNotNull(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals((-1), taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals((-1), taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals((-1), taskCommitDenied0.copy$default$2());
      assertEquals((-1), taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied1.copy$default$1());
      assertEquals(0, taskCommitDenied1.attemptNumber());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals(0, taskCommitDenied1.copy$default$3());
      assertEquals((-1), taskCommitDenied1.partitionID());
      assertEquals((-1), taskCommitDenied1.copy$default$2());
      assertEquals(0, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.partitionID());
      
      TaskCommitDenied taskCommitDenied1 = taskCommitDenied0.copy(0, 0, 610);
      assertNotNull(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(610, taskCommitDenied1.copy$default$3());
      assertEquals(0, taskCommitDenied1.copy$default$2());
      assertEquals(0, taskCommitDenied1.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertEquals(610, taskCommitDenied1.attemptNumber());
      assertEquals(0, taskCommitDenied1.partitionID());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals(0, taskCommitDenied1.copy$default$1());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(3448, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(3448, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(3448, taskCommitDenied0.jobID());
      
      int int0 = taskCommitDenied0.copy$default$3();
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(3448, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(3448, taskCommitDenied0.jobID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(5703, 5703, 5703);
      assertNotNull(taskCommitDenied0);
      assertEquals(5703, taskCommitDenied0.attemptNumber());
      assertEquals(5703, taskCommitDenied0.copy$default$3());
      assertEquals(5703, taskCommitDenied0.copy$default$2());
      assertEquals(5703, taskCommitDenied0.jobID());
      assertEquals(5703, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(5703, taskCommitDenied0.copy$default$1());
      assertEquals(3, taskCommitDenied0.productArity());
      
      TaskCommitDenied taskCommitDenied1 = taskCommitDenied0.copy(5703, (-1), (-1));
      assertNotNull(taskCommitDenied1);
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(5703, taskCommitDenied0.attemptNumber());
      assertEquals(5703, taskCommitDenied0.copy$default$3());
      assertEquals(5703, taskCommitDenied0.copy$default$2());
      assertEquals(5703, taskCommitDenied0.jobID());
      assertEquals(5703, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(5703, taskCommitDenied0.copy$default$1());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals((-1), taskCommitDenied1.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals((-1), taskCommitDenied1.attemptNumber());
      assertEquals((-1), taskCommitDenied1.partitionID());
      assertEquals((-1), taskCommitDenied1.copy$default$2());
      assertEquals(5703, taskCommitDenied1.copy$default$1());
      assertEquals(5703, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      
      int int0 = taskCommitDenied1.copy$default$3();
      assertNotSame(taskCommitDenied0, taskCommitDenied1);
      assertNotSame(taskCommitDenied1, taskCommitDenied0);
      assertEquals(5703, taskCommitDenied0.attemptNumber());
      assertEquals(5703, taskCommitDenied0.copy$default$3());
      assertEquals(5703, taskCommitDenied0.copy$default$2());
      assertEquals(5703, taskCommitDenied0.jobID());
      assertEquals(5703, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(5703, taskCommitDenied0.copy$default$1());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals((-1), taskCommitDenied1.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied1.productPrefix());
      assertFalse(taskCommitDenied1.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied1.productArity());
      assertEquals((-1), taskCommitDenied1.attemptNumber());
      assertEquals((-1), taskCommitDenied1.partitionID());
      assertEquals((-1), taskCommitDenied1.copy$default$2());
      assertEquals(5703, taskCommitDenied1.copy$default$1());
      assertEquals(5703, taskCommitDenied1.jobID());
      assertFalse(taskCommitDenied0.equals((Object)taskCommitDenied1));
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, 0, 3448);
      assertNotNull(taskCommitDenied0);
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(3448, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(3448, taskCommitDenied0.attemptNumber());
      
      int int0 = taskCommitDenied0.copy$default$2();
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(3448, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(3448, taskCommitDenied0.attemptNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(14, 14, 14);
      assertNotNull(taskCommitDenied0);
      assertEquals(14, taskCommitDenied0.copy$default$3());
      assertEquals(14, taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(14, taskCommitDenied0.copy$default$2());
      assertEquals(14, taskCommitDenied0.attemptNumber());
      assertEquals(14, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(14, taskCommitDenied0.partitionID());
      assertEquals(3, taskCommitDenied0.productArity());
      
      int int0 = taskCommitDenied0.copy$default$2();
      assertEquals(14, taskCommitDenied0.copy$default$3());
      assertEquals(14, taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(14, taskCommitDenied0.copy$default$2());
      assertEquals(14, taskCommitDenied0.attemptNumber());
      assertEquals(14, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(14, taskCommitDenied0.partitionID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.partitionID());
      
      int int0 = taskCommitDenied0.copy$default$1();
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-4422), (-4422), (-4422));
      assertNotNull(taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-4422), taskCommitDenied0.attemptNumber());
      assertEquals((-4422), taskCommitDenied0.copy$default$1());
      assertEquals((-4422), taskCommitDenied0.copy$default$3());
      assertEquals((-4422), taskCommitDenied0.copy$default$2());
      assertEquals((-4422), taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals((-4422), taskCommitDenied0.partitionID());
      
      int int0 = taskCommitDenied0.copy$default$1();
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-4422), taskCommitDenied0.attemptNumber());
      assertEquals((-4422), taskCommitDenied0.copy$default$1());
      assertEquals((-4422), taskCommitDenied0.copy$default$3());
      assertEquals((-4422), taskCommitDenied0.copy$default$2());
      assertEquals((-4422), taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals((-4422), taskCommitDenied0.partitionID());
      assertEquals((-4422), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(32768, 4, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals(32768, taskCommitDenied0.jobID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(32768, taskCommitDenied0.copy$default$1());
      assertEquals(4, taskCommitDenied0.copy$default$2());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(4, taskCommitDenied0.partitionID());
      
      boolean boolean0 = taskCommitDenied0.canEqual(taskCommitDenied0);
      assertEquals(32768, taskCommitDenied0.jobID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(32768, taskCommitDenied0.copy$default$1());
      assertEquals(4, taskCommitDenied0.copy$default$2());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(4, taskCommitDenied0.partitionID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      
      int int0 = taskCommitDenied0.attemptNumber();
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-1381), 839, 128);
      assertNotNull(taskCommitDenied0);
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(128, taskCommitDenied0.copy$default$3());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(128, taskCommitDenied0.attemptNumber());
      assertEquals((-1381), taskCommitDenied0.copy$default$1());
      assertEquals(839, taskCommitDenied0.copy$default$2());
      assertEquals(839, taskCommitDenied0.partitionID());
      assertEquals((-1381), taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      
      int int0 = taskCommitDenied0.attemptNumber();
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(128, taskCommitDenied0.copy$default$3());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(128, taskCommitDenied0.attemptNumber());
      assertEquals((-1381), taskCommitDenied0.copy$default$1());
      assertEquals(839, taskCommitDenied0.copy$default$2());
      assertEquals(839, taskCommitDenied0.partitionID());
      assertEquals((-1381), taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      
      Object object0 = taskCommitDenied0.productElement(2);
      assertNotNull(object0);
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-2128), 2205, 495);
      assertNotNull(taskCommitDenied0);
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      
      Object object0 = taskCommitDenied0.productElement(1);
      assertNotNull(object0);
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      assertEquals(2205, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(14, 14, 14);
      assertNotNull(taskCommitDenied0);
      assertEquals(14, taskCommitDenied0.partitionID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(14, taskCommitDenied0.attemptNumber());
      assertEquals(14, taskCommitDenied0.copy$default$1());
      assertEquals(14, taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(14, taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(14, taskCommitDenied0.copy$default$3());
      
      int int0 = taskCommitDenied0.jobID();
      assertEquals(14, taskCommitDenied0.partitionID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(14, taskCommitDenied0.attemptNumber());
      assertEquals(14, taskCommitDenied0.copy$default$1());
      assertEquals(14, taskCommitDenied0.jobID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(14, taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(14, taskCommitDenied0.copy$default$3());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      
      Object object0 = taskCommitDenied0.productElement(0);
      assertNotNull(object0);
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, object0);
      
      boolean boolean0 = taskCommitDenied0.canEqual(object0);
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.partitionID());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      assertNotNull(taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      
      int int0 = taskCommitDenied0.partitionID();
      assertEquals(0, taskCommitDenied0.partitionID());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.copy$default$3());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, (-1964), (-1964));
      assertNotNull(taskCommitDenied0);
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals((-1964), taskCommitDenied0.copy$default$3());
      assertEquals((-1964), taskCommitDenied0.attemptNumber());
      assertEquals((-1964), taskCommitDenied0.copy$default$2());
      assertEquals((-1964), taskCommitDenied0.partitionID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      
      String string0 = taskCommitDenied0.productPrefix();
      assertNotNull(string0);
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals((-1964), taskCommitDenied0.copy$default$3());
      assertEquals((-1964), taskCommitDenied0.attemptNumber());
      assertEquals((-1964), taskCommitDenied0.copy$default$2());
      assertEquals((-1964), taskCommitDenied0.partitionID());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(0, taskCommitDenied0.copy$default$1());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals("TaskCommitDenied", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-2128), 2205, 495);
      assertNotNull(taskCommitDenied0);
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
      
      Iterator<Object> iterator0 = taskCommitDenied0.productIterator();
      assertNotNull(iterator0);
      assertEquals((-2128), taskCommitDenied0.copy$default$1());
      assertEquals((-2128), taskCommitDenied0.jobID());
      assertEquals(2205, taskCommitDenied0.partitionID());
      assertEquals(495, taskCommitDenied0.attemptNumber());
      assertEquals(495, taskCommitDenied0.copy$default$3());
      assertEquals("TaskCommitDenied", taskCommitDenied0.productPrefix());
      assertEquals(2205, taskCommitDenied0.copy$default$2());
      assertFalse(taskCommitDenied0.countTowardsTaskFailures());
      assertEquals(3, taskCommitDenied0.productArity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-4422), (-4422), (-4422));
      int int0 = taskCommitDenied0.attemptNumber();
      assertEquals((-4422), int0);
      assertEquals((-4422), taskCommitDenied0.jobID());
      assertEquals((-4422), taskCommitDenied0.partitionID());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, (-1964), (-1964));
      int int0 = taskCommitDenied0.productArity();
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(3, int0);
      assertEquals((-1964), taskCommitDenied0.copy$default$3());
      assertEquals((-1964), taskCommitDenied0.partitionID());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, 0, 0);
      TaskCommitDenied.unapply(taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
      assertEquals(0, taskCommitDenied0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(351, 351, 351);
      TaskCommitDenied taskCommitDenied1 = new TaskCommitDenied(351, 351, 255);
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied1);
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
      assertFalse(boolean0);
      assertEquals(351, taskCommitDenied0.copy$default$3());
      assertEquals(351, taskCommitDenied0.jobID());
      assertEquals(351, taskCommitDenied0.partitionID());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, 0, 0);
      TaskCommitDenied taskCommitDenied1 = TaskCommitDenied.apply(0, (-2053), 0);
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied1);
      assertEquals(0, taskCommitDenied1.jobID());
      assertFalse(boolean0);
      assertEquals(0, taskCommitDenied1.copy$default$3());
      assertEquals((-2053), taskCommitDenied1.partitionID());
      assertFalse(taskCommitDenied1.equals((Object)taskCommitDenied0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(3265, 3265, (-897));
      TaskCommitDenied taskCommitDenied1 = TaskCommitDenied.apply((-897), (-897), 3265);
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied1);
      assertEquals(3265, taskCommitDenied1.copy$default$3());
      assertFalse(boolean0);
      assertEquals((-897), taskCommitDenied1.jobID());
      assertEquals((-897), taskCommitDenied1.partitionID());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      Object object0 = taskCommitDenied0.productElement(0);
      assertEquals(0, object0);
      
      boolean boolean0 = taskCommitDenied0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, 0, 0);
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied0);
      assertEquals(0, taskCommitDenied0.attemptNumber());
      assertTrue(boolean0);
      assertEquals(0, taskCommitDenied0.copy$default$2());
      assertEquals(0, taskCommitDenied0.jobID());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied((-3296), (-3296), (-3296));
      // Undeclared exception!
      try { 
        taskCommitDenied0.productElement((-3296));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.TaskCommitDenied", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(0, 0, 0);
      TaskCommitDenied taskCommitDenied1 = TaskCommitDenied.apply(0, 0, 0);
      boolean boolean0 = taskCommitDenied0.equals(taskCommitDenied1);
      assertTrue(boolean0);
      assertEquals(0, taskCommitDenied1.partitionID());
      assertEquals(0, taskCommitDenied1.copy$default$1());
      assertEquals(0, taskCommitDenied1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(98, (-1), (-1));
      int int0 = taskCommitDenied0.copy$default$2();
      assertEquals((-1), int0);
      assertEquals(98, taskCommitDenied0.copy$default$1());
      assertEquals((-1), taskCommitDenied0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(98, (-1), (-1));
      int int0 = taskCommitDenied0.copy$default$1();
      assertEquals(98, int0);
      assertEquals((-1), taskCommitDenied0.copy$default$2());
      assertEquals((-1), taskCommitDenied0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(14, 14, 14);
      int int0 = taskCommitDenied0.copy$default$3();
      assertEquals(14, int0);
      assertEquals(14, taskCommitDenied0.copy$default$2());
      assertEquals(14, taskCommitDenied0.jobID());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied((-38), (-38), (-38));
      String string0 = taskCommitDenied0.toErrorString();
      assertEquals("TaskCommitDenied (Driver denied task commit) for job: -38, partition: -38, attemptNumber: -38", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply((-16), (-16), (-16));
      taskCommitDenied0.hashCode();
      assertEquals((-16), taskCommitDenied0.jobID());
      assertEquals((-16), taskCommitDenied0.copy$default$2());
      assertEquals((-16), taskCommitDenied0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Function1<Tuple3<Object, Object, Object>, TaskCommitDenied> function1_0 = TaskCommitDenied.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option<Tuple3<Object, Object, Object>> option0 = TaskCommitDenied.unapply((TaskCommitDenied) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = new TaskCommitDenied(0, 0, 0);
      String string0 = taskCommitDenied0.toString();
      assertEquals(3, taskCommitDenied0.productArity());
      assertEquals("TaskCommitDenied(0,0,0)", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Function1<Object, Function1<Object, Function1<Object, TaskCommitDenied>>> function1_0 = TaskCommitDenied.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TaskCommitDenied taskCommitDenied0 = TaskCommitDenied.apply(7, 7, 7);
      boolean boolean0 = taskCommitDenied0.countTowardsTaskFailures();
      assertFalse(boolean0);
      assertEquals(7, taskCommitDenied0.jobID());
      assertEquals(7, taskCommitDenied0.partitionID());
      assertEquals(7, taskCommitDenied0.attemptNumber());
  }
}
