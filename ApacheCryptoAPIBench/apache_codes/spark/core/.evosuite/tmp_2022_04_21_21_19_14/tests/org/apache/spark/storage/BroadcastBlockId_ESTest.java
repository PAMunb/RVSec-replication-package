/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:25:21 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.BroadcastBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BroadcastBlockId_ESTest extends BroadcastBlockId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(1408L, "W");
      BroadcastBlockId broadcastBlockId1 = broadcastBlockId0.copy((-719L), "W");
      boolean boolean0 = broadcastBlockId1.equals(broadcastBlockId0);
      assertFalse(broadcastBlockId0.equals((Object)broadcastBlockId1));
      assertEquals((-719L), broadcastBlockId1.broadcastId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-1603L), "U1");
      broadcastBlockId0.productElement(1);
      assertEquals((-1603L), broadcastBlockId0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(0L, "");
      BroadcastBlockId broadcastBlockId1 = broadcastBlockId0.copy(0L, (String) null);
      String string0 = broadcastBlockId1.field();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(66L, "org.apache.spark.storage.BroadcastBlockId");
      String string0 = broadcastBlockId0.field();
      assertEquals("org.apache.spark.storage.BroadcastBlockId", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(3203L, (String) null);
      String string0 = broadcastBlockId0.copy$default$2();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(1057L, (String) null);
      BroadcastBlockId broadcastBlockId1 = broadcastBlockId0.copy((-1L), "");
      broadcastBlockId1.copy$default$2();
      assertEquals((-1L), broadcastBlockId1.broadcastId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(603L, "org.apache.spark.storage.BroadcastBlockId");
      long long0 = broadcastBlockId0.copy$default$1();
      assertEquals(603L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-1374L), "");
      long long0 = broadcastBlockId0.copy$default$1();
      assertEquals((-1374L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-1603L), "U1");
      broadcastBlockId0.canEqual(broadcastBlockId0);
      assertEquals((-1603L), broadcastBlockId0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(0L, "org.apache.spark.storage.BroadcastBlockId$");
      long long0 = broadcastBlockId0.broadcastId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(780L, "");
      long long0 = broadcastBlockId0.broadcastId();
      assertEquals(780L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-2480L), "org.apache.spark.storage.BroadcastBlockId$");
      long long0 = broadcastBlockId0.broadcastId();
      assertEquals((-2480L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(780L, "");
      String string0 = broadcastBlockId0.field();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(0L, (String) null);
      int int0 = broadcastBlockId0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(0L, "");
      Object object0 = broadcastBlockId0.productElement(0);
      boolean boolean0 = broadcastBlockId0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(1271L, "");
      String string0 = broadcastBlockId0.name();
      assertEquals("broadcast_1271", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(3907L, (String) null);
      String string0 = broadcastBlockId0.name();
      assertEquals("broadcast_3907_null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(1776L, "U1");
      String string0 = broadcastBlockId0.name();
      assertEquals("broadcast_1776_U1", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(553L, "_");
      BroadcastBlockId broadcastBlockId1 = broadcastBlockId0.copy(553L, "");
      boolean boolean0 = broadcastBlockId0.equals(broadcastBlockId1);
      assertFalse(boolean0);
      assertEquals(553L, broadcastBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(1182L, (String) null);
      BroadcastBlockId broadcastBlockId1 = BroadcastBlockId.apply(1182L, "");
      boolean boolean0 = broadcastBlockId0.equals(broadcastBlockId1);
      assertEquals(1182L, broadcastBlockId1.broadcastId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-1L), (String) null);
      BroadcastBlockId broadcastBlockId1 = new BroadcastBlockId((-1L), (String) null);
      boolean boolean0 = broadcastBlockId0.equals(broadcastBlockId1);
      assertTrue(boolean0);
      assertEquals((-1L), broadcastBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(1082L, "");
      BroadcastBlockId broadcastBlockId1 = new BroadcastBlockId((-2718L), "");
      boolean boolean0 = broadcastBlockId0.equals(broadcastBlockId1);
      assertFalse(broadcastBlockId1.equals((Object)broadcastBlockId0));
      assertFalse(boolean0);
      assertEquals((-2718L), broadcastBlockId1.broadcastId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(1L, "scala.Predef$ArrayCharSequence");
      boolean boolean0 = broadcastBlockId0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-25L), (String) null);
      boolean boolean0 = broadcastBlockId0.equals(broadcastBlockId0);
      assertEquals((-25L), broadcastBlockId0.broadcastId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(0L, (String) null);
      // Undeclared exception!
      try { 
        broadcastBlockId0.productElement((-1655));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.storage.BroadcastBlockId", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(1776L, "U1");
      BroadcastBlockId.unapply(broadcastBlockId0);
      assertEquals(1776L, broadcastBlockId0.broadcastId());
      assertEquals(1776L, broadcastBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option<Tuple2<Object, String>> option0 = BroadcastBlockId.unapply((BroadcastBlockId) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = new BroadcastBlockId(0L, "");
      long long0 = broadcastBlockId0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-1603L), "U1");
      broadcastBlockId0.copy$default$2();
      assertEquals((-1603L), broadcastBlockId0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-1920L), "gy2DgU}`Ho)C(@");
      BroadcastBlockId broadcastBlockId1 = BroadcastBlockId.apply((-1920L), "gy2DgU}`Ho)C(@");
      boolean boolean0 = broadcastBlockId0.equals(broadcastBlockId1);
      assertTrue(boolean0);
      assertEquals((-1920L), broadcastBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-25L), (String) null);
      broadcastBlockId0.hashCode();
      assertEquals((-25L), broadcastBlockId0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Function1<Tuple2<Object, String>, BroadcastBlockId> function1_0 = BroadcastBlockId.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply((-936L), "iR|rGO0^");
      broadcastBlockId0.productIterator();
      assertEquals(2, broadcastBlockId0.productArity());
      assertEquals((-936L), broadcastBlockId0.broadcastId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(0L, (String) null);
      Object object0 = broadcastBlockId0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Function1<Object, Function1<String, BroadcastBlockId>> function1_0 = BroadcastBlockId.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BroadcastBlockId broadcastBlockId0 = BroadcastBlockId.apply(1776L, "1M;9P#S!");
      String string0 = broadcastBlockId0.productPrefix();
      assertEquals(1776L, broadcastBlockId0.copy$default$1());
      assertEquals("BroadcastBlockId", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = BroadcastBlockId.apply$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = BroadcastBlockId.$lessinit$greater$default$2();
      assertEquals("", string0);
  }
}
