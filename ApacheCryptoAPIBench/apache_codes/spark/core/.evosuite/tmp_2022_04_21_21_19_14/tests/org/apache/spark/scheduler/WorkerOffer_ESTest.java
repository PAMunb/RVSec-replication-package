/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:21:47 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.WorkerOffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WorkerOffer_ESTest extends WorkerOffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "", 0);
      WorkerOffer workerOffer1 = workerOffer0.copy("", "", 15);
      boolean boolean0 = workerOffer0.equals(workerOffer1);
      assertFalse(workerOffer1.equals((Object)workerOffer0));
      assertFalse(boolean0);
      assertEquals(15, workerOffer1.cores());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("", (String) null, 543);
      String string0 = workerOffer0.host();
      assertNull(string0);
      assertEquals(543, workerOffer0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("lP@JvMwm", "lP@JvMwm", 1);
      String string0 = workerOffer0.host();
      assertEquals("lP@JvMwm", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "", 0);
      WorkerOffer workerOffer1 = workerOffer0.copy((String) null, (String) null, 991);
      workerOffer1.executorId();
      assertEquals(991, workerOffer1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("sLdpUo:)`hM", "sLdpUo:)`hM", 0);
      workerOffer0.executorId();
      assertEquals(0, workerOffer0.cores());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "oQpI&F@(#>U>Su3]|p", 2);
      int int0 = workerOffer0.cores();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("AQPFq.3X\"@=-z|", "AQPFq.3X\"@=-z|", (-490));
      int int0 = workerOffer0.cores();
      assertEquals((-490), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("BuNgwh4x,-Y7Wh|=Zu", "~5.&}n!lfC%{EY<", 0);
      WorkerOffer workerOffer1 = workerOffer0.copy("BuNgwh4x,-Y7Wh|=Zu", "~5.&}n!lfC%{EY<", 0);
      assertTrue(workerOffer1.equals((Object)workerOffer0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("sLdpUo:)`hM", "sLdpUo:)`hM", 0);
      int int0 = workerOffer0.copy$default$3();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("bSf`043E", "B_k", (-1152));
      int int0 = workerOffer0.copy$default$3();
      assertEquals("bSf`043E", workerOffer0.copy$default$1());
      assertEquals((-1152), int0);
      assertEquals("B_k", workerOffer0.host());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "", 0);
      WorkerOffer workerOffer1 = workerOffer0.copy((String) null, (String) null, 991);
      workerOffer1.copy$default$2();
      assertEquals(991, workerOffer1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("", "]'IKWpk78aXo", 3);
      String string0 = workerOffer0.copy$default$2();
      assertEquals("", workerOffer0.copy$default$1());
      assertEquals("]'IKWpk78aXo", string0);
      assertEquals(3, workerOffer0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply((String) null, (String) null, 2433880);
      workerOffer0.copy$default$1();
      assertEquals(2433880, workerOffer0.cores());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("BuNgwh4x,-Y7Wh|=Zu", "~5.&}n!lfC%{EY<", 0);
      String string0 = workerOffer0.copy$default$1();
      assertEquals("BuNgwh4x,-Y7Wh|=Zu", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer((String) null, (String) null, 0);
      boolean boolean0 = workerOffer0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "oQpI&F@(#>U>Su3]|p", 2);
      Object object0 = workerOffer0.productElement(2);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer((String) null, (String) null, 0);
      Object object0 = workerOffer0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("lP@JvMwm", "lP@JvMwm", 1);
      Object object0 = workerOffer0.productElement(1);
      assertEquals("lP@JvMwm", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("-x=iyWdZ<yys!-", "", (-2064));
      workerOffer0.productIterator();
      assertEquals(3, workerOffer0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "", 0);
      int int0 = workerOffer0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("8VMzRZe!", "8VMzRZe!", 131);
      String string0 = workerOffer0.productPrefix();
      assertEquals(131, workerOffer0.copy$default$3());
      assertEquals("WorkerOffer", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("", "", 0);
      workerOffer0.host();
      assertEquals(0, workerOffer0.cores());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("scala.collection.immutable.List", "scala.collection.immutable.List", (-4843));
      workerOffer0.canEqual(workerOffer0);
      assertEquals((-4843), workerOffer0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("BuNgwh4x,-Y7Wh|=Zu", "~5.&}n!lfC%{EY<", 0);
      int int0 = workerOffer0.cores();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("", "", 0);
      String string0 = workerOffer0.executorId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer((String) null, (String) null, 667);
      WorkerOffer workerOffer1 = WorkerOffer.apply((String) null, "Sx`j>s,_37W$b}sQl", 667);
      boolean boolean0 = workerOffer0.equals(workerOffer1);
      assertFalse(boolean0);
      assertEquals(667, workerOffer1.cores());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply((String) null, (String) null, 687);
      WorkerOffer workerOffer1 = WorkerOffer.apply((String) null, (String) null, (-1));
      boolean boolean0 = workerOffer0.equals(workerOffer1);
      assertFalse(boolean0);
      assertFalse(workerOffer1.equals((Object)workerOffer0));
      assertEquals((-1), workerOffer1.cores());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("scala.Predef$Pair$", "scala.Predef$Pair$", (-1194));
      WorkerOffer workerOffer1 = workerOffer0.copy(" \"IEj0MLzF{+YC_0JI<", " \"IEj0MLzF{+YC_0JI<", (-1194));
      boolean boolean0 = workerOffer0.equals(workerOffer1);
      assertFalse(boolean0);
      assertEquals((-1194), workerOffer1.cores());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply((String) null, (String) null, 687);
      WorkerOffer workerOffer1 = WorkerOffer.apply((String) null, "", 687);
      boolean boolean0 = workerOffer1.equals(workerOffer0);
      assertFalse(boolean0);
      assertEquals(687, workerOffer1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply((String) null, (String) null, 235);
      WorkerOffer workerOffer1 = new WorkerOffer("_hRiE#e", (String) null, 235);
      boolean boolean0 = workerOffer0.equals(workerOffer1);
      assertEquals(235, workerOffer0.cores());
      assertFalse(boolean0);
      assertFalse(workerOffer1.equals((Object)workerOffer0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("of class ", "of class ", (-4427));
      boolean boolean0 = workerOffer0.equals("of class ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply((String) null, (String) null, 687);
      boolean boolean0 = workerOffer0.equals(workerOffer0);
      assertTrue(boolean0);
      assertEquals(687, workerOffer0.cores());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer((String) null, (String) null, (-929));
      // Undeclared exception!
      try { 
        workerOffer0.productElement((-929));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.WorkerOffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("~5.&}nA!lfC%{EY<", "~5.&}nA!lfC%{EY<", (-1744));
      WorkerOffer.unapply(workerOffer0);
      assertEquals((-1744), workerOffer0.copy$default$3());
      assertEquals((-1744), workerOffer0.cores());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("org.apache.spark.scheduler.WorkerOffer", "org.apache.spark.scheduler.WorkerOffer", (-717));
      WorkerOffer workerOffer1 = workerOffer0.copy("org.apache.spark.scheduler.WorkerOffer", "org.apache.spark.scheduler.WorkerOffer", (-717));
      boolean boolean0 = workerOffer1.equals(workerOffer0);
      assertTrue(boolean0);
      assertEquals((-717), workerOffer1.cores());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("", "", 1);
      int int0 = workerOffer0.copy$default$3();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply("", (String) null, (-1807));
      String string0 = workerOffer0.copy$default$1();
      assertEquals((-1807), workerOffer0.cores());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WorkerOffer workerOffer0 = WorkerOffer.apply((String) null, (String) null, (-889275714));
      workerOffer0.hashCode();
      assertEquals((-889275714), workerOffer0.cores());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("-x=iyWdZ<yys!-", "", (-2064));
      String string0 = workerOffer0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Function1<String, Function1<String, Function1<Object, WorkerOffer>>> function1_0 = WorkerOffer.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option<Tuple3<String, String, Object>> option0 = WorkerOffer.unapply((WorkerOffer) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Function1<Tuple3<String, String, Object>, WorkerOffer> function1_0 = WorkerOffer.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WorkerOffer workerOffer0 = new WorkerOffer("~5.&}n!lfC%{EY<", "~5.&}n!lfC%{EY<", (-1744));
      String string0 = workerOffer0.toString();
      assertEquals(3, workerOffer0.productArity());
      assertEquals("WorkerOffer(~5.&}n!lfC%{EY<,~5.&}n!lfC%{EY<,-1744)", string0);
  }
}
