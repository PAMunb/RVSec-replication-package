/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:18:47 GMT 2022
 */

package org.apache.spark.scheduler.local;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.spark.scheduler.local.StatusUpdate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Enumeration;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatusUpdate_ESTest extends StatusUpdate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn("Z", "$g&qP2n$Qbe3_\"w#.").when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("C@=N!i.V5XRx]'", "Z").when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply(0L, enumeration_Value0, byteBuffer0);
      long long0 = statusUpdate0.taskId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(0L, (Enumeration.Value) null, (ByteBuffer) null);
      StatusUpdate statusUpdate1 = statusUpdate0.copy((-1152L), (Enumeration.Value) null, (ByteBuffer) null);
      long long0 = statusUpdate1.taskId();
      assertEquals((-1152L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply(2536L, (Enumeration.Value) null, byteBuffer0);
      statusUpdate0.state();
      assertEquals(2536L, statusUpdate0.taskId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(1462L, (Enumeration.Value) null, (ByteBuffer) null);
      StatusUpdate statusUpdate1 = statusUpdate0.copy(1462L, (Enumeration.Value) null, (ByteBuffer) null);
      assertEquals(1462L, statusUpdate1.taskId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(1462L, (Enumeration.Value) null, (ByteBuffer) null);
      Enumeration.Value enumeration_Value0 = statusUpdate0.copy$default$2();
      assertNull(enumeration_Value0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply(0L, (Enumeration.Value) null, byteBuffer0);
      long long0 = statusUpdate0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      StatusUpdate statusUpdate0 = new StatusUpdate(614L, enumeration_Value0, byteBuffer0);
      long long0 = statusUpdate0.copy$default$1();
      assertEquals(614L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      StatusUpdate statusUpdate0 = new StatusUpdate((-2366L), (Enumeration.Value) null, byteBuffer0);
      boolean boolean0 = statusUpdate0.canEqual(statusUpdate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn("Z", "$g&qP2n$Qbe3_\"w#.").when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("C@=N!i.V5XRx]'", "Z", (String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply(0L, enumeration_Value0, byteBuffer0);
      Object object0 = statusUpdate0.productElement(2);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate((-14L), (Enumeration.Value) null, (ByteBuffer) null);
      Object object0 = statusUpdate0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatusUpdate statusUpdate0 = StatusUpdate.apply(0L, (Enumeration.Value) null, (ByteBuffer) null);
      Object object0 = statusUpdate0.productElement(0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply(0L, enumeration_Value0, byteBuffer0);
      int int0 = statusUpdate0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply((-1L), enumeration_Value0, byteBuffer0);
      String string0 = statusUpdate0.productPrefix();
      assertEquals("StatusUpdate", string0);
      assertEquals((-1L), statusUpdate0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate((-14L), (Enumeration.Value) null, (ByteBuffer) null);
      ByteBuffer byteBuffer0 = statusUpdate0.serializedData();
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(1462L, (Enumeration.Value) null, (ByteBuffer) null);
      long long0 = statusUpdate0.taskId();
      assertEquals(1462L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      StatusUpdate statusUpdate0 = new StatusUpdate((-1318L), enumeration_Value0, byteBuffer0);
      Enumeration.Value enumeration_Value1 = statusUpdate0.state();
      assertSame(enumeration_Value1, enumeration_Value0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply((-270L), enumeration_Value0, byteBuffer0);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(enumeration_Value1).toString();
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteBuffer1).toString();
      StatusUpdate statusUpdate1 = statusUpdate0.copy((-270L), enumeration_Value1, byteBuffer1);
      boolean boolean0 = statusUpdate1.equals(statusUpdate0);
      assertEquals((-270L), statusUpdate1.copy$default$1());
      assertEquals((-270L), statusUpdate0.taskId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate((-1578L), (Enumeration.Value) null, (ByteBuffer) null);
      boolean boolean0 = statusUpdate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      StatusUpdate statusUpdate0 = new StatusUpdate(0L, enumeration_Value0, (ByteBuffer) null);
      boolean boolean0 = statusUpdate0.equals(statusUpdate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(180L, (Enumeration.Value) null, (ByteBuffer) null);
      // Undeclared exception!
      try { 
        statusUpdate0.productElement(1633);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.local.StatusUpdate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Tuple3<Object, Enumeration.Value, ByteBuffer>> option0 = StatusUpdate.unapply((StatusUpdate) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(1131L, (Enumeration.Value) null, (ByteBuffer) null);
      statusUpdate0.hashCode();
      assertEquals(1131L, statusUpdate0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply(2536L, enumeration_Value0, byteBuffer0);
      statusUpdate0.copy$default$2();
      assertEquals(2536L, statusUpdate0.taskId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(enumeration_Value0).toString();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(byteBuffer0).toString();
      StatusUpdate statusUpdate0 = StatusUpdate.apply((-1L), enumeration_Value0, byteBuffer0);
      long long0 = statusUpdate0.copy$default$1();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(0L, (Enumeration.Value) null, (ByteBuffer) null);
      ByteBuffer byteBuffer0 = statusUpdate0.copy$default$3();
      assertNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function1<Tuple3<Object, Enumeration.Value, ByteBuffer>, StatusUpdate> function1_0 = StatusUpdate.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate((-1L), (Enumeration.Value) null, (ByteBuffer) null);
      String string0 = statusUpdate0.toString();
      assertEquals("StatusUpdate(-1,null,null)", string0);
      assertEquals(3, statusUpdate0.productArity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatusUpdate statusUpdate0 = StatusUpdate.apply((-1L), (Enumeration.Value) null, (ByteBuffer) null);
      StatusUpdate.unapply(statusUpdate0);
      assertEquals((-1L), statusUpdate0.copy$default$1());
      assertEquals((-1L), statusUpdate0.taskId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatusUpdate statusUpdate0 = new StatusUpdate(0L, (Enumeration.Value) null, (ByteBuffer) null);
      StatusUpdate statusUpdate1 = statusUpdate0.copy(0L, (Enumeration.Value) null, (ByteBuffer) null);
      assertTrue(statusUpdate1.equals((Object)statusUpdate0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StatusUpdate statusUpdate0 = StatusUpdate.apply(0L, (Enumeration.Value) null, (ByteBuffer) null);
      boolean boolean0 = statusUpdate0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Function1<Object, Function1<Enumeration.Value, Function1<ByteBuffer, StatusUpdate>>> function1_0 = StatusUpdate.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatusUpdate statusUpdate0 = StatusUpdate.apply(1176L, (Enumeration.Value) null, (ByteBuffer) null);
      statusUpdate0.productIterator();
      assertEquals(1176L, statusUpdate0.taskId());
      assertEquals(3, statusUpdate0.productArity());
  }
}
