/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:55:00 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.TaskEndReason;
import org.apache.spark.executor.TaskMetrics;
import org.apache.spark.scheduler.SparkListenerTaskEnd;
import org.apache.spark.scheduler.TaskInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple6;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerTaskEnd_ESTest extends SparkListenerTaskEnd_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(1, 834, (String) null, (TaskEndReason) null, (TaskInfo) null, taskMetrics0);
      sparkListenerTaskEnd0.taskType();
      assertEquals(834, sparkListenerTaskEnd0.stageAttemptId());
      assertEquals(1, sparkListenerTaskEnd0.stageId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, (-535), "", taskEndReason0, taskInfo0, taskMetrics0);
      String string0 = sparkListenerTaskEnd0.taskType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, 0, "Jb#i{n|=j4^2jaJh;!", taskEndReason0, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.stageId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(6, (-192), "", taskEndReason0, (TaskInfo) null, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.stageId();
      assertEquals(6, int0);
      assertEquals((-192), sparkListenerTaskEnd0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn("", "~}c").when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn("SqvwIElA:,tIKgi", "SqvwIElA:,tIKgi").when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(0, 0, "", (TaskEndReason) null, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.stageAttemptId();
      assertEquals(0, int0);
      assertEquals(0, sparkListenerTaskEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(2054, 1, "", (TaskEndReason) null, (TaskInfo) null, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.stageAttemptId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskEndReason0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-684), (-3175), "SparkListenerTaskEnd", taskEndReason0, (TaskInfo) null, taskMetrics0);
      TaskEndReason taskEndReason1 = sparkListenerTaskEnd0.reason();
      assertSame(taskEndReason1, taskEndReason0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      TaskEndReason taskEndReason1 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason1).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(0, (-2753), (String) null, taskEndReason1, taskInfo0, taskMetrics0);
      TaskInfo taskInfo1 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskInfo1).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd1 = sparkListenerTaskEnd0.copy(1231, 0, (String) null, taskEndReason0, taskInfo1, (TaskMetrics) null);
      sparkListenerTaskEnd1.productElement(5);
      assertEquals(0, sparkListenerTaskEnd1.copy$default$2());
      assertEquals(1231, sparkListenerTaskEnd1.copy$default$1());
      assertEquals(0, sparkListenerTaskEnd0.copy$default$1());
      assertEquals((-2753), sparkListenerTaskEnd0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo1 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskInfo1).toString();
      TaskEndReason taskEndReason1 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, 3095, "nt<6wZekcIt", taskEndReason1, taskInfo0, (TaskMetrics) null);
      SparkListenerTaskEnd sparkListenerTaskEnd1 = sparkListenerTaskEnd0.copy(0, 0, "#q;Z(3;\"</a3#J ", taskEndReason0, taskInfo1, (TaskMetrics) null);
      assertEquals(0, sparkListenerTaskEnd1.stageAttemptId());
      assertEquals(0, sparkListenerTaskEnd1.stageId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, 2, "", (TaskEndReason) null, taskInfo0, taskMetrics0);
      TaskEndReason taskEndReason0 = sparkListenerTaskEnd0.copy$default$4();
      assertNull(taskEndReason0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(15, 15, (String) null, taskEndReason0, taskInfo0, taskMetrics0);
      sparkListenerTaskEnd0.copy$default$3();
      assertEquals(15, sparkListenerTaskEnd0.copy$default$1());
      assertEquals(15, sparkListenerTaskEnd0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-2295), (-1716), "x0t", taskEndReason0, taskInfo0, taskMetrics0);
      String string0 = sparkListenerTaskEnd0.copy$default$3();
      assertEquals("x0t", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-889275714), (-2610), "SparkListenerTaskEnd", taskEndReason0, taskInfo0, taskMetrics0);
      TaskMetrics taskMetrics1 = sparkListenerTaskEnd0.taskMetrics();
      TaskEndReason taskEndReason1 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskEndReason1).toString();
      TaskInfo taskInfo1 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(taskInfo1).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd1 = sparkListenerTaskEnd0.copy(2857, 2857, "SparkListenerTaskEnd", taskEndReason1, taskInfo1, taskMetrics1);
      int int0 = sparkListenerTaskEnd1.copy$default$2();
      assertEquals(2857, int0);
      assertEquals(2857, sparkListenerTaskEnd1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate id: ", "org.apache.spark.scheduler.SparkListenerTaskEnd$").when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn("YcT0tTL:h7Zv|@1>](", "Duplicate id: ").when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.scheduler.SparkListenerTaskEnd$", "Duplicate id: ").when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply((-232), (-232), "Duplicate id: ", taskEndReason0, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.copy$default$2();
      assertEquals((-232), int0);
      assertEquals((-232), sparkListenerTaskEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(2316, (-472), "SPARK_TESTING", taskEndReason0, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.copy$default$1();
      assertEquals(2316, int0);
      assertEquals((-472), sparkListenerTaskEnd0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-684), (-3175), "SparkListenerTaskEnd", taskEndReason0, (TaskInfo) null, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.copy$default$1();
      assertEquals((-684), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(1, 1, ", reduceId=", taskEndReason0, taskInfo0, taskMetrics0);
      Object object0 = sparkListenerTaskEnd0.productElement(3);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(0, 0, "", taskEndReason0, taskInfo0, (TaskMetrics) null);
      Object object0 = sparkListenerTaskEnd0.productElement(0);
      assertEquals(0, sparkListenerTaskEnd0.stageAttemptId());
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-1712), (-1712), "D~&N^w", taskEndReason0, taskInfo0, taskMetrics0);
      Object object0 = sparkListenerTaskEnd0.productElement(2);
      assertEquals("D~&N^w", object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-1712), (-1712), "", taskEndReason0, taskInfo0, taskMetrics0);
      Object object0 = sparkListenerTaskEnd0.productElement(4);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn("Duplicate id: ", "org.apache.spark.scheduler.SparkListenerTaskEnd$").when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn("YcT0tTL:h7Zv|@1>](", "Duplicate id: ").when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.scheduler.SparkListenerTaskEnd$", "Duplicate id: ").when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply((-232), (-232), "Duplicate id: ", taskEndReason0, taskInfo0, taskMetrics0);
      Object object0 = sparkListenerTaskEnd0.productElement(1);
      assertEquals((-232), object0);
      assertEquals((-232), sparkListenerTaskEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, 0, "Jb#i{n|=j4^2jaJh;!", taskEndReason0, taskInfo0, taskMetrics0);
      String string0 = sparkListenerTaskEnd0.taskType();
      assertEquals("Jb#i{n|=j4^2jaJh;!", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-2295), (-1716), "x0t", taskEndReason0, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.stageId();
      assertEquals((-2295), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(0, 0, "", taskEndReason0, taskInfo0, (TaskMetrics) null);
      sparkListenerTaskEnd0.taskMetrics();
      assertEquals(0, sparkListenerTaskEnd0.stageAttemptId());
      assertEquals(0, sparkListenerTaskEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-1712), (-1712), "D~&N^w", taskEndReason0, taskInfo0, taskMetrics0);
      String string0 = sparkListenerTaskEnd0.productPrefix();
      assertEquals("SparkListenerTaskEnd", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(1186, (-712), "E=#", (TaskEndReason) null, taskInfo0, taskMetrics0);
      TaskEndReason taskEndReason0 = sparkListenerTaskEnd0.reason();
      assertNull(taskEndReason0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(2054, 1, "", (TaskEndReason) null, (TaskInfo) null, taskMetrics0);
      TaskInfo taskInfo0 = sparkListenerTaskEnd0.taskInfo();
      assertNull(taskInfo0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd((-1415), (-477), "", taskEndReason0, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.stageAttemptId();
      assertEquals((-477), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskInfo0).toString();
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskMetrics0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(1107, 1107, "", taskEndReason0, taskInfo0, taskMetrics0);
      int int0 = sparkListenerTaskEnd0.productArity();
      assertEquals(6, int0);
      assertEquals(1107, sparkListenerTaskEnd0.stageId());
      assertEquals(1107, sparkListenerTaskEnd0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option<Tuple6<Object, Object, String, TaskEndReason, TaskInfo, TaskMetrics>> option0 = SparkListenerTaskEnd.unapply((SparkListenerTaskEnd) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(6, 6, "'nN|", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      boolean boolean0 = sparkListenerTaskEnd0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(6, sparkListenerTaskEnd0.stageId());
      assertEquals(6, sparkListenerTaskEnd0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn("Q>>k;:uX;y]Ko!e", "Q>>k;:uX;y]Ko!e").when(taskEndReason0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply((-537), (-34), "", taskEndReason0, (TaskInfo) null, (TaskMetrics) null);
      boolean boolean0 = sparkListenerTaskEnd0.equals(sparkListenerTaskEnd0);
      assertEquals((-34), sparkListenerTaskEnd0.copy$default$2());
      assertEquals((-537), sparkListenerTaskEnd0.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply((-43), (-43), "9Q", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      // Undeclared exception!
      try { 
        sparkListenerTaskEnd0.productElement((-43));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerTaskEnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, 0, "[>w)n+>#Q}irNG", taskEndReason0, taskInfo0, taskMetrics0);
      TaskEndReason taskEndReason1 = sparkListenerTaskEnd0.copy$default$4();
      assertSame(taskEndReason1, taskEndReason0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(1859, 1859, "9*_>#<e0ywh4d`Jx%I", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      sparkListenerTaskEnd0.logEvent();
      assertEquals(1859, sparkListenerTaskEnd0.copy$default$1());
      assertEquals(1859, sparkListenerTaskEnd0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(0, 3095, "nt<6wZekcIt", taskEndReason0, taskInfo0, (TaskMetrics) null);
      int int0 = sparkListenerTaskEnd0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Function1<Object, Function1<Object, Function1<String, Function1<TaskEndReason, Function1<TaskInfo, Function1<TaskMetrics, SparkListenerTaskEnd>>>>>> function1_0 = SparkListenerTaskEnd.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(8, 8, "!QE/%T|NX$", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      String string0 = sparkListenerTaskEnd0.toString();
      assertEquals("SparkListenerTaskEnd(8,8,!QE/%T|NX$,null,null,null)", string0);
      assertEquals(6, sparkListenerTaskEnd0.productArity());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(1873, 1873, "9*_>#<e0ywh4d`Jx%I", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      sparkListenerTaskEnd0.canEqual((Object) null);
      assertEquals(1873, sparkListenerTaskEnd0.stageAttemptId());
      assertEquals(1873, sparkListenerTaskEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(1859, 1859, "9*_>#<e0y6h4d`Jx%I", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      sparkListenerTaskEnd0.productIterator();
      assertEquals(6, sparkListenerTaskEnd0.productArity());
      assertEquals(1859, sparkListenerTaskEnd0.copy$default$1());
      assertEquals(1859, sparkListenerTaskEnd0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(6, 6, "", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      sparkListenerTaskEnd0.copy$default$6();
      assertEquals(6, sparkListenerTaskEnd0.stageAttemptId());
      assertEquals(6, sparkListenerTaskEnd0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      TaskMetrics taskMetrics0 = mock(TaskMetrics.class, new ViolatedAssumptionAnswer());
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(3081, 32, "", taskEndReason0, (TaskInfo) null, taskMetrics0);
      String string0 = sparkListenerTaskEnd0.copy$default$3();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply((-1), (-1), "9*_>#<e0ywh4d`Jx%I", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      SparkListenerTaskEnd sparkListenerTaskEnd1 = sparkListenerTaskEnd0.copy((-1), (-1), "9*_>#<e0ywh4d`Jx%I", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      assertTrue(sparkListenerTaskEnd1.equals((Object)sparkListenerTaskEnd0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = new SparkListenerTaskEnd(6, 6, "Z", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      sparkListenerTaskEnd0.hashCode();
      assertEquals(6, sparkListenerTaskEnd0.stageId());
      assertEquals(6, sparkListenerTaskEnd0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TaskEndReason taskEndReason0 = mock(TaskEndReason.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(taskEndReason0).toString();
      TaskInfo taskInfo0 = mock(TaskInfo.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(taskInfo0).toString();
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply((-6), 0, "", taskEndReason0, taskInfo0, (TaskMetrics) null);
      int int0 = sparkListenerTaskEnd0.copy$default$2();
      assertEquals(0, int0);
      assertEquals((-6), sparkListenerTaskEnd0.stageId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(Integer.MAX_VALUE, Integer.MAX_VALUE, "/'xP,]u", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      SparkListenerTaskEnd.unapply(sparkListenerTaskEnd0);
      assertEquals(Integer.MAX_VALUE, sparkListenerTaskEnd0.copy$default$2());
      assertEquals(Integer.MAX_VALUE, sparkListenerTaskEnd0.copy$default$1());
      assertEquals(Integer.MAX_VALUE, sparkListenerTaskEnd0.stageId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Function1<Tuple6<Object, Object, String, TaskEndReason, TaskInfo, TaskMetrics>, SparkListenerTaskEnd> function1_0 = SparkListenerTaskEnd.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SparkListenerTaskEnd sparkListenerTaskEnd0 = SparkListenerTaskEnd.apply(6, 6, "", (TaskEndReason) null, (TaskInfo) null, (TaskMetrics) null);
      sparkListenerTaskEnd0.copy$default$5();
      assertEquals(6, sparkListenerTaskEnd0.stageId());
      assertEquals(6, sparkListenerTaskEnd0.stageAttemptId());
  }
}
