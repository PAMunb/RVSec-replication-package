/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:24:25 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.ExecutorExited;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorExited_ESTest extends ExecutorExited_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-1001), false, (String) null);
      ExecutorExited executorExited1 = ExecutorExited.apply(0, false, "Q(Y~LU39yI /6o");
      boolean boolean0 = executorExited1.equals(executorExited0);
      assertEquals(0, executorExited1.copy$default$1());
      assertEquals((-1001), executorExited0.copy$default$1());
      assertFalse(executorExited1.exitCausedByApp());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-1001), false, (String) null);
      String string0 = executorExited0.reason();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(0, false, "");
      executorExited0.reason();
      assertFalse(executorExited0.copy$default$2());
      assertEquals(0, executorExited0.exitCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(2, false);
      Object object0 = executorExited0.productElement(2);
      assertEquals("Unknown executor exit code (2)", object0);
      assertFalse(executorExited0.copy$default$2());
      assertEquals(2, executorExited0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(0, true, "");
      ExecutorExited executorExited1 = executorExited0.copy(4034, true, "`Mp?5>Mz");
      int int0 = executorExited1.exitCode();
      assertTrue(executorExited1.exitCausedByApp());
      assertEquals(4034, int0);
      assertEquals(0, executorExited0.copy$default$1());
      assertTrue(executorExited0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-1000), true, "");
      int int0 = executorExited0.exitCode();
      assertEquals((-1000), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-1), true, "tg,/f%Yj=x:>eII8%");
      boolean boolean0 = executorExited0.exitCausedByApp();
      assertTrue(boolean0);
      assertEquals((-1), executorExited0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(0, false, "ExecutorExited");
      ExecutorExited executorExited1 = executorExited0.copy(0, false, "");
      assertEquals(0, executorExited0.copy$default$1());
      assertFalse(executorExited0.exitCausedByApp());
      assertEquals(0, executorExited1.copy$default$1());
      assertFalse(executorExited1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1, false, (String) null);
      executorExited0.copy$default$3();
      assertEquals(1, executorExited0.exitCode());
      assertFalse(executorExited0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-99), false, "");
      String string0 = executorExited0.copy$default$3();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-1001), false, (String) null);
      boolean boolean0 = executorExited0.copy$default$2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited(0, true, (String) null);
      int int0 = executorExited0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1529, false);
      int int0 = executorExited0.copy$default$1();
      assertEquals(1529, int0);
      assertFalse(executorExited0.exitCausedByApp());
      assertEquals("Unknown executor exit code (1529) (died from signal 1401?)", executorExited0.reason());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-2647), false, "org.apache.spark.scheduler.ExecutorExited");
      Object object0 = executorExited0.productElement(0);
      assertEquals((-2647), object0);
      
      executorExited0.canEqual(object0);
      assertFalse(executorExited0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(3, false, ",");
      boolean boolean0 = executorExited0.exitCausedByApp();
      assertFalse(boolean0);
      assertEquals(3, executorExited0.exitCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1529, false);
      executorExited0.canEqual(executorExited0);
      assertFalse(executorExited0.exitCausedByApp());
      assertEquals(1529, executorExited0.copy$default$1());
      assertEquals("Unknown executor exit code (1529) (died from signal 1401?)", executorExited0.reason());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1529, false);
      String string0 = executorExited0.reason();
      assertEquals(1529, executorExited0.copy$default$1());
      assertEquals("Unknown executor exit code (1529) (died from signal 1401?)", string0);
      assertFalse(executorExited0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited(1237, false, (String) null);
      int int0 = executorExited0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(0, false, "ExecutorExited");
      int int0 = executorExited0.exitCode();
      assertEquals(0, int0);
      assertFalse(executorExited0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1, true);
      ExecutorExited.unapply(executorExited0);
      assertEquals("Unknown executor exit code (1)", executorExited0.message());
      assertEquals(1, executorExited0.exitCode());
      assertTrue(executorExited0.copy$default$2());
      assertEquals(1, executorExited0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(0, true);
      ExecutorExited executorExited1 = new ExecutorExited(0, true, "");
      boolean boolean0 = executorExited0.equals(executorExited1);
      assertFalse(boolean0);
      assertTrue(executorExited0.copy$default$2());
      assertEquals(0, executorExited0.copy$default$1());
      assertEquals("Unknown executor exit code (0)", executorExited0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited(1237, false, (String) null);
      ExecutorExited executorExited1 = ExecutorExited.apply(1237, false);
      boolean boolean0 = executorExited0.equals(executorExited1);
      assertEquals(1237, executorExited1.copy$default$1());
      assertFalse(boolean0);
      assertFalse(executorExited1.exitCausedByApp());
      assertEquals("Unknown executor exit code (1237) (died from signal 1109?)", executorExited1.reason());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-2536), true, (String) null);
      ExecutorExited executorExited1 = new ExecutorExited((-2536), true, (String) null);
      boolean boolean0 = executorExited0.equals(executorExited1);
      assertEquals((-2536), executorExited1.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(3219, true);
      ExecutorExited executorExited1 = ExecutorExited.apply(3219, false);
      boolean boolean0 = executorExited1.equals(executorExited0);
      assertFalse(boolean0);
      assertFalse(executorExited1.copy$default$2());
      assertEquals(3219, executorExited1.copy$default$1());
      assertEquals("Unknown executor exit code (3219) (died from signal 3091?)", executorExited1.reason());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(51, true);
      ExecutorExited executorExited1 = ExecutorExited.apply((-407), true);
      boolean boolean0 = executorExited1.equals(executorExited0);
      assertTrue(executorExited1.copy$default$2());
      assertEquals((-407), executorExited1.exitCode());
      assertFalse(boolean0);
      assertEquals("Unknown executor exit code (-407)", executorExited1.reason());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-889275712), false);
      boolean boolean0 = executorExited0.equals((Object) null);
      assertEquals((-889275712), executorExited0.exitCode());
      assertFalse(boolean0);
      assertEquals("Unknown executor exit code (-889275712)", executorExited0.copy$default$3());
      assertFalse(executorExited0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(51, false);
      boolean boolean0 = executorExited0.equals(executorExited0);
      assertTrue(boolean0);
      assertFalse(executorExited0.copy$default$2());
      assertEquals("Uncaught exception, and logging the exception failed", executorExited0.copy$default$3());
      assertEquals(51, executorExited0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(202, true);
      executorExited0.hashCode();
      assertEquals(202, executorExited0.exitCode());
      assertEquals("Unknown executor exit code (202) (died from signal 74?)", executorExited0.message());
      assertTrue(executorExited0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(20, false);
      executorExited0.hashCode();
      assertEquals(20, executorExited0.copy$default$1());
      assertFalse(executorExited0.exitCausedByApp());
      assertEquals("Unknown executor exit code (20)", executorExited0.reason());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-1028477387), false);
      // Undeclared exception!
      try { 
        executorExited0.productElement((-1028477387));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000003
         //
         verifyException("org.apache.spark.scheduler.ExecutorExited", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited(2, true, (String) null);
      Object object0 = executorExited0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited((-1956), false, "org.apache.spark.scheduler.ExecutorExited");
      int int0 = executorExited0.copy$default$1();
      assertEquals((-1956), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-381), false);
      ExecutorExited executorExited1 = executorExited0.copy((-381), false, "");
      assertEquals((-381), executorExited0.copy$default$1());
      assertEquals((-381), executorExited1.copy$default$1());
      assertEquals("Unknown executor exit code (-381)", executorExited0.copy$default$3());
      assertFalse(executorExited0.exitCausedByApp());
      assertFalse(executorExited1.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option<Tuple3<Object, Object, String>> option0 = ExecutorExited.unapply((ExecutorExited) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-326), false);
      String string0 = executorExited0.productPrefix();
      assertFalse(executorExited0.exitCausedByApp());
      assertEquals("ExecutorExited", string0);
      assertEquals("Unknown executor exit code (-326)", executorExited0.message());
      assertEquals((-326), executorExited0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(51, false);
      ExecutorExited executorExited1 = ExecutorExited.apply(51, false);
      boolean boolean0 = executorExited0.equals(executorExited1);
      assertEquals(51, executorExited1.exitCode());
      assertFalse(executorExited1.copy$default$2());
      assertTrue(boolean0);
      assertEquals("Uncaught exception, and logging the exception failed", executorExited1.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExecutorExited executorExited0 = new ExecutorExited(884, true, "c >:PUi>fPv5H~G]ME'");
      boolean boolean0 = executorExited0.copy$default$2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply((-326), true);
      executorExited0.productIterator();
      assertEquals(3, executorExited0.productArity());
      assertTrue(executorExited0.copy$default$2());
      assertEquals((-326), executorExited0.exitCode());
      assertEquals("Unknown executor exit code (-326)", executorExited0.reason());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1529, false);
      String string0 = executorExited0.copy$default$3();
      assertEquals("Unknown executor exit code (1529) (died from signal 1401?)", string0);
      assertEquals(1529, executorExited0.copy$default$1());
      assertFalse(executorExited0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExecutorExited executorExited0 = ExecutorExited.apply(1, false);
      Object object0 = executorExited0.productElement(1);
      assertEquals(false, object0);
      assertEquals(1, executorExited0.exitCode());
      assertEquals("Unknown executor exit code (1)", executorExited0.reason());
  }
}
