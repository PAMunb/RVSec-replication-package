/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:08:01 GMT 2022
 */

package org.apache.spark.util.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.util.random.BernoulliCellSampler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Iterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BernoulliCellSampler_ESTest extends BernoulliCellSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BernoulliCellSampler<Object> bernoulliCellSampler0 = new BernoulliCellSampler<Object>(1.0, 1.000001, false);
      BernoulliCellSampler<Object> bernoulliCellSampler1 = bernoulliCellSampler0.clone();
      assertEquals(1.0, bernoulliCellSampler1.org$apache$spark$util$random$BernoulliCellSampler$$lb, 0.01);
      assertEquals(1.000001, bernoulliCellSampler1.org$apache$spark$util$random$BernoulliCellSampler$$ub, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(0.0, 0.2646529277799443, true);
      BernoulliCellSampler<Integer> bernoulliCellSampler1 = bernoulliCellSampler0.cloneComplement();
      assertEquals(0.0, bernoulliCellSampler1.org$apache$spark$util$random$BernoulliCellSampler$$lb, 0.01);
      assertEquals(0.2646529277799443, bernoulliCellSampler1.org$apache$spark$util$random$BernoulliCellSampler$$ub, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(0.0, 0.2646529277799443, true);
      int int0 = bernoulliCellSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(1.0E-6, 0.0, false);
      int int0 = bernoulliCellSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>((-1.0E-6), (-1.0E-6), false);
      assertEquals((-1.0E-6), bernoulliCellSampler0.org$apache$spark$util$random$BernoulliCellSampler$$lb, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BernoulliCellSampler<Object> bernoulliCellSampler0 = null;
      try {
        bernoulliCellSampler0 = new BernoulliCellSampler<Object>((-9223372036854775808L), (-9223372036854775808L), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Lower bound (-9.223372036854776E18) must be >= 0.0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BernoulliCellSampler<Object> bernoulliCellSampler0 = new BernoulliCellSampler<Object>(1.0, 1.000001, false);
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(iterator0).filter(any(scala.Function1.class));
      Iterator<Object> iterator1 = bernoulliCellSampler0.sample(iterator0);
      assertNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BernoulliCellSampler<Object> bernoulliCellSampler0 = new BernoulliCellSampler<Object>(0.0, 0.0, false);
      BernoulliCellSampler<Object> bernoulliCellSampler1 = bernoulliCellSampler0.cloneComplement();
      assertEquals(0.0, bernoulliCellSampler1.org$apache$spark$util$random$BernoulliCellSampler$$ub, 0.01);
      assertEquals(0.0, bernoulliCellSampler1.org$apache$spark$util$random$BernoulliCellSampler$$lb, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(0.0, 5.0E-11, false);
      int int0 = bernoulliCellSampler0.sample();
      assertEquals(1, int0);
      
      int int1 = bernoulliCellSampler0.sample();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(1.0, 1.0, true);
      int int0 = bernoulliCellSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(0.2646529277799443, 1.0, true);
      int int0 = bernoulliCellSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(0.0, 0.0, false);
      bernoulliCellSampler0.setSeed(0L);
      assertFalse(bernoulliCellSampler0.$lessinit$greater$default$3());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = BernoulliCellSampler.$lessinit$greater$default$3();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BernoulliCellSampler<Object> bernoulliCellSampler0 = new BernoulliCellSampler<Object>(0.0, 0.0, false);
      // Undeclared exception!
      try { 
        bernoulliCellSampler0.sample((Iterator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.random.RandomSampler$class", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = null;
      try {
        bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(0.0, (-3042.0), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Lower bound (0.0) must be <= upper bound (-3042.0)
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BernoulliCellSampler<Integer> bernoulliCellSampler0 = null;
      try {
        bernoulliCellSampler0 = new BernoulliCellSampler<Integer>(3461.381306, 3461.381306, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Upper bound (3461.381306) must be <= 1.0
         //
         verifyException("scala.Predef$", e);
      }
  }
}
