/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:23:13 GMT 2022
 */

package org.apache.spark.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;
import org.apache.spark.input.PortableDataStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PortableDataStream_ESTest extends PortableDataStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PortableDataStream portableDataStream0 = null;
      try {
        portableDataStream0 = new PortableDataStream((CombineFileSplit) null, (TaskAttemptContext) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.input.PortableDataStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      TaskAttemptContext taskAttemptContext0 = mock(TaskAttemptContext.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(taskAttemptContext0).getConfiguration();
      CombineFileSplit combineFileSplit0 = mock(CombineFileSplit.class, new ViolatedAssumptionAnswer());
      PortableDataStream portableDataStream0 = new PortableDataStream(combineFileSplit0, taskAttemptContext0, (Integer) null);
      // Undeclared exception!
      try { 
        portableDataStream0.open();
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      TaskAttemptContext taskAttemptContext0 = mock(TaskAttemptContext.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(taskAttemptContext0).getConfiguration();
      CombineFileSplit combineFileSplit0 = mock(CombineFileSplit.class, new ViolatedAssumptionAnswer());
      PortableDataStream portableDataStream0 = new PortableDataStream(combineFileSplit0, taskAttemptContext0, (Integer) null);
      // Undeclared exception!
      try { 
        portableDataStream0.toArray();
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      TaskAttemptContext taskAttemptContext0 = mock(TaskAttemptContext.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(taskAttemptContext0).getConfiguration();
      CombineFileSplit combineFileSplit0 = mock(CombineFileSplit.class, new ViolatedAssumptionAnswer());
      PortableDataStream portableDataStream0 = new PortableDataStream(combineFileSplit0, taskAttemptContext0, (Integer) null);
      // Undeclared exception!
      try { 
        portableDataStream0.getPath();
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      TaskAttemptContext taskAttemptContext0 = mock(TaskAttemptContext.class, new ViolatedAssumptionAnswer());
      doReturn(configuration0).when(taskAttemptContext0).getConfiguration();
      CombineFileSplit combineFileSplit0 = mock(CombineFileSplit.class, new ViolatedAssumptionAnswer());
      PortableDataStream portableDataStream0 = new PortableDataStream(combineFileSplit0, taskAttemptContext0, (Integer) null);
      // Undeclared exception!
      portableDataStream0.getConfiguration();
  }
}
