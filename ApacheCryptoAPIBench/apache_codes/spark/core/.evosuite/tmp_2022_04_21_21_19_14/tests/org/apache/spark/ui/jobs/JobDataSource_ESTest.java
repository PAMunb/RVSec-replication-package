/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:51:14 GMT 2022
 */

package org.apache.spark.ui.jobs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.apache.spark.status.AppStatusStore;
import org.apache.spark.status.api.v1.JobData;
import org.apache.spark.ui.jobs.JobDataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.collection.Seq;
import scala.collection.immutable.Range;
import scala.collection.mutable.Queue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JobDataSource_ESTest extends JobDataSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Queue<Range> queue0 = (Queue<Range>) mock(Queue.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(queue0).sorted(any(scala.math.Ordering.class));
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(queue0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Job Id", 3490, 3490, "Job Id", false);
      assertEquals(3490, jobDataSource0.pageSize());
      assertNotNull(jobDataSource0);
      
      // Undeclared exception!
      try { 
        jobDataSource0.sliceData(2, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Queue<Range> queue0 = (Queue<Range>) mock(Queue.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(queue0).sorted(any(scala.math.Ordering.class));
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(queue0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Job Id", 3490, 3490, "Job Id", true);
      assertEquals(3490, jobDataSource0.pageSize());
      assertNotNull(jobDataSource0);
      
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      Option<Range> option0 = (Option<Range>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn(range0).when(option0).getOrElse(any(scala.Function0.class));
      Option<Queue<Range>> option1 = (Option<Queue<Range>>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn(option0).when(option1).map(any(scala.Function1.class));
      Option<Date> option2 = (Option<Date>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn(option1).when(option2).map(any(scala.Function1.class));
      JobData jobData0 = mock(JobData.class, new ViolatedAssumptionAnswer());
      doReturn(option2).when(jobData0).submissionTime();
      // Undeclared exception!
      try { 
        jobDataSource0.org$apache$spark$ui$jobs$JobDataSource$$jobRow(jobData0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // scala.collection.immutable.Range$MockitoMock$1297547293 cannot be cast to java.lang.String
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = null;
      try {
        jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "spark.shuffle.memoryFraction", 3490, 3490, "spark.shuffle.memoryFraction", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown column: spark.shuffle.memoryFraction
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Queue<Range> queue0 = (Queue<Range>) mock(Queue.class, new ViolatedAssumptionAnswer());
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(queue0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = null;
      try {
        jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "org.apache.spark.ui.jobs.JobDataSource$$anonfun$28", (-3351L), 3513, "Stages: Succeeded/Total", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsortable column: Stages: Succeeded/Total
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = null;
      try {
        jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Tasks (for all stages): Succeeded/Total", 3049L, 2881, "Tasks (for all stages): Succeeded/Total", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsortable column: Tasks (for all stages): Succeeded/Total
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = null;
      try {
        jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Job Id (Job Group)", (-1L), 3476, "Job Id (Job Group)", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Queue<Range> queue0 = (Queue<Range>) mock(Queue.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(queue0).sorted(any(scala.math.Ordering.class));
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(queue0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Job Id", 3490, 3490, "Description", false);
      assertEquals(3490, jobDataSource0.pageSize());
      assertNotNull(jobDataSource0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(range0).sorted(any(scala.math.Ordering.class));
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(range0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "c0{twv", 3490, 3490, "Duration", true);
      assertEquals(3490, jobDataSource0.pageSize());
      assertNotNull(jobDataSource0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = null;
      try {
        jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "m=pZ+c2kw.", (-5025L), 11, "Submitted", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Queue<Range> queue0 = (Queue<Range>) mock(Queue.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(queue0).sorted(any(scala.math.Ordering.class));
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(queue0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Job Id", 3490, 3490, "Job Id", true);
      Option<Range> option0 = (Option<Range>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(option0).getOrElse(any(scala.Function0.class));
      Option<Queue<Range>> option1 = (Option<Queue<Range>>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn(option0).when(option1).map(any(scala.Function1.class));
      Option<Date> option2 = (Option<Date>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn(option1).when(option2).map(any(scala.Function1.class));
      JobData jobData0 = mock(JobData.class, new ViolatedAssumptionAnswer());
      doReturn(option2, (Option) null).when(jobData0).submissionTime();
      // Undeclared exception!
      try { 
        jobDataSource0.org$apache$spark$ui$jobs$JobDataSource$$jobRow(jobData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AppStatusStore appStatusStore0 = mock(AppStatusStore.class, new ViolatedAssumptionAnswer());
      Range range0 = mock(Range.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(range0).sorted(any(scala.math.Ordering.class));
      Seq<JobData> seq0 = (Seq<JobData>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn(range0).when(seq0).map(any(scala.Function1.class) , any(scala.collection.generic.CanBuildFrom.class));
      JobDataSource jobDataSource0 = new JobDataSource(appStatusStore0, seq0, "Job Id", 3490, 3490, "Job Id", true);
      // Undeclared exception!
      try { 
        jobDataSource0.dataSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobDataSource", e);
      }
  }
}
