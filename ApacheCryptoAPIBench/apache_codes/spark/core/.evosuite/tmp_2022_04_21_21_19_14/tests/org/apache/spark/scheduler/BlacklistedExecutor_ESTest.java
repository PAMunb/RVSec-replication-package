/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:49:31 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.BlacklistedExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlacklistedExecutor_ESTest extends BlacklistedExecutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("\"MT?q'LZuYUY\t~?~", 0L);
      BlacklistedExecutor blacklistedExecutor1 = new BlacklistedExecutor("\"MT?q'LZuYUY\t~?~", (-1L));
      boolean boolean0 = blacklistedExecutor0.equals(blacklistedExecutor1);
      assertFalse(blacklistedExecutor1.equals((Object)blacklistedExecutor0));
      assertEquals((-1L), blacklistedExecutor1.expiryTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor((String) null, 0L);
      Object object0 = blacklistedExecutor0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("[~M~3EXAkJ", 1L);
      blacklistedExecutor0.node();
      assertEquals(1L, blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("", 0L);
      String string0 = blacklistedExecutor0.node();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("Va&", 1906L);
      long long0 = blacklistedExecutor0.expiryTime();
      assertEquals(1906L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("", 0L);
      BlacklistedExecutor blacklistedExecutor1 = blacklistedExecutor0.copy("BlacklistedExecutor", (-1051L));
      long long0 = blacklistedExecutor1.expiryTime();
      assertEquals((-1051L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("\"MT?q'LZuYUY\t~?~", 0L);
      BlacklistedExecutor blacklistedExecutor1 = blacklistedExecutor0.copy("\"MT?q'LZuYUY\t~?~", 0L);
      assertEquals(2, blacklistedExecutor1.productArity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("\"MT?q'LZuYUY\t~?~", 0L);
      long long0 = blacklistedExecutor0.copy$default$2();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("an instance ", 762L);
      long long0 = blacklistedExecutor0.copy$default$2();
      assertEquals(762L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply((String) null, (-121L));
      blacklistedExecutor0.copy$default$1();
      assertEquals((-121L), blacklistedExecutor0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("", 0L);
      String string0 = blacklistedExecutor0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply(" -> ", 1909L);
      blacklistedExecutor0.canEqual(blacklistedExecutor0);
      assertEquals(1909L, blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("Array(", 1L);
      blacklistedExecutor0.productElement(0);
      assertEquals(1L, blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor((String) null, 0L);
      Object object0 = blacklistedExecutor0.productElement(1);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("", 0L);
      long long0 = blacklistedExecutor0.expiryTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("H]s]dT", 0L);
      String string0 = blacklistedExecutor0.productPrefix();
      assertEquals("BlacklistedExecutor", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("", 0L);
      blacklistedExecutor0.productIterator();
      assertEquals(2, blacklistedExecutor0.productArity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor((String) null, 1997L);
      String string0 = blacklistedExecutor0.node();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("Array(", 3564L);
      BlacklistedExecutor.unapply(blacklistedExecutor0);
      assertEquals(3564L, blacklistedExecutor0.expiryTime());
      assertEquals(3564L, blacklistedExecutor0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor(":i", 367L);
      BlacklistedExecutor blacklistedExecutor1 = BlacklistedExecutor.apply("org.apache.spark.scheduler.BlacklistedExecutor", 367L);
      boolean boolean0 = blacklistedExecutor0.equals(blacklistedExecutor1);
      assertFalse(boolean0);
      assertEquals(367L, blacklistedExecutor1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor((String) null, 0L);
      BlacklistedExecutor blacklistedExecutor1 = new BlacklistedExecutor((String) null, (-676L));
      boolean boolean0 = blacklistedExecutor1.equals(blacklistedExecutor0);
      assertFalse(blacklistedExecutor0.equals((Object)blacklistedExecutor1));
      assertEquals((-676L), blacklistedExecutor1.expiryTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply((String) null, 0L);
      BlacklistedExecutor blacklistedExecutor1 = blacklistedExecutor0.copy("36o(nI=", 2);
      boolean boolean0 = blacklistedExecutor0.equals(blacklistedExecutor1);
      assertFalse(boolean0);
      assertEquals(2L, blacklistedExecutor1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor(":i", 367L);
      BlacklistedExecutor blacklistedExecutor1 = BlacklistedExecutor.apply(":i", 367L);
      boolean boolean0 = blacklistedExecutor0.equals(blacklistedExecutor1);
      assertTrue(boolean0);
      assertEquals(367L, blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("Array(", 1L);
      boolean boolean0 = blacklistedExecutor0.equals("Array(");
      assertEquals(1L, blacklistedExecutor0.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor(":i", 367L);
      boolean boolean0 = blacklistedExecutor0.equals(blacklistedExecutor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("", (-148L));
      // Undeclared exception!
      try { 
        blacklistedExecutor0.productElement(1355);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.BlacklistedExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = new BlacklistedExecutor("uxE;l$ztJ3k!", (-794L));
      long long0 = blacklistedExecutor0.copy$default$2();
      assertEquals((-794L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("q", (-222L));
      String string0 = blacklistedExecutor0.toString();
      assertEquals("BlacklistedExecutor(q,-222)", string0);
      assertEquals(2, blacklistedExecutor0.productArity());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Tuple2<String, Object>, BlacklistedExecutor> function1_0 = BlacklistedExecutor.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option<Tuple2<String, Object>> option0 = BlacklistedExecutor.unapply((BlacklistedExecutor) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("W#1{rRl6R\"zZ<@>rY", (-222L));
      blacklistedExecutor0.copy$default$1();
      assertEquals((-222L), blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Function1<String, Function1<Object, BlacklistedExecutor>> function1_0 = BlacklistedExecutor.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("gTsArray(", 3564L);
      blacklistedExecutor0.hashCode();
      assertEquals(3564L, blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply("fh@:d/2|TC4{S[Y", (-2412L));
      blacklistedExecutor0.canEqual("fh@:d/2|TC4{S[Y");
      assertEquals((-2412L), blacklistedExecutor0.expiryTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlacklistedExecutor blacklistedExecutor0 = BlacklistedExecutor.apply(")|\"5&", 373L);
      int int0 = blacklistedExecutor0.productArity();
      assertEquals(2, int0);
      assertEquals(373L, blacklistedExecutor0.copy$default$2());
  }
}
