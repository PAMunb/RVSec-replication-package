/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:12:20 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.TaskResultBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskResultBlockId_ESTest extends TaskResultBlockId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(0L);
      TaskResultBlockId taskResultBlockId1 = taskResultBlockId0.copy(831L);
      boolean boolean0 = taskResultBlockId0.equals(taskResultBlockId1);
      assertFalse(taskResultBlockId1.equals((Object)taskResultBlockId0));
      assertEquals(831L, taskResultBlockId1.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId(688L);
      long long0 = taskResultBlockId0.taskId();
      assertEquals(688L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-2304L));
      long long0 = taskResultBlockId0.taskId();
      assertEquals((-2304L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId(0L);
      TaskResultBlockId taskResultBlockId1 = taskResultBlockId0.copy(0L);
      assertTrue(taskResultBlockId1.equals((Object)taskResultBlockId0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId(0L);
      long long0 = taskResultBlockId0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(2L);
      long long0 = taskResultBlockId0.copy$default$1();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId(1818L);
      boolean boolean0 = taskResultBlockId0.canEqual(taskResultBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(1L);
      taskResultBlockId0.canEqual((Object) null);
      assertEquals(1L, taskResultBlockId0.taskId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(0L);
      long long0 = taskResultBlockId0.taskId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId((-1226L));
      int int0 = taskResultBlockId0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId((-1L));
      TaskResultBlockId.unapply(taskResultBlockId0);
      assertEquals((-1L), taskResultBlockId0.copy$default$1());
      assertEquals((-1L), taskResultBlockId0.taskId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(1L);
      TaskResultBlockId taskResultBlockId1 = TaskResultBlockId.apply((-1535L));
      boolean boolean0 = taskResultBlockId0.equals(taskResultBlockId1);
      assertFalse(taskResultBlockId1.equals((Object)taskResultBlockId0));
      assertEquals((-1535L), taskResultBlockId1.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(1L);
      boolean boolean0 = taskResultBlockId0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1L, taskResultBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(1L);
      boolean boolean0 = taskResultBlockId0.equals(taskResultBlockId0);
      assertEquals(1L, taskResultBlockId0.taskId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply(1L);
      // Undeclared exception!
      try { 
        taskResultBlockId0.productElement(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000004
         //
         verifyException("org.apache.spark.storage.TaskResultBlockId", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-4167L));
      Object object0 = taskResultBlockId0.productElement(0);
      assertEquals((-4167L), object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-1L));
      String string0 = taskResultBlockId0.name();
      assertEquals("taskresult_-1", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<TaskResultBlockId, TaskResultBlockId> function1_0 = TaskResultBlockId.compose((Function1<TaskResultBlockId, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId(3389L);
      String string0 = taskResultBlockId0.productPrefix();
      assertEquals("TaskResultBlockId", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-30L));
      TaskResultBlockId taskResultBlockId1 = taskResultBlockId0.copy((-30L));
      assertTrue(taskResultBlockId1.equals((Object)taskResultBlockId0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = new TaskResultBlockId(0L);
      taskResultBlockId0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-1091L));
      TaskResultBlockId taskResultBlockId1 = TaskResultBlockId.apply((-1091L));
      boolean boolean0 = taskResultBlockId0.equals(taskResultBlockId1);
      assertTrue(boolean0);
      assertEquals((-1091L), taskResultBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Function1<Object, TaskResultBlockId> function1_0 = TaskResultBlockId.andThen((Function1<TaskResultBlockId, TaskResultBlockId>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option<Object> option0 = TaskResultBlockId.unapply((TaskResultBlockId) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-1L));
      taskResultBlockId0.productIterator();
      assertEquals(1, taskResultBlockId0.productArity());
      assertEquals((-1L), taskResultBlockId0.taskId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskResultBlockId taskResultBlockId0 = TaskResultBlockId.apply((-1L));
      long long0 = taskResultBlockId0.copy$default$1();
      assertEquals((-1L), long0);
  }
}
