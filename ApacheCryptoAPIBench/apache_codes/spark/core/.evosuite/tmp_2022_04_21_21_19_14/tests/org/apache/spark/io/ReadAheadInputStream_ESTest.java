/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:45:13 GMT 2022
 */

package org.apache.spark.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.concurrent.RejectedExecutionException;
import org.apache.spark.io.ReadAheadInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReadAheadInputStream_ESTest extends ReadAheadInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 1084, 1);
      byte[] byteArray0 = new byte[0];
      readAheadInputStream0.read(byteArray0);
      readAheadInputStream0.available();
      readAheadInputStream0.available();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      try { 
        readAheadInputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      readAheadInputStream0.close();
      ReadAheadInputStream readAheadInputStream1 = new ReadAheadInputStream(sequenceInputStream0, 2019, 1437);
      readAheadInputStream1.read();
      readAheadInputStream1.read();
      readAheadInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(pipedInputStream0, 9, 1);
      try { 
        readAheadInputStream0.skip(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      readAheadInputStream0.close();
      ReadAheadInputStream readAheadInputStream1 = new ReadAheadInputStream(sequenceInputStream0, 1403, 255);
      // Undeclared exception!
      try { 
        readAheadInputStream0.read();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task org.apache.spark.io.ReadAheadInputStream$1@7 rejected from java.util.concurrent.ThreadPoolExecutor@2abcccec[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 1084, 1);
      readAheadInputStream0.available();
      readAheadInputStream0.skip(0L);
      // Undeclared exception!
      try { 
        readAheadInputStream0.skip(1505L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 2019, 1);
      byte byte0 = (byte)23;
      int int0 = 1;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(readAheadInputStream0);
      ReadAheadInputStream readAheadInputStream1 = new ReadAheadInputStream(pushbackInputStream0, 1640531527, 936);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 1084, 1);
      readAheadInputStream0.available();
      // Undeclared exception!
      try { 
        readAheadInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 2019, 1);
      byte byte0 = (byte)23;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      readAheadInputStream0.skip(1);
      ReadAheadInputStream readAheadInputStream1 = null;
      try {
        readAheadInputStream1 = new ReadAheadInputStream(readAheadInputStream0, (byte)0, 2019);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bufferSizeInBytes should be greater than 0, but the value is 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 1505, 24);
      readAheadInputStream0.skip(1505);
      readAheadInputStream0.available();
      // Undeclared exception!
      try { 
        readAheadInputStream0.read((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 2019, 1);
      byte byte0 = (byte)23;
      byte byte1 = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot mix IPv4 and IPv6: ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      mockFileInputStream0.read(byteArray0, 1, (-774));
      try { 
        readAheadInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 1084, 1);
      readAheadInputStream0.available();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readAheadInputStream0.read(byteArray0, 65535, (-72));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      readAheadInputStream0.close();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-100);
      // Undeclared exception!
      try { 
        readAheadInputStream0.read(byteArray0, (int) (byte)23, (-2249));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      int int0 = 255;
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 8);
      readAheadInputStream0.close();
      ReadAheadInputStream readAheadInputStream1 = null;
      try {
        readAheadInputStream1 = new ReadAheadInputStream(readAheadInputStream0, 8, (-854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is -854
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 404, (-920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is -920
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 3571;
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 3571, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream(byteArrayInputStream0, (byte)27, 961);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is 961
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      readAheadInputStream0.close();
      // Undeclared exception!
      try { 
        readAheadInputStream0.skip(255);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task org.apache.spark.io.ReadAheadInputStream$1@4 rejected from java.util.concurrent.ThreadPoolExecutor@1d23ee53[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(byteArrayInputStream0, 2778, 2187);
      readAheadInputStream0.read(byteArray0);
      readAheadInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 3240, 1535);
      readAheadInputStream0.skip((-2383L));
      ReadAheadInputStream readAheadInputStream1 = null;
      try {
        readAheadInputStream1 = new ReadAheadInputStream(mockFileInputStream0, 1535, 1535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is 1535
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      int int0 = 255;
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      readAheadInputStream0.close();
      mockFileInputStream0.close();
      readAheadInputStream0.close();
      // Undeclared exception!
      try { 
        readAheadInputStream0.skip(255);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task org.apache.spark.io.ReadAheadInputStream$1@4 rejected from java.util.concurrent.ThreadPoolExecutor@10dea097[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(pipedInputStream0, 9, 1);
      try { 
        readAheadInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 9, 1);
      // Undeclared exception!
      try { 
        readAheadInputStream0.skip(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      int int0 = 255;
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(sequenceInputStream0, 2019, 255);
      readAheadInputStream0.close();
      // Undeclared exception!
      try { 
        readAheadInputStream0.skip(255);
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task org.apache.spark.io.ReadAheadInputStream$1@4 rejected from java.util.concurrent.ThreadPoolExecutor@13869551[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 1084, 1);
      // Undeclared exception!
      try { 
        readAheadInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1710);
      int int0 = (-1340);
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream(bufferedInputStream0, (-1340), 1710);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bufferSizeInBytes should be greater than 0, but the value is -1340
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 31);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(pipedInputStream0, 31, 1);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        readAheadInputStream0.read(byteArray0, 31, 2252);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 2019, 1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      // Undeclared exception!
      try { 
        readAheadInputStream0.read(byteArray0, 2252, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(pipedInputStream0, 1084, 1);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        readAheadInputStream0.read(byteArray0, (-2363), 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      ReadAheadInputStream readAheadInputStream0 = new ReadAheadInputStream(pipedInputStream0, 1084, 1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-47);
      // Undeclared exception!
      try { 
        readAheadInputStream0.read(byteArray0, (-1992), (int) (byte)102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.io.ReadAheadInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("y!Gcn", "y!Gcn", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 3152, 3152);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is 3152
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, 1084, 1084);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadThresholdInBytes should be greater than 0 and less than bufferSizeInBytes, but the value is 1084
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream((InputStream) null, (-649), (-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bufferSizeInBytes should be greater than 0, but the value is -649
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      int int0 = 255;
      ReadAheadInputStream readAheadInputStream0 = null;
      try {
        readAheadInputStream0 = new ReadAheadInputStream(mockFileInputStream0, 0, 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bufferSizeInBytes should be greater than 0, but the value is 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
