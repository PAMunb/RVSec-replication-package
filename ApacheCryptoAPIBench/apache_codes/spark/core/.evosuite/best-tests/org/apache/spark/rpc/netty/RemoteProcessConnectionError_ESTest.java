/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:27:53 GMT 2022
 */

package org.apache.spark.rpc.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.rpc.RpcAddress;
import org.apache.spark.rpc.netty.RemoteProcessConnectionError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RemoteProcessConnectionError_ESTest extends RemoteProcessConnectionError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply(throwable0, (RpcAddress) null);
      RpcAddress rpcAddress0 = remoteProcessConnectionError0.remoteAddress();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply(throwable0, (RpcAddress) null);
      Object object0 = remoteProcessConnectionError0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError(throwable0, rpcAddress0);
      Throwable throwable1 = remoteProcessConnectionError0.copy$default$1();
      assertSame(throwable1, throwable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply((Throwable) null, rpcAddress0);
      Throwable throwable0 = remoteProcessConnectionError0.cause();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError(throwable0, rpcAddress0);
      boolean boolean0 = remoteProcessConnectionError0.canEqual(remoteProcessConnectionError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(throwable0).toString();
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError(throwable0, (RpcAddress) null);
      Object object0 = remoteProcessConnectionError0.productElement(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, rpcAddress0);
      remoteProcessConnectionError0.productIterator();
      assertEquals(2, remoteProcessConnectionError0.productArity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, rpcAddress0);
      int int0 = remoteProcessConnectionError0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(throwable0).toString();
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError(throwable0, (RpcAddress) null);
      Throwable throwable1 = remoteProcessConnectionError0.cause();
      assertSame(throwable1, throwable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, (RpcAddress) null);
      String string0 = remoteProcessConnectionError0.productPrefix();
      assertEquals("RemoteProcessConnectionError", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply((Throwable) null, (RpcAddress) null);
      boolean boolean0 = remoteProcessConnectionError0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, (RpcAddress) null);
      boolean boolean0 = remoteProcessConnectionError0.equals(remoteProcessConnectionError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply((Throwable) null, (RpcAddress) null);
      // Undeclared exception!
      try { 
        remoteProcessConnectionError0.productElement(2787);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.rpc.netty.RemoteProcessConnectionError", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, (RpcAddress) null);
      Option<Tuple2<Throwable, RpcAddress>> option0 = RemoteProcessConnectionError.unapply(remoteProcessConnectionError0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option<Tuple2<Throwable, RpcAddress>> option0 = RemoteProcessConnectionError.unapply((RemoteProcessConnectionError) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply((Throwable) null, (RpcAddress) null);
      remoteProcessConnectionError0.hashCode();
      assertEquals(2, remoteProcessConnectionError0.productArity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Function1<Throwable, Function1<RpcAddress, RemoteProcessConnectionError>> function1_0 = RemoteProcessConnectionError.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<Tuple2<Throwable, RpcAddress>, RemoteProcessConnectionError> function1_0 = RemoteProcessConnectionError.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply((Throwable) null, (RpcAddress) null);
      Throwable throwable0 = remoteProcessConnectionError0.copy$default$1();
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, (RpcAddress) null);
      boolean boolean0 = remoteProcessConnectionError0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, (RpcAddress) null);
      String string0 = remoteProcessConnectionError0.toString();
      assertEquals(2, remoteProcessConnectionError0.productArity());
      assertEquals("RemoteProcessConnectionError(null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = new RemoteProcessConnectionError((Throwable) null, (RpcAddress) null);
      RemoteProcessConnectionError remoteProcessConnectionError1 = remoteProcessConnectionError0.copy((Throwable) null, (RpcAddress) null);
      assertNotSame(remoteProcessConnectionError1, remoteProcessConnectionError0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RemoteProcessConnectionError remoteProcessConnectionError0 = RemoteProcessConnectionError.apply((Throwable) null, (RpcAddress) null);
      RpcAddress rpcAddress0 = remoteProcessConnectionError0.copy$default$2();
      assertNull(rpcAddress0);
  }
}
