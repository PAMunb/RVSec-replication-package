/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:53:21 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.TaskKilled;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskKilled_ESTest extends TaskKilled_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled((String) null);
      String string0 = taskKilled0.reason();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("");
      String string0 = taskKilled0.reason();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled((String) null);
      Object object0 = taskKilled0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled((String) null);
      String string0 = taskKilled0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled("");
      String string0 = taskKilled0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("&hx]65");
      boolean boolean0 = taskKilled0.canEqual(taskKilled0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("TaskKilled");
      Object object0 = taskKilled0.productElement(0);
      assertEquals("TaskKilled", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("V");
      String string0 = taskKilled0.reason();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("(");
      String string0 = taskKilled0.productPrefix();
      assertEquals("TaskKilled", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled((String) null);
      taskKilled0.productIterator();
      assertEquals(1, taskKilled0.productArity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled("scala.reflect.ClassManifestFactory$");
      int int0 = taskKilled0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled((String) null);
      TaskKilled taskKilled1 = new TaskKilled("1v`kIdH]i0)!'");
      boolean boolean0 = taskKilled0.equals(taskKilled1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply((String) null);
      TaskKilled taskKilled1 = taskKilled0.copy((String) null);
      boolean boolean0 = taskKilled1.equals(taskKilled0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply(")J/A[E<SHV^xz#e~{mG");
      TaskKilled taskKilled1 = TaskKilled.apply("-Z{bk");
      boolean boolean0 = taskKilled1.equals(taskKilled0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("");
      boolean boolean0 = taskKilled0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("org.apache.spark.TaskKilled");
      boolean boolean0 = taskKilled0.equals(taskKilled0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled("");
      // Undeclared exception!
      try { 
        taskKilled0.productElement((-2078));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.TaskKilled", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled("TaskKilled");
      Option<String> option0 = TaskKilled.unapply(taskKilled0);
      assertEquals("Some", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("V");
      String string0 = taskKilled0.copy$default$1();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled("&E[zj;y;{AI5]j?");
      String string0 = taskKilled0.toErrorString();
      assertEquals("TaskKilled (&E[zj;y;{AI5]j?)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<TaskKilled, TaskKilled> function1_0 = TaskKilled.compose((Function1<TaskKilled, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled("");
      boolean boolean0 = taskKilled0.countTowardsTaskFailures();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Function1<String, TaskKilled> function1_0 = TaskKilled.andThen((Function1<TaskKilled, TaskKilled>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("org.apache.spark.TaskKilled");
      TaskKilled taskKilled1 = taskKilled0.copy("org.apache.spark.TaskKilled");
      boolean boolean0 = taskKilled1.equals(taskKilled0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option<String> option0 = TaskKilled.unapply((TaskKilled) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply((String) null);
      taskKilled0.hashCode();
      assertEquals(1, taskKilled0.productArity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TaskKilled taskKilled0 = TaskKilled.apply("TaskKilled");
      boolean boolean0 = taskKilled0.canEqual("TaskKilled");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TaskKilled taskKilled0 = new TaskKilled(">rgapace.spark.TcskKilled");
      String string0 = taskKilled0.toString();
      assertEquals("TaskKilled(>rgapace.spark.TcskKilled)", string0);
  }
}
