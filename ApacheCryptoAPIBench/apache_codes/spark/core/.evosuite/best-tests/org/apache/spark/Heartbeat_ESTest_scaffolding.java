/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 21 22:21:42 GMT 2022
 */

package org.apache.spark;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class Heartbeat_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.spark.Heartbeat"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Heartbeat_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.spark.Heartbeat$",
      "scala.collection.Parallelizable",
      "scala.collection.immutable.Iterable",
      "scala.Serializable",
      "scala.reflect.ScalaSignature",
      "scala.Function1$class",
      "scala.collection.LinearSeqLike",
      "scala.collection.GenIterable",
      "scala.collection.LinearSeqOptimized",
      "org.apache.spark.Heartbeat",
      "scala.util.Left",
      "scala.Function3$$anonfun$tupled$1",
      "scala.collection.AbstractSeq",
      "scala.collection.immutable.Nil$",
      "scala.Some",
      "scala.Predef$$less$colon$less",
      "scala.MatchError",
      "scala.PartialFunction",
      "scala.collection.immutable.List",
      "scala.collection.Seq",
      "scala.collection.TraversableOnce",
      "scala.Tuple2",
      "scala.Function3$$anonfun$curried$1",
      "scala.Tuple3",
      "scala.collection.immutable.LinearSeq",
      "scala.collection.TraversableLike",
      "scala.collection.IterableLike",
      "scala.Option$WithFilter",
      "scala.runtime.AbstractFunction1",
      "scala.Product$class",
      "org.apache.spark.util.AccumulatorV2",
      "scala.runtime.AbstractFunction3",
      "scala.collection.immutable.Seq",
      "scala.collection.generic.FilterMonadic",
      "scala.collection.GenIterableLike",
      "scala.Equals",
      "scala.Function0",
      "scala.Function1",
      "scala.collection.generic.HasNewBuilder",
      "scala.collection.GenTraversableOnce",
      "scala.Function3",
      "scala.collection.GenTraversableLike",
      "scala.collection.AbstractTraversable",
      "scala.collection.generic.GenericTraversableTemplate",
      "scala.Product3",
      "scala.Function3$class",
      "scala.Immutable",
      "scala.Product2",
      "scala.collection.AbstractIterable",
      "scala.collection.GenTraversable",
      "scala.collection.GenSeq",
      "scala.util.Either",
      "scala.collection.Traversable",
      "scala.collection.immutable.$colon$colon",
      "org.apache.spark.storage.BlockManagerId",
      "scala.collection.immutable.Traversable",
      "scala.util.Right",
      "scala.runtime.Nothing$",
      "scala.collection.Iterator",
      "scala.collection.GenSeqLike",
      "scala.collection.Iterable",
      "scala.Option",
      "scala.None$",
      "scala.collection.SeqLike",
      "scala.collection.LinearSeq",
      "scala.Product"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Heartbeat_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.spark.Heartbeat",
      "scala.runtime.AbstractFunction3",
      "scala.Function3$class",
      "org.apache.spark.Heartbeat$",
      "scala.runtime.ScalaRunTime$",
      "scala.runtime.AbstractFunction1",
      "scala.Function3$$anonfun$curried$1",
      "scala.Function1$class",
      "scala.Option",
      "scala.Product$class",
      "scala.None$",
      "scala.Function3$$anonfun$tupled$1",
      "scala.Some",
      "scala.Tuple3"
    );
  }
}
