/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:21:11 GMT 2022
 */

package org.apache.spark.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Output;
import java.sql.SQLNonTransientConnectionException;
import org.apache.spark.serializer.JavaIterableWrapperSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function0;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaIterableWrapperSerializer_ESTest extends JavaIterableWrapperSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      // Undeclared exception!
      try { 
        javaIterableWrapperSerializer0.write((Kryo) null, (Output) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.serializer.JavaIterableWrapperSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_0);
      Function0<String> function0_1 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_1, throwable0);
      JavaIterableWrapperSerializer.logName();
      Function0<String> function0_2 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_2);
      JavaIterableWrapperSerializer.log();
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false);
      Function0<String> function0_3 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_3);
      Function0<String> function0_4 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_4, throwable1);
      JavaIterableWrapperSerializer.log();
      Function0<String> function0_5 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_5);
      Throwable throwable2 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError((Function0<String>) null, throwable2);
      Function0<String> function0_6 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_6);
      Throwable throwable3 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning((Function0<String>) null, throwable3);
      JavaIterableWrapperSerializer.log();
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
      JavaIterableWrapperSerializer.logDebug((Function0<String>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false);
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logInfo(function0_0, throwable0);
      Function0<String> function0_1 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_1, throwable1);
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
      JavaIterableWrapperSerializer.logName();
      Function0<String> function0_2 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable2 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_2, throwable2);
      Function0<String> function0_3 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_3);
      Function0<String> function0_4 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable3 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_4, throwable3);
      JavaIterableWrapperSerializer.isTraceEnabled();
      JavaIterableWrapperSerializer.wrapperClass();
      Function0<String> function0_5 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable4 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_5, throwable4);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false, true);
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.wrapperClass();
      Function0<String> function0_6 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_6);
      Function0<String> function0_7 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable5 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_7, throwable5);
      Function0<String> function0_8 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_8);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logError(function0_0, throwable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaIterableWrapperSerializer.log();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Kryo kryo0 = mock(Kryo.class, new ViolatedAssumptionAnswer());
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_0);
      boolean boolean0 = false;
      Function0<String> function0_1 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logInfo(function0_1);
      JavaIterableWrapperSerializer.log();
      javaIterableWrapperSerializer0.setAcceptsNull(false);
      Iterable<SQLNonTransientConnectionException> iterable0 = (Iterable<SQLNonTransientConnectionException>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaIterableWrapperSerializer0.copy((Kryo) null, iterable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Serializer does not support copy: org.apache.spark.serializer.JavaIterableWrapperSerializer
         //
         verifyException("com.esotericsoftware.kryo.Serializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.logInfo((Function0<String>) null);
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaIterableWrapperSerializer.logInfo((Function0<String>) null);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(true);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logInfo((Function0<String>) null, throwable0);
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
      JavaIterableWrapperSerializer.isTraceEnabled();
      JavaIterableWrapperSerializer.logInfo((Function0<String>) null);
      JavaIterableWrapperSerializer.logInfo((Function0<String>) null);
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning((Function0<String>) null, throwable1);
      JavaIterableWrapperSerializer.logName();
      Throwable throwable2 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning((Function0<String>) null, throwable2);
      JavaIterableWrapperSerializer.logWarning((Function0<String>) null);
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.initializeLogIfNecessary(true);
      Kryo kryo0 = mock(Kryo.class, new ViolatedAssumptionAnswer());
      Output output0 = mock(Output.class, new ViolatedAssumptionAnswer());
      Iterable<SQLNonTransientConnectionException> iterable0 = (Iterable<SQLNonTransientConnectionException>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      javaIterableWrapperSerializer0.write(kryo0, output0, iterable0);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(true, false);
      JavaIterableWrapperSerializer.logInfo((Function0<String>) null);
      JavaIterableWrapperSerializer.logTrace((Function0<String>) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_0, throwable0);
      Function0<String> function0_1 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logInfo(function0_0, throwable0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_0);
      JavaIterableWrapperSerializer.log();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Kryo kryo0 = mock(Kryo.class, new ViolatedAssumptionAnswer());
      Output output0 = mock(Output.class, new ViolatedAssumptionAnswer());
      Iterable<SQLNonTransientConnectionException> iterable0 = (Iterable<SQLNonTransientConnectionException>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      javaIterableWrapperSerializer0.write(kryo0, output0, iterable0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_0);
      Function0<String> function0_1 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logWarning(function0_1);
      JavaIterableWrapperSerializer.isTraceEnabled();
      Function0<String> function0_2 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_2);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false, true);
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Kryo kryo0 = mock(Kryo.class, new ViolatedAssumptionAnswer());
      Output output0 = mock(Output.class, new ViolatedAssumptionAnswer());
      Iterable<SQLNonTransientConnectionException> iterable0 = (Iterable<SQLNonTransientConnectionException>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      Function0<String> function0_3 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_3, throwable0);
      javaIterableWrapperSerializer0.write(kryo0, output0, iterable0);
      Kryo kryo1 = mock(Kryo.class, new ViolatedAssumptionAnswer());
      Iterable<SQLNonTransientConnectionException> iterable1 = (Iterable<SQLNonTransientConnectionException>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaIterableWrapperSerializer0.copy(kryo1, iterable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Serializer does not support copy: org.apache.spark.serializer.JavaIterableWrapperSerializer
         //
         verifyException("com.esotericsoftware.kryo.Serializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaIterableWrapperSerializer.wrapperClass();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_0, throwable0);
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false);
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaIterableWrapperSerializer.logName();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.logDebug((Function0<String>) null);
      JavaIterableWrapperSerializer.logName();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      JavaIterableWrapperSerializer.initializeLogIfNecessary(true, true);
      JavaIterableWrapperSerializer.wrapperClass();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaIterableWrapperSerializer.isTraceEnabled();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_0, throwable0);
      JavaIterableWrapperSerializer.initializeLogIfNecessary$default$2();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Function0<String> function0_0 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_0);
      JavaIterableWrapperSerializer.initializeLogIfNecessary(false, false);
      JavaIterableWrapperSerializer javaIterableWrapperSerializer0 = new JavaIterableWrapperSerializer();
      Function0<String> function0_1 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_1, throwable0);
      Function0<String> function0_2 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_2, throwable1);
      JavaIterableWrapperSerializer.logName();
      JavaIterableWrapperSerializer.logName();
      JavaIterableWrapperSerializer.wrapperClass();
      JavaIterableWrapperSerializer.initializeLogIfNecessary(true, false);
      Function0<String> function0_3 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logDebug(function0_3);
      Function0<String> function0_4 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable2 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_4, throwable2);
      Function0<String> function0_5 = (Function0<String>) mock(Function0.class, new ViolatedAssumptionAnswer());
      Throwable throwable3 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      JavaIterableWrapperSerializer.logTrace(function0_5, throwable3);
  }
}
