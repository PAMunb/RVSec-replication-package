/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:35:33 GMT 2022
 */

package org.apache.spark.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.CombineFileSplit;
import org.apache.spark.input.PortableDataStream;
import org.apache.spark.input.StreamRecordReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamRecordReader_ESTest extends StreamRecordReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CombineFileSplit combineFileSplit0 = mock(CombineFileSplit.class, new ViolatedAssumptionAnswer());
      TaskAttemptContext taskAttemptContext0 = mock(TaskAttemptContext.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      StreamRecordReader streamRecordReader0 = new StreamRecordReader(combineFileSplit0, taskAttemptContext0, integer0);
      assertEquals("", streamRecordReader0.getCurrentKey());
      assertEquals(0.0F, streamRecordReader0.getProgress(), 0.01F);
      assertNotNull(streamRecordReader0);
      
      PortableDataStream portableDataStream0 = mock(PortableDataStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(portableDataStream0).toString();
      PortableDataStream portableDataStream1 = streamRecordReader0.parseStream(portableDataStream0);
      assertEquals("", streamRecordReader0.getCurrentKey());
      assertEquals(0.0F, streamRecordReader0.getProgress(), 0.01F);
      assertSame(portableDataStream1, portableDataStream0);
      assertNotNull(portableDataStream1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CombineFileSplit combineFileSplit0 = mock(CombineFileSplit.class, new ViolatedAssumptionAnswer());
      TaskAttemptContext taskAttemptContext0 = mock(TaskAttemptContext.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      StreamRecordReader streamRecordReader0 = new StreamRecordReader(combineFileSplit0, taskAttemptContext0, integer0);
      assertEquals("", streamRecordReader0.getCurrentKey());
      assertEquals(0.0F, streamRecordReader0.getProgress(), 0.01F);
      assertNotNull(streamRecordReader0);
      
      PortableDataStream portableDataStream0 = streamRecordReader0.parseStream((PortableDataStream) null);
      assertEquals("", streamRecordReader0.getCurrentKey());
      assertEquals(0.0F, streamRecordReader0.getProgress(), 0.01F);
      assertNull(portableDataStream0);
  }
}
