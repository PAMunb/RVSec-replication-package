/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:04:19 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerLogStart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerLogStart_ESTest extends SparkListenerLogStart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("dE(,j");
      String string0 = sparkListenerLogStart0.sparkVersion();
      assertEquals("dE(,j", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      String string0 = sparkListenerLogStart0.sparkVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      Object object0 = sparkListenerLogStart0.productElement(0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("L5");
      SparkListenerLogStart sparkListenerLogStart1 = sparkListenerLogStart0.copy((String) null);
      String string0 = sparkListenerLogStart1.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      String string0 = sparkListenerLogStart0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("dE(,j");
      boolean boolean0 = sparkListenerLogStart0.canEqual(sparkListenerLogStart0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart((String) null);
      Object object0 = sparkListenerLogStart0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply((String) null);
      String string0 = sparkListenerLogStart0.sparkVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("false");
      sparkListenerLogStart0.productIterator();
      assertEquals(1, sparkListenerLogStart0.productArity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("TwCa3f=0Y");
      String string0 = sparkListenerLogStart0.productPrefix();
      assertEquals("SparkListenerLogStart", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("dE(,j");
      int int0 = sparkListenerLogStart0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      boolean boolean0 = sparkListenerLogStart0.canEqual("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("TwCa3f=0Y");
      Option<String> option0 = SparkListenerLogStart.unapply(sparkListenerLogStart0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("");
      SparkListenerLogStart sparkListenerLogStart1 = sparkListenerLogStart0.copy(">75Ok");
      boolean boolean0 = sparkListenerLogStart0.equals(sparkListenerLogStart1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart((String) null);
      SparkListenerLogStart sparkListenerLogStart1 = SparkListenerLogStart.apply((String) null);
      boolean boolean0 = sparkListenerLogStart0.equals(sparkListenerLogStart1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("org.apache.spark.scheduler.SparkListenerLogStart$");
      SparkListenerLogStart sparkListenerLogStart1 = new SparkListenerLogStart((String) null);
      boolean boolean0 = sparkListenerLogStart1.equals(sparkListenerLogStart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("OC#_");
      boolean boolean0 = sparkListenerLogStart0.equals("OC#_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      boolean boolean0 = sparkListenerLogStart0.equals(sparkListenerLogStart0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("");
      // Undeclared exception!
      try { 
        sparkListenerLogStart0.productElement(2495);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerLogStart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = SparkListenerLogStart.apply("empty.tail");
      sparkListenerLogStart0.hashCode();
      assertEquals(1, sparkListenerLogStart0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function1<SparkListenerLogStart, SparkListenerLogStart> function1_0 = SparkListenerLogStart.compose((Function1<SparkListenerLogStart, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      SparkListenerLogStart sparkListenerLogStart1 = sparkListenerLogStart0.copy("");
      boolean boolean0 = sparkListenerLogStart1.equals(sparkListenerLogStart0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("");
      String string0 = sparkListenerLogStart0.toString();
      assertEquals(1, sparkListenerLogStart0.productArity());
      assertEquals("SparkListenerLogStart()", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("scala.Predef$RichException$");
      String string0 = sparkListenerLogStart0.copy$default$1();
      assertEquals("scala.Predef$RichException$", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerLogStart sparkListenerLogStart0 = new SparkListenerLogStart("scala.util.hashing.MurmurHash3$ArrayHashing$mcI$sp");
      boolean boolean0 = sparkListenerLogStart0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option<String> option0 = SparkListenerLogStart.unapply((SparkListenerLogStart) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Function1<String, SparkListenerLogStart> function1_0 = SparkListenerLogStart.andThen((Function1<SparkListenerLogStart, SparkListenerLogStart>) null);
      assertNotNull(function1_0);
  }
}
