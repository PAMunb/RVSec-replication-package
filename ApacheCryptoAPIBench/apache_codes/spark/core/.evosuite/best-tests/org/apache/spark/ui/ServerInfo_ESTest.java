/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:59:05 GMT 2022
 */

package org.apache.spark.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.ui.ServerInfo;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.ContextHandlerCollection;
import org.eclipse.jetty.util.thread.ThreadPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple4;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ServerInfo_ESTest extends ServerInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn("version ", "3u#!CuV").when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn("Q3jC7", "bAgLu^'gA~").when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, (-1765), (Option<Object>) null, contextHandlerCollection0);
      serverInfo0.securePort();
      assertEquals((-1765), serverInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(option0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 0, option0, contextHandlerCollection0);
      Option<Object> option1 = serverInfo0.securePort();
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server1).toString();
      ContextHandlerCollection contextHandlerCollection1 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contextHandlerCollection1).toString();
      ServerInfo serverInfo1 = serverInfo0.copy(server1, 0, option1, contextHandlerCollection1);
      assertEquals(0, serverInfo0.boundPort());
      assertEquals(0, serverInfo1.boundPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 1122, (Option<Object>) null, (ContextHandlerCollection) null);
      ServerInfo serverInfo1 = serverInfo0.copy((Server) null, 1122, (Option<Object>) null, (ContextHandlerCollection) null);
      assertEquals(1122, serverInfo1.copy$default$2());
      assertEquals(1122, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(option0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 0, option0, contextHandlerCollection0);
      serverInfo0.copy$default$3();
      assertEquals(0, serverInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 99, (Option<Object>) null, (ContextHandlerCollection) null);
      int int0 = serverInfo0.copy$default$2();
      assertEquals(99, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      ServerInfo serverInfo0 = new ServerInfo(server0, (-634), (Option<Object>) null, contextHandlerCollection0);
      int int0 = serverInfo0.copy$default$2();
      assertEquals((-634), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ServerInfo serverInfo0 = new ServerInfo(server0, Integer.MAX_VALUE, (Option<Object>) null, (ContextHandlerCollection) null);
      boolean boolean0 = serverInfo0.canEqual(serverInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 0, (Option<Object>) null, contextHandlerCollection0);
      int int0 = serverInfo0.boundPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn("`hyw61a/IS0Y0C/`QC/", "`hyw61a/IS0Y0C/`QC/").when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn("`hyw61a/IS0Y0C/`QC/", "(RB{,[3>Q9X]G3").when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, (-3), (Option<Object>) null, contextHandlerCollection0);
      int int0 = serverInfo0.boundPort();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 114, (Option<Object>) null, (ContextHandlerCollection) null);
      // Undeclared exception!
      try { 
        serverInfo0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.ServerInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo((Server) null, (-1), (Option<Object>) null, (ContextHandlerCollection) null);
      // Undeclared exception!
      try { 
        serverInfo0.removeHandler((ContextHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.ServerInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 1483, (Option<Object>) null, (ContextHandlerCollection) null);
      // Undeclared exception!
      try { 
        serverInfo0.addHandler((ContextHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.ServerInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn("ServerInfo", "+!#.f?_", "\">", "ServerInfo").when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 1, (Option<Object>) null, contextHandlerCollection0);
      serverInfo0.productElement(3);
      assertEquals(1, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn("version ", "3u#!CuV").when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn("Q3jC7", "bAgLu^'gA~").when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, (-1765), (Option<Object>) null, contextHandlerCollection0);
      serverInfo0.productElement(2);
      assertEquals((-1765), serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 1, (Option<Object>) null, contextHandlerCollection0);
      Object object0 = serverInfo0.productElement(1);
      assertEquals(1, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 819, (Option<Object>) null, contextHandlerCollection0);
      serverInfo0.productElement(0);
      assertEquals(819, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ServerInfo serverInfo0 = new ServerInfo(server0, 127, (Option<Object>) null, (ContextHandlerCollection) null);
      ContextHandlerCollection contextHandlerCollection0 = serverInfo0.org$apache$spark$ui$ServerInfo$$rootHandler();
      assertNull(contextHandlerCollection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo((Server) null, (-1), (Option<Object>) null, (ContextHandlerCollection) null);
      Server server0 = serverInfo0.server();
      assertNull(server0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 1, (Option<Object>) null, (ContextHandlerCollection) null);
      serverInfo0.rootHandler$1();
      assertEquals(1, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ServerInfo serverInfo0 = new ServerInfo(server0, 127, (Option<Object>) null, (ContextHandlerCollection) null);
      serverInfo0.productIterator();
      assertEquals(4, serverInfo0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, (-2752), (Option<Object>) null, (ContextHandlerCollection) null);
      int int0 = serverInfo0.productArity();
      assertEquals(4, int0);
      assertEquals((-2752), serverInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 99, (Option<Object>) null, (ContextHandlerCollection) null);
      String string0 = serverInfo0.productPrefix();
      assertEquals("ServerInfo", string0);
      assertEquals(99, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 1, (Option<Object>) null, contextHandlerCollection0);
      int int0 = serverInfo0.boundPort();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreadPool threadPool0 = mock(ThreadPool.class, new ViolatedAssumptionAnswer());
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(threadPool0).when(server0).getThreadPool();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn("STOPPED", "STOPPED").when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, (-1028477387), (Option<Object>) null, contextHandlerCollection0);
      serverInfo0.stop();
      assertEquals((-1028477387), serverInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((ThreadPool) null).when(server0).getThreadPool();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 13, (Option<Object>) null, (ContextHandlerCollection) null);
      serverInfo0.stop();
      assertEquals(13, serverInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn("RUNNING").when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = new ServerInfo(server0, (-1765), (Option<Object>) null, contextHandlerCollection0);
      ContextHandler contextHandler0 = mock(ContextHandler.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(contextHandler0).isStarted();
      serverInfo0.removeHandler(contextHandler0);
      assertEquals("ServerInfo", serverInfo0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = new ServerInfo(server0, (-1765), (Option<Object>) null, contextHandlerCollection0);
      ContextHandler contextHandler0 = mock(ContextHandler.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(contextHandler0).isStarted();
      serverInfo0.removeHandler(contextHandler0);
      assertEquals(4, serverInfo0.productArity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = new ServerInfo(server0, (-1765), (Option<Object>) null, contextHandlerCollection0);
      ContextHandler contextHandler0 = mock(ContextHandler.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(contextHandler0).isStarted();
      serverInfo0.addHandler(contextHandler0);
      assertEquals(4, serverInfo0.productArity());
      assertEquals("ServerInfo", serverInfo0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 1483, (Option<Object>) null, (ContextHandlerCollection) null);
      ServerInfo.unapply(serverInfo0);
      assertEquals(1483, serverInfo0.copy$default$2());
      assertEquals(1483, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 114, (Option<Object>) null, (ContextHandlerCollection) null);
      boolean boolean0 = serverInfo0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(114, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, (-257), (Option<Object>) null, (ContextHandlerCollection) null);
      boolean boolean0 = serverInfo0.equals(serverInfo0);
      assertTrue(boolean0);
      assertEquals((-257), serverInfo0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 114, (Option<Object>) null, (ContextHandlerCollection) null);
      // Undeclared exception!
      try { 
        serverInfo0.productElement(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.ui.ServerInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, (-957), (Option<Object>) null, (ContextHandlerCollection) null);
      serverInfo0.copy$default$1();
      assertEquals((-957), serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo((Server) null, (-1), (Option<Object>) null, (ContextHandlerCollection) null);
      boolean boolean0 = serverInfo0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo((Server) null, (-3737), (Option<Object>) null, (ContextHandlerCollection) null);
      ServerInfo serverInfo1 = serverInfo0.copy((Server) null, (-3737), (Option<Object>) null, (ContextHandlerCollection) null);
      assertEquals((-3737), serverInfo1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 114, (Option<Object>) null, (ContextHandlerCollection) null);
      serverInfo0.hashCode();
      assertEquals(114, serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Function1<Server, Function1<Object, Function1<Option<Object>, Function1<ContextHandlerCollection, ServerInfo>>>> function1_0 = ServerInfo.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).toString();
      ContextHandlerCollection contextHandlerCollection0 = mock(ContextHandlerCollection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(contextHandlerCollection0).toString();
      ServerInfo serverInfo0 = ServerInfo.apply(server0, 0, (Option<Object>) null, contextHandlerCollection0);
      int int0 = serverInfo0.copy$default$2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, 1107, (Option<Object>) null, (ContextHandlerCollection) null);
      String string0 = serverInfo0.toString();
      assertEquals("ServerInfo(null,1107,null,null)", string0);
      assertEquals(4, serverInfo0.productArity());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option<Tuple4<Server, Object, Option<Object>, ContextHandlerCollection>> option0 = ServerInfo.unapply((ServerInfo) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo((Server) null, 39, (Option<Object>) null, (ContextHandlerCollection) null);
      Option<Object> option0 = serverInfo0.copy$default$3();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ServerInfo serverInfo0 = ServerInfo.apply((Server) null, (-2006), (Option<Object>) null, (ContextHandlerCollection) null);
      serverInfo0.copy$default$4();
      assertEquals((-2006), serverInfo0.boundPort());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Function1<Tuple4<Server, Object, Option<Object>, ContextHandlerCollection>, ServerInfo> function1_0 = ServerInfo.tupled();
      assertNotNull(function1_0);
  }
}
