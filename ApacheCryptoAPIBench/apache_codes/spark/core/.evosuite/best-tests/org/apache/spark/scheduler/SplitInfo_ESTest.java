/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:45:05 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.spark.scheduler.SplitInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SplitInfo_ESTest extends SplitInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-2484L), class0);
      SplitInfo splitInfo1 = new SplitInfo(class0, (String) null, (String) null, (-570L), (Object) null);
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertEquals((-570L), splitInfo1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-578L), (Object) null);
      Object object0 = splitInfo0.underlyingSplit();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "", "", 0L, class0);
      String string0 = splitInfo0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-578L), (Object) null);
      String string0 = splitInfo0.path();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "", "", 0L, "");
      String string0 = splitInfo0.path();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "", "", 0L, "");
      long long0 = splitInfo0.length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "", "", (-621L), class0);
      long long0 = splitInfo0.length();
      assertEquals((-621L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "~&!mP", "org.apache.hadoop.mapreduce.InputSplit", 1906L, (Object) null);
      Class<?> class1 = splitInfo0.inputFormatClazz();
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, 0L, class0);
      String string0 = splitInfo0.hostLocation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "~&!mP", "org.apache.hadoop.mapreduce.InputSplit", 1906L, (Object) null);
      String string0 = splitInfo0.hostLocation();
      assertEquals("~&!mP", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, 4125L, (Object) null);
      // Undeclared exception!
      try { 
        splitInfo0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.SplitInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "D9R_vLLK^cA;", "D9R_vLLK^cA;", 0L, class0);
      Class class1 = (Class)splitInfo0.underlyingSplit();
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "", "", (-1L), class0);
      String string0 = splitInfo0.hostLocation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SplitInfo splitInfo0 = new SplitInfo((Class<?>) null, (String) null, (String) null, (-592L), (Object) null);
      Class<?> class0 = splitInfo0.inputFormatClazz();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, 2147483647L, stringArray0[0]);
      long long0 = splitInfo0.length();
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "Unknown SQL data type: ", "OS(dIgEx+y,5hc", 0L, class0);
      String string0 = splitInfo0.path();
      assertEquals("OS(dIgEx+y,5hc", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "~&!mP", "org.apache.hadoop.mapreduce.InputSplit", 1906L, (Object) null);
      splitInfo0.hashCode();
      assertEquals(1906L, splitInfo0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-570L), (Object) null);
      SplitInfo splitInfo1 = new SplitInfo(class0, (String) null, (String) null, (-570L), splitInfo0);
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
      assertEquals((-570L), splitInfo1.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, "T", (-570L), (Object) null);
      SplitInfo splitInfo1 = new SplitInfo(class0, (String) null, "&/", (-570L), "T");
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-578L), (Object) null);
      SplitInfo splitInfo1 = new SplitInfo(class0, (String) null, "~AM^AEFkyZD*lErUR", 1742L, "~AM^AEFkyZD*lErUR");
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-578L), (Object) null);
      Class<SplitInfo> class1 = SplitInfo.class;
      SplitInfo splitInfo1 = new SplitInfo(class1, (String) null, "", (-578L), "");
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SplitInfo splitInfo0 = new SplitInfo((Class<?>) null, "", "", (-20L), (Object) null);
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo1 = new SplitInfo(class0, "", "@Cw.FiY", (-341L), class0);
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "=\"M}]UTU_", "=\"M}]UTU_", (-1936L), (Object) null);
      SplitInfo splitInfo1 = new SplitInfo(class0, (String) null, (String) null, (-1936L), "=\"M}]UTU_");
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-1L), (Object) null);
      SplitInfo splitInfo1 = new SplitInfo(class0, ", length : ", (String) null, (-1L), (Object) null);
      boolean boolean0 = splitInfo0.equals(splitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, "=\"M}]UTU_", "=\"M}]UTU_", (-1936L), (Object) null);
      boolean boolean0 = splitInfo0.equals(splitInfo0);
      assertEquals((-1936L), splitInfo0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-538L), (Object) null);
      boolean boolean0 = splitInfo0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[1];
      InputSplit inputSplit0 = mock(InputSplit.class, new ViolatedAssumptionAnswer());
      doReturn(2147483647L).when(inputSplit0).getLength();
      doReturn(stringArray0).when(inputSplit0).getLocations();
      Seq<SplitInfo> seq0 = SplitInfo.toSplitInfo(class0, (String) null, inputSplit0);
      assertNotNull(seq0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<SplitInfo> class0 = SplitInfo.class;
      String[] stringArray0 = new String[1];
      org.apache.hadoop.mapred.InputSplit inputSplit0 = mock(org.apache.hadoop.mapred.InputSplit.class, new ViolatedAssumptionAnswer());
      doReturn(130L).when(inputSplit0).getLength();
      doReturn(stringArray0).when(inputSplit0).getLocations();
      Seq<SplitInfo> seq0 = SplitInfo.toSplitInfo(class0, "O\"fF|\u0007@", inputSplit0);
      assertNotNull(seq0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      org.apache.hadoop.mapred.InputSplit inputSplit0 = mock(org.apache.hadoop.mapred.InputSplit.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(inputSplit0).getLength();
      doReturn((String[]) null).when(inputSplit0).getLocations();
      // Undeclared exception!
      try { 
        SplitInfo.toSplitInfo(class0, (String) null, inputSplit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("scala.collection.mutable.ArrayOps$ofRef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        SplitInfo.toSplitInfo(class0, "7EFUO,ru", (InputSplit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.SplitInfo$", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-1L), (Object) null);
      // Undeclared exception!
      try { 
        splitInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.SplitInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SplitInfo splitInfo0 = new SplitInfo((Class<?>) null, (String) null, (String) null, (-592L), (Object) null);
      boolean boolean0 = splitInfo0.equals(splitInfo0);
      assertEquals((-592L), splitInfo0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SplitInfo splitInfo0 = new SplitInfo(class0, (String) null, (String) null, (-570L), (Object) null);
      SplitInfo splitInfo1 = new SplitInfo(class0, (String) null, (String) null, 1742L, splitInfo0);
      boolean boolean0 = splitInfo1.equals(splitInfo0);
      assertEquals(1742L, splitInfo1.length());
      assertFalse(boolean0);
  }
}
