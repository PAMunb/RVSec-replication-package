/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:10:36 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.AccumulableInfo;
import org.apache.spark.scheduler.TaskInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Enumeration;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskInfo_ESTest extends TaskInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(754L, 1939, (-1727), (-1727), "", "g", enumeration_Value0, false);
      taskInfo0.markGettingResult((-1155L));
      boolean boolean0 = taskInfo0.gettingResult();
      assertEquals((-1155L), taskInfo0.gettingResultTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        taskInfo0.markFinished(enumeration_Value1, 0L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 1505, 20, 20, "RUNNING", "RUNNING", enumeration_Value0, false);
      long long0 = taskInfo0.timeRunning(20);
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals(0L, long0);
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 1505, 20, 20, "RUNNING", "RUNNING", enumeration_Value0, false);
      long long0 = taskInfo0.timeRunning((-1L));
      assertEquals((-21L), long0);
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(enumeration_Value0).toString();
      TaskInfo taskInfo0 = new TaskInfo(0L, 4489, 4489, 0L, "KuQZVk!c7}(p-PJ", "8|,hX,KwM_KDr!u", enumeration_Value0, false);
      taskInfo0.taskLocality();
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(803, 803, 803, 803, "scala.collection.convert.Wrappers$SeqWrapper", "scala.collection.convert.Wrappers$SeqWrapper", (Enumeration.Value) null, true);
      long long0 = taskInfo0.taskId();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals(803L, long0);
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      long long0 = taskInfo0.taskId();
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals((-4820L), long0);
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-914L), (-1), (-1), (-2134L), ",)", ",)", enumeration_Value0, true);
      taskInfo0.speculative();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-882L), 0, 1, 0L, (String) null, (String) null, enumeration_Value0, false);
      taskInfo0.launchTime();
      assertFalse(taskInfo0.killed());
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(3183L, (-378), (-285), 3183L, "", "", (Enumeration.Value) null, true);
      long long0 = taskInfo0.launchTime();
      assertFalse(taskInfo0.failed());
      assertEquals(3183L, long0);
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(1075L, 0, 350, 350, "kN0f H7S(^J)p{R);@", "F`OslMLL=rOF/H", (Enumeration.Value) null, false);
      int int0 = taskInfo0.index();
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals(0, int0);
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-914L), (-1), (-1), (-2134L), ",)", ",)", enumeration_Value0, true);
      int int0 = taskInfo0.index();
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals((-1), int0);
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      taskInfo0.host();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(1L, (-3885), (-3885), (-1L), "", "", (Enumeration.Value) null, true);
      taskInfo0.host();
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 1505, 20, 20, "RUNNING", "RUNNING", enumeration_Value0, false);
      assertEquals(0L, taskInfo0.gettingResultTime());
      
      taskInfo0.gettingResultTime_$eq(1L);
      long long0 = taskInfo0.gettingResultTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      taskInfo0.markGettingResult((-906L));
      long long0 = taskInfo0.gettingResultTime();
      assertEquals((-906L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0, 0, 2835, 0L, "", "GET RESULT", enumeration_Value0, false);
      assertEquals("RUNNING", taskInfo0.status());
      
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      taskInfo0.markFinished(enumeration_Value1, 1L);
      long long0 = taskInfo0.finishTime();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(754L, 1939, (-1727), (-1727), "", "g", enumeration_Value0, false);
      assertFalse(taskInfo0.failed());
      
      taskInfo0.failed_$eq(true);
      boolean boolean0 = taskInfo0.failed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, (-847), 0L, (String) null, "", enumeration_Value0, false);
      taskInfo0.executorId();
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo((-28), (-28), (-28), (-28), "n", "n", (Enumeration.Value) null, false);
      taskInfo0.executorId();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-914L), (-1), (-1), (-2134L), ",)", ",)", enumeration_Value0, true);
      assertEquals(0L, taskInfo0.finishTime());
      
      taskInfo0.finishTime_$eq((-1));
      long long0 = taskInfo0.duration();
      assertEquals(2133L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(4397, 2147483646, 2147483646, (-1L), "FAILED", "empty.maxBy", enumeration_Value1, false);
      taskInfo0.markFinished(enumeration_Value0, 9223372036854775807L);
      long long0 = taskInfo0.duration();
      assertEquals(9223372036854775807L, taskInfo0.finishTime());
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-1L), 2147099826, 2, (-1L), "", "", enumeration_Value0, false);
      int int0 = taskInfo0.attemptNumber();
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(1734L, (-2169), (-2169), (-2169), "scala.collection.generic.GenTraversableFactory", "scala.collection.generic.GenTraversableFactory", (Enumeration.Value) null, false);
      int int0 = taskInfo0.attemptNumber();
      assertFalse(taskInfo0.killed());
      assertEquals((-2169), int0);
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-914L), (-1), (-1), (-2134L), ",)", ",)", enumeration_Value0, true);
      assertEquals(0L, taskInfo0.finishTime());
      
      taskInfo0.finishTime_$eq((-1));
      boolean boolean0 = taskInfo0.running();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 4489, 4489, 0L, "KuQZVk!c7}(p-PJ", "8|,hX,KwM_KDr!u", enumeration_Value0, false);
      boolean boolean0 = taskInfo0.running();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(9223372036854775807L, (-2146378974), 0, 0, "8N;o=", "", enumeration_Value0, false);
      taskInfo0.finishTime_$eq(2386L);
      boolean boolean0 = taskInfo0.successful();
      assertEquals(2386L, taskInfo0.finishTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 0L, "Q4KXBn'Id", "Q4KXBn'Id", enumeration_Value0, false);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      taskInfo0.markFinished(enumeration_Value1, 16);
      taskInfo0.finished();
      assertEquals(16L, taskInfo0.finishTime());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-3401L), (-285), (-1), (-285), "", "", enumeration_Value0, true);
      boolean boolean0 = taskInfo0.finished();
      assertFalse(taskInfo0.killed());
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 16, "Q4KXBn'Id", "Q4KXBn'Id", enumeration_Value0, false);
      taskInfo0.gettingResultTime_$eq(16);
      boolean boolean0 = taskInfo0.gettingResult();
      assertEquals(16L, taskInfo0.gettingResultTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 0, 0, 9223372036854775807L, "Nn*1m@J=9IU&|;XC}", "Nn*1m@J=9IU&|;XC}", enumeration_Value0, true);
      boolean boolean0 = taskInfo0.gettingResult();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-631L), 1, 1, 1308L, "-Y}lDgPwP.w.", "_,i67N*Ud", enumeration_Value0, true);
      taskInfo0.finishTime_$eq((-631L));
      long long0 = taskInfo0.finishTime();
      assertEquals((-631L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(803, 803, 803, 803, "", "", (Enumeration.Value) null, true);
      boolean boolean0 = taskInfo0.killed();
      assertFalse(boolean0);
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(1L, (-3885), (-3885), (-1L), "", "", (Enumeration.Value) null, true);
      boolean boolean0 = taskInfo0.failed();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(1L, 2145835540, 2295, (-263L), "RUNNING", "hG`/<P,9ZN7(\"=$Sz5", enumeration_Value0, true);
      int int0 = taskInfo0.index();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertEquals(2145835540, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(587L, 0, 0, (-1979L), "", "Q4KXBn'Id", enumeration_Value0, true);
      int int0 = taskInfo0.attemptNumber();
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
      assertFalse(taskInfo0.failed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      long long0 = taskInfo0.finishTime();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      long long0 = taskInfo0.gettingResultTime();
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      long long0 = taskInfo0.launchTime();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
      assertEquals((-4820L), long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(28, 28, 28, 28, "", "", (Enumeration.Value) null, false);
      // Undeclared exception!
      try { 
        taskInfo0.duration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // duration() called on unfinished task
         //
         verifyException("org.apache.spark.scheduler.TaskInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(803, 2399, 803, 803, "", "", (Enumeration.Value) null, true);
      taskInfo0.markFinished((Enumeration.Value) null, 803);
      taskInfo0.killed_$eq(true);
      taskInfo0.status();
      assertEquals(803L, taskInfo0.finishTime());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(1730L, 531, 531, (-93L), "w0(", "w0(", enumeration_Value0, true);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      taskInfo0.markFinished(enumeration_Value1, 2759L);
      taskInfo0.failed_$eq(true);
      taskInfo0.status();
      assertEquals(2759L, taskInfo0.finishTime());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(803, 2399, 803, 803, "", "", (Enumeration.Value) null, true);
      taskInfo0.markFinished((Enumeration.Value) null, 803);
      taskInfo0.killed_$eq(true);
      boolean boolean0 = taskInfo0.successful();
      assertEquals("KILLED", taskInfo0.status());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(1730L, 531, 531, (-93L), "w0(", "w0(", enumeration_Value0, true);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      taskInfo0.markFinished(enumeration_Value1, 2759L);
      taskInfo0.failed_$eq(true);
      boolean boolean0 = taskInfo0.successful();
      assertEquals("FAILED", taskInfo0.status());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, (-577), 0, 0, "scala.collection.convert.Wrappers$JSetWrapper", "Q4KXBn'Id", enumeration_Value0, true);
      boolean boolean0 = taskInfo0.successful();
      assertFalse(taskInfo0.killed());
      assertFalse(taskInfo0.failed());
      assertEquals(0L, taskInfo0.gettingResultTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo(25, 25, 25, 25, "", "", (Enumeration.Value) null, true);
      taskInfo0.gettingResultTime_$eq(25);
      taskInfo0.status();
      assertEquals(25L, taskInfo0.gettingResultTime());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo((-11), (-11), (-11), (-11), "82#6l${@Q+^7<RbL", "82#6l${@Q+^7<RbL", (Enumeration.Value) null, true);
      // Undeclared exception!
      try { 
        taskInfo0.markFinished((Enumeration.Value) null, (-11));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // assertion failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, (-577), 0, 0, "scala.collection.convert.Wrappers$JSetWrapper", "Q4KXBn'Id", enumeration_Value0, true);
      assertFalse(taskInfo0.killed());
      
      taskInfo0.killed_$eq(true);
      boolean boolean0 = taskInfo0.killed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, (-577), 0, 0, "scala.collection.convert.Wrappers$JSetWrapper", "Q4KXBn'Id", enumeration_Value0, true);
      String string0 = taskInfo0.status();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", string0);
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(9223372036854775807L, (-2146216694), (-2146216694), (-2146216694), ".", (String) null, enumeration_Value0, true);
      taskInfo0.host();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 2L, "scala.collection.convert.Wrappers$JSetWrapper", "Array[", enumeration_Value0, true);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      taskInfo0.markFinished(enumeration_Value1, 2L);
      taskInfo0.status();
      assertEquals(2L, taskInfo0.finishTime());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 2L, "scala.collection.convert.Wrappers$JSetWrapper", "Array[", enumeration_Value0, true);
      taskInfo0.setAccumulables((Seq<AccumulableInfo>) null);
      taskInfo0.accumulables();
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 1048576, 1048576, 0L, "", "", enumeration_Value0, false);
      taskInfo0.speculative();
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo((-4820L), 112, 0, (-4820L), "", "{", enumeration_Value0, false);
      long long0 = taskInfo0.timeRunning(1718L);
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertEquals(6538L, long0);
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 2L, "scala.collection.convert.Wrappers$JSetWrapper", "Array[", enumeration_Value0, true);
      Enumeration.Value enumeration_Value1 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      taskInfo0.markFinished(enumeration_Value1, 2L);
      long long0 = taskInfo0.duration();
      assertEquals(2L, taskInfo0.finishTime());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 2L, "scala.collection.convert.Wrappers$JSetWrapper", "Array[", enumeration_Value0, true);
      String string0 = taskInfo0.id();
      assertEquals("16.16", string0);
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 2L, "scala.collection.convert.Wrappers$JSetWrapper", "Array[", enumeration_Value0, true);
      taskInfo0.accumulables();
      assertFalse(taskInfo0.killed());
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TaskInfo taskInfo0 = new TaskInfo((-285), (-378), (-285), (-285), "", "", (Enumeration.Value) null, true);
      taskInfo0.taskLocality();
      assertFalse(taskInfo0.killed());
      assertFalse(taskInfo0.failed());
      assertEquals("RUNNING", taskInfo0.status());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0L, 16, 16, 2L, "scala.collection.convert.Wrappers$JSetWrapper", "Array[", enumeration_Value0, true);
      taskInfo0.taskId();
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Enumeration.Value enumeration_Value0 = mock(Enumeration.Value.class, new ViolatedAssumptionAnswer());
      TaskInfo taskInfo0 = new TaskInfo(0, 0, 2835, 0L, "", "GET RESULT", enumeration_Value0, false);
      taskInfo0.executorId();
      assertEquals("RUNNING", taskInfo0.status());
      assertFalse(taskInfo0.failed());
      assertFalse(taskInfo0.killed());
  }
}
