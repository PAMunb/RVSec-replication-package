/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:21:57 GMT 2022
 */

package org.apache.spark.rpc.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.rpc.RpcAddress;
import org.apache.spark.rpc.netty.NettyRpcCallContext;
import org.apache.spark.rpc.netty.RpcMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RpcMessage_ESTest extends RpcMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply((RpcAddress) null, (Object) null, nettyRpcCallContext0);
      RpcAddress rpcAddress0 = rpcMessage0.senderAddress();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, (NettyRpcCallContext) null);
      NettyRpcCallContext nettyRpcCallContext0 = rpcMessage0.copy$default$3();
      assertNull(nettyRpcCallContext0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Function1<Tuple3<RpcAddress, Object, NettyRpcCallContext>, RpcMessage> function1_0 = RpcMessage.tupled();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RpcMessage rpcMessage0 = new RpcMessage(rpcAddress0, function1_0, (NettyRpcCallContext) null);
      Object object0 = rpcMessage0.copy$default$2();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, (NettyRpcCallContext) null);
      NettyRpcCallContext nettyRpcCallContext0 = rpcMessage0.context();
      assertNull(nettyRpcCallContext0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      Object object0 = rpcMessage0.content();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("u9A", "u9A").when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn("", "=9B|:+").when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      boolean boolean0 = rpcMessage0.canEqual(rpcMessage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      Object object0 = rpcMessage0.productElement(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RpcMessage rpcMessage0 = new RpcMessage(rpcAddress0, (Object) null, (NettyRpcCallContext) null);
      Object object0 = rpcMessage0.productElement(1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Function1<Tuple3<RpcAddress, Object, NettyRpcCallContext>, RpcMessage> function1_0 = RpcMessage.tupled();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RpcMessage rpcMessage0 = new RpcMessage(rpcAddress0, function1_0, (NettyRpcCallContext) null);
      Object object0 = rpcMessage0.productElement(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      int int0 = rpcMessage0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      rpcMessage0.productIterator();
      assertEquals(3, rpcMessage0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RpcMessage rpcMessage0 = new RpcMessage((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      boolean boolean0 = rpcMessage0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = new RpcMessage(rpcAddress0, (Object) null, nettyRpcCallContext0);
      NettyRpcCallContext nettyRpcCallContext1 = rpcMessage0.context();
      assertSame(nettyRpcCallContext1, nettyRpcCallContext0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      String string0 = rpcMessage0.productPrefix();
      assertEquals("RpcMessage", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn("Ie6+", "Ie6+", "Ie6+", "Ie6+", "Ie6+").when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply((RpcAddress) null, (Object) null, nettyRpcCallContext0);
      RpcMessage rpcMessage1 = rpcMessage0.copy((RpcAddress) null, nettyRpcCallContext0, nettyRpcCallContext0);
      boolean boolean0 = rpcMessage1.equals(rpcMessage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RpcMessage rpcMessage0 = new RpcMessage((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      boolean boolean0 = rpcMessage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      RpcMessage rpcMessage0 = new RpcMessage(rpcAddress0, (Object) null, nettyRpcCallContext0);
      boolean boolean0 = rpcMessage0.equals(rpcMessage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RpcMessage rpcMessage0 = new RpcMessage((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      // Undeclared exception!
      try { 
        rpcMessage0.productElement((-9));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.rpc.netty.RpcMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RpcMessage rpcMessage0 = new RpcMessage((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      Option<Tuple3<RpcAddress, Object, NettyRpcCallContext>> option0 = RpcMessage.unapply(rpcMessage0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn("6JY%*Ud'`d`", "6JY%*Ud'`d`", "6JY%*Ud'`d`", "6JY%*Ud'`d`", "6JY%*Ud'`d`").when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply((RpcAddress) null, (Object) null, nettyRpcCallContext0);
      RpcMessage rpcMessage1 = RpcMessage.apply((RpcAddress) null, (Object) null, nettyRpcCallContext0);
      boolean boolean0 = rpcMessage1.equals(rpcMessage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Tuple3<RpcAddress, Object, NettyRpcCallContext>> option0 = RpcMessage.unapply((RpcMessage) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RpcMessage rpcMessage0 = new RpcMessage((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      RpcAddress rpcAddress0 = rpcMessage0.copy$default$1();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Function1<RpcAddress, Function1<Object, Function1<NettyRpcCallContext, RpcMessage>>> function1_0 = RpcMessage.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      NettyRpcCallContext nettyRpcCallContext1 = rpcMessage0.copy$default$3();
      assertSame(nettyRpcCallContext1, nettyRpcCallContext0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function1<Tuple3<RpcAddress, Object, NettyRpcCallContext>, RpcMessage> function1_0 = RpcMessage.tupled();
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RpcMessage rpcMessage0 = new RpcMessage(rpcAddress0, function1_0, (NettyRpcCallContext) null);
      Object object0 = rpcMessage0.content();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      NettyRpcCallContext nettyRpcCallContext0 = mock(NettyRpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(nettyRpcCallContext0).toString();
      RpcMessage rpcMessage0 = RpcMessage.apply(rpcAddress0, (Object) null, nettyRpcCallContext0);
      Object object0 = rpcMessage0.copy$default$2();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RpcMessage rpcMessage0 = new RpcMessage((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      String string0 = rpcMessage0.toString();
      assertEquals("RpcMessage(null,null,null)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RpcMessage rpcMessage0 = RpcMessage.apply((RpcAddress) null, (Object) null, (NettyRpcCallContext) null);
      rpcMessage0.hashCode();
      assertEquals(3, rpcMessage0.productArity());
  }
}
