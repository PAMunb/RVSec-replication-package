/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:26:30 GMT 2022
 */

package org.apache.spark.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.memory.MemoryConsumer;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.memory.TaskMemoryManager;
import org.apache.spark.memory.TestMemoryConsumer;
import org.apache.spark.unsafe.array.LongArray;
import org.apache.spark.unsafe.memory.MemoryBlock;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MemoryConsumer_ESTest extends MemoryConsumer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(memoryBlock0).size();
      doReturn((Object) null).when(memoryBlock0).getBaseObject();
      doReturn(0L).when(memoryBlock0).getBaseOffset();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0, (MemoryBlock) null).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.allocateArray((-1));
      // Undeclared exception!
      testMemoryConsumer0.allocateArray(17179869176L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(memoryBlock0).size();
      doReturn((Object) null).when(memoryBlock0).getBaseObject();
      doReturn(0L).when(memoryBlock0).getBaseOffset();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(taskMemoryManager0).acquireExecutionMemory(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0, memoryMode0);
      testMemoryConsumer0.allocateArray((-2914L));
      testMemoryConsumer0.acquireMemory(17179869176L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(memoryBlock0).toString();
      doReturn(137438953408L, 137438953408L, 0L).when(memoryBlock0).size();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      MemoryBlock memoryBlock1 = testMemoryConsumer0.allocatePage(17179869176L);
      testMemoryConsumer0.freePage(memoryBlock1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0, memoryMode0);
      testMemoryConsumer0.spill();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(memoryBlock0).size();
      doReturn((Object) null).when(memoryBlock0).getBaseObject();
      doReturn(0L).when(memoryBlock0).getBaseOffset();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0, memoryMode0);
      LongArray longArray0 = testMemoryConsumer0.allocateArray(0L);
      testMemoryConsumer0.freeArray(longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.spill(17179869176L, (MemoryConsumer) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.free((-3));
      testMemoryConsumer0.spill((-368L), (MemoryConsumer) testMemoryConsumer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.freeMemory(17179869176L);
      testMemoryConsumer0.spill(17179869176L, (MemoryConsumer) testMemoryConsumer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.getUsed();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.used = 17179869176L;
      testMemoryConsumer0.getUsed();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-2004L)).when(taskMemoryManager0).acquireExecutionMemory(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.use(17179869176L);
      testMemoryConsumer0.getUsed();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(137438953408L, 137438953408L).when(memoryBlock0).size();
      doReturn("Task {} released {} from {} for {}").when(memoryBlock0).getBaseObject();
      doReturn(1442L).when(memoryBlock0).getBaseOffset();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.allocateArray(17179869176L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(8L).when(taskMemoryManager0).acquireExecutionMemory(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0, memoryMode0);
      testMemoryConsumer0.acquireMemory(1L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((-3235L)).when(taskMemoryManager0).acquireExecutionMemory(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryMode memoryMode0 = MemoryMode.ON_HEAP;
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0, memoryMode0);
      testMemoryConsumer0.acquireMemory(17179869176L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.spill(9223372036854775807L, (MemoryConsumer) testMemoryConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TestMemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.allocatePage((-2562L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.allocateArray(17179869176L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(memoryBlock0).size();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      // Undeclared exception!
      testMemoryConsumer0.allocateArray(17179869176L);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(memoryBlock0).size();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      MemoryMode memoryMode0 = MemoryMode.OFF_HEAP;
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0, memoryMode0);
      // Undeclared exception!
      testMemoryConsumer0.allocatePage(17179869176L);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MemoryBlock memoryBlock0 = mock(MemoryBlock.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(memoryBlock0).toString();
      doReturn(0L, 0L).when(memoryBlock0).size();
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn(memoryBlock0).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      testMemoryConsumer0.allocatePage(0L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaskMemoryManager taskMemoryManager0 = mock(TaskMemoryManager.class, new ViolatedAssumptionAnswer());
      doReturn((MemoryBlock) null).when(taskMemoryManager0).allocatePage(anyLong() , any(org.apache.spark.memory.MemoryConsumer.class));
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer(taskMemoryManager0);
      // Undeclared exception!
      testMemoryConsumer0.allocatePage(17179869176L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      testMemoryConsumer0.getMode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.freePage((MemoryBlock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.acquireMemory(1785L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.freeArray((LongArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.freeMemory(2227L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.MemoryConsumer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestMemoryConsumer testMemoryConsumer0 = new TestMemoryConsumer((TaskMemoryManager) null);
      // Undeclared exception!
      try { 
        testMemoryConsumer0.spill();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.memory.TestMemoryConsumer", e);
      }
  }
}
