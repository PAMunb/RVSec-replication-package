/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:46:40 GMT 2022
 */

package org.apache.spark.util.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.spark.util.collection.SortDataFormat;
import org.apache.spark.util.collection.TimSort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TimSort_ESTest extends TimSort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(120);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer((-7));
      Integer integer3 = new Integer(120);
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer4 = new Integer((-196));
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort0, 2532, 9, comparator0);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat2 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort2 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat2);
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(timSort0, 9, (-3975), comparator1);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort0, (-2130), (-5057), comparator2);
      TimSort<TimSort<Integer, Integer>, Integer> timSort3 = new TimSort<TimSort<Integer, Integer>, Integer>((SortDataFormat<TimSort<Integer, Integer>, Integer>) null);
      Comparator<TimSort<Integer, Integer>> comparator3 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort3.sort((Integer) null, (-196), (-196), comparator3);
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort((Integer) null, 2532, (-5057), comparator4);
      Comparator<Integer> comparator5 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort((Integer) null, 879413959, (-1034), comparator5);
      Comparator<TimSort<Integer, Integer>> comparator6 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timSort3.sort(integer1, 7, 9, comparator6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.collection.TimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(67);
      int int0 = 10;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 67, 10, comparator0);
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(10);
      Integer integer3 = new Integer(67);
      Integer integer4 = new Integer(10);
      Integer integer5 = new Integer(10);
      Integer integer6 = new Integer(321);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort0, (Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn(integer0, integer1, integer2, integer3, integer4).when(sortDataFormat1).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , anyInt());
      doReturn(integer5, integer6, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat1);
      int int1 = 7;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1222), (-1222), (-1222), 7, 10).when(comparator1).compare(anyInt() , anyInt());
      timSort1.sort(timSort0, 7, 67, comparator1);
      SortDataFormat<Integer, Integer> sortDataFormat2 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>(sortDataFormat2);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat3 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort2, (Object) null).when(sortDataFormat3).allocate(anyInt());
      doReturn(timSort2, timSort2, timSort2, timSort2, timSort2).when(sortDataFormat3).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn(timSort2, timSort2, (Object) null, (Object) null).when(sortDataFormat3).newKey();
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort3 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat3);
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1222), 1908, (-801), (-2130), (-2130)).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      // Undeclared exception!
      timSort3.sort(timSort0, (-2130), 67, comparator2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Integer integer1 = new Integer(1348);
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, (Object) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, integer0).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn(integer1, integer1, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer2 = new Integer((-196));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2745), 256, (-196), 256, (-35)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      timSort0.sort(integer2, 9, 119151, comparator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-4316));
      Integer integer1 = new Integer((-4316));
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(3190);
      Integer integer5 = new Integer(3190);
      Integer integer6 = new Integer((-1560));
      Integer integer7 = new Integer((-3842));
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer6).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer1, integer2, integer3, integer4, integer5).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn(integer5, integer5, integer5, integer3, (Integer) null).when(sortDataFormat0).newKey();
      Integer integer8 = new Integer(1560);
      Integer integer9 = new Integer(1560);
      Integer integer10 = new Integer(120);
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer11 = new Integer(2983);
      Integer integer12 = new Integer(9);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer3, 2541, (-4316), comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4316), 1, 2983, 120, 2522).when(comparator1).compare(anyInt() , anyInt());
      timSort0.sort(integer12, 9, 62, comparator1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(10);
      int int0 = (-1672);
      Integer integer1 = new Integer((-1672));
      int int1 = 120;
      Integer integer2 = new Integer(120);
      Integer integer3 = new Integer((-124));
      Integer integer4 = new Integer(120);
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Integer) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer1, integer1, integer1, (Integer) null, integer2).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn(integer2, integer0, (Integer) null, integer3, integer4).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      int int2 = (-196);
      Integer integer5 = new Integer((-196));
      int int3 = 9;
      int int4 = (-3049);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(9, 9, (-3049), 8, (-1143)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      timSort0.sort(integer5, 9, 119151, comparator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort0, (Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn(timSort0, timSort0, timSort0, timSort0, timSort0).when(sortDataFormat1).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn(timSort0, timSort0, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort1 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat1);
      SortDataFormat<Integer, Integer> sortDataFormat2 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>(sortDataFormat2);
      Integer integer0 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort2, 256, 64, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(integer0, 0, (-692), comparator1);
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-692), (-692), 588, (-1574), 0).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort1.sort(timSort2, 0, 256, comparator2);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat3 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort3 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat3);
      SortDataFormat<Integer, Integer> sortDataFormat4 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort4 = new TimSort<Integer, Integer>(sortDataFormat4);
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort3.sort(timSort4, 2153, (-1940), comparator3);
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort3.sort(timSort4, (-1940), (-2038), comparator4);
      Integer integer1 = new Integer((-2038));
      // Undeclared exception!
      try { 
        timSort2.sort(integer1, 0, 0, (Comparator<? super Integer>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort0, timSort0).when(sortDataFormat1).allocate(anyInt());
      doReturn(timSort0, timSort0, timSort0, timSort0, timSort0).when(sortDataFormat1).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn(timSort0, timSort0, timSort0, timSort0, timSort0).when(sortDataFormat1).newKey();
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort1 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat1);
      SortDataFormat<Integer, Integer> sortDataFormat2 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort0, 256, 64, comparator0);
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-692), (-692), 588, (-1574), 0).when(comparator1).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort1.sort(timSort0, 0, 256, comparator1);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat3 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort2 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat3);
      SortDataFormat<Integer, Integer> sortDataFormat4 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort3 = new TimSort<Integer, Integer>(sortDataFormat4);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(timSort3, (-1940), (-2038), comparator2);
      // Undeclared exception!
      try { 
        timSort0.sort(integer0, 0, 0, (Comparator<? super Integer>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer((-1678));
      int int0 = 120;
      Integer integer2 = new Integer(120);
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer1, integer1, integer1, (Integer) null, integer2).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn(integer2, integer0, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      int int1 = (-196);
      Integer integer3 = new Integer((-196));
      int int2 = 9;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(9, 9, (-3049), 8, (-1143)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      timSort0.sort(integer3, 9, 119151, comparator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer((-306));
      Integer integer1 = new Integer((-306));
      Integer integer2 = new Integer(10000);
      Integer integer3 = new Integer((-306));
      Integer integer4 = new Integer(1048576);
      Integer integer5 = new Integer((-306));
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort0, (Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn(integer0, integer1, integer2, integer2, integer3).when(sortDataFormat1).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , anyInt());
      doReturn(integer4, integer5, (Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat1);
      SortDataFormat<Integer, Integer> sortDataFormat2 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>(sortDataFormat2);
      int int0 = 1535;
      Integer integer6 = new Integer(1535);
      int int1 = 708;
      int int2 = (-5624);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-494), (-855), 3, 1535).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        timSort1.sort(timSort0, (-494), 0, comparator0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(125);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 125, 10, comparator0);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      timSort1.sort(timSort0, 7, 125, comparator1);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat2 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat2).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat2).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((Object) null, (Object) null).when(sortDataFormat2).newKey();
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort2 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat2);
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort2.sort(timSort0, (-2130), 125, comparator2);
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort0, 10, 7, comparator3);
      TimSort<TimSort<Integer, Integer>, Integer> timSort3 = new TimSort<TimSort<Integer, Integer>, Integer>((SortDataFormat<TimSort<Integer, Integer>, Integer>) null);
      Comparator<TimSort<Integer, Integer>> comparator4 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort3.sort((Integer) null, 287, 10, comparator4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(946);
      Integer integer1 = new Integer(365);
      Integer integer2 = new Integer(3599);
      Integer integer3 = new Integer(946);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort0, (Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn(integer0, integer1, integer2, integer3, integer0).when(sortDataFormat1).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , anyInt());
      doReturn(integer3, integer3, (Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat1);
      SortDataFormat<Integer, Integer> sortDataFormat2 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>(sortDataFormat2);
      int int0 = 1535;
      Integer integer4 = new Integer(1535);
      int int1 = 708;
      int int2 = (-5624);
      int int3 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1528), 708).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        timSort1.sort(timSort0, (-494), 0, comparator0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2114);
      Integer integer1 = new Integer(2114);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat0 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((TimSort<Integer, Integer>) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer0, integer0, integer0, integer0, integer0).when(sortDataFormat0).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , anyInt());
      doReturn(integer0, integer1, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, TimSort<Integer, Integer>> timSort0 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat0);
      TimSort<Integer, Integer> timSort1 = new TimSort<Integer, Integer>((SortDataFormat<Integer, Integer>) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2, 2097, (-3084), 2098).when(comparator1).compare(anyInt() , anyInt());
      Integer integer2 = new Integer(1829);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer2, 1829, 2, comparator2);
      timSort0.sort(timSort1, 2, 1829, comparator1);
      timSort0.sort(timSort1, 1829, 1829, comparator0);
      SortDataFormat<Integer, Integer> sortDataFormat1 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>(sortDataFormat1);
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(timSort2, 0, 0, comparator3);
      Integer integer3 = new Integer(1829);
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(integer3, 1829, 0, comparator4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Integer integer1 = new Integer(32);
      Integer integer2 = new Integer(2052320729);
      Integer integer3 = new Integer(120);
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer0, integer1, integer2, integer1, integer3).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn(integer1, integer3, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      int int0 = (-196);
      Integer integer4 = new Integer((-196));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-613), 119151, (-2289), 120, 2052320729).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      timSort0.sort(integer4, 9, 119151, comparator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(32);
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      Integer integer1 = new Integer(804);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(804, 32, 1940, (-5), 1940).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer1, 0, 804, comparator0);
      Integer integer2 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-5), 0, 32, 25, 0).when(comparator1).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer2, 0, 916, comparator1);
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort((Integer) null, 0, 1940, comparator2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Integer integer1 = new Integer((-1503));
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer0, integer1, integer0).when(sortDataFormat0).allocate(anyInt());
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      Integer integer2 = new Integer(804);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(804, 32, 1940, (-5), 1940).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer2, 0, 804, comparator0);
      Integer integer3 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-5), 0, 32, 25, 0).when(comparator1).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer3, 0, 32, comparator1);
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1426), (-1426), 804, 0, (-231)).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort((Integer) null, 0, 1940, comparator2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-4316));
      Integer integer1 = new Integer((-4316));
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(3190);
      Integer integer5 = new Integer(3190);
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, (Object) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer1, integer2, integer3, integer4, integer5).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn(integer5, integer5, integer5, integer3, (Object) null).when(sortDataFormat0).newKey();
      int int0 = 1560;
      Integer integer6 = new Integer(1560);
      Integer integer7 = new Integer(1560);
      Integer integer8 = new Integer(120);
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer9 = new Integer(2983);
      Integer integer10 = new Integer(9);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer3, 2541, (-4316), comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4316), 1, 2983, 120, 2522).when(comparator1).compare(anyInt() , anyInt());
      timSort0.sort(integer10, 9, 62, comparator1);
      Integer integer11 = new Integer(1560);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(anyInt() , anyInt());
      // Undeclared exception!
      timSort0.sort(integer10, (-282), 1073477809, comparator2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>((SortDataFormat<Integer, Integer>) null);
      Integer integer0 = new Integer(239);
      Integer integer1 = new Integer(239);
      Integer integer2 = new Integer((-1969));
      Integer integer3 = new Integer(512);
      Integer integer4 = new Integer((-1969));
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat0 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(timSort0, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn(integer0, integer1, integer2, integer3, integer2).when(sortDataFormat0).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , anyInt());
      doReturn(integer4, integer1, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat0);
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>((SortDataFormat<Integer, Integer>) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-691), (-1969), (-1969), (-1969), 1).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        timSort1.sort(timSort2, (-1560), (-691), comparator0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((TimSort<Integer, Integer>) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null).when(sortDataFormat0).getKey(any(org.apache.spark.util.collection.TimSort.class) , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort0 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat0);
      SortDataFormat<Integer, Integer> sortDataFormat1 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, Integer> timSort1 = new TimSort<Integer, Integer>(sortDataFormat1);
      Integer integer0 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(timSort1, 256, 64, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer0, 0, (-692), comparator1);
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(7, 0, 256, (-1269), (-692)).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(timSort1, 0, 256, comparator2);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat2 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort2 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat2);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat3 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort3 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat3);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat4 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort4 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat4);
      Comparator<TimSort<Integer, Integer>> comparator3 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort4.sort((TimSort<Integer, Integer>) null, 957, 20, comparator3);
      Comparator<TimSort<Integer, Integer>> comparator4 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer((-1386));
      Comparator<Integer> comparator5 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator5).compare(anyInt() , anyInt());
      timSort1.sort(integer1, (-5287), 910, comparator5);
      Comparator<Integer> comparator6 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer1, 256, (-641), comparator6);
      Comparator<Integer> comparator7 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator7).compare(anyInt() , anyInt());
      timSort1.sort(integer0, 40, 64, comparator7);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Integer integer1 = new Integer((-1503));
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, integer0).when(sortDataFormat0).allocate(anyInt());
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null, (TimSort<Integer, Integer>) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      Integer integer2 = new Integer(804);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(804, 32, 1940, (-5), 1940).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer2, 0, 804, comparator0);
      Integer integer3 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer1, 77, 105, comparator1);
      // Undeclared exception!
      try { 
        timSort0.sort(integer2, 1786, (-5), (Comparator<? super TimSort<Integer, Integer>>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      timSort0.sort((Integer) null, 17, 25, comparator0);
      Integer integer0 = new Integer(120);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 120, (-2370), comparator1);
      Integer integer1 = new Integer(120);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer1, 64, 3, comparator2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(1215);
      int int0 = (-319);
      int int1 = (-1);
      int int2 = 9;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      timSort0.sort(integer0, (-1), 9, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      timSort0.sort(integer0, (-319), 0, comparator1);
      Integer integer1 = new Integer((-319));
      int int3 = (-3175);
      Comparator<Integer> comparator2 = null;
      // Undeclared exception!
      try { 
        timSort0.sort(integer1, (-3175), (-3175), (Comparator<? super Integer>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 0, 0, comparator0);
      Integer integer1 = new Integer(0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(anyInt() , anyInt());
      timSort0.sort(integer0, 0, 256, comparator2);
      timSort0.sort(integer1, 0, (-1064), comparator1);
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(0);
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer2, 221, 221, comparator4);
      timSort0.sort(integer1, 0, 0, comparator3);
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort1 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat1);
      Comparator<TimSort<Integer, Integer>> comparator5 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort0, 221, (-1), comparator5);
      Comparator<TimSort<Integer, Integer>> comparator6 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(timSort0, (-443), (-772), comparator6);
      Comparator<Integer> comparator7 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 4, 0, comparator7);
      Comparator<Integer> comparator8 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 2433880, (-1), comparator8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(804);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer0, 0, 804, comparator0);
      Integer integer1 = new Integer(0);
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer1, 0, 916, comparator1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer((-3134));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      timSort0.sort(integer0, (-3134), (-1853), comparator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      assertNotNull(timSort0);
      
      int int0 = (-196);
      Integer integer0 = new Integer((-196));
      assertEquals((-196), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      timSort0.sort(integer0, 9, 119151, comparator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(4780);
      assertEquals(4780, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      assertNotNull(timSort0);
      
      Integer integer2 = new Integer((-1225));
      assertEquals((-1225), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(15);
      assertEquals(15, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer3, (-5), 1024, comparator0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(1940);
      assertEquals(1940, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer1, (-1225), (-1225), comparator1);
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      // Undeclared exception!
      timSort0.sort(integer2, (-231), 1565550863, comparator2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      assertNotNull(timSort0);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = (-3167);
      int int2 = 879413959;
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      // Undeclared exception!
      timSort0.sort(integer0, (-3167), 879413959, comparator0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>((SortDataFormat<Integer, Integer>) null);
      assertNotNull(timSort0);
      
      Integer integer0 = new Integer(1912);
      assertEquals(1912, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timSort0.sort(integer0, 1912, 5158, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.collection.TimSort$SortState", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(10);
      assertEquals(10, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , any(org.apache.spark.util.collection.TimSort.class));
      doReturn((Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      assertNotNull(timSort0);
      
      Integer integer2 = new Integer(2351);
      assertEquals(2351, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.spark.util.collection.TimSort.class) , any(org.apache.spark.util.collection.TimSort.class));
      timSort0.sort(integer0, 1940, 2351, comparator0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      
      Integer integer3 = new Integer(6);
      assertEquals(6, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Comparator<TimSort<Integer, Integer>> comparator1 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 804, (-5), comparator1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      
      Integer integer4 = new Integer(2351);
      assertEquals(2351, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Comparator<TimSort<Integer, Integer>> comparator2 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer4, 492, (-750), comparator2);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>((SortDataFormat<TimSort<Integer, Integer>, Integer>) null);
      assertNotNull(timSort0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        timSort0.sort(integer0, 0, 40, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.collection.TimSort$SortState", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>> timSort0 = new TimSort<TimSort<Integer, Integer>, TimSort<Integer, Integer>>(sortDataFormat0);
      assertNotNull(timSort0);
      
      SortDataFormat<Integer, Integer> sortDataFormat1 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, Integer> timSort1 = new TimSort<Integer, Integer>(sortDataFormat1);
      assertNotNull(timSort1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(timSort1, 256, 64, comparator0);
      SortDataFormat<Integer, Integer> sortDataFormat2 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat2).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat2).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat2).newKey();
      TimSort<Integer, Integer> timSort2 = new TimSort<Integer, Integer>(sortDataFormat2);
      assertFalse(timSort2.equals((Object)timSort1));
      assertNotNull(timSort2);
      
      Integer integer1 = new Integer((-692));
      assertEquals((-692), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(8);
      assertEquals(8, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      timSort2.sort(integer2, (-619), 1805, comparator1);
      assertFalse(timSort2.equals((Object)timSort1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotSame(timSort2, timSort1);
      
      Integer integer3 = new Integer(2770);
      assertEquals(2770, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator2).compare(anyInt() , anyInt());
      timSort1.sort(integer3, 8, 64, comparator2);
      assertFalse(timSort1.equals((Object)timSort2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotSame(timSort1, timSort2);
      
      Integer integer4 = new Integer(256);
      assertEquals(256, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer2, 2770, 0, comparator3);
      assertFalse(timSort1.equals((Object)timSort2));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertNotSame(timSort1, timSort2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat0).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat0).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat0).newKey();
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      assertNotNull(timSort0);
      
      Integer integer0 = new Integer(1542);
      assertEquals(1542, (int)integer0);
      assertNotNull(integer0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      timSort0.sort(integer0, 0, 1542, comparator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      SortDataFormat<Integer, Integer> sortDataFormat1 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(sortDataFormat1).allocate(anyInt());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(sortDataFormat1).getKey(anyInt() , anyInt() , anyInt());
      doReturn((Object) null, (Object) null).when(sortDataFormat1).newKey();
      TimSort<Integer, Integer> timSort1 = new TimSort<Integer, Integer>(sortDataFormat1);
      Integer integer0 = new Integer((-1));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer0, 0, (-1), comparator0);
      Integer integer1 = new Integer(512);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      timSort1.sort(integer1, (-2021), 0, comparator1);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer0, 0, (-1), comparator2);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat2 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort2 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat2);
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(timSort1, 0, (-116), comparator3);
      Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer1, 512, 0, comparator4);
      Comparator<Integer> comparator5 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(timSort1, 512, (-1), comparator5);
      Comparator<Integer> comparator6 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort2.sort(timSort1, 0, (-2021), comparator6);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SortDataFormat<Integer, Integer> sortDataFormat0 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort0 = new TimSort<Integer, Integer>(sortDataFormat0);
      Integer integer0 = new Integer(2971);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort(integer0, 2971, 2971, comparator0);
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat1 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort1 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat1);
      int int0 = (-2246);
      // Undeclared exception!
      try { 
        timSort1.sort(timSort0, (-2246), 2971, (Comparator<? super Integer>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SortDataFormat<TimSort<Integer, Integer>, Integer> sortDataFormat0 = (SortDataFormat<TimSort<Integer, Integer>, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<TimSort<Integer, Integer>, Integer> timSort0 = new TimSort<TimSort<Integer, Integer>, Integer>(sortDataFormat0);
      Comparator<TimSort<Integer, Integer>> comparator0 = (Comparator<TimSort<Integer, Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort0.sort((Integer) null, 201, 201, comparator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SortDataFormat<Integer, TimSort<Integer, Integer>> sortDataFormat0 = (SortDataFormat<Integer, TimSort<Integer, Integer>>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, TimSort<Integer, Integer>> timSort0 = new TimSort<Integer, TimSort<Integer, Integer>>(sortDataFormat0);
      SortDataFormat<Integer, Integer> sortDataFormat1 = (SortDataFormat<Integer, Integer>) mock(SortDataFormat.class, new ViolatedAssumptionAnswer());
      TimSort<Integer, Integer> timSort1 = new TimSort<Integer, Integer>(sortDataFormat1);
      Integer integer0 = new Integer(50);
      int int0 = 64;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer0, 64, 50, comparator0);
      int int1 = (-2523);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      timSort1.sort(integer0, 60, 0, comparator1);
      // Undeclared exception!
      try { 
        timSort0.sort(timSort1, (-2523), (-2523), (Comparator<? super Integer>) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
