/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:31:37 GMT 2022
 */

package org.apache.spark.storage.memory;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.memory.MemoryMode;
import org.apache.spark.storage.memory.DeserializedMemoryEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple3;
import scala.reflect.ClassTag;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializedMemoryEntry_ESTest extends DeserializedMemoryEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, (-4176L), classTag0);
      ClassTag<Object> classTag1 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = new DeserializedMemoryEntry<Object>((Object) null, 0L, classTag1);
      boolean boolean0 = deserializedMemoryEntry0.equals(deserializedMemoryEntry1);
      assertFalse(boolean0);
      assertFalse(deserializedMemoryEntry1.equals((Object)deserializedMemoryEntry0));
      assertEquals((-4176L), deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("(Gthg&9 uSS`", "mk|2IE%V0=^", "}dP|kC u+)", (String) null, "").when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 250L, classTag0);
      ClassTag<DeserializedMemoryEntry<Object>> classTag1 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<DeserializedMemoryEntry<Object>> deserializedMemoryEntry1 = new DeserializedMemoryEntry<DeserializedMemoryEntry<Object>>(deserializedMemoryEntry0, 1212L, classTag1);
      DeserializedMemoryEntry deserializedMemoryEntry2 = (DeserializedMemoryEntry)deserializedMemoryEntry1.value();
      assertEquals(250L, deserializedMemoryEntry2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-918L), (ClassTag<Object>) null);
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = deserializedMemoryEntry0.copy((Object) deserializedMemoryEntry0, 0L, (ClassTag<Object>) null);
      deserializedMemoryEntry1.size();
      assertEquals((-918L), deserializedMemoryEntry0.size());
      assertEquals((-918L), deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassTag<Tuple3<Object, Object, Object>> classTag0 = (ClassTag<Tuple3<Object, Object, Object>>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      DeserializedMemoryEntry<Tuple3<Object, Object, Object>> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Tuple3<Object, Object, Object>>((Object) null, 3, classTag0);
      long long0 = deserializedMemoryEntry0.size();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("", ">a", (String) null, (String) null, (String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, (-1816L), classTag0);
      ClassTag<Tuple3<Object, Object, Object>> classTag1 = (ClassTag<Tuple3<Object, Object, Object>>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(classTag1).toString();
      DeserializedMemoryEntry<Tuple3<Object, Object, Object>> deserializedMemoryEntry1 = DeserializedMemoryEntry.apply((Object) null, (-4176L), classTag1);
      ClassTag<Tuple3<Object, Object, Object>> classTag2 = deserializedMemoryEntry1.copy$default$3();
      ClassTag<DeserializedMemoryEntry<Object>> classTag3 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<DeserializedMemoryEntry<Object>> deserializedMemoryEntry2 = new DeserializedMemoryEntry<DeserializedMemoryEntry<Object>>(classTag2, (-4176L), classTag3);
      DeserializedMemoryEntry<DeserializedMemoryEntry<Object>> deserializedMemoryEntry3 = deserializedMemoryEntry2.copy((Object) classTag3, (long) 0, classTag3);
      deserializedMemoryEntry3.copy$default$2();
      assertEquals((-4176L), deserializedMemoryEntry1.copy$default$2());
      assertEquals((-1816L), deserializedMemoryEntry0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, 0L, classTag0);
      ClassTag<Tuple3<Object, Object, Object>> classTag1 = (ClassTag<Tuple3<Object, Object, Object>>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(classTag1).toString();
      DeserializedMemoryEntry<Tuple3<Object, Object, Object>> deserializedMemoryEntry1 = new DeserializedMemoryEntry<Tuple3<Object, Object, Object>>((Object) null, (-879L), classTag1);
      ClassTag<DeserializedMemoryEntry<Object>> classTag2 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<DeserializedMemoryEntry<Object>> deserializedMemoryEntry2 = DeserializedMemoryEntry.apply((Object) deserializedMemoryEntry1, (long) 1, classTag2);
      long long0 = deserializedMemoryEntry2.copy$default$2();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) "", (-1L), (ClassTag<Object>) null);
      deserializedMemoryEntry0.copy$default$1();
      assertEquals((-1L), deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn("F+i7^tHzD]8++N?R/aI", "F+i7^tHzD]8++N?R/aI", "").when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, 0L, classTag0);
      ClassTag<DeserializedMemoryEntry<Object>> classTag1 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<DeserializedMemoryEntry<Object>> deserializedMemoryEntry1 = new DeserializedMemoryEntry<DeserializedMemoryEntry<Object>>("", 0L, classTag1);
      ClassTag<DeserializedMemoryEntry<Object>> classTag2 = deserializedMemoryEntry1.classTag();
      assertSame(classTag1, classTag2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, 0L, classTag0);
      boolean boolean0 = deserializedMemoryEntry0.canEqual(deserializedMemoryEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, (-3859L), classTag0);
      ClassTag<DeserializedMemoryEntry<Object>> classTag1 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<DeserializedMemoryEntry<Object>> deserializedMemoryEntry1 = new DeserializedMemoryEntry<DeserializedMemoryEntry<Object>>((Object) null, 1330L, classTag1);
      deserializedMemoryEntry1.productElement(2);
      assertEquals((-3859L), deserializedMemoryEntry0.size());
      assertEquals((-3859L), deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, (-49L), (ClassTag<Object>) null);
      deserializedMemoryEntry0.productElement(0);
      assertEquals((-49L), deserializedMemoryEntry0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassTag<Tuple3<Object, Object, Object>> classTag0 = (ClassTag<Tuple3<Object, Object, Object>>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      DeserializedMemoryEntry<Tuple3<Object, Object, Object>> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Tuple3<Object, Object, Object>>((Object) null, (-879L), classTag0);
      Object object0 = deserializedMemoryEntry0.productElement(1);
      assertEquals((-879L), object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 1L, (ClassTag<Object>) null);
      int int0 = deserializedMemoryEntry0.productArity();
      assertEquals(1L, deserializedMemoryEntry0.copy$default$2());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 1L, (ClassTag<Object>) null);
      deserializedMemoryEntry0.productIterator();
      assertEquals(3, deserializedMemoryEntry0.productArity());
      assertEquals(1L, deserializedMemoryEntry0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 22L, (ClassTag<Object>) null);
      deserializedMemoryEntry0.value();
      assertEquals(22L, deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-918L), (ClassTag<Object>) null);
      long long0 = deserializedMemoryEntry0.size();
      assertEquals((-918L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 1203L, (ClassTag<Object>) null);
      String string0 = deserializedMemoryEntry0.productPrefix();
      assertEquals(1203L, deserializedMemoryEntry0.size());
      assertEquals("DeserializedMemoryEntry", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 1L, (ClassTag<Object>) null);
      deserializedMemoryEntry0.classTag();
      assertEquals(1L, deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, 2298L, classTag0);
      ClassTag<Object> classTag1 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(classTag1).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = deserializedMemoryEntry0.copy((Object) null, 2298L, classTag1);
      boolean boolean0 = deserializedMemoryEntry0.equals(deserializedMemoryEntry1);
      assertEquals(2298L, deserializedMemoryEntry1.copy$default$2());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-754L), (ClassTag<Object>) null);
      ClassTag<Tuple3<Object, Object, Object>> classTag0 = (ClassTag<Tuple3<Object, Object, Object>>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Tuple3<Object, Object, Object>> deserializedMemoryEntry1 = new DeserializedMemoryEntry<Tuple3<Object, Object, Object>>((Object) null, (-754L), classTag0);
      boolean boolean0 = deserializedMemoryEntry0.equals(deserializedMemoryEntry1);
      assertFalse(boolean0);
      assertEquals((-754L), deserializedMemoryEntry1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(classTag0).toString();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, (-998L), classTag0);
      ClassTag<Object> classTag1 = deserializedMemoryEntry0.copy$default$3();
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = DeserializedMemoryEntry.apply((Object) null, (-998L), classTag1);
      boolean boolean0 = deserializedMemoryEntry1.equals(deserializedMemoryEntry0);
      assertTrue(boolean0);
      assertEquals((-998L), deserializedMemoryEntry1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, 2211L, (ClassTag<Object>) null);
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = new DeserializedMemoryEntry<Object>((Object) null, (-1L), (ClassTag<Object>) null);
      boolean boolean0 = deserializedMemoryEntry0.equals(deserializedMemoryEntry1);
      assertFalse(deserializedMemoryEntry1.equals((Object)deserializedMemoryEntry0));
      assertFalse(boolean0);
      assertEquals((-1L), deserializedMemoryEntry1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, 2291L, (ClassTag<Object>) null);
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = new DeserializedMemoryEntry<Object>(deserializedMemoryEntry0, 2291L, (ClassTag<Object>) null);
      boolean boolean0 = deserializedMemoryEntry1.equals(deserializedMemoryEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-754L), (ClassTag<Object>) null);
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = new DeserializedMemoryEntry<Object>((Object) null, (-754L), (ClassTag<Object>) null);
      boolean boolean0 = deserializedMemoryEntry1.equals(deserializedMemoryEntry0);
      assertTrue(boolean0);
      assertEquals((-754L), deserializedMemoryEntry1.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-737L), (ClassTag<Object>) null);
      boolean boolean0 = deserializedMemoryEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 22L, (ClassTag<Object>) null);
      boolean boolean0 = deserializedMemoryEntry0.equals(deserializedMemoryEntry0);
      assertTrue(boolean0);
      assertEquals(22L, deserializedMemoryEntry0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 1L, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        deserializedMemoryEntry0.productElement((-908));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.storage.memory.DeserializedMemoryEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 0L, (ClassTag<Object>) null);
      Option<Tuple3<Object, Object, ClassTag<Object>>> option0 = DeserializedMemoryEntry.unapply(deserializedMemoryEntry0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-1973L), (ClassTag<Object>) null);
      boolean boolean0 = deserializedMemoryEntry0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, (-49L), (ClassTag<Object>) null);
      long long0 = deserializedMemoryEntry0.copy$default$2();
      assertEquals((-49L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option<Tuple3<Object, Object, ClassTag<Object>>> option0 = DeserializedMemoryEntry.unapply((DeserializedMemoryEntry<Object>) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-754L), (ClassTag<Object>) null);
      ClassTag<DeserializedMemoryEntry<Object>> classTag0 = deserializedMemoryEntry0.copy$default$3();
      assertNull(classTag0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-349L), (ClassTag<Object>) null);
      DeserializedMemoryEntry<Object> deserializedMemoryEntry1 = deserializedMemoryEntry0.copy((Object) null, (-349L), (ClassTag<Object>) null);
      assertEquals((-349L), deserializedMemoryEntry1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-754L), (ClassTag<Object>) null);
      MemoryMode memoryMode0 = deserializedMemoryEntry0.memoryMode();
      assertEquals(MemoryMode.ON_HEAP, memoryMode0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 2211L, (ClassTag<Object>) null);
      deserializedMemoryEntry0.copy$default$1();
      assertEquals(2211L, deserializedMemoryEntry0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = new DeserializedMemoryEntry<Object>((Object) null, (-754L), (ClassTag<Object>) null);
      deserializedMemoryEntry0.hashCode();
      assertEquals((-754L), deserializedMemoryEntry0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeserializedMemoryEntry<Object> deserializedMemoryEntry0 = DeserializedMemoryEntry.apply((Object) null, 1L, (ClassTag<Object>) null);
      String string0 = deserializedMemoryEntry0.toString();
      assertEquals("DeserializedMemoryEntry(null,1,null)", string0);
      assertEquals(3, deserializedMemoryEntry0.productArity());
  }
}
