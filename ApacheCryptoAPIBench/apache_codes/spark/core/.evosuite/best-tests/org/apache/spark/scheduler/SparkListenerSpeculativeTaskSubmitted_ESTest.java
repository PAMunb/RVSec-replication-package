/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:17:32 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerSpeculativeTaskSubmitted_ESTest extends SparkListenerSpeculativeTaskSubmitted_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(15);
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted1 = sparkListenerSpeculativeTaskSubmitted0.copy((-1668));
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.equals(sparkListenerSpeculativeTaskSubmitted1);
      assertFalse(sparkListenerSpeculativeTaskSubmitted1.equals((Object)sparkListenerSpeculativeTaskSubmitted0));
      assertFalse(boolean0);
      assertEquals((-1668), sparkListenerSpeculativeTaskSubmitted1.stageId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(0);
      int int0 = sparkListenerSpeculativeTaskSubmitted0.stageId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply((-1796));
      int int0 = sparkListenerSpeculativeTaskSubmitted0.stageId();
      assertEquals((-1796), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(0);
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted1 = sparkListenerSpeculativeTaskSubmitted0.copy(0);
      assertEquals(0, sparkListenerSpeculativeTaskSubmitted1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(0);
      int int0 = sparkListenerSpeculativeTaskSubmitted0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(2);
      int int0 = sparkListenerSpeculativeTaskSubmitted0.copy$default$1();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(4143);
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(4113);
      Object object0 = sparkListenerSpeculativeTaskSubmitted0.productElement(0);
      assertEquals(4113, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(2609);
      sparkListenerSpeculativeTaskSubmitted0.productIterator();
      assertEquals(1, sparkListenerSpeculativeTaskSubmitted0.productArity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply((-2580));
      String string0 = sparkListenerSpeculativeTaskSubmitted0.productPrefix();
      assertEquals("SparkListenerSpeculativeTaskSubmitted", string0);
      assertEquals((-2580), sparkListenerSpeculativeTaskSubmitted0.stageId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted((-7));
      int int0 = sparkListenerSpeculativeTaskSubmitted0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(0);
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.canEqual(sparkListenerSpeculativeTaskSubmitted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(1223);
      int int0 = sparkListenerSpeculativeTaskSubmitted0.stageId();
      assertEquals(1223, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply((-1842));
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted1 = new SparkListenerSpeculativeTaskSubmitted(248);
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.equals(sparkListenerSpeculativeTaskSubmitted1);
      assertFalse(sparkListenerSpeculativeTaskSubmitted1.equals((Object)sparkListenerSpeculativeTaskSubmitted0));
      assertFalse(boolean0);
      assertEquals((-1842), sparkListenerSpeculativeTaskSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(2609);
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.equals((Object) null);
      assertEquals(2609, sparkListenerSpeculativeTaskSubmitted0.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(2609);
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.equals(sparkListenerSpeculativeTaskSubmitted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(2609);
      // Undeclared exception!
      try { 
        sparkListenerSpeculativeTaskSubmitted0.productElement(2609);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(2);
      SparkListenerSpeculativeTaskSubmitted.unapply(sparkListenerSpeculativeTaskSubmitted0);
      assertEquals(2, sparkListenerSpeculativeTaskSubmitted0.stageId());
      assertEquals(2, sparkListenerSpeculativeTaskSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(2672);
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted1 = sparkListenerSpeculativeTaskSubmitted0.copy(2672);
      assertEquals(2672, sparkListenerSpeculativeTaskSubmitted1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(0);
      sparkListenerSpeculativeTaskSubmitted0.hashCode();
      assertEquals(0, sparkListenerSpeculativeTaskSubmitted0.stageId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted((-2224));
      int int0 = sparkListenerSpeculativeTaskSubmitted0.copy$default$1();
      assertEquals((-2224), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = SparkListenerSpeculativeTaskSubmitted.apply(24);
      sparkListenerSpeculativeTaskSubmitted0.logEvent();
      assertEquals(24, sparkListenerSpeculativeTaskSubmitted0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(2609);
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted1 = SparkListenerSpeculativeTaskSubmitted.apply(2609);
      boolean boolean0 = sparkListenerSpeculativeTaskSubmitted0.equals(sparkListenerSpeculativeTaskSubmitted1);
      assertTrue(boolean0);
      assertEquals(2609, sparkListenerSpeculativeTaskSubmitted0.stageId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Function1<SparkListenerSpeculativeTaskSubmitted, SparkListenerSpeculativeTaskSubmitted> function1_0 = SparkListenerSpeculativeTaskSubmitted.compose((Function1<SparkListenerSpeculativeTaskSubmitted, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerSpeculativeTaskSubmitted sparkListenerSpeculativeTaskSubmitted0 = new SparkListenerSpeculativeTaskSubmitted(37);
      String string0 = sparkListenerSpeculativeTaskSubmitted0.toString();
      assertEquals("SparkListenerSpeculativeTaskSubmitted(37)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function1<Object, SparkListenerSpeculativeTaskSubmitted> function1_0 = SparkListenerSpeculativeTaskSubmitted.andThen((Function1<SparkListenerSpeculativeTaskSubmitted, SparkListenerSpeculativeTaskSubmitted>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option<Object> option0 = SparkListenerSpeculativeTaskSubmitted.unapply((SparkListenerSpeculativeTaskSubmitted) null);
      assertNotNull(option0);
  }
}
