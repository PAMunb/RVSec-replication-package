/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:21:33 GMT 2022
 */

package org.apache.spark.rdd;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Array;
import org.apache.spark.rdd.CoGroupPartition;
import org.apache.spark.rdd.NarrowCoGroupSplitDep;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoGroupPartition_ESTest extends CoGroupPartition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CoGroupPartition coGroupPartition0 = new CoGroupPartition((-3578), (Option<NarrowCoGroupSplitDep>[]) null);
      Option<NarrowCoGroupSplitDep>[] optionArray0 = coGroupPartition0.narrowDeps();
      assertNull(optionArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 4);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition((-2277), optionArray0);
      Option<NarrowCoGroupSplitDep>[] optionArray1 = coGroupPartition0.narrowDeps();
      assertEquals(4, optionArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 0);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition(0, optionArray0);
      int int0 = coGroupPartition0.index();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CoGroupPartition coGroupPartition0 = new CoGroupPartition((-3578), (Option<NarrowCoGroupSplitDep>[]) null);
      int int0 = coGroupPartition0.index();
      assertEquals((-3578), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 0);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition((-1752), optionArray0);
      boolean boolean0 = coGroupPartition0.equals(coGroupPartition0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 0);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition(399, optionArray0);
      int int0 = coGroupPartition0.index();
      assertEquals(399, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 0);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition(399, optionArray0);
      boolean boolean0 = coGroupPartition0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 0);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition(399, optionArray0);
      Option<NarrowCoGroupSplitDep>[] optionArray1 = coGroupPartition0.narrowDeps();
      assertSame(optionArray0, optionArray1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Option<NarrowCoGroupSplitDep>[] optionArray0 = (Option<NarrowCoGroupSplitDep>[]) Array.newInstance(Option.class, 0);
      CoGroupPartition coGroupPartition0 = new CoGroupPartition(0, optionArray0);
      coGroupPartition0.hashCode();
      assertEquals(0, coGroupPartition0.index());
  }
}
