/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:51:08 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.AccumulableInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple7;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccumulableInfo_ESTest extends AccumulableInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(3L, "5/Hq^sx(UN/q;", "5/Hq^sx(UN/q;");
      Option<Object> option0 = accumulableInfo0.value();
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy(3L, (Option<String>) null, (Option<Object>) null, option0, true, true, (Option<String>) null);
      assertEquals(3L, accumulableInfo0.id());
      assertTrue(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.copy$default$6());
      assertEquals(3L, accumulableInfo1.id());
      assertFalse(accumulableInfo0.internal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1560L, "scala.colRection.imutable.$colon$olon", "v%iI P2g-!q(d");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(1560L, (Option<String>) null, (Option<Object>) null, option0, false, true, (Option<String>) null);
      assertEquals(1560L, accumulableInfo0.copy$default$1());
      assertTrue(accumulableInfo1.countFailedValues());
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.internal$1());
      assertEquals(1560L, accumulableInfo1.id());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1571L, "scala.colRection.mutable.$colon$olon", (Option<String>) null, "scala.colRection.mutable.$colon$olon");
      Option<String> option0 = accumulableInfo0.name();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(1571L, option0, (Option<Object>) null, (Option<Object>) null, false, false, (Option<String>) null);
      assertEquals(1571L, accumulableInfo1.id());
      assertFalse(accumulableInfo0.countFailedValues());
      assertEquals(1571L, accumulableInfo0.id());
      assertFalse(accumulableInfo1.copy$default$5());
      assertFalse(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1154L), "scala.collection.TraversableOnce$$anonfun$addString$1", ";D3/,I1%A");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy((-810L), (Option<String>) null, option0, option0, true, false, (Option<String>) null);
      boolean boolean0 = accumulableInfo0.equals(accumulableInfo1);
      assertFalse(boolean0);
      assertEquals((-1154L), accumulableInfo0.id());
      assertTrue(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.internal$1());
      assertEquals((-810L), accumulableInfo1.copy$default$1());
      assertFalse(accumulableInfo1.copy$default$6());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = new AccumulableInfo((-1243L), (Option<String>) null, (Option<Object>) null, (Option<Object>) null, true, true, (Option<String>) null);
      Option<Object> option0 = accumulableInfo0.value();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-2975L), "", "");
      accumulableInfo0.update();
      assertEquals((-2975L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = new AccumulableInfo((-1243L), (Option<String>) null, (Option<Object>) null, (Option<Object>) null, true, true, (Option<String>) null);
      Option<String> option0 = accumulableInfo0.name();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = new AccumulableInfo((-1243L), (Option<String>) null, (Option<Object>) null, (Option<Object>) null, true, true, (Option<String>) null);
      Option<String> option0 = accumulableInfo0.metadata();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "org.apache.spark.scheduler.AccumulableInfo", (Option<String>) null, "", true);
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo((-494L), (Option<String>) null, option0, option0, true, true, (Option<String>) null);
      accumulableInfo1.metadata$1();
      assertFalse(accumulableInfo0.countFailedValues());
      assertTrue(accumulableInfo0.internal());
      assertTrue(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "org.apache.spark.scheduler.AccumulableInfo", (Option<String>) null, "", true);
      boolean boolean0 = accumulableInfo0.internal();
      assertTrue(boolean0);
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1L, "", "");
      Option<String> option0 = accumulableInfo0.copy$default$2();
      Option<Object> option1 = accumulableInfo0.value();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(1L, option0, option1, option1, true, false, option0);
      boolean boolean0 = accumulableInfo1.internal$1();
      assertEquals(1L, accumulableInfo0.id());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertEquals(1L, accumulableInfo1.id());
      assertTrue(boolean0);
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo1.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1154L), "scala.collection.TraversableOnce$$anonfun$addString$1", ";D3/,I1%A");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(3479L, (Option<String>) null, option0, option0, true, true, (Option<String>) null);
      long long0 = accumulableInfo1.id();
      assertEquals((-1154L), accumulableInfo0.id());
      assertEquals(3479L, long0);
      assertFalse(accumulableInfo0.copy$default$5());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertTrue(accumulableInfo1.internal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-810L), "n6>?@!>r*p/>OYf}", "n6>?@!>r*p/>OYf}");
      long long0 = accumulableInfo0.id();
      assertEquals((-810L), long0);
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", (Option<String>) null, "");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo((-1L), (Option<String>) null, option0, option0, false, true, (Option<String>) null);
      accumulableInfo1.countFailedValues();
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", (Option<String>) null, "");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo((-1L), (Option<String>) null, option0, option0, false, true, (Option<String>) null);
      accumulableInfo1.countFailedValues$1();
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "empty.head", (Option<String>) null, "empty.head");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy(0L, (Option<String>) null, option0, option0, false, false, (Option<String>) null);
      assertFalse(accumulableInfo0.countFailedValues());
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "org.apache.spark.scheduler.AccumulableInfo", (Option<String>) null, "", true);
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo((-494L), (Option<String>) null, option0, option0, true, true, (Option<String>) null);
      accumulableInfo1.copy$default$7();
      assertTrue(accumulableInfo0.copy$default$5());
      assertFalse(accumulableInfo0.countFailedValues());
      assertTrue(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", (Option<String>) null, "");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo((-1L), (Option<String>) null, option0, option0, false, true, (Option<String>) null);
      accumulableInfo1.copy$default$6();
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertFalse(accumulableInfo0.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1154L), "scala.collection.TraversableOnce$$anonfun$addString$1", ";D3/,I1%A");
      Option<Object> option0 = accumulableInfo0.copy$default$4();
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy((-810L), (Option<String>) null, option0, option0, true, false, (Option<String>) null);
      boolean boolean0 = accumulableInfo1.copy$default$5();
      assertEquals((-810L), accumulableInfo1.id());
      assertTrue(boolean0);
      assertEquals((-1154L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertFalse(accumulableInfo1.copy$default$6());
      assertFalse(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(372L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy((-1138L), (Option<String>) null, (Option<Object>) null, (Option<Object>) null, false, false, (Option<String>) null);
      accumulableInfo1.copy$default$4();
      assertFalse(accumulableInfo1.copy$default$5());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertEquals(372L, accumulableInfo0.copy$default$1());
      assertFalse(accumulableInfo0.internal$1());
      assertEquals((-1138L), accumulableInfo1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1571L, "scala.colRection.mutable.$colon$olon", (Option<String>) null, "scala.colRection.mutable.$colon$olon");
      accumulableInfo0.copy$default$3();
      assertFalse(accumulableInfo0.internal$1());
      assertEquals(1571L, accumulableInfo0.copy$default$1());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(88L, "k ~RwNqq&('Z{?^+^9T", "k ~RwNqq&('Z{?^+^9T");
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy((-2586L), (Option<String>) null, (Option<Object>) null, (Option<Object>) null, false, true, (Option<String>) null);
      accumulableInfo1.copy$default$2();
      assertEquals(88L, accumulableInfo0.id());
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.internal());
      assertTrue(accumulableInfo1.copy$default$6());
      assertFalse(accumulableInfo0.copy$default$6());
      assertEquals((-2586L), accumulableInfo1.id());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "#fwI>HR},m", "gnkO*'");
      accumulableInfo0.copy$default$1();
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-2975L), "", "");
      long long0 = accumulableInfo0.copy$default$1();
      assertEquals((-2975L), long0);
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1L), "J5jt", "K9q@h9{2k1");
      Option<String> option0 = accumulableInfo0.copy$default$2();
      Option<Object> option1 = accumulableInfo0.value();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(0L, option0, option1, option1, false, true, option0);
      assertFalse(accumulableInfo1.internal());
      assertTrue(accumulableInfo1.countFailedValues$1());
      assertEquals((-1L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", "");
      Option<String> option0 = accumulableInfo0.name();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(0L, "JR", option0, "JR", false);
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo1.countFailedValues$1());
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1L, "", "");
      Object object0 = accumulableInfo0.productElement(5);
      assertFalse(accumulableInfo0.internal$1());
      assertEquals(1L, accumulableInfo0.copy$default$1());
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(394L, "", (Option<String>) null, "");
      accumulableInfo0.productElement(2);
      assertFalse(accumulableInfo0.copy$default$6());
      assertEquals(394L, accumulableInfo0.id());
      assertFalse(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-111L), "org.apache.spark.scheduler.AccumulableInfo$", ":<SoIJt}a_1Z5@");
      Object object0 = accumulableInfo0.productElement(0);
      assertFalse(accumulableInfo0.internal());
      assertEquals((-111L), object0);
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", (Option<String>) null, "");
      accumulableInfo0.productElement(3);
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1226L), "org.apache.spark.scheduler.AccumulableInfo$", "");
      Object object0 = accumulableInfo0.productElement(4);
      assertEquals(false, object0);
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertEquals((-1226L), accumulableInfo0.id());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-6L), "", "");
      accumulableInfo0.productElement(6);
      assertEquals((-6L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1569L, "adS|?]Y9'aaj{<'", (Option<String>) null, "adS|?]Y9'aaj{<'");
      accumulableInfo0.update();
      assertFalse(accumulableInfo0.copy$default$5());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertEquals(1569L, accumulableInfo0.id());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1L), "J5jt", "K9q@h9{2k1");
      int int0 = accumulableInfo0.productArity();
      assertEquals(7, int0);
      assertEquals((-1L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "HO#Ld", "k<Z&G )-");
      boolean boolean0 = accumulableInfo0.countFailedValues();
      assertFalse(boolean0);
      assertFalse(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1L), "J5jt", "K9q@h9{2k1");
      accumulableInfo0.canEqual(accumulableInfo0);
      assertEquals((-1L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "tiS>eEiL", "tiS>eEiL");
      accumulableInfo0.productIterator();
      assertEquals(7, accumulableInfo0.productArity());
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", "");
      boolean boolean0 = accumulableInfo0.internal();
      assertFalse(boolean0);
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "HO#Ld", "k<Z&G )-");
      accumulableInfo0.id();
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1389L, "", "");
      boolean boolean0 = accumulableInfo0.internal$1();
      assertEquals(1389L, accumulableInfo0.copy$default$1());
      assertFalse(boolean0);
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", (Option<String>) null, "");
      boolean boolean0 = accumulableInfo0.countFailedValues$1();
      assertFalse(accumulableInfo0.copy$default$5());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, "", "");
      String string0 = accumulableInfo0.productPrefix();
      assertEquals("AccumulableInfo", string0);
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertFalse(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-945L), "XI5]/`166x903^-", "?9=YsRox");
      accumulableInfo0.metadata$1();
      assertFalse(accumulableInfo0.internal$1());
      assertEquals((-945L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1L), "J5jt", "K9q@h9{2k1");
      accumulableInfo0.metadata();
      assertEquals((-1L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-749L), "scala.olRection.mutable.$coloX~olon", (Option<String>) null, "scala.olRection.mutable.$coloX~olon");
      Option<Object> option0 = accumulableInfo0.value();
      Option<String> option1 = accumulableInfo0.copy$default$2();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo(1L, (Option<String>) null, option0, option0, false, false, (Option<String>) null);
      AccumulableInfo accumulableInfo2 = accumulableInfo1.copy(1L, (Option<String>) null, option0, option0, false, false, option1);
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo2);
      assertFalse(accumulableInfo2.copy$default$5());
      assertEquals((-749L), accumulableInfo0.id());
      assertFalse(boolean0);
      assertEquals(1L, accumulableInfo2.copy$default$1());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(32L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(32L, "org.apache.spark.scheduler.AccumulableInfo$", (String) null);
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo0);
      assertFalse(boolean0);
      assertFalse(accumulableInfo1.internal());
      assertEquals(32L, accumulableInfo1.copy$default$1());
      assertFalse(accumulableInfo1.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(3L, "5/Hq^sx(UN/q;", "5/Hq^sx(UN/q;");
      Option<Object> option0 = accumulableInfo0.value();
      Option<String> option1 = accumulableInfo0.copy$default$2();
      AccumulableInfo accumulableInfo1 = new AccumulableInfo(3L, (Option<String>) null, option0, option0, false, false, option1);
      AccumulableInfo accumulableInfo2 = new AccumulableInfo(3L, (Option<String>) null, option0, (Option<Object>) null, true, true, option1);
      boolean boolean0 = accumulableInfo2.equals(accumulableInfo1);
      assertEquals(3L, accumulableInfo0.id());
      assertFalse(boolean0);
      assertFalse(accumulableInfo0.copy$default$6());
      assertFalse(accumulableInfo0.internal());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1560L, (Option<String>) null, (Option<Object>) null, (Option<Object>) null, false, false, (Option<String>) null);
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy(1560L, (Option<String>) null, (Option<Object>) null, (Option<Object>) null, false, false, (Option<String>) null);
      boolean boolean0 = accumulableInfo0.equals(accumulableInfo1);
      assertTrue(boolean0);
      assertEquals(1560L, accumulableInfo0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(33L, "", "");
      Option<String> option0 = accumulableInfo0.copy$default$2();
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(33L, "", option0, "");
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo0);
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(boolean0);
      assertEquals(33L, accumulableInfo0.copy$default$1());
      assertEquals(33L, accumulableInfo1.id());
      assertFalse(accumulableInfo1.copy$default$6());
      assertFalse(accumulableInfo1.internal());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1300L, ">Ss(}-<oeqWmP", (Option<String>) null, ">Ss(}-<oeqWmP", true);
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(1300L, ">Ss(}-<oeqWmP", (Option<String>) null, ">Ss(}-<oeqWmP", false);
      boolean boolean0 = accumulableInfo0.equals(accumulableInfo1);
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(boolean0);
      assertEquals(1300L, accumulableInfo1.id());
      assertFalse(accumulableInfo1.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(32L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(32L, "org.apache.spark.scheduler.AccumulableInfo$", (Option<String>) null, "org.apache.spark.scheduler.AccumulableInfo$");
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo0);
      assertFalse(accumulableInfo0.countFailedValues());
      assertFalse(boolean0);
      assertEquals(32L, accumulableInfo1.copy$default$1());
      assertFalse(accumulableInfo1.copy$default$6());
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo0.internal());
      assertEquals(32L, accumulableInfo0.id());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-21L), "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply((-21L), "org.apache.spark.scheduler.AccumulableInfoO", "org.apache.spark.scheduler.AccumulableInfo$");
      boolean boolean0 = accumulableInfo0.equals(accumulableInfo1);
      assertFalse(boolean0);
      assertFalse(accumulableInfo1.copy$default$5());
      assertEquals((-21L), accumulableInfo1.copy$default$1());
      assertFalse(accumulableInfo1.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-756L), "scala.colRection.mutable.$colon$olon", (Option<String>) null, "scala.colRection.mutable.$colon$olon");
      Option<Object> option0 = accumulableInfo0.value();
      AccumulableInfo accumulableInfo1 = accumulableInfo0.copy((-756L), (Option<String>) null, option0, option0, true, true, (Option<String>) null);
      AccumulableInfo accumulableInfo2 = accumulableInfo1.copy((-756L), (Option<String>) null, option0, option0, true, false, (Option<String>) null);
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo2);
      assertFalse(boolean0);
      assertEquals((-756L), accumulableInfo2.id());
      assertEquals((-756L), accumulableInfo0.id());
      assertTrue(accumulableInfo2.internal());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1560L, "scalF7c&lRecton.'table.mcolon$olon", (Option<String>) null, "scalF7c&lRecton.'table.mcolon$olon");
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(1560L, (Option<String>) null, (Option<Object>) null, (Option<Object>) null, false, false, (Option<String>) null);
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo0);
      assertFalse(boolean0);
      assertFalse(accumulableInfo1.internal());
      assertEquals(1560L, accumulableInfo0.copy$default$1());
      assertEquals(1560L, accumulableInfo1.copy$default$1());
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-2020L), "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply((-1L), "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo0);
      assertEquals((-1L), accumulableInfo1.copy$default$1());
      assertFalse(accumulableInfo1.countFailedValues());
      assertFalse(boolean0);
      assertFalse(accumulableInfo1.internal());
      assertFalse(accumulableInfo0.equals((Object)accumulableInfo1));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1560L, "scala.colRection.mutable.$colon$olon", (Option<String>) null, "scala.colRection.mutable.$colon$olon");
      boolean boolean0 = accumulableInfo0.equals((Object) null);
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertEquals(1560L, accumulableInfo0.id());
      assertFalse(boolean0);
      assertFalse(accumulableInfo0.internal());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(14L, "orF.apacSe.spark.sheduler.AccubulableInfo$", "orF.apacSe.spark.sheduler.AccubulableInfo$");
      boolean boolean0 = accumulableInfo0.equals(accumulableInfo0);
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.countFailedValues());
      assertEquals(14L, accumulableInfo0.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1560L, (Option<String>) null, (Option<Object>) null, (Option<Object>) null, true, true, (Option<String>) null);
      accumulableInfo0.hashCode();
      assertEquals(1560L, accumulableInfo0.id());
      assertTrue(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1935L, "scala.collection.mutable.Traversable$", (Option<String>) null, "scala.collection.mutable.Traversable$", true);
      accumulableInfo0.hashCode();
      assertEquals(1935L, accumulableInfo0.copy$default$1());
      assertFalse(accumulableInfo0.countFailedValues());
      assertTrue(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(372L, "orM.apache.spSrk.scheduler.AccumulableInfo$", "orM.apache.spSrk.scheduler.AccumulableInfo$");
      accumulableInfo0.hashCode();
      assertEquals(372L, accumulableInfo0.copy$default$1());
      assertFalse(accumulableInfo0.countFailedValues$1());
      assertFalse(accumulableInfo0.internal$1());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(32L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      // Undeclared exception!
      try { 
        accumulableInfo0.productElement((-2146146484));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000034
         //
         verifyException("org.apache.spark.scheduler.AccumulableInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option<Tuple7<Object, Option<String>, Option<Object>, Option<Object>, Object, Object, Option<String>>> option0 = AccumulableInfo.unapply((AccumulableInfo) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1439L, "lJQ%K3*\"", "lJQ%K3*\"");
      long long0 = accumulableInfo0.copy$default$1();
      assertFalse(accumulableInfo0.countFailedValues());
      assertEquals(1439L, long0);
      assertFalse(accumulableInfo0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1571L, "scala.colRection.mutable.$colon$olon", "scala.colRection.mutable.$colon$olon");
      accumulableInfo0.copy$default$7();
      assertFalse(accumulableInfo0.internal());
      assertEquals(1571L, accumulableInfo0.copy$default$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(0L, (String) null, "org.apache.spark.scheduler.AccumulableInfo$");
      boolean boolean0 = accumulableInfo0.copy$default$6();
      assertFalse(accumulableInfo0.internal$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      AccumulableInfo accumulableInfo1 = AccumulableInfo.apply(1L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      boolean boolean0 = accumulableInfo1.equals(accumulableInfo0);
      assertTrue(boolean0);
      assertEquals(1L, accumulableInfo1.id());
      assertFalse(accumulableInfo1.internal$1());
      assertFalse(accumulableInfo1.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-111L), "scala.collection.AbstractIterator", "scala.collection.AbstractIterator");
      boolean boolean0 = accumulableInfo0.copy$default$5();
      assertFalse(boolean0);
      assertEquals((-111L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(2144L, "}xqM", "}xqM");
      String string0 = accumulableInfo0.toString();
      assertEquals("AccumulableInfo(2144,Some(}xqM),None,Some(}xqM),false,false,None)", string0);
      assertEquals(7, accumulableInfo0.productArity());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1810L), "z$?NUOr,r5!z3ne", "z$?NUOr,r5!z3ne");
      AccumulableInfo.unapply(accumulableInfo0);
      assertEquals((-1810L), accumulableInfo0.id());
      assertFalse(accumulableInfo0.internal());
      assertFalse(accumulableInfo0.copy$default$6());
      assertEquals((-1810L), accumulableInfo0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(1L, "org.apache.spark.scheduler.AccumulableInfo$", "org.apache.spark.scheduler.AccumulableInfo$");
      accumulableInfo0.copy$default$3();
      assertFalse(accumulableInfo0.internal());
      assertEquals(1L, accumulableInfo0.copy$default$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1L), (Option<String>) null, (Option<Object>) null, (Option<Object>) null, true, true, (Option<String>) null);
      assertTrue(accumulableInfo0.internal$1());
      assertEquals((-1L), accumulableInfo0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply((-1L), "\"\"", (Option<String>) null, "\"\"", true);
      assertEquals((-1L), accumulableInfo0.copy$default$1());
      assertTrue(accumulableInfo0.internal$1());
      assertFalse(accumulableInfo0.countFailedValues());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AccumulableInfo accumulableInfo0 = AccumulableInfo.apply(88L, "k ~RwNqq&('Z{?^+^9T", "k ~RwNqq&('Z{?^+^9T");
      Object object0 = accumulableInfo0.productElement(1);
      accumulableInfo0.canEqual(object0);
      assertFalse(accumulableInfo0.internal$1());
      assertEquals(88L, accumulableInfo0.id());
      assertFalse(accumulableInfo0.countFailedValues$1());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option<String> option0 = AccumulableInfo.$lessinit$greater$default$7();
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option<String> option0 = AccumulableInfo.apply$default$7();
      assertNotNull(option0);
  }
}
