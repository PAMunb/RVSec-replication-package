/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 22 00:37:43 GMT 2022
 */

package org.apache.spark.status.api.v1;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.spark.status.api.v1.ShuffleReadMetrics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShuffleReadMetrics_ESTest extends ShuffleReadMetrics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics((-4399L), (-4399L), (-4399L), 1L, 1L, 1L, (-4399L));
      assertEquals(1L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-4399L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-4399L), shuffleReadMetrics0.localBlocksFetched());
      assertEquals((-4399L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4399L), shuffleReadMetrics0.recordsRead());
      assertEquals(1L, shuffleReadMetrics0.localBytesRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBytesReadToDisk();
      assertEquals(1L, long0);
      assertEquals(1L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-4399L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-4399L), shuffleReadMetrics0.localBlocksFetched());
      assertEquals((-4399L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4399L), shuffleReadMetrics0.recordsRead());
      assertEquals(1L, shuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(1L, 0L, 0L, 0L, (-2246L), (-1817L), 0L);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals((-1817L), shuffleReadMetrics0.localBytesRead());
      assertEquals((-2246L), shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBytesReadToDisk();
      assertEquals((-2246L), long0);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals((-1817L), shuffleReadMetrics0.localBytesRead());
      assertEquals((-2246L), shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 0L, 2228L, 0L, 2228L, 1246L);
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1246L, shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(2228L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(2228L, shuffleReadMetrics0.remoteBytesRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBytesRead();
      assertEquals(2228L, long0);
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1246L, shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(2228L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(2228L, shuffleReadMetrics0.remoteBytesRead());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 1L, (-4323L), 0L, (-4323L), (-2304L));
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBytesRead();
      assertEquals((-4323L), long0);
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(1650L, 0L, 0L, 0L, 0L, 0L, 0L);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1650L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBlocksFetched();
      assertEquals(1650L, long0);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1650L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics((-4399L), (-4399L), (-4399L), 1L, 1L, 1L, (-4399L));
      assertEquals(1L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4399L), shuffleReadMetrics0.recordsRead());
      assertEquals((-4399L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1L, shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-4399L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-4399L), shuffleReadMetrics0.localBlocksFetched());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBlocksFetched();
      assertEquals((-4399L), long0);
      assertEquals(1L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4399L), shuffleReadMetrics0.recordsRead());
      assertEquals((-4399L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1L, shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-4399L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-4399L), shuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 0L, 2228L, 0L, 2228L, 1246L);
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(2228L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1246L, shuffleReadMetrics0.recordsRead());
      assertEquals(2228L, shuffleReadMetrics0.localBytesRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.recordsRead();
      assertEquals(1246L, long0);
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(2228L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1246L, shuffleReadMetrics0.recordsRead());
      assertEquals(2228L, shuffleReadMetrics0.localBytesRead());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 1L, (-4323L), 0L, (-4323L), (-2304L));
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.recordsRead();
      assertEquals((-2304L), long0);
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 0L, 2228L, 0L, 2228L, 1246L);
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(2228L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(2228L, shuffleReadMetrics0.localBytesRead());
      assertEquals(1246L, shuffleReadMetrics0.recordsRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.localBytesRead();
      assertEquals(2228L, long0);
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(2228L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(2228L, shuffleReadMetrics0.localBytesRead());
      assertEquals(1246L, shuffleReadMetrics0.recordsRead());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 1L, (-4323L), 0L, (-4323L), (-2304L));
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.localBytesRead();
      assertEquals((-4323L), long0);
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 1L, (-4323L), 0L, (-4323L), (-2304L));
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.localBlocksFetched();
      assertEquals(0L, long0);
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(1608L, 2035L, 0L, 0L, 0L, 1795L, 0L);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(2035L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1795L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1608L, shuffleReadMetrics0.remoteBlocksFetched());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.localBlocksFetched();
      assertEquals(2035L, long0);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(2035L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1795L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1608L, shuffleReadMetrics0.remoteBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(1608L, 2035L, 0L, 0L, 0L, 1795L, 0L);
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1608L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(2035L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1795L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.fetchWaitTime();
      assertEquals(0L, long0);
      assertEquals(0L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(1608L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(2035L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(1795L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics((-69L), (-69L), (-69L), (-69L), 0L, (-69L), 0L);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-69L), shuffleReadMetrics0.localBytesRead());
      assertEquals((-69L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-69L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals((-69L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-69L), shuffleReadMetrics0.localBlocksFetched());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.fetchWaitTime();
      assertEquals((-69L), long0);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-69L), shuffleReadMetrics0.localBytesRead());
      assertEquals((-69L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-69L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals((-69L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-69L), shuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(0L, 0L, 1L, (-4323L), 0L, (-4323L), (-2304L));
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBlocksFetched();
      assertEquals(0L, long0);
      assertEquals((-2304L), shuffleReadMetrics0.recordsRead());
      assertEquals((-4323L), shuffleReadMetrics0.remoteBytesRead());
      assertEquals((-4323L), shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(1L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(3275L, 0L, 3275L, 0L, 0L, 0L, 0L);
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.localBytesRead();
      assertEquals(0L, long0);
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(3275L, 0L, 3275L, 0L, 0L, 0L, 0L);
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.fetchWaitTime();
      assertEquals(3275L, long0);
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics((-69L), (-69L), (-69L), (-69L), 0L, (-69L), 0L);
      assertEquals((-69L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-69L), shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals((-69L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-69L), shuffleReadMetrics0.localBlocksFetched());
      assertEquals((-69L), shuffleReadMetrics0.remoteBytesRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.localBlocksFetched();
      assertEquals((-69L), long0);
      assertEquals((-69L), shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals((-69L), shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals((-69L), shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals((-69L), shuffleReadMetrics0.localBlocksFetched());
      assertEquals((-69L), shuffleReadMetrics0.remoteBytesRead());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(3275L, 0L, 3275L, 0L, 0L, 0L, 0L);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.recordsRead();
      assertEquals(0L, long0);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(3275L, 0L, 3275L, 0L, 0L, 0L, 0L);
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBytesRead();
      assertEquals(0L, long0);
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShuffleReadMetrics shuffleReadMetrics0 = new ShuffleReadMetrics(3275L, 0L, 3275L, 0L, 0L, 0L, 0L);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
      assertNotNull(shuffleReadMetrics0);
      
      long long0 = shuffleReadMetrics0.remoteBytesReadToDisk();
      assertEquals(0L, long0);
      assertEquals(0L, shuffleReadMetrics0.remoteBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.fetchWaitTime());
      assertEquals(0L, shuffleReadMetrics0.localBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.remoteBytesReadToDisk());
      assertEquals(0L, shuffleReadMetrics0.localBytesRead());
      assertEquals(3275L, shuffleReadMetrics0.remoteBlocksFetched());
      assertEquals(0L, shuffleReadMetrics0.recordsRead());
  }
}
