/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:34:24 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.ExecutorLossReason;
import org.apache.spark.scheduler.ExecutorLost;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorLost_ESTest extends ExecutorLost_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("", (ExecutorLossReason) null);
      ExecutorLossReason executorLossReason0 = executorLost0.reason();
      assertNull(executorLossReason0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      Object object0 = executorLost0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      String string0 = executorLost0.execId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorLost executorLost0 = ExecutorLost.apply("", (ExecutorLossReason) null);
      String string0 = executorLost0.execId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = new ExecutorLost("", executorLossReason0);
      ExecutorLossReason executorLossReason1 = executorLost0.copy$default$2();
      assertNull(executorLossReason1.message());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      String string0 = executorLost0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = ExecutorLost.apply("", executorLossReason0);
      String string0 = executorLost0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      ExecutorLost executorLost0 = new ExecutorLost("pb{^5{6jmY&pKR<Iot:", executorLossReason0);
      boolean boolean0 = executorLost0.canEqual("~\" t#eC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      Object object0 = executorLost0.productElement(1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      ExecutorLossReason executorLossReason1 = executorLost0.reason();
      assertSame(executorLossReason1, executorLossReason0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("E^ecutorLo!", (ExecutorLossReason) null);
      executorLost0.productIterator();
      assertEquals(2, executorLost0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = ExecutorLost.apply((String) null, executorLossReason0);
      String string0 = executorLost0.productPrefix();
      assertEquals("ExecutorLost", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = ExecutorLost.apply((String) null, executorLossReason0);
      boolean boolean0 = executorLost0.canEqual(executorLost0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("E^ecutorLo!", (ExecutorLossReason) null);
      int int0 = executorLost0.productArity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = ExecutorLost.apply("Wt", executorLossReason0);
      String string0 = executorLost0.execId();
      assertEquals("Wt", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = new ExecutorLost("", executorLossReason0);
      ExecutorLossReason executorLossReason1 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(executorLossReason1).toString();
      ExecutorLost executorLost1 = executorLost0.copy("", executorLossReason1);
      boolean boolean0 = executorLost1.equals(executorLost0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      ExecutorLost executorLost1 = executorLost0.copy((String) null, (ExecutorLossReason) null);
      boolean boolean0 = executorLost1.equals(executorLost0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutorLossReason executorLossReason0 = mock(ExecutorLossReason.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(executorLossReason0).toString();
      ExecutorLost executorLost0 = new ExecutorLost((String) null, executorLossReason0);
      ExecutorLost executorLost1 = ExecutorLost.apply((String) null, executorLossReason0);
      boolean boolean0 = executorLost1.equals(executorLost0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("k~`aN!zl", (ExecutorLossReason) null);
      ExecutorLost executorLost1 = executorLost0.copy("", (ExecutorLossReason) null);
      boolean boolean0 = executorLost0.equals(executorLost1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost((String) null, (ExecutorLossReason) null);
      ExecutorLost executorLost1 = new ExecutorLost((String) null, (ExecutorLossReason) null);
      boolean boolean0 = executorLost0.equals(executorLost1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost((String) null, (ExecutorLossReason) null);
      ExecutorLost executorLost1 = new ExecutorLost("", (ExecutorLossReason) null);
      boolean boolean0 = executorLost0.equals(executorLost1);
      assertFalse(executorLost1.equals((Object)executorLost0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("b", (ExecutorLossReason) null);
      boolean boolean0 = executorLost0.equals("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutorLost executorLost0 = ExecutorLost.apply("", (ExecutorLossReason) null);
      boolean boolean0 = executorLost0.equals(executorLost0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("+9V:-s^%^2Y>T&MN!f", (ExecutorLossReason) null);
      // Undeclared exception!
      try { 
        executorLost0.productElement(501);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.ExecutorLost", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("org.apache.spark.scheduler.ExecutorLost", (ExecutorLossReason) null);
      Option<Tuple2<String, ExecutorLossReason>> option0 = ExecutorLost.unapply(executorLost0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExecutorLost executorLost0 = ExecutorLost.apply("*&c5afN; b^", (ExecutorLossReason) null);
      ExecutorLossReason executorLossReason0 = executorLost0.copy$default$2();
      assertNull(executorLossReason0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Function1<String, Function1<ExecutorLossReason, ExecutorLost>> function1_0 = ExecutorLost.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option<Tuple2<String, ExecutorLossReason>> option0 = ExecutorLost.unapply((ExecutorLost) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Function1<Tuple2<String, ExecutorLossReason>, ExecutorLost> function1_0 = ExecutorLost.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("", (ExecutorLossReason) null);
      String string0 = executorLost0.toString();
      assertEquals("ExecutorLost(,null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExecutorLost executorLost0 = new ExecutorLost("X", (ExecutorLossReason) null);
      String string0 = executorLost0.copy$default$1();
      assertEquals("X", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExecutorLost executorLost0 = ExecutorLost.apply("", (ExecutorLossReason) null);
      executorLost0.hashCode();
      assertEquals(2, executorLost0.productArity());
  }
}
