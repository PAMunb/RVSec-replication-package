/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:50:56 GMT 2022
 */

package org.apache.spark.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.util.ThreadStackTrace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple7;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadStackTrace_ESTest extends ThreadStackTrace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(1L, (String) null, thread_State0, "ThreadStackTrace", (Option<Object>) null, "", (Seq<String>) null);
      String string0 = threadStackTrace0.threadName();
      assertEquals("", threadStackTrace0.blockedByLock());
      assertNull(string0);
      assertEquals("ThreadStackTrace", threadStackTrace0.stackTrace());
      assertEquals(1L, threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.BLOCKED;
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(option0).toString();
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-1566L), "=eq5", thread_State0, "=eq5", option0, "", (Seq<String>) null);
      Option<Object> option1 = threadStackTrace0.copy$default$5();
      ThreadStackTrace threadStackTrace1 = ThreadStackTrace.apply((-1566L), "", thread_State0, "dfF&AI", option1, "", (Seq<String>) null);
      String string0 = threadStackTrace1.threadName();
      assertEquals((-1566L), threadStackTrace1.threadId());
      assertEquals("", string0);
      assertEquals("dfF&AI", threadStackTrace1.stackTrace());
      assertEquals("", threadStackTrace1.blockedByLock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "IE@dn", thread_State0, "IE@dn", (Option<Object>) null, "ThreadStackTrace", (Seq<String>) null);
      long long0 = threadStackTrace0.threadId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-119L), "C}'u", thread_State0, "C}'u", (Option<Object>) null, "C}'u", (Seq<String>) null);
      long long0 = threadStackTrace0.threadId();
      assertEquals((-119L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(1L, (String) null, thread_State0, (String) null, (Option<Object>) null, "ThreadStackTrace", (Seq<String>) null);
      String string0 = threadStackTrace0.stackTrace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "H]3hGK{$7*HfT=", thread_State0, "", (Option<Object>) null, "", (Seq<String>) null);
      String string0 = threadStackTrace0.stackTrace();
      assertEquals("", threadStackTrace0.blockedByLock());
      assertEquals("H]3hGK{$7*HfT=", threadStackTrace0.threadName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "H]3hGK{$7*HfT=", thread_State0, "", (Option<Object>) null, "", (Seq<String>) null);
      ThreadStackTrace threadStackTrace1 = threadStackTrace0.copy(0L, "step cannot be 0.", thread_State0, "H]3hGK{$7*HfT=", (Option<Object>) null, "H]3hGK{$7*HfT=", (Seq<String>) null);
      assertEquals("step cannot be 0.", threadStackTrace1.threadName());
      assertEquals("H]3hGK{$7*HfT=", threadStackTrace0.copy$default$2());
      assertEquals("", threadStackTrace0.copy$default$4());
      assertEquals("H]3hGK{$7*HfT=", threadStackTrace1.copy$default$4());
      assertEquals("", threadStackTrace0.copy$default$6());
      assertEquals("H]3hGK{$7*HfT=", threadStackTrace1.blockedByLock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      Seq<String> seq0 = (Seq<String>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "1lgF*d#JC}X 0", thread_State0, "|S~Q", (Option<Object>) null, "", seq0);
      Seq<String> seq1 = threadStackTrace0.copy$default$7();
      assertSame(seq1, seq0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      Seq<String> seq0 = (Seq<String>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "scala.Predef$ArrowAssoc$", "scala.collection.immutable.PagedSeq").when(seq0).toString();
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "1lgF*d#JC}X 0", thread_State0, "|S~Q", (Option<Object>) null, "", seq0);
      Seq<String> seq1 = threadStackTrace0.holdingLocks();
      ThreadStackTrace threadStackTrace1 = ThreadStackTrace.apply((-3771L), "1lgF*d#JC}X 0", thread_State0, "", (Option<Object>) null, (String) null, seq1);
      String string0 = threadStackTrace1.copy$default$6();
      assertEquals((-3771L), threadStackTrace1.threadId());
      assertEquals("", threadStackTrace1.copy$default$4());
      assertEquals("1lgF*d#JC}X 0", threadStackTrace1.copy$default$2());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      Seq<String> seq0 = (Seq<String>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn("S!bQ!O'#NKRNu", (String) null).when(seq0).toString();
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(2684L, (String) null, thread_State0, "n&R_^sUfI", (Option<Object>) null, "", seq0);
      String string0 = threadStackTrace0.copy$default$6();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("n&R_^sUfI", threadStackTrace0.stackTrace());
      assertEquals(2684L, threadStackTrace0.threadId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "`%!/ssC1 L%I}L", thread_State0, "`%!/ssC1 L%I}L", (Option<Object>) null, "`%!/ssC1 L%I}L", (Seq<String>) null);
      Thread.State thread_State1 = threadStackTrace0.copy$default$3();
      ThreadStackTrace threadStackTrace1 = threadStackTrace0.copy(3, "8OqHOE,f", thread_State1, (String) null, (Option<Object>) null, "", (Seq<String>) null);
      String string0 = threadStackTrace1.copy$default$4();
      assertEquals("8OqHOE,f", threadStackTrace1.threadName());
      assertEquals("", threadStackTrace1.blockedByLock());
      assertNull(string0);
      assertEquals(3L, threadStackTrace1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "&&&:Q^#;]y\u0000z!+", thread_State0, "", (Option<Object>) null, "&&&:Q^#;]y\u0000z!+", (Seq<String>) null);
      String string0 = threadStackTrace0.copy$default$4();
      assertEquals("&&&:Q^#;]y\u0000z!+", threadStackTrace0.blockedByLock());
      assertEquals("&&&:Q^#;]y\u0000z!+", threadStackTrace0.copy$default$2());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(1L, (String) null, thread_State0, "ThreadStackTrace", (Option<Object>) null, "", (Seq<String>) null);
      String string0 = threadStackTrace0.copy$default$2();
      assertNull(string0);
      assertEquals(1L, threadStackTrace0.copy$default$1());
      assertEquals("ThreadStackTrace", threadStackTrace0.stackTrace());
      assertEquals("", threadStackTrace0.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(3372L, "", thread_State0, "70':", (Option<Object>) null, "70':", (Seq<String>) null);
      String string0 = threadStackTrace0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-1L), "_0#}XV-", thread_State0, ")4\">", (Option<Object>) null, ")4\">", (Seq<String>) null);
      ThreadStackTrace threadStackTrace1 = threadStackTrace0.copy(3712L, "", thread_State0, "_0#}XV-", (Option<Object>) null, "~j3", (Seq<String>) null);
      long long0 = threadStackTrace1.copy$default$1();
      assertEquals("~j3", threadStackTrace1.blockedByLock());
      assertEquals("", threadStackTrace1.copy$default$2());
      assertEquals(3712L, long0);
      assertEquals("_0#}XV-", threadStackTrace1.stackTrace());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-1L), "_0#}XV-", thread_State0, ")4\">", (Option<Object>) null, ")4\">", (Seq<String>) null);
      long long0 = threadStackTrace0.copy$default$1();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      Option<Object> option0 = (Option<Object>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(option0).toString();
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply((-331L), "JMapWrapper", thread_State0, "&jp7wmd", option0, "b\"%Mya_S&&BJQS:(", (Seq<String>) null);
      threadStackTrace0.blockedByThreadId();
      assertEquals("&jp7wmd", threadStackTrace0.stackTrace());
      assertEquals("JMapWrapper", threadStackTrace0.copy$default$2());
      assertEquals((-331L), threadStackTrace0.threadId());
      assertEquals("b\"%Mya_S&&BJQS:(", threadStackTrace0.blockedByLock());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(1, "ThreadStackTrace(0,`%!/ssC1 L%I}L,RUNNABLE,`%!/ssC1 L%I}L,null,,null)", thread_State0, (String) null, (Option<Object>) null, (String) null, (Seq<String>) null);
      String string0 = threadStackTrace0.blockedByLock();
      assertNull(string0);
      assertEquals(1L, threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      Seq<String> seq0 = (Seq<String>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(2684L, (String) null, thread_State0, "n&R_^sUfI", (Option<Object>) null, "", seq0);
      String string0 = threadStackTrace0.blockedByLock();
      assertNotNull(string0);
      assertEquals(2684L, threadStackTrace0.threadId());
      assertEquals("n&R_^sUfI", threadStackTrace0.stackTrace());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.BLOCKED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "", thread_State0, "6q", (Option<Object>) null, "6q", (Seq<String>) null);
      threadStackTrace0.productElement(6);
      assertEquals("", threadStackTrace0.threadName());
      assertEquals("6q", threadStackTrace0.blockedByLock());
      assertEquals("6q", threadStackTrace0.stackTrace());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      Seq<String> seq0 = (Seq<String>) mock(Seq.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(seq0).toString();
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(2684L, (String) null, thread_State0, "n&R_^sUfI", (Option<Object>) null, "", seq0);
      Object object0 = threadStackTrace0.productElement(1);
      assertEquals(2684L, threadStackTrace0.copy$default$1());
      assertEquals("n&R_^sUfI", threadStackTrace0.stackTrace());
      assertNull(object0);
      assertEquals("", threadStackTrace0.blockedByLock());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(1596L, "L Uz8|gKFg!4", thread_State0, "0xA)Y`JjA&{M4", (Option<Object>) null, "L Uz8|gKFg!4", (Seq<String>) null);
      Object object0 = threadStackTrace0.productElement(4);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "scala.collection.immutable.NumericRange$$anon$1", thread_State0, "scala.collection.immutable.NumericRange$$anon$1", (Option<Object>) null, "scala.collection.immutable.NumericRange$$anon$1", (Seq<String>) null);
      Object object0 = threadStackTrace0.productElement(0);
      boolean boolean0 = threadStackTrace0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "`%!/ssC1 L%I}L", thread_State0, "`%!/ssC1 L%I}L", (Option<Object>) null, "", (Seq<String>) null);
      Object object0 = threadStackTrace0.productElement(5);
      assertEquals("`%!/ssC1 L%I}L", threadStackTrace0.threadName());
      assertEquals("", object0);
      assertEquals("`%!/ssC1 L%I}L", threadStackTrace0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "`%!/ssC1 L%I}L", thread_State0, "`%!/ssC1 L%I}L", (Option<Object>) null, "`%!/ssC1 L%I}L", (Seq<String>) null);
      Object object0 = threadStackTrace0.productElement(2);
      assertEquals(Thread.State.RUNNABLE, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "`%!/ssC1 L%I}L", thread_State0, "`%!/ssC1 L%I}L", (Option<Object>) null, "`%!/ssC1 L%I}L", (Seq<String>) null);
      Object object0 = threadStackTrace0.productElement(3);
      assertEquals("`%!/ssC1 L%I}L", object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "scala.collection.immutable.NumericRange$$anon$1", thread_State0, "scala.collection.immutable.NumericRange$$anon$1", (Option<Object>) null, "scala.collection.immutable.NumericRange$$anon$1", (Seq<String>) null);
      Seq<String> seq0 = threadStackTrace0.holdingLocks();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(2147483647L, "org.apache.spark.util.ThreadStackTrace$", thread_State0, "`x", (Option<Object>) null, "`x", (Seq<String>) null);
      long long0 = threadStackTrace0.threadId();
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.BLOCKED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(2771L, "JMapWrapper", thread_State0, "JMapWrapper", (Option<Object>) null, "JMapWrapper", (Seq<String>) null);
      String string0 = threadStackTrace0.blockedByLock();
      assertEquals("JMapWrapper", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(1L, "org.apache.spark.ut_l.ThreadxtackTrace", thread_State0, "org.apache.spark.ut_l.ThreadxtackTrace", (Option<Object>) null, "org.apache.spark.ut_l.ThreadxtackTrace", (Seq<String>) null);
      int int0 = threadStackTrace0.productArity();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.RUNNABLE;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(0L, "scala.collection.immutable.NumericRange$$anon$1", thread_State0, "scala.collection.immutable.NumericRange$$anon$1", (Option<Object>) null, "scala.collection.immutable.NumericRange$$anon$1", (Seq<String>) null);
      threadStackTrace0.productIterator();
      assertEquals(7, threadStackTrace0.productArity());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.BLOCKED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-1L), "+{C2d", thread_State0, "+{C2d", (Option<Object>) null, "+{C2d", (Seq<String>) null);
      String string0 = threadStackTrace0.threadName();
      assertEquals("+{C2d", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-119L), "C}'u", thread_State0, "C}'u", (Option<Object>) null, "C}'u", (Seq<String>) null);
      Thread.State thread_State1 = threadStackTrace0.threadState();
      assertSame(thread_State1, thread_State0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(1L, (String) null, thread_State0, (String) null, (Option<Object>) null, "M0@voCiIF", (Seq<String>) null);
      Option<Object> option0 = threadStackTrace0.blockedByThreadId();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply((-2367L), "_", thread_State0, "_", (Option<Object>) null, "_", (Seq<String>) null);
      String string0 = threadStackTrace0.productPrefix();
      assertEquals("ThreadStackTrace", string0);
      assertEquals((-2367L), threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply((-1170L), "+taKi-a!\"!5-", thread_State0, "W[B#)~x ;f3Y", (Option<Object>) null, "+taKi-a!\"!5-", (Seq<String>) null);
      String string0 = threadStackTrace0.stackTrace();
      assertEquals("W[B#)~x ;f3Y", string0);
      assertEquals((-1170L), threadStackTrace0.threadId());
      assertEquals("+taKi-a!\"!5-", threadStackTrace0.copy$default$6());
      assertEquals("+taKi-a!\"!5-", threadStackTrace0.threadName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(179L, "", thread_State0, "", (Option<Object>) null, "", (Seq<String>) null);
      ThreadStackTrace.unapply(threadStackTrace0);
      assertEquals(179L, threadStackTrace0.threadId());
      assertEquals(179L, threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-359L), "_", thread_State0, "_", (Option<Object>) null, "_", (Seq<String>) null);
      boolean boolean0 = threadStackTrace0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(19L, "", thread_State0, "", (Option<Object>) null, "", (Seq<String>) null);
      boolean boolean0 = threadStackTrace0.equals(threadStackTrace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply((-359L), "!", thread_State0, "!", (Option<Object>) null, "!", (Seq<String>) null);
      // Undeclared exception!
      try { 
        threadStackTrace0.productElement(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.util.ThreadStackTrace", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option<Tuple7<Object, String, Thread.State, String, Option<Object>, String, Seq<String>>> option0 = ThreadStackTrace.unapply((ThreadStackTrace) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(0L, "&&&:Q^#;]y\u0000z!+", thread_State0, "", (Option<Object>) null, "&&&:Q^#;]y\u0000z!+", (Seq<String>) null);
      threadStackTrace0.copy$default$1();
      assertEquals("&&&:Q^#;]y\u0000z!+", threadStackTrace0.copy$default$2());
      assertEquals("", threadStackTrace0.stackTrace());
      assertEquals("&&&:Q^#;]y\u0000z!+", threadStackTrace0.copy$default$6());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Function1<Tuple7<Object, String, Thread.State, String, Option<Object>, String, Seq<String>>, ThreadStackTrace> function1_0 = ThreadStackTrace.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Function1<Object, Function1<String, Function1<Thread.State, Function1<String, Function1<Option<Object>, Function1<String, Function1<Seq<String>, ThreadStackTrace>>>>>>> function1_0 = ThreadStackTrace.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply((-359L), "_", thread_State0, "_", (Option<Object>) null, "_", (Seq<String>) null);
      ThreadStackTrace threadStackTrace1 = threadStackTrace0.copy((-359L), "_", thread_State0, "_", (Option<Object>) null, "e~&2A!}V-ee(IQg)P", (Seq<String>) null);
      assertEquals((-359L), threadStackTrace0.threadId());
      assertEquals("_", threadStackTrace1.copy$default$2());
      assertEquals("e~&2A!}V-ee(IQg)P", threadStackTrace1.blockedByLock());
      assertEquals((-359L), threadStackTrace1.threadId());
      assertEquals("_", threadStackTrace1.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(2798L, "5", thread_State0, "5", (Option<Object>) null, "SeqWrapper", (Seq<String>) null);
      String string0 = threadStackTrace0.copy$default$4();
      assertEquals("5", string0);
      assertEquals("SeqWrapper", threadStackTrace0.blockedByLock());
      assertEquals(2798L, threadStackTrace0.copy$default$1());
      assertEquals("5", threadStackTrace0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-381L), "scala.Function1class", thread_State0, "scala.Function1class", (Option<Object>) null, "scala.Function1class", (Seq<String>) null);
      boolean boolean0 = threadStackTrace0.canEqual(threadStackTrace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-359L), "_", thread_State0, "_", (Option<Object>) null, "_", (Seq<String>) null);
      threadStackTrace0.hashCode();
      assertEquals((-359L), threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply((-1170L), "+taKi-a!\"!5-", thread_State0, "W[B#)~x ;f3Y", (Option<Object>) null, "+taKi-a!\"!5-", (Seq<String>) null);
      String string0 = threadStackTrace0.copy$default$6();
      assertEquals("+taKi-a!\"!5-", string0);
      assertEquals("+taKi-a!\"!5-", threadStackTrace0.copy$default$2());
      assertEquals("W[B#)~x ;f3Y", threadStackTrace0.stackTrace());
      assertEquals((-1170L), threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.BLOCKED;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace(2771L, "JMapWrapper", thread_State0, "JMapWrapper", (Option<Object>) null, "JMapWrapper", (Seq<String>) null);
      String string0 = threadStackTrace0.copy$default$2();
      assertEquals("JMapWrapper", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.NEW;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(1L, "org.apache.spark.ut_l.ThreadxtackTrace", thread_State0, "org.apache.spark.ut_l.ThreadxtackTrace", (Option<Object>) null, "org.apache.spark.ut_l.ThreadxtackTrace", (Seq<String>) null);
      threadStackTrace0.copy$default$5();
      assertEquals(1L, threadStackTrace0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TIMED_WAITING;
      ThreadStackTrace threadStackTrace0 = new ThreadStackTrace((-359L), "_", thread_State0, "_", (Option<Object>) null, "_", (Seq<String>) null);
      Seq<String> seq0 = threadStackTrace0.copy$default$7();
      assertNull(seq0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Thread.State thread_State0 = Thread.State.TERMINATED;
      ThreadStackTrace threadStackTrace0 = ThreadStackTrace.apply(2798L, "5", thread_State0, "5", (Option<Object>) null, "5", (Seq<String>) null);
      String string0 = threadStackTrace0.toString();
      assertEquals("ThreadStackTrace(2798,5,TERMINATED,5,null,5,null)", string0);
      assertEquals(7, threadStackTrace0.productArity());
  }
}
