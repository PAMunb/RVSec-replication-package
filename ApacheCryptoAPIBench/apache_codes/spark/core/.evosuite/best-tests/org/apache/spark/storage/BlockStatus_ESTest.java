/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:26:29 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.BlockStatus;
import org.apache.spark.storage.StorageLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockStatus_ESTest extends BlockStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      boolean boolean0 = blockStatus0.isCached();
      assertEquals((-1L), blockStatus0.memSize());
      assertFalse(boolean0);
      assertEquals((-1L), blockStatus0.diskSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      StorageLevel storageLevel0 = blockStatus0.storageLevel();
      BlockStatus blockStatus1 = BlockStatus.apply(storageLevel0, 0L, 33L);
      boolean boolean0 = blockStatus1.equals(blockStatus0);
      assertEquals(0L, blockStatus1.copy$default$2());
      assertFalse(blockStatus0.equals((Object)blockStatus1));
      assertEquals(0L, blockStatus0.copy$default$3());
      assertEquals(0L, blockStatus0.copy$default$2());
      assertFalse(boolean0);
      assertTrue(blockStatus1.isCached());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      StorageLevel storageLevel0 = blockStatus0.storageLevel();
      BlockStatus blockStatus1 = blockStatus0.copy(storageLevel0, 33L, 33L);
      boolean boolean0 = blockStatus1.equals(blockStatus0);
      assertTrue(blockStatus1.isCached());
      assertFalse(boolean0);
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      StorageLevel storageLevel0 = blockStatus0.storageLevel();
      assertNull(storageLevel0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      Object object0 = blockStatus0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      long long0 = blockStatus0.memSize();
      assertEquals(0L, long0);
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      BlockStatus blockStatus0 = new BlockStatus(storageLevel0, 1L, 1L);
      long long0 = blockStatus0.memSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      long long0 = blockStatus0.diskSize();
      assertEquals(0L, long0);
      assertEquals(0L, blockStatus0.memSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      BlockStatus blockStatus0 = new BlockStatus(storageLevel0, 1L, 1L);
      long long0 = blockStatus0.diskSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(storageLevel0).toString();
      BlockStatus blockStatus0 = BlockStatus.apply(storageLevel0, (-2081L), 0L);
      StorageLevel storageLevel1 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(storageLevel1).toString();
      BlockStatus blockStatus1 = blockStatus0.copy(storageLevel1, 1L, 0L);
      assertEquals(0L, blockStatus0.copy$default$3());
      assertEquals((-2081L), blockStatus0.memSize());
      assertEquals(1L, blockStatus1.copy$default$2());
      assertEquals(0L, blockStatus1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      long long0 = blockStatus0.copy$default$3();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(storageLevel0).toString();
      BlockStatus blockStatus0 = BlockStatus.apply(storageLevel0, 846L, (-1L));
      long long0 = blockStatus0.copy$default$2();
      assertEquals(846L, long0);
      assertEquals((-1L), blockStatus0.diskSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      long long0 = blockStatus0.copy$default$2();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      StorageLevel storageLevel0 = blockStatus0.copy$default$1();
      assertNull(storageLevel0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      boolean boolean0 = blockStatus0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(storageLevel0).toString();
      BlockStatus blockStatus0 = BlockStatus.apply(storageLevel0, 0L, 0L);
      BlockStatus blockStatus1 = blockStatus0.copy((StorageLevel) null, 0L, (-1L));
      assertEquals(0L, blockStatus1.copy$default$2());
      assertEquals((-1L), blockStatus1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      Object object0 = blockStatus0.productElement(2);
      assertEquals(0L, object0);
      assertEquals(0L, blockStatus0.memSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      Object object0 = blockStatus0.productElement(1);
      assertEquals(0L, blockStatus0.diskSize());
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      blockStatus0.productElement(0);
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      StorageLevel storageLevel0 = blockStatus0.storageLevel();
      BlockStatus blockStatus1 = BlockStatus.apply(storageLevel0, 0L, 33L);
      long long0 = blockStatus1.copy$default$3();
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.copy$default$3());
      assertEquals(33L, long0);
      assertFalse(blockStatus0.isCached());
      assertEquals(0L, blockStatus1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      String string0 = blockStatus0.productPrefix();
      assertEquals(0L, blockStatus0.memSize());
      assertEquals("BlockStatus", string0);
      assertEquals(0L, blockStatus0.diskSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      long long0 = blockStatus0.memSize();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      long long0 = blockStatus0.diskSize();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      blockStatus0.productIterator();
      assertEquals(0L, blockStatus0.memSize());
      assertEquals(3, blockStatus0.productArity());
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      int int0 = blockStatus0.productArity();
      assertEquals(0L, blockStatus0.memSize());
      assertEquals(3, int0);
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StorageLevel storageLevel0 = mock(StorageLevel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(storageLevel0).toString();
      BlockStatus blockStatus0 = BlockStatus.apply(storageLevel0, (-2081L), 0L);
      blockStatus0.canEqual(blockStatus0);
      assertEquals((-2081L), blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.apply((StorageLevel) null, 533L, 533L);
      boolean boolean0 = blockStatus0.isCached();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      boolean boolean0 = blockStatus0.isCached();
      assertFalse(boolean0);
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.apply((StorageLevel) null, 533L, 533L);
      BlockStatus blockStatus1 = blockStatus0.copy((StorageLevel) null, 4941L, 533L);
      boolean boolean0 = blockStatus0.equals(blockStatus1);
      assertFalse(blockStatus1.equals((Object)blockStatus0));
      assertFalse(boolean0);
      assertTrue(blockStatus0.isCached());
      assertEquals(533L, blockStatus1.copy$default$3());
      assertEquals(4941L, blockStatus1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      BlockStatus blockStatus1 = new BlockStatus((StorageLevel) null, 2172L, 2172L);
      boolean boolean0 = blockStatus0.equals(blockStatus1);
      assertFalse(boolean0);
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.diskSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockStatus blockStatus0 = new BlockStatus((StorageLevel) null, (-1L), (-1L));
      BlockStatus blockStatus1 = BlockStatus.empty();
      boolean boolean0 = blockStatus0.equals(blockStatus1);
      assertEquals(0L, blockStatus1.copy$default$2());
      assertFalse(boolean0);
      assertEquals(0L, blockStatus1.diskSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.apply((StorageLevel) null, (-419L), (-419L));
      BlockStatus blockStatus1 = blockStatus0.copy((StorageLevel) null, (-419L), (-1635L));
      boolean boolean0 = blockStatus1.equals(blockStatus0);
      assertFalse(blockStatus0.equals((Object)blockStatus1));
      assertFalse(blockStatus1.isCached());
      assertFalse(boolean0);
      assertEquals((-419L), blockStatus0.copy$default$3());
      assertEquals((-419L), blockStatus1.copy$default$2());
      assertEquals((-419L), blockStatus0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      boolean boolean0 = blockStatus0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0L, blockStatus0.diskSize());
      assertEquals(0L, blockStatus0.memSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      boolean boolean0 = blockStatus0.equals(blockStatus0);
      assertFalse(blockStatus0.isCached());
      assertTrue(boolean0);
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      // Undeclared exception!
      try { 
        blockStatus0.productElement((-1129));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000076
         //
         verifyException("org.apache.spark.storage.BlockStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      BlockStatus.unapply(blockStatus0);
      assertEquals(0L, blockStatus0.copy$default$2());
      assertEquals(0L, blockStatus0.diskSize());
      assertFalse(blockStatus0.isCached());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      long long0 = blockStatus0.copy$default$2();
      assertEquals(0L, long0);
      assertEquals(0L, blockStatus0.diskSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option<Tuple3<StorageLevel, Object, Object>> option0 = BlockStatus.unapply((BlockStatus) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      blockStatus0.copy$default$1();
      assertFalse(blockStatus0.isCached());
      assertEquals(0L, blockStatus0.copy$default$3());
      assertEquals(0L, blockStatus0.memSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      long long0 = blockStatus0.copy$default$3();
      assertEquals(0L, long0);
      assertEquals(0L, blockStatus0.memSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      blockStatus0.hashCode();
      assertEquals(0L, blockStatus0.copy$default$3());
      assertEquals(0L, blockStatus0.memSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      BlockStatus blockStatus1 = BlockStatus.empty();
      boolean boolean0 = blockStatus0.equals(blockStatus1);
      assertEquals(0L, blockStatus1.diskSize());
      assertTrue(boolean0);
      assertEquals(0L, blockStatus1.memSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BlockStatus blockStatus0 = BlockStatus.empty();
      String string0 = blockStatus0.toString();
      assertEquals(3, blockStatus0.productArity());
      assertEquals("BlockStatus(StorageLevel(1 replicas),0,0)", string0);
  }
}
