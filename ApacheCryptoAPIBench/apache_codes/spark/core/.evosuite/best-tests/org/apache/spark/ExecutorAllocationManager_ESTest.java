/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:38:40 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.ExecutorAllocationClient;
import org.apache.spark.ExecutorAllocationManager;
import org.apache.spark.SparkConf;
import org.apache.spark.scheduler.LiveListenerBus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorAllocationManager_ESTest extends ExecutorAllocationManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LiveListenerBus liveListenerBus0 = mock(LiveListenerBus.class, new ViolatedAssumptionAnswer());
      SparkConf sparkConf0 = mock(SparkConf.class, new ViolatedAssumptionAnswer());
      ExecutorAllocationManager executorAllocationManager0 = null;
      try {
        executorAllocationManager0 = new ExecutorAllocationManager((ExecutorAllocationClient) null, liveListenerBus0, sparkConf0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.spark.internal.config.package$
         //
         verifyException("org.apache.spark.ExecutorAllocationManager", e);
      }
  }
}
