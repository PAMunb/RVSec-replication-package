/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:58:34 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.FairSchedulingAlgorithm;
import org.apache.spark.scheduler.Schedulable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FairSchedulingAlgorithm_ESTest extends FairSchedulingAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FairSchedulingAlgorithm fairSchedulingAlgorithm0 = new FairSchedulingAlgorithm();
      Schedulable schedulable0 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn((-1813), (-1813)).when(schedulable0).minShare();
      doReturn((-1813), 0).when(schedulable0).runningTasks();
      doReturn(0, 0).when(schedulable0).weight();
      boolean boolean0 = fairSchedulingAlgorithm0.comparator(schedulable0, schedulable0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FairSchedulingAlgorithm fairSchedulingAlgorithm0 = new FairSchedulingAlgorithm();
      Schedulable schedulable0 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schedulable0).minShare();
      doReturn((String) null).when(schedulable0).name();
      doReturn(0).when(schedulable0).runningTasks();
      doReturn(0).when(schedulable0).weight();
      Schedulable schedulable1 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(schedulable1).minShare();
      doReturn((String) null).when(schedulable1).name();
      doReturn(0).when(schedulable1).runningTasks();
      doReturn(0).when(schedulable1).weight();
      // Undeclared exception!
      try { 
        fairSchedulingAlgorithm0.comparator(schedulable0, schedulable1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("scala.collection.immutable.StringLike$class", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FairSchedulingAlgorithm fairSchedulingAlgorithm0 = new FairSchedulingAlgorithm();
      Schedulable schedulable0 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn(6458, 6458).when(schedulable0).minShare();
      doReturn(6458, 6458).when(schedulable0).runningTasks();
      doReturn(6458, (-32768)).when(schedulable0).weight();
      boolean boolean0 = fairSchedulingAlgorithm0.comparator(schedulable0, schedulable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FairSchedulingAlgorithm fairSchedulingAlgorithm0 = new FairSchedulingAlgorithm();
      Schedulable schedulable0 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn((-1020), 2116).when(schedulable0).minShare();
      doReturn((-2030), 0).when(schedulable0).runningTasks();
      doReturn(0, (-2030)).when(schedulable0).weight();
      boolean boolean0 = fairSchedulingAlgorithm0.comparator(schedulable0, schedulable0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FairSchedulingAlgorithm fairSchedulingAlgorithm0 = new FairSchedulingAlgorithm();
      Schedulable schedulable0 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn((-185), (-185)).when(schedulable0).minShare();
      doReturn((-1), (-1129)).when(schedulable0).runningTasks();
      doReturn((-1129), 65535).when(schedulable0).weight();
      boolean boolean0 = fairSchedulingAlgorithm0.comparator(schedulable0, schedulable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FairSchedulingAlgorithm fairSchedulingAlgorithm0 = new FairSchedulingAlgorithm();
      Schedulable schedulable0 = mock(Schedulable.class, new ViolatedAssumptionAnswer());
      doReturn(792, (-1129)).when(schedulable0).minShare();
      doReturn(15, (-1129)).when(schedulable0).runningTasks();
      doReturn((-1578), 0).when(schedulable0).weight();
      boolean boolean0 = fairSchedulingAlgorithm0.comparator(schedulable0, schedulable0);
      assertTrue(boolean0);
  }
}
