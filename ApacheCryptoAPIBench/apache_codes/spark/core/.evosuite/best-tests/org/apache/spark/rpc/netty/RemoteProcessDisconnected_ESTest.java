/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:59:56 GMT 2022
 */

package org.apache.spark.rpc.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.rpc.RpcAddress;
import org.apache.spark.rpc.netty.RemoteProcessDisconnected;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RemoteProcessDisconnected_ESTest extends RemoteProcessDisconnected_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      Object object0 = remoteProcessDisconnected0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(rpcAddress0).toString();
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply(rpcAddress0);
      boolean boolean0 = remoteProcessDisconnected0.canEqual(remoteProcessDisconnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "scala.collection.Iterator$class").when(rpcAddress0).toString();
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply(rpcAddress0);
      Object object0 = remoteProcessDisconnected0.productElement(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected(rpcAddress0);
      String string0 = remoteProcessDisconnected0.productPrefix();
      assertEquals("RemoteProcessDisconnected", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected(rpcAddress0);
      int int0 = remoteProcessDisconnected0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      RpcAddress rpcAddress0 = remoteProcessDisconnected0.remoteAddress();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress0).toString();
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply(rpcAddress0);
      remoteProcessDisconnected0.productIterator();
      assertEquals(1, remoteProcessDisconnected0.productArity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      Option<RpcAddress> option0 = RemoteProcessDisconnected.unapply(remoteProcessDisconnected0);
      assertEquals(1, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(rpcAddress0).toString();
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply(rpcAddress0);
      RpcAddress rpcAddress1 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("").when(rpcAddress1).toString();
      RemoteProcessDisconnected remoteProcessDisconnected1 = new RemoteProcessDisconnected(rpcAddress1);
      boolean boolean0 = remoteProcessDisconnected1.equals(remoteProcessDisconnected0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(rpcAddress0).toString();
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply(rpcAddress0);
      RemoteProcessDisconnected remoteProcessDisconnected1 = new RemoteProcessDisconnected((RpcAddress) null);
      boolean boolean0 = remoteProcessDisconnected1.equals(remoteProcessDisconnected0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(rpcAddress0).toString();
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply(rpcAddress0);
      RemoteProcessDisconnected remoteProcessDisconnected1 = remoteProcessDisconnected0.copy(rpcAddress0);
      boolean boolean0 = remoteProcessDisconnected1.equals(remoteProcessDisconnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      RemoteProcessDisconnected remoteProcessDisconnected1 = new RemoteProcessDisconnected((RpcAddress) null);
      boolean boolean0 = remoteProcessDisconnected1.equals(remoteProcessDisconnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      boolean boolean0 = remoteProcessDisconnected0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      boolean boolean0 = remoteProcessDisconnected0.equals(remoteProcessDisconnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      // Undeclared exception!
      try { 
        remoteProcessDisconnected0.productElement(26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.rpc.netty.RemoteProcessDisconnected", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Function1<RpcAddress, RpcAddress> function1_0 = RemoteProcessDisconnected.andThen((Function1<RemoteProcessDisconnected, RpcAddress>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply((RpcAddress) null);
      RpcAddress rpcAddress0 = remoteProcessDisconnected0.copy$default$1();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<RpcAddress> option0 = RemoteProcessDisconnected.unapply((RemoteProcessDisconnected) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      boolean boolean0 = remoteProcessDisconnected0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = RemoteProcessDisconnected.apply((RpcAddress) null);
      remoteProcessDisconnected0.hashCode();
      assertEquals(1, remoteProcessDisconnected0.productArity());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteProcessDisconnected remoteProcessDisconnected0 = new RemoteProcessDisconnected((RpcAddress) null);
      String string0 = remoteProcessDisconnected0.toString();
      assertEquals("RemoteProcessDisconnected(null)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<RpcAddress, RemoteProcessDisconnected> function1_0 = RemoteProcessDisconnected.compose((Function1<RpcAddress, RpcAddress>) null);
      assertNotNull(function1_0);
  }
}
