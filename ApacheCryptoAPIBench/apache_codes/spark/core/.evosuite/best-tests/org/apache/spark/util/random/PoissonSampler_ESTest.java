/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:57:30 GMT 2022
 */

package org.apache.spark.util.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.spark.util.random.GapSamplingReplacement;
import org.apache.spark.util.random.PoissonSampler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Iterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PoissonSampler_ESTest extends PoissonSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.4);
      int int0 = poissonSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonSampler<Object> poissonSampler0 = new PoissonSampler<Object>((-1.8297013058336644E-8));
      int int0 = poissonSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>((-1.0E-6));
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator1 = poissonSampler0.sample(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = null;
      try {
        poissonSampler0 = new PoissonSampler<Integer>(Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (NaN) must be >= 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.4);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(iterator0).flatMap(any(scala.Function1.class));
      Iterator<Integer> iterator1 = poissonSampler0.sample(iterator0);
      assertNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonSampler<Object> poissonSampler0 = new PoissonSampler<Object>(0.38, true);
      GapSamplingReplacement gapSamplingReplacement0 = poissonSampler0.org$apache$spark$util$random$PoissonSampler$$gapSamplingReplacement();
      assertEquals(5.0E-11, gapSamplingReplacement0.org$apache$spark$util$random$GapSamplingReplacement$$epsilon, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonSampler<Object> poissonSampler0 = new PoissonSampler<Object>(4.9E-324, true);
      PoissonSampler<Object> poissonSampler1 = poissonSampler0.clone();
      PoissonSampler<Object> poissonSampler2 = poissonSampler0.clone();
      PoissonSampler<Integer> poissonSampler3 = new PoissonSampler<Integer>(4.9E-324, false);
      poissonSampler3.setSeed(0L);
      poissonSampler1.setSeed(0);
      poissonSampler3.setSeed((-1863L));
      poissonSampler2.setSeed(0);
      // Undeclared exception!
      poissonSampler3.setSeed(0L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(2.325337720526947E133);
      // Undeclared exception!
      poissonSampler0.sample();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonSampler<Object> poissonSampler0 = new PoissonSampler<Object>(4.9E-324, true);
      PoissonSampler<Object> poissonSampler1 = poissonSampler0.clone();
      PoissonSampler<Object> poissonSampler2 = poissonSampler0.clone();
      PoissonSampler<Integer> poissonSampler3 = new PoissonSampler<Integer>(4.9E-324, true);
      poissonSampler3.setSeed(0L);
      poissonSampler1.clone();
      poissonSampler3.setSeed((-1863L));
      poissonSampler2.setSeed(0);
      poissonSampler3.setSeed(0L);
      poissonSampler3.clone();
      // Undeclared exception!
      poissonSampler1.clone();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonSampler<Object> poissonSampler0 = new PoissonSampler<Object>(4.9E-324, true);
      PoissonSampler<Object> poissonSampler1 = poissonSampler0.clone();
      PoissonSampler<Object> poissonSampler2 = poissonSampler0.clone();
      PoissonSampler<Integer> poissonSampler3 = new PoissonSampler<Integer>(4.9E-324, false);
      poissonSampler3.setSeed(0L);
      poissonSampler1.clone();
      poissonSampler3.setSeed((-1863L));
      poissonSampler2.setSeed(0);
      poissonSampler3.setSeed(0L);
      poissonSampler3.clone();
      PoissonSampler<Object> poissonSampler4 = new PoissonSampler<Object>(0L, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = null;
      try {
        poissonSampler0 = new PoissonSampler<Integer>((-1865.844646633), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (-1865.844646633) must be >= 0
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(1053.84039381);
      GapSamplingReplacement gapSamplingReplacement0 = poissonSampler0.org$apache$spark$util$random$PoissonSampler$$gapSamplingReplacement();
      GapSamplingReplacement gapSamplingReplacement1 = poissonSampler0.org$apache$spark$util$random$PoissonSampler$$gapSamplingReplacement();
      assertSame(gapSamplingReplacement1, gapSamplingReplacement0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonSampler<Object> poissonSampler0 = new PoissonSampler<Object>(4.9E-324, true);
      PoissonDistribution poissonDistribution0 = poissonSampler0.org$apache$spark$util$random$PoissonSampler$$rng();
      assertEquals(4.9E-324, poissonDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(2.4240442814945802E83);
      // Undeclared exception!
      try { 
        poissonSampler0.sample((Iterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.random.PoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.4, false);
      // Undeclared exception!
      try { 
        poissonSampler0.sample((Iterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.random.PoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.0);
      Iterator<Integer> iterator0 = poissonSampler0.sample((Iterator<Integer>) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.38);
      // Undeclared exception!
      try { 
        poissonSampler0.sample((Iterator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.random.PoissonSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(664.86327, false);
      int int0 = poissonSampler0.sample();
      assertEquals(630, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.0);
      int int0 = poissonSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(1.0E-9);
      poissonSampler0.sample();
      int int0 = poissonSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonSampler<Integer> poissonSampler0 = new PoissonSampler<Integer>(0.0);
      // Undeclared exception!
      try { 
        poissonSampler0.org$apache$spark$util$random$PoissonSampler$$gapSamplingReplacement();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (0.0) must be > 0
         //
         verifyException("scala.Predef$", e);
      }
  }
}
