/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:05:31 GMT 2022
 */

package org.apache.spark.deploy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.deploy.Command;
import org.apache.spark.deploy.DriverDescription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DriverDescription_ESTest extends DriverDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(command0).mainClass();
      doReturn((String) null).when(command0).toString();
      DriverDescription driverDescription0 = new DriverDescription("org.apache.spark.deploy.DriverDescription$", (-375), 5, true, command0);
      String string0 = driverDescription0.toString();
      assertEquals("DriverDescription (null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("scala.Some", 0, 0, false, command0);
      boolean boolean0 = driverDescription0.supervise();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("d0E3p-bl_<eL", 0, 0, false, command0);
      int int0 = driverDescription0.mem();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, 1139, 0, false, command0);
      int int0 = driverDescription0.mem();
      assertEquals(1139, int0);
      assertEquals(0, driverDescription0.cores());
      assertFalse(driverDescription0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription((String) null, (-594), 0, false, command0);
      String string0 = driverDescription0.jarUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn("scala.collection.Seq$class", "b^F[m/YO").when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("", 0, 0, false, command0);
      driverDescription0.jarUrl();
      assertFalse(driverDescription0.copy$default$4());
      assertEquals(0, driverDescription0.copy$default$2());
      assertEquals(0, driverDescription0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription((String) null, (-594), 0, false, command0);
      int int0 = driverDescription0.cores();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("", 0, 5, true, command0);
      int int0 = driverDescription0.cores();
      assertTrue(driverDescription0.copy$default$4());
      assertEquals(5, int0);
      assertEquals(0, driverDescription0.mem());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("i\"2-@!Xdfcf", (-567), (-567), true, command0);
      DriverDescription driverDescription1 = driverDescription0.copy("i\"2-@!Xdfcf", (-1), 5, true, (Command) null);
      assertEquals(5, driverDescription1.cores());
      assertEquals((-1), driverDescription1.copy$default$2());
      assertTrue(driverDescription1.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("Map", 4979, 4979, false, command0);
      Command command1 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(command1).mainClass();
      DriverDescription driverDescription1 = driverDescription0.copy("", 24, 0, false, command1);
      assertFalse(driverDescription1.supervise());
      assertEquals(0, driverDescription1.copy$default$3());
      assertEquals(4979, driverDescription0.copy$default$3());
      assertFalse(driverDescription0.copy$default$4());
      assertEquals(24, driverDescription1.copy$default$2());
      assertEquals(4979, driverDescription0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("8Ix_<r%WH@@g", 5, (-2481), true, command0);
      boolean boolean0 = driverDescription0.copy$default$4();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("", (-889275714), 1231, false, command0);
      int int0 = driverDescription0.copy$default$3();
      assertEquals(1231, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("[t<+/2V=*~Pcq", (-78), (-728), true, command0);
      int int0 = driverDescription0.copy$default$3();
      assertEquals((-728), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("", 0, 0, false, command0);
      int int0 = driverDescription0.copy$default$2();
      assertEquals(0, driverDescription0.cores());
      assertEquals(0, int0);
      assertFalse(driverDescription0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("DriverDescription (", 48, 430, true, command0);
      int int0 = driverDescription0.copy$default$2();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, (-1396), (-1396), true, command0);
      driverDescription0.copy$default$1();
      assertEquals((-1396), driverDescription0.copy$default$3());
      assertEquals((-1396), driverDescription0.copy$default$2());
      assertTrue(driverDescription0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      DriverDescription driverDescription0 = new DriverDescription("d0E3p-bl_<eL", 0, 0, false, command0);
      Command command1 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(command1).mainClass();
      DriverDescription driverDescription1 = driverDescription0.copy("", 0, 0, true, command1);
      driverDescription1.copy$default$1();
      assertEquals(0, driverDescription1.cores());
      assertTrue(driverDescription1.supervise());
      assertEquals(0, driverDescription1.mem());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, (-835), (-835), false, command0);
      DriverDescription driverDescription1 = driverDescription0.copy((String) null, (-1), (-835), false, (Command) null);
      driverDescription1.command();
      assertEquals((-835), driverDescription1.copy$default$3());
      assertEquals((-835), driverDescription0.copy$default$3());
      assertEquals((-835), driverDescription0.mem());
      assertFalse(driverDescription0.copy$default$4());
      assertFalse(driverDescription1.supervise());
      assertEquals((-1), driverDescription1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("wvD,&sL*~v0.<", (-1212), (-1212), false, command0);
      driverDescription0.jarUrl();
      assertFalse(driverDescription0.copy$default$4());
      assertEquals((-1212), driverDescription0.copy$default$3());
      assertEquals((-1212), driverDescription0.mem());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("<", (-558), 0, true, command0);
      boolean boolean0 = driverDescription0.supervise();
      assertEquals((-558), driverDescription0.mem());
      assertTrue(boolean0);
      assertEquals(0, driverDescription0.cores());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, 0, 0, false, command0);
      int int0 = driverDescription0.productArity();
      assertEquals(5, int0);
      assertEquals(0, driverDescription0.mem());
      assertFalse(driverDescription0.supervise());
      assertEquals(0, driverDescription0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("wvD,&sL*~v0.<", (-1212), (-1212), false, command0);
      int int0 = driverDescription0.mem();
      assertFalse(driverDescription0.copy$default$4());
      assertEquals((-1212), driverDescription0.copy$default$3());
      assertEquals((-1212), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("org.apache.spark.deploy.DriverDescription", (-3932), (-3932), false, (Command) null);
      int int0 = driverDescription0.cores();
      assertEquals((-3932), driverDescription0.mem());
      assertEquals((-3932), int0);
      assertFalse(driverDescription0.supervise());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription("PY${^V^B0", 1200, 1200, true, (Command) null);
      boolean boolean0 = driverDescription0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, (-27), (-27), true, (Command) null);
      boolean boolean0 = driverDescription0.equals(driverDescription0);
      assertEquals((-27), driverDescription0.mem());
      assertTrue(driverDescription0.copy$default$4());
      assertTrue(boolean0);
      assertEquals((-27), driverDescription0.cores());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription("PY${kw^B0", 1263, 1263, true, (Command) null);
      driverDescription0.hashCode();
      assertEquals(1263, driverDescription0.copy$default$3());
      assertEquals(1263, driverDescription0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("", 2, 2, false, (Command) null);
      driverDescription0.hashCode();
      assertEquals(2, driverDescription0.cores());
      assertEquals(2, driverDescription0.mem());
      assertFalse(driverDescription0.supervise());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription((String) null, 4, 4, true, (Command) null);
      Object object0 = driverDescription0.productElement(4);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription("PY${^V^B0", 1242, 1242, true, (Command) null);
      Object object0 = driverDescription0.productElement(3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription("PY${^V^n0", 2, 2, true, (Command) null);
      Object object0 = driverDescription0.productElement(2);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("=#", 1, 1, true, (Command) null);
      Object object0 = driverDescription0.productElement(1);
      assertTrue(driverDescription0.copy$default$4());
      assertEquals(1, object0);
      assertEquals(1, driverDescription0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("BM", 1289, 1289, true, (Command) null);
      // Undeclared exception!
      try { 
        driverDescription0.productElement(1289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000006
         //
         verifyException("org.apache.spark.deploy.DriverDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option<Tuple5<String, Object, Object, Object, Command>> option0 = DriverDescription.unapply((DriverDescription) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply(";`B6{", (-889275714), (-889275714), false, (Command) null);
      driverDescription0.canEqual((Object) null);
      assertFalse(driverDescription0.supervise());
      assertEquals((-889275714), driverDescription0.copy$default$2());
      assertEquals((-889275714), driverDescription0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, 0, 0, true, (Command) null);
      // Undeclared exception!
      try { 
        driverDescription0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.deploy.DriverDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription((String) null, 0, 0, true, (Command) null);
      int int0 = driverDescription0.copy$default$3();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription("PY${^V^B0", (-3650), (-3650), false, (Command) null);
      driverDescription0.productIterator();
      assertEquals(5, driverDescription0.productArity());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DriverDescription driverDescription0 = new DriverDescription("step cannot be 0.", (-261), (-261), false, (Command) null);
      int int0 = driverDescription0.copy$default$2();
      assertEquals((-261), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("yi", (-767), (-602), false, (Command) null);
      driverDescription0.copy$default$1();
      assertEquals((-602), driverDescription0.copy$default$3());
      assertEquals((-767), driverDescription0.mem());
      assertFalse(driverDescription0.supervise());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Function1<Tuple5<String, Object, Object, Object, Command>, DriverDescription> function1_0 = DriverDescription.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Function1<String, Function1<Object, Function1<Object, Function1<Object, Function1<Command, DriverDescription>>>>> function1_0 = DriverDescription.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("l~O>,qycJr'+;c{?", (-1618), (-1618), false, (Command) null);
      String string0 = driverDescription0.productPrefix();
      assertEquals("DriverDescription", string0);
      assertFalse(driverDescription0.supervise());
      assertEquals((-1618), driverDescription0.copy$default$3());
      assertEquals((-1618), driverDescription0.mem());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Command command0 = mock(Command.class, new ViolatedAssumptionAnswer());
      doReturn("scala.collection.Seq$class", "b^F[m/YO").when(command0).mainClass();
      DriverDescription driverDescription0 = DriverDescription.apply("", 0, 0, false, command0);
      boolean boolean0 = driverDescription0.copy$default$4();
      assertEquals(0, driverDescription0.copy$default$2());
      assertEquals(0, driverDescription0.copy$default$3());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("$pp9$AO", 2932, 2932, false, (Command) null);
      driverDescription0.copy$default$5();
      assertEquals(2932, driverDescription0.cores());
      assertFalse(driverDescription0.supervise());
      assertEquals(2932, driverDescription0.mem());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply((String) null, 55, 55, true, (Command) null);
      Option<Tuple5<String, Object, Object, Object, Command>> option0 = DriverDescription.unapply(driverDescription0);
      assertEquals("Some", option0.productPrefix());
      assertEquals(55, driverDescription0.copy$default$2());
      assertTrue(driverDescription0.supervise());
      assertEquals(55, driverDescription0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DriverDescription driverDescription0 = DriverDescription.apply("=a0!A#E/FFw-6+nN-G", 0, 0, true, (Command) null);
      Object object0 = driverDescription0.productElement(0);
      assertEquals("=a0!A#E/FFw-6+nN-G", object0);
      assertEquals(0, driverDescription0.copy$default$3());
      assertEquals(0, driverDescription0.mem());
      assertTrue(driverDescription0.copy$default$4());
  }
}
