/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:30:04 GMT 2022
 */

package org.apache.spark.partial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.partial.BoundedDouble;
import org.apache.spark.partial.MeanEvaluator;
import org.apache.spark.util.StatCounter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MeanEvaluator_ESTest extends MeanEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MeanEvaluator meanEvaluator0 = new MeanEvaluator((-1974), 2.718281828459045);
      assertNotNull(meanEvaluator0);
      
      BoundedDouble boundedDouble0 = meanEvaluator0.currentResult();
      assertEquals(Double.POSITIVE_INFINITY, boundedDouble0.high(), 0.01);
      assertEquals(0.0, boundedDouble0.confidence(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, boundedDouble0.low(), 0.01);
      assertEquals(0.0, boundedDouble0.mean(), 0.01);
      assertNotNull(boundedDouble0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MeanEvaluator meanEvaluator0 = new MeanEvaluator(1863, 1863);
      assertNotNull(meanEvaluator0);
      
      // Undeclared exception!
      try { 
        meanEvaluator0.merge(1863, (StatCounter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.StatCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MeanEvaluator meanEvaluator0 = new MeanEvaluator(1, 1);
      assertNotNull(meanEvaluator0);
      
      StatCounter statCounter0 = mock(StatCounter.class, new ViolatedAssumptionAnswer());
      meanEvaluator0.merge(1, statCounter0);
      BoundedDouble boundedDouble0 = meanEvaluator0.currentResult();
      assertEquals(0.0, boundedDouble0.mean(), 0.01);
      assertEquals(0.0, boundedDouble0.low(), 0.01);
      assertEquals(1.0, boundedDouble0.confidence(), 0.01);
      assertEquals(0.0, boundedDouble0.high(), 0.01);
      assertNotNull(boundedDouble0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MeanEvaluator meanEvaluator0 = new MeanEvaluator(452, 452);
      assertNotNull(meanEvaluator0);
      
      BoundedDouble boundedDouble0 = meanEvaluator0.currentResult();
      assertEquals(0.0, boundedDouble0.mean(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, boundedDouble0.low(), 0.01);
      assertEquals(0.0, boundedDouble0.confidence(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, boundedDouble0.high(), 0.01);
      assertNotNull(boundedDouble0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MeanEvaluator meanEvaluator0 = new MeanEvaluator(452, 452);
      StatCounter statCounter0 = mock(StatCounter.class, new ViolatedAssumptionAnswer());
      meanEvaluator0.merge(452, statCounter0);
      BoundedDouble boundedDouble0 = meanEvaluator0.currentResult();
      assertEquals(Double.POSITIVE_INFINITY, boundedDouble0.high(), 0.01);
      assertEquals(0.0, boundedDouble0.confidence(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, boundedDouble0.low(), 0.01);
      assertEquals(0.0, boundedDouble0.mean(), 0.01);
  }
}
