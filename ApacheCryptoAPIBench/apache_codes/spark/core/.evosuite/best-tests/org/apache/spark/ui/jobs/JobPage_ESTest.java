/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:56:53 GMT 2022
 */

package org.apache.spark.ui.jobs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.http.HttpServletRequest;
import org.apache.spark.status.AppStatusStore;
import org.apache.spark.status.api.v1.ExecutorSummary;
import org.apache.spark.ui.jobs.JobPage;
import org.apache.spark.ui.jobs.JobsTab;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JobPage_ESTest extends JobPage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JobsTab jobsTab0 = mock(JobsTab.class, new ViolatedAssumptionAnswer());
      JobPage jobPage0 = new JobPage(jobsTab0, (AppStatusStore) null);
      assertEquals("job", jobPage0.prefix());
      assertNotNull(jobPage0);
      
      Seq<ExecutorSummary> seq0 = (Seq<ExecutorSummary>) mock(Seq.class, new ViolatedAssumptionAnswer());
      Seq<String> seq1 = jobPage0.makeExecutorEvent(seq0);
      assertEquals("job", jobPage0.prefix());
      assertTrue(seq1.isTraversableAgain());
      assertNotNull(seq1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JobsTab jobsTab0 = mock(JobsTab.class, new ViolatedAssumptionAnswer());
      JobPage jobPage0 = new JobPage(jobsTab0, (AppStatusStore) null);
      assertEquals("job", jobPage0.prefix());
      assertNotNull(jobPage0);
      
      // Undeclared exception!
      try { 
        jobPage0.render((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobPage", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JobsTab jobsTab0 = mock(JobsTab.class, new ViolatedAssumptionAnswer());
      JobPage jobPage0 = new JobPage(jobsTab0, (AppStatusStore) null);
      assertEquals("job", jobPage0.prefix());
      assertNotNull(jobPage0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(httpServletRequest0).getParameter(anyString());
      // Undeclared exception!
      try { 
        jobPage0.render(httpServletRequest0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JobsTab jobsTab0 = mock(JobsTab.class, new ViolatedAssumptionAnswer());
      JobPage jobPage0 = new JobPage(jobsTab0, (AppStatusStore) null);
      assertEquals("job", jobPage0.prefix());
      assertNotNull(jobPage0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getParameter(anyString());
      // Undeclared exception!
      try { 
        jobPage0.render(httpServletRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Missing id parameter
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JobsTab jobsTab0 = mock(JobsTab.class, new ViolatedAssumptionAnswer());
      JobPage jobPage0 = new JobPage(jobsTab0, (AppStatusStore) null);
      assertEquals("job", jobPage0.prefix());
      assertNotNull(jobPage0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getParameter(anyString());
      // Undeclared exception!
      try { 
        jobPage0.render(httpServletRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Missing id parameter
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JobsTab jobsTab0 = mock(JobsTab.class, new ViolatedAssumptionAnswer());
      JobPage jobPage0 = new JobPage(jobsTab0, (AppStatusStore) null);
      assertEquals("job", jobPage0.prefix());
      assertNotNull(jobPage0);
      
      // Undeclared exception!
      try { 
        jobPage0.makeExecutorEvent((Seq<ExecutorSummary>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ui.jobs.JobPage", e);
      }
  }
}
