/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:38:57 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.GetMapOutputMessage;
import org.apache.spark.rpc.RpcCallContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GetMapOutputMessage_ESTest extends GetMapOutputMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage(4147, rpcCallContext0);
      RpcCallContext rpcCallContext1 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage1 = new GetMapOutputMessage((-954), rpcCallContext1);
      boolean boolean0 = getMapOutputMessage0.equals(getMapOutputMessage1);
      assertFalse(boolean0);
      assertEquals((-954), getMapOutputMessage1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage(93, rpcCallContext0);
      int int0 = getMapOutputMessage0.shuffleId();
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage((-3260), rpcCallContext0);
      int int0 = getMapOutputMessage0.shuffleId();
      assertEquals((-3260), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(1, rpcCallContext0);
      getMapOutputMessage0.productElement(1);
      assertEquals(1, getMapOutputMessage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(0, rpcCallContext0);
      GetMapOutputMessage getMapOutputMessage1 = getMapOutputMessage0.copy(0, (RpcCallContext) null);
      assertEquals(0, getMapOutputMessage0.shuffleId());
      assertEquals(0, getMapOutputMessage1.shuffleId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-2446), rpcCallContext0);
      getMapOutputMessage0.copy$default$2();
      assertEquals((-2446), getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(0, rpcCallContext0);
      int int0 = getMapOutputMessage0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(2635, rpcCallContext0);
      int int0 = getMapOutputMessage0.copy$default$1();
      assertEquals(2635, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(855, rpcCallContext0);
      getMapOutputMessage0.context();
      assertEquals(855, getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage(4132, rpcCallContext0);
      boolean boolean0 = getMapOutputMessage0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage(0, rpcCallContext0);
      Object object0 = getMapOutputMessage0.productElement(0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-1157), (RpcCallContext) null);
      getMapOutputMessage0.productElement(1);
      assertEquals((-1157), getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(0, rpcCallContext0);
      getMapOutputMessage0.canEqual(getMapOutputMessage0);
      assertEquals(0, getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-1157), (RpcCallContext) null);
      int int0 = getMapOutputMessage0.productArity();
      assertEquals(2, int0);
      assertEquals((-1157), getMapOutputMessage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(646, rpcCallContext0);
      String string0 = getMapOutputMessage0.productPrefix();
      assertEquals(646, getMapOutputMessage0.shuffleId());
      assertEquals("GetMapOutputMessage", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage((-62), (RpcCallContext) null);
      getMapOutputMessage0.productIterator();
      assertEquals(2, getMapOutputMessage0.productArity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-889275714), (RpcCallContext) null);
      getMapOutputMessage0.context();
      assertEquals((-889275714), getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage(0, rpcCallContext0);
      int int0 = getMapOutputMessage0.shuffleId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-889275714), rpcCallContext0);
      RpcCallContext rpcCallContext1 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rpcCallContext1).toString();
      GetMapOutputMessage getMapOutputMessage1 = GetMapOutputMessage.apply((-889275714), rpcCallContext1);
      boolean boolean0 = getMapOutputMessage0.equals(getMapOutputMessage1);
      assertFalse(boolean0);
      assertEquals((-889275714), getMapOutputMessage1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(2, rpcCallContext0);
      GetMapOutputMessage getMapOutputMessage1 = new GetMapOutputMessage(2, (RpcCallContext) null);
      boolean boolean0 = getMapOutputMessage1.equals(getMapOutputMessage0);
      assertFalse(boolean0);
      assertEquals(2, getMapOutputMessage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RpcCallContext rpcCallContext0 = mock(RpcCallContext.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(rpcCallContext0).toString();
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-1880), rpcCallContext0);
      GetMapOutputMessage getMapOutputMessage1 = new GetMapOutputMessage((-1880), rpcCallContext0);
      boolean boolean0 = getMapOutputMessage0.equals(getMapOutputMessage1);
      assertEquals((-1880), getMapOutputMessage1.shuffleId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(0, (RpcCallContext) null);
      GetMapOutputMessage getMapOutputMessage1 = getMapOutputMessage0.copy(4007, (RpcCallContext) null);
      boolean boolean0 = getMapOutputMessage0.equals(getMapOutputMessage1);
      assertFalse(getMapOutputMessage1.equals((Object)getMapOutputMessage0));
      assertEquals(4007, getMapOutputMessage1.shuffleId());
      assertEquals(0, getMapOutputMessage0.copy$default$1());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(5973, (RpcCallContext) null);
      boolean boolean0 = getMapOutputMessage0.equals(getMapOutputMessage0);
      assertTrue(boolean0);
      assertEquals(5973, getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-578), (RpcCallContext) null);
      // Undeclared exception!
      try { 
        getMapOutputMessage0.productElement((-578));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.GetMapOutputMessage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option<Tuple2<Object, RpcCallContext>> option0 = GetMapOutputMessage.unapply((GetMapOutputMessage) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function1<Object, Function1<RpcCallContext, GetMapOutputMessage>> function1_0 = GetMapOutputMessage.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Function1<Tuple2<Object, RpcCallContext>, GetMapOutputMessage> function1_0 = GetMapOutputMessage.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-889275714), (RpcCallContext) null);
      GetMapOutputMessage getMapOutputMessage1 = getMapOutputMessage0.copy((-889275714), (RpcCallContext) null);
      boolean boolean0 = getMapOutputMessage1.equals(getMapOutputMessage0);
      assertTrue(boolean0);
      assertEquals((-889275714), getMapOutputMessage1.shuffleId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-4134), (RpcCallContext) null);
      getMapOutputMessage0.copy$default$2();
      assertEquals((-4134), getMapOutputMessage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-4134), (RpcCallContext) null);
      getMapOutputMessage0.hashCode();
      assertEquals((-4134), getMapOutputMessage0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage(134, (RpcCallContext) null);
      String string0 = getMapOutputMessage0.toString();
      assertEquals("GetMapOutputMessage(134,null)", string0);
      assertEquals(2, getMapOutputMessage0.productArity());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = new GetMapOutputMessage((-62), (RpcCallContext) null);
      int int0 = getMapOutputMessage0.copy$default$1();
      assertEquals((-62), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply((-2178), (RpcCallContext) null);
      GetMapOutputMessage.unapply(getMapOutputMessage0);
      assertEquals((-2178), getMapOutputMessage0.shuffleId());
      assertEquals((-2178), getMapOutputMessage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GetMapOutputMessage getMapOutputMessage0 = GetMapOutputMessage.apply(46, (RpcCallContext) null);
      boolean boolean0 = getMapOutputMessage0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(46, getMapOutputMessage0.copy$default$1());
  }
}
