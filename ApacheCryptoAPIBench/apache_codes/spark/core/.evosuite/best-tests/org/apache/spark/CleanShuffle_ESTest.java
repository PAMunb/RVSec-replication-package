/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:15:01 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.CleanShuffle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleanShuffle_ESTest extends CleanShuffle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(0);
      CleanShuffle cleanShuffle1 = CleanShuffle.apply((-4937));
      boolean boolean0 = cleanShuffle1.equals(cleanShuffle0);
      assertFalse(cleanShuffle0.equals((Object)cleanShuffle1));
      assertEquals((-4937), cleanShuffle1.shuffleId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-1306));
      CleanShuffle cleanShuffle1 = cleanShuffle0.copy(0);
      int int0 = cleanShuffle1.shuffleId();
      assertEquals(0, int0);
      assertEquals((-1306), cleanShuffle0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(1130);
      int int0 = cleanShuffle0.shuffleId();
      assertEquals(1130, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-1306));
      CleanShuffle cleanShuffle1 = cleanShuffle0.copy(31);
      assertEquals(31, cleanShuffle1.shuffleId());
      assertEquals((-1306), cleanShuffle0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(0);
      CleanShuffle cleanShuffle1 = cleanShuffle0.copy((-4937));
      assertEquals(0, cleanShuffle0.copy$default$1());
      assertEquals((-4937), cleanShuffle1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(32768);
      int int0 = cleanShuffle0.copy$default$1();
      assertEquals(32768, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-428));
      int int0 = cleanShuffle0.copy$default$1();
      assertEquals((-428), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-1306));
      Object object0 = cleanShuffle0.productElement(0);
      assertEquals((-1306), object0);
      
      cleanShuffle0.canEqual(object0);
      assertEquals((-1306), cleanShuffle0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(32768);
      int int0 = cleanShuffle0.productArity();
      assertEquals(1, int0);
      assertEquals(32768, cleanShuffle0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-1306));
      int int0 = cleanShuffle0.shuffleId();
      assertEquals((-1306), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(32768);
      cleanShuffle0.productIterator();
      assertEquals(32768, cleanShuffle0.copy$default$1());
      assertEquals(1, cleanShuffle0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(1130);
      String string0 = cleanShuffle0.productPrefix();
      assertEquals("CleanShuffle", string0);
      assertEquals(1130, cleanShuffle0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(2159);
      CleanShuffle cleanShuffle1 = CleanShuffle.apply((-889275714));
      boolean boolean0 = cleanShuffle0.equals(cleanShuffle1);
      assertEquals((-889275714), cleanShuffle1.copy$default$1());
      assertFalse(boolean0);
      assertFalse(cleanShuffle1.equals((Object)cleanShuffle0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-1712));
      CleanShuffle cleanShuffle1 = new CleanShuffle((-1712));
      boolean boolean0 = cleanShuffle0.equals(cleanShuffle1);
      assertEquals((-1712), cleanShuffle1.copy$default$1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CleanShuffle cleanShuffle0 = new CleanShuffle((-889275714));
      boolean boolean0 = cleanShuffle0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CleanShuffle cleanShuffle0 = new CleanShuffle(2147);
      boolean boolean0 = cleanShuffle0.equals(cleanShuffle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CleanShuffle cleanShuffle0 = new CleanShuffle((-3306));
      // Undeclared exception!
      try { 
        cleanShuffle0.productElement((-3306));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.CleanShuffle", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(2147);
      CleanShuffle.unapply(cleanShuffle0);
      assertEquals(2147, cleanShuffle0.copy$default$1());
      assertEquals(2147, cleanShuffle0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option<Object> option0 = CleanShuffle.unapply((CleanShuffle) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<Object, CleanShuffle> function1_0 = CleanShuffle.andThen((Function1<CleanShuffle, CleanShuffle>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply((-1537));
      cleanShuffle0.hashCode();
      assertEquals((-1537), cleanShuffle0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<CleanShuffle, CleanShuffle> function1_0 = CleanShuffle.compose((Function1<CleanShuffle, Object>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CleanShuffle cleanShuffle0 = new CleanShuffle((-2710));
      boolean boolean0 = cleanShuffle0.canEqual(cleanShuffle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(0);
      int int0 = cleanShuffle0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CleanShuffle cleanShuffle0 = CleanShuffle.apply(2147);
      String string0 = cleanShuffle0.toString();
      assertEquals("CleanShuffle(2147)", string0);
  }
}
