/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Apr 21 23:47:28 GMT 2022
 */

package org.apache.spark.scheduler;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class FIFOSchedulingAlgorithm_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.spark.scheduler.FIFOSchedulingAlgorithm"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/pedro/projects/RVSec-replication-package/ApacheCryptoAPIBench/apache_codes/spark/core"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(FIFOSchedulingAlgorithm_ESTest_scaffolding.class.getClassLoader() ,
      "org.apache.spark.scheduler.FIFOSchedulingAlgorithm",
      "scala.collection.Parallelizable",
      "scala.Serializable",
      "scala.reflect.ScalaSignature",
      "scala.Enumeration$Value",
      "scala.Enumeration$Val",
      "scala.collection.generic.Shrinkable",
      "scala.collection.GenIterable",
      "scala.collection.script.Scriptable",
      "scala.collection.mutable.SeqLike",
      "scala.collection.mutable.BufferLike",
      "scala.collection.mutable.AbstractBuffer",
      "org.apache.spark.scheduler.Schedulable",
      "scala.Cloneable",
      "scala.collection.AbstractSeq",
      "org.apache.spark.scheduler.SchedulingAlgorithm",
      "scala.PartialFunction",
      "scala.collection.Seq",
      "scala.collection.TraversableOnce",
      "scala.math.Ordered",
      "scala.collection.mutable.IndexedSeqLike",
      "org.apache.spark.scheduler.Pool",
      "scala.collection.TraversableLike",
      "scala.collection.IterableLike",
      "scala.collection.mutable.Buffer",
      "scala.collection.mutable.Builder",
      "scala.collection.mutable.Iterable",
      "scala.Enumeration",
      "scala.collection.generic.FilterMonadic",
      "scala.collection.mutable.Cloneable",
      "scala.collection.IndexedSeq",
      "scala.collection.GenIterableLike",
      "scala.Equals",
      "scala.collection.IndexedSeqLike",
      "scala.Function1",
      "scala.collection.mutable.IndexedSeqOptimized",
      "org.apache.spark.scheduler.TaskSetManager",
      "scala.collection.generic.HasNewBuilder",
      "scala.collection.GenTraversableOnce",
      "scala.collection.GenTraversableLike",
      "scala.collection.AbstractTraversable",
      "scala.collection.generic.GenericTraversableTemplate",
      "scala.Mutable",
      "scala.collection.AbstractIterable",
      "scala.collection.GenTraversable",
      "scala.collection.GenSeq",
      "scala.collection.Traversable",
      "scala.collection.mutable.ArrayBuffer",
      "scala.collection.mutable.IndexedSeq",
      "scala.collection.IndexedSeqOptimized",
      "scala.collection.GenSeqLike",
      "org.apache.spark.internal.Logging",
      "scala.collection.Iterable",
      "scala.math.package$",
      "scala.collection.mutable.ResizableArray",
      "scala.collection.generic.Subtractable",
      "scala.collection.mutable.AbstractSeq",
      "org.apache.spark.scheduler.ExecutorLossReason",
      "scala.collection.generic.Clearable",
      "scala.collection.mutable.Seq",
      "scala.collection.generic.Growable",
      "scala.collection.mutable.Traversable",
      "scala.collection.SeqLike",
      "scala.collection.CustomParallelizable"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.apache.spark.scheduler.Schedulable", false, FIFOSchedulingAlgorithm_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(FIFOSchedulingAlgorithm_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.spark.scheduler.FIFOSchedulingAlgorithm",
      "scala.math.package$"
    );
  }
}
