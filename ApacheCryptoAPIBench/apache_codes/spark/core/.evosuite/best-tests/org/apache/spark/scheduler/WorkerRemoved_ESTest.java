/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:12:16 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.WorkerRemoved;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WorkerRemoved_ESTest extends WorkerRemoved_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "5`h8-i{%XC", "5`h8-i{%XC");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy((String) null, "%tB'f", "%tB'f");
      String string0 = workerRemoved1.workerId();
      assertEquals("", workerRemoved0.copy$default$1());
      assertNull(string0);
      assertEquals("5`h8-i{%XC", workerRemoved0.copy$default$2());
      assertEquals("5`h8-i{%XC", workerRemoved0.copy$default$3());
      assertEquals("", workerRemoved0.workerId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("", "", "");
      String string0 = workerRemoved0.workerId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply((String) null, "JR''>%TlH75T!tJ", "");
      Object object0 = workerRemoved0.productElement(0);
      assertEquals("JR''>%TlH75T!tJ", workerRemoved0.copy$default$2());
      assertNull(object0);
      assertEquals("", workerRemoved0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("\"", "\"", "org.apache.spark.scheduler.WorkerRemoved$");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("|_\"Tn", "\"", (String) null);
      String string0 = workerRemoved1.message();
      assertEquals("|_\"Tn", workerRemoved1.copy$default$1());
      assertNull(string0);
      assertEquals("\"", workerRemoved1.host());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("b-dPDLOlwK$ ", "b-dPDLOlwK$ ", "b-dPDLOlwK$ ");
      String string0 = workerRemoved0.message();
      assertEquals("b-dPDLOlwK$ ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("", (String) null, "ZmN*Gr$|y7De*&, )");
      String string0 = workerRemoved1.host();
      assertEquals("ZmN*Gr$|y7De*&, )", workerRemoved1.message());
      assertNull(string0);
      assertEquals("", workerRemoved1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      String string0 = workerRemoved0.host();
      assertEquals("!px/mHCp&*", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply((String) null, "GYUOi&:JJJZf", (String) null);
      String string0 = workerRemoved0.copy$default$3();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", (String) null, "");
      String string0 = workerRemoved0.copy$default$3();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply(".ws'%\rd-6Y$bDu@t", "", "0A3)'.`E3:'SwX-^");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("", (String) null, ".ws'%\rd-6Y$bDu@t");
      String string0 = workerRemoved1.copy$default$2();
      assertEquals("0A3)'.`E3:'SwX-^", workerRemoved0.message());
      assertEquals(".ws'%\rd-6Y$bDu@t", workerRemoved1.message());
      assertEquals(".ws'%\rd-6Y$bDu@t", workerRemoved0.workerId());
      assertEquals("", workerRemoved0.copy$default$2());
      assertNull(string0);
      assertEquals("", workerRemoved1.workerId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("", "", "");
      String string0 = workerRemoved0.copy$default$2();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply(".ws'%\rd-6Y$bDu@t", "", "0A3)'.`E3:'SwX-^");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy((String) null, "empty.last", "empty.last");
      String string0 = workerRemoved1.copy$default$1();
      assertEquals(".ws'%\rd-6Y$bDu@t", workerRemoved0.copy$default$1());
      assertNull(string0);
      assertEquals("", workerRemoved0.host());
      assertEquals("0A3)'.`E3:'SwX-^", workerRemoved0.message());
      assertEquals("", workerRemoved0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      String string0 = workerRemoved0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!p#x/C&*", "!p#x/C&*", "!p#x/C&*");
      boolean boolean0 = workerRemoved0.canEqual("!p#x/C&*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      Object object0 = workerRemoved0.productElement(2);
      assertEquals("!px/mHCp&*", object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      Object object0 = workerRemoved0.productElement(1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      String string0 = workerRemoved0.host();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/C&d2Z*", "!px/C&d2Z*", "!px/C&d2Z*");
      int int0 = workerRemoved0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      String string0 = workerRemoved0.message();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!p#x/C&*", "!p#x/C&*", "!p#x/C&*");
      String string0 = workerRemoved0.workerId();
      assertEquals("!p#x/C&*", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<Tuple3<String, String, String>> option0 = WorkerRemoved.unapply((WorkerRemoved) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("o&T[?", "o&T[?", "o&T[?");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("o&T[?", "o&T[?", "_k:rpl`b*9im");
      boolean boolean0 = workerRemoved0.equals(workerRemoved1);
      assertEquals("o&T[?", workerRemoved1.workerId());
      assertFalse(boolean0);
      assertEquals("o&T[?", workerRemoved1.host());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved(";CuYHmJv", (String) null, (String) null);
      WorkerRemoved workerRemoved1 = new WorkerRemoved(";CuYHmJv", (String) null, (String) null);
      boolean boolean0 = workerRemoved1.equals(workerRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply(";CuYHaJv", ";CuYHaJv", (String) null);
      WorkerRemoved workerRemoved1 = new WorkerRemoved(";CuYHaJv", (String) null, (String) null);
      boolean boolean0 = workerRemoved1.equals(workerRemoved0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!p#x/C d;+2Z|", "org.apache.spark.scheduler.WorkerRemoved$", "!p#x/C d;+2Z|");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("org.apache.spark.scheduler.WorkerRemoved$", "!p#x/C d;+2Z|", "!p#x/C d;+2Z|");
      boolean boolean0 = workerRemoved0.equals(workerRemoved1);
      assertFalse(boolean0);
      assertEquals("org.apache.spark.scheduler.WorkerRemoved$", workerRemoved1.copy$default$1());
      assertEquals("!p#x/C d;+2Z|", workerRemoved1.copy$default$2());
      assertEquals("!p#x/C d;+2Z|", workerRemoved1.message());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy((String) null, (String) null, "");
      WorkerRemoved workerRemoved2 = workerRemoved0.copy((String) null, "", "");
      boolean boolean0 = workerRemoved2.equals(workerRemoved1);
      assertFalse(workerRemoved2.equals((Object)workerRemoved0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved(";CuYHmJv", (String) null, (String) null);
      WorkerRemoved workerRemoved1 = workerRemoved0.copy((String) null, (String) null, (String) null);
      boolean boolean0 = workerRemoved1.equals(workerRemoved0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("", "", "");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("", "", (String) null);
      boolean boolean0 = workerRemoved1.equals(workerRemoved0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      boolean boolean0 = workerRemoved0.equals("!px/mHCp&*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!p#x/C d;+2Z|", "!p#x/C d;+2Z|", "!p#x/C d;+2Z|");
      boolean boolean0 = workerRemoved0.equals(workerRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      // Undeclared exception!
      try { 
        workerRemoved0.productElement(2596);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.WorkerRemoved", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      String string0 = workerRemoved0.copy$default$3();
      assertEquals("!px/mHCp&*", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!p#xC&d2Z*", "!p#xC&d2Z*", "!p#xC&d2Z*");
      String string0 = workerRemoved0.toString();
      assertEquals("WorkerRemoved(!p#xC&d2Z*,!p#xC&d2Z*,!p#xC&d2Z*)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("WorkerRemoved", "scala.collection.GenIterable$class", "WorkerRemoved");
      workerRemoved0.canEqual(workerRemoved0);
      assertEquals("WorkerRemoved", workerRemoved0.message());
      assertEquals("scala.collection.GenIterable$class", workerRemoved0.copy$default$2());
      assertEquals("WorkerRemoved", workerRemoved0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("!p#x/C&d2Z*", "!p#x/C&d2Z*", "!p#x/C&d2Z*");
      WorkerRemoved workerRemoved1 = workerRemoved0.copy("!p#x/C&d2Z*", "!p#x/C&d2Z*", "!p#x/C&d2Z*");
      boolean boolean0 = workerRemoved1.equals(workerRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      workerRemoved0.hashCode();
      assertEquals(3, workerRemoved0.productArity());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      String string0 = workerRemoved0.productPrefix();
      assertEquals("WorkerRemoved", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WorkerRemoved workerRemoved0 = new WorkerRemoved("-X`w+Qneq(]", "-X`w+Qneq(]", "");
      String string0 = workerRemoved0.copy$default$1();
      assertEquals("-X`w+Qneq(]", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      Option<Tuple3<String, String, String>> option0 = WorkerRemoved.unapply(workerRemoved0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("!px/mHCp&*", "!px/mHCp&*", "!px/mHCp&*");
      String string0 = workerRemoved0.copy$default$2();
      assertEquals("!px/mHCp&*", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Function1<Tuple3<String, String, String>, WorkerRemoved> function1_0 = WorkerRemoved.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Function1<String, Function1<String, Function1<String, WorkerRemoved>>> function1_0 = WorkerRemoved.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WorkerRemoved workerRemoved0 = WorkerRemoved.apply("'", "'", "'");
      workerRemoved0.productIterator();
      assertEquals(3, workerRemoved0.productArity());
  }
}
