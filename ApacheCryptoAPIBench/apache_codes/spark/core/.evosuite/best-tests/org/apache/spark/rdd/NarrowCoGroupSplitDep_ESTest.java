/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:23:35 GMT 2022
 */

package org.apache.spark.rdd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.Partition;
import org.apache.spark.rdd.NarrowCoGroupSplitDep;
import org.apache.spark.rdd.RDD;
import org.apache.spark.rdd.WholeTextFileRDD;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NarrowCoGroupSplitDep_ESTest extends NarrowCoGroupSplitDep_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, 0, partition0);
      int int0 = narrowCoGroupSplitDep0.splitIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, (-3960), partition0);
      int int0 = narrowCoGroupSplitDep0.splitIndex();
      assertEquals((-3960), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, (-1495), partition0);
      Partition partition1 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(partition1).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep1 = narrowCoGroupSplitDep0.copy((RDD<?>) null, 197, partition1);
      narrowCoGroupSplitDep1.productElement(0);
      assertEquals((-1495), narrowCoGroupSplitDep0.copy$default$2());
      assertEquals(197, narrowCoGroupSplitDep1.splitIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn("#=,o-", (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, 686, partition0);
      RDD<WholeTextFileRDD> rDD1 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rDD1).toString();
      Partition partition1 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(partition1).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep1 = narrowCoGroupSplitDep0.copy(rDD1, 0, partition1);
      assertEquals(0, narrowCoGroupSplitDep1.copy$default$2());
      assertEquals(686, narrowCoGroupSplitDep0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rDD0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, 1, (Partition) null);
      RDD<?> rDD1 = narrowCoGroupSplitDep0.copy$default$1();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep1 = narrowCoGroupSplitDep0.copy(rDD1, (-1), (Partition) null);
      assertEquals((-1), narrowCoGroupSplitDep1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, 0, partition0);
      int int0 = narrowCoGroupSplitDep0.copy$default$2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, (-2070), partition0);
      int int0 = narrowCoGroupSplitDep0.copy$default$2();
      assertEquals((-2070), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, (-1233), partition0);
      boolean boolean0 = narrowCoGroupSplitDep0.canEqual(narrowCoGroupSplitDep0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "6VF)!a%N]rTr^H", "org.apache.spark.rdd.NarrowCoGroupSplitDep").when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, (-889275714), partition0);
      Partition partition1 = narrowCoGroupSplitDep0.split();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep1 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 0, partition1);
      assertEquals(0, narrowCoGroupSplitDep1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, (-3960), partition0);
      narrowCoGroupSplitDep0.productElement(0);
      assertEquals((-3960), narrowCoGroupSplitDep0.splitIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "6VF)!a%N]rTr^H").when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, (-889275714), partition0);
      Object object0 = narrowCoGroupSplitDep0.productElement(2);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn("#=,o-", (String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition0).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply(rDD0, 686, partition0);
      Object object0 = narrowCoGroupSplitDep0.productElement(1);
      assertEquals(686, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, (-2070), (Partition) null);
      narrowCoGroupSplitDep0.rdd();
      assertEquals((-2070), narrowCoGroupSplitDep0.splitIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, 1, (Partition) null);
      Partition partition0 = narrowCoGroupSplitDep0.split();
      assertNull(partition0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, (-1233), partition0);
      int int0 = narrowCoGroupSplitDep0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, 1, (Partition) null);
      int int0 = narrowCoGroupSplitDep0.splitIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 1022, (Partition) null);
      NarrowCoGroupSplitDep.unapply(narrowCoGroupSplitDep0);
      assertEquals(1022, narrowCoGroupSplitDep0.splitIndex());
      assertEquals(1022, narrowCoGroupSplitDep0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rDD0).toString();
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, (-1825), partition0);
      RDD<WholeTextFileRDD> rDD1 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rDD1).toString();
      Partition partition1 = mock(Partition.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(partition1).toString();
      NarrowCoGroupSplitDep narrowCoGroupSplitDep1 = NarrowCoGroupSplitDep.apply(rDD1, (-1698), partition1);
      boolean boolean0 = narrowCoGroupSplitDep1.equals(narrowCoGroupSplitDep0);
      assertFalse(boolean0);
      assertEquals((-1698), narrowCoGroupSplitDep1.splitIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 2456, (Partition) null);
      boolean boolean0 = narrowCoGroupSplitDep0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2456, narrowCoGroupSplitDep0.splitIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, 9, partition0);
      boolean boolean0 = narrowCoGroupSplitDep0.equals(narrowCoGroupSplitDep0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, (-4577), (Partition) null);
      // Undeclared exception!
      try { 
        narrowCoGroupSplitDep0.productElement((-4577));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.rdd.NarrowCoGroupSplitDep", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 3142, (Partition) null);
      narrowCoGroupSplitDep0.split_$eq((Partition) null);
      assertEquals(3142, narrowCoGroupSplitDep0.splitIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 2456, (Partition) null);
      narrowCoGroupSplitDep0.copy$default$3();
      assertEquals(2456, narrowCoGroupSplitDep0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Function1<RDD<?>, Function1<Object, Function1<Partition, NarrowCoGroupSplitDep>>> function1_0 = NarrowCoGroupSplitDep.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option<Tuple3<RDD<Object>, Object, Partition>> option0 = NarrowCoGroupSplitDep.unapply((NarrowCoGroupSplitDep) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 75, (Partition) null);
      String string0 = narrowCoGroupSplitDep0.toString();
      assertEquals("NarrowCoGroupSplitDep(null,75,null)", string0);
      assertEquals(3, narrowCoGroupSplitDep0.productArity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 1643, (Partition) null);
      narrowCoGroupSplitDep0.hashCode();
      assertEquals(1643, narrowCoGroupSplitDep0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 2456, (Partition) null);
      narrowCoGroupSplitDep0.canEqual((Object) null);
      assertEquals(2456, narrowCoGroupSplitDep0.splitIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, (-668), (Partition) null);
      String string0 = narrowCoGroupSplitDep0.productPrefix();
      assertEquals((-668), narrowCoGroupSplitDep0.copy$default$2());
      assertEquals("NarrowCoGroupSplitDep", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RDD<WholeTextFileRDD> rDD0 = (RDD<WholeTextFileRDD>) mock(RDD.class, new ViolatedAssumptionAnswer());
      Partition partition0 = mock(Partition.class, new ViolatedAssumptionAnswer());
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = new NarrowCoGroupSplitDep(rDD0, 3412, partition0);
      int int0 = narrowCoGroupSplitDep0.copy$default$2();
      assertEquals(3412, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, 1653, (Partition) null);
      narrowCoGroupSplitDep0.productIterator();
      assertEquals(1653, narrowCoGroupSplitDep0.splitIndex());
      assertEquals(3, narrowCoGroupSplitDep0.productArity());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NarrowCoGroupSplitDep narrowCoGroupSplitDep0 = NarrowCoGroupSplitDep.apply((RDD<?>) null, (-52), (Partition) null);
      narrowCoGroupSplitDep0.copy$default$1();
      assertEquals((-52), narrowCoGroupSplitDep0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Function1<Tuple3<RDD<?>, Object, Partition>, NarrowCoGroupSplitDep> function1_0 = NarrowCoGroupSplitDep.tupled();
      assertNotNull(function1_0);
  }
}
