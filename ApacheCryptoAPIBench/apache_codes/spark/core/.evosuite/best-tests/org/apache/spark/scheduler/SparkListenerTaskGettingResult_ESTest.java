/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:00:47 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerTaskGettingResult;
import org.apache.spark.scheduler.TaskInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerTaskGettingResult_ESTest extends SparkListenerTaskGettingResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      boolean boolean0 = sparkListenerTaskGettingResult0.canEqual(sparkListenerTaskGettingResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      Object object0 = sparkListenerTaskGettingResult0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      TaskInfo taskInfo0 = sparkListenerTaskGettingResult0.taskInfo();
      assertNull(taskInfo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      sparkListenerTaskGettingResult0.productIterator();
      assertEquals(1, sparkListenerTaskGettingResult0.productArity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      int int0 = sparkListenerTaskGettingResult0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      String string0 = sparkListenerTaskGettingResult0.productPrefix();
      assertEquals("SparkListenerTaskGettingResult", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      Option<TaskInfo> option0 = SparkListenerTaskGettingResult.unapply(sparkListenerTaskGettingResult0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      boolean boolean0 = sparkListenerTaskGettingResult0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      boolean boolean0 = sparkListenerTaskGettingResult0.equals(sparkListenerTaskGettingResult0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      // Undeclared exception!
      try { 
        sparkListenerTaskGettingResult0.productElement(515);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SparkListenerTaskGettingResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option<TaskInfo> option0 = SparkListenerTaskGettingResult.unapply((SparkListenerTaskGettingResult) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      TaskInfo taskInfo0 = sparkListenerTaskGettingResult0.copy$default$1();
      assertNull(taskInfo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      boolean boolean0 = sparkListenerTaskGettingResult0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      boolean boolean0 = sparkListenerTaskGettingResult0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult1 = sparkListenerTaskGettingResult0.copy((TaskInfo) null);
      assertTrue(sparkListenerTaskGettingResult1.equals((Object)sparkListenerTaskGettingResult0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Function1<TaskInfo, SparkListenerTaskGettingResult> function1_0 = SparkListenerTaskGettingResult.compose((Function1<TaskInfo, TaskInfo>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = new SparkListenerTaskGettingResult((TaskInfo) null);
      sparkListenerTaskGettingResult0.hashCode();
      assertEquals(1, sparkListenerTaskGettingResult0.productArity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Function1<TaskInfo, TaskInfo> function1_0 = SparkListenerTaskGettingResult.andThen((Function1<SparkListenerTaskGettingResult, TaskInfo>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerTaskGettingResult sparkListenerTaskGettingResult0 = SparkListenerTaskGettingResult.apply((TaskInfo) null);
      String string0 = sparkListenerTaskGettingResult0.toString();
      assertEquals("SparkListenerTaskGettingResult(null)", string0);
  }
}
