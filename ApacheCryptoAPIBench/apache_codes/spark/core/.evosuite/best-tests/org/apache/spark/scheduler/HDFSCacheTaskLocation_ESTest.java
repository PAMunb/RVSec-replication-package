/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:00:40 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.HDFSCacheTaskLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HDFSCacheTaskLocation_ESTest extends HDFSCacheTaskLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation((String) null);
      Object object0 = hDFSCacheTaskLocation0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply((String) null);
      String string0 = hDFSCacheTaskLocation0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("_]1U'EzL");
      HDFSCacheTaskLocation hDFSCacheTaskLocation1 = hDFSCacheTaskLocation0.copy("");
      String string0 = hDFSCacheTaskLocation1.host();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply((String) null);
      String string0 = hDFSCacheTaskLocation0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("");
      HDFSCacheTaskLocation hDFSCacheTaskLocation1 = hDFSCacheTaskLocation0.copy("hdfs_cache_");
      String string0 = hDFSCacheTaskLocation1.copy$default$1();
      assertEquals("hdfs_cache_", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("org.apache.spark.scheduler.HDFSCacheTaskLocation$");
      boolean boolean0 = hDFSCacheTaskLocation0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("2Z_&s?o@R");
      Object object0 = hDFSCacheTaskLocation0.productElement(0);
      assertEquals("2Z_&s?o@R", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation((String) null);
      boolean boolean0 = hDFSCacheTaskLocation0.canEqual(hDFSCacheTaskLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("_]1U'EzL");
      String string0 = hDFSCacheTaskLocation0.host();
      assertEquals("_]1U'EzL", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("2Z_&s?o@R");
      int int0 = hDFSCacheTaskLocation0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation((String) null);
      HDFSCacheTaskLocation hDFSCacheTaskLocation1 = new HDFSCacheTaskLocation("DgL");
      boolean boolean0 = hDFSCacheTaskLocation1.equals(hDFSCacheTaskLocation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply((String) null);
      HDFSCacheTaskLocation hDFSCacheTaskLocation1 = HDFSCacheTaskLocation.apply("scala.collection.GenSeq$class");
      boolean boolean0 = hDFSCacheTaskLocation0.equals(hDFSCacheTaskLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("non-empty");
      HDFSCacheTaskLocation hDFSCacheTaskLocation1 = new HDFSCacheTaskLocation("non-empty");
      boolean boolean0 = hDFSCacheTaskLocation0.equals(hDFSCacheTaskLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("hAA3r]AqSB-D.IUtyq");
      boolean boolean0 = hDFSCacheTaskLocation0.equals("hAA3r]AqSB-D.IUtyq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("&");
      boolean boolean0 = hDFSCacheTaskLocation0.equals(hDFSCacheTaskLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("h@~");
      // Undeclared exception!
      try { 
        hDFSCacheTaskLocation0.productElement(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.HDFSCacheTaskLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("m-+");
      Option<String> option0 = HDFSCacheTaskLocation.unapply(hDFSCacheTaskLocation0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<String> option0 = HDFSCacheTaskLocation.unapply((HDFSCacheTaskLocation) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("");
      String string0 = hDFSCacheTaskLocation0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<HDFSCacheTaskLocation, HDFSCacheTaskLocation> function1_0 = HDFSCacheTaskLocation.compose((Function1<HDFSCacheTaskLocation, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation(";)CCN/EjHYi:/");
      hDFSCacheTaskLocation0.hashCode();
      assertEquals(1, hDFSCacheTaskLocation0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("");
      String string0 = hDFSCacheTaskLocation0.productPrefix();
      assertEquals("HDFSCacheTaskLocation", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Function1<String, HDFSCacheTaskLocation> function1_0 = HDFSCacheTaskLocation.andThen((Function1<HDFSCacheTaskLocation, HDFSCacheTaskLocation>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply("JthKA\"G&a.|);m6");
      String string0 = hDFSCacheTaskLocation0.toString();
      assertEquals("hdfs_cache_JthKA\"G&a.|);m6", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = new HDFSCacheTaskLocation("");
      hDFSCacheTaskLocation0.productIterator();
      assertEquals(1, hDFSCacheTaskLocation0.productArity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HDFSCacheTaskLocation hDFSCacheTaskLocation0 = HDFSCacheTaskLocation.apply((String) null);
      HDFSCacheTaskLocation hDFSCacheTaskLocation1 = HDFSCacheTaskLocation.apply((String) null);
      boolean boolean0 = hDFSCacheTaskLocation0.equals(hDFSCacheTaskLocation1);
      assertTrue(boolean0);
  }
}
