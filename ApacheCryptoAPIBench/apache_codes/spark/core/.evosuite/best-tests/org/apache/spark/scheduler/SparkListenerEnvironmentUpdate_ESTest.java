/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:57:48 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerEnvironmentUpdate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;
import scala.collection.Map;
import scala.collection.Seq;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerEnvironmentUpdate_ESTest extends SparkListenerEnvironmentUpdate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      boolean boolean0 = sparkListenerEnvironmentUpdate0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      Object object0 = sparkListenerEnvironmentUpdate0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      boolean boolean0 = sparkListenerEnvironmentUpdate0.canEqual(sparkListenerEnvironmentUpdate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      Map<String, Seq<Tuple2<String, String>>> map0 = sparkListenerEnvironmentUpdate0.environmentDetails();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      String string0 = sparkListenerEnvironmentUpdate0.productPrefix();
      assertEquals("SparkListenerEnvironmentUpdate", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      sparkListenerEnvironmentUpdate0.productIterator();
      assertEquals(1, sparkListenerEnvironmentUpdate0.productArity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      int int0 = sparkListenerEnvironmentUpdate0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      Option<Map<String, Seq<Tuple2<String, String>>>> option0 = SparkListenerEnvironmentUpdate.unapply(sparkListenerEnvironmentUpdate0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      boolean boolean0 = sparkListenerEnvironmentUpdate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      boolean boolean0 = sparkListenerEnvironmentUpdate0.equals(sparkListenerEnvironmentUpdate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      // Undeclared exception!
      try { 
        sparkListenerEnvironmentUpdate0.productElement(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.scheduler.SparkListenerEnvironmentUpdate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option<Map<String, Seq<Tuple2<String, String>>>> option0 = SparkListenerEnvironmentUpdate.unapply((SparkListenerEnvironmentUpdate) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      boolean boolean0 = sparkListenerEnvironmentUpdate0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Function1<SparkListenerEnvironmentUpdate, SparkListenerEnvironmentUpdate> function1_0 = SparkListenerEnvironmentUpdate.compose((Function1<SparkListenerEnvironmentUpdate, Map<String, Seq<Tuple2<String, String>>>>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate1 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      boolean boolean0 = sparkListenerEnvironmentUpdate0.equals(sparkListenerEnvironmentUpdate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      Map<String, Seq<Tuple2<String, String>>> map0 = sparkListenerEnvironmentUpdate0.copy$default$1();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      sparkListenerEnvironmentUpdate0.hashCode();
      assertEquals(1, sparkListenerEnvironmentUpdate0.productArity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = new SparkListenerEnvironmentUpdate((Map<String, Seq<Tuple2<String, String>>>) null);
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate1 = sparkListenerEnvironmentUpdate0.copy((Map<String, Seq<Tuple2<String, String>>>) null);
      assertTrue(sparkListenerEnvironmentUpdate1.equals((Object)sparkListenerEnvironmentUpdate0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Function1<Map<String, Seq<Tuple2<String, String>>>, SparkListenerEnvironmentUpdate> function1_0 = SparkListenerEnvironmentUpdate.andThen((Function1<SparkListenerEnvironmentUpdate, SparkListenerEnvironmentUpdate>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerEnvironmentUpdate sparkListenerEnvironmentUpdate0 = SparkListenerEnvironmentUpdate.apply((Map<String, Seq<Tuple2<String, String>>>) null);
      String string0 = sparkListenerEnvironmentUpdate0.toString();
      assertEquals("SparkListenerEnvironmentUpdate(null)", string0);
  }
}
