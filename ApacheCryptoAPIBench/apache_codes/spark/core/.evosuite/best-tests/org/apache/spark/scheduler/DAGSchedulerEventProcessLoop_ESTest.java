/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:19:12 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.Timer;
import org.apache.spark.SparkContext;
import org.apache.spark.scheduler.DAGScheduler;
import org.apache.spark.scheduler.DAGSchedulerEvent;
import org.apache.spark.scheduler.DAGSchedulerEventProcessLoop;
import org.apache.spark.scheduler.DAGSchedulerSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DAGSchedulerEventProcessLoop_ESTest extends DAGSchedulerEventProcessLoop_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DAGSchedulerSource dAGSchedulerSource0 = mock(DAGSchedulerSource.class, new ViolatedAssumptionAnswer());
      doReturn(timer0).when(dAGSchedulerSource0).messageProcessingTimer();
      SparkContext sparkContext0 = mock(SparkContext.class, new ViolatedAssumptionAnswer());
      DAGScheduler dAGScheduler0 = mock(DAGScheduler.class, new ViolatedAssumptionAnswer());
      doReturn(dAGSchedulerSource0).when(dAGScheduler0).metricsSource();
      doReturn(sparkContext0).when(dAGScheduler0).sc();
      DAGSchedulerEventProcessLoop dAGSchedulerEventProcessLoop0 = new DAGSchedulerEventProcessLoop(dAGScheduler0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      dAGSchedulerEventProcessLoop0.onError(throwable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Timer.Context timer_Context0 = mock(Timer.Context.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timer_Context0).stop();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timer_Context0).when(timer0).time();
      DAGSchedulerSource dAGSchedulerSource0 = mock(DAGSchedulerSource.class, new ViolatedAssumptionAnswer());
      doReturn(timer0).when(dAGSchedulerSource0).messageProcessingTimer();
      DAGScheduler dAGScheduler0 = mock(DAGScheduler.class, new ViolatedAssumptionAnswer());
      doReturn(dAGSchedulerSource0).when(dAGScheduler0).metricsSource();
      DAGSchedulerEventProcessLoop dAGSchedulerEventProcessLoop0 = new DAGSchedulerEventProcessLoop(dAGScheduler0);
      DAGSchedulerEvent dAGSchedulerEvent0 = mock(DAGSchedulerEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dAGSchedulerEventProcessLoop0.onReceive(dAGSchedulerEvent0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.apache.spark.scheduler.DAGSchedulerEvent$MockitoMock$697524427@0000000004 (of class org.apache.spark.scheduler.DAGSchedulerEvent$MockitoMock$697524427)
         //
         verifyException("org.apache.spark.scheduler.DAGSchedulerEventProcessLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn((Timer.Context) null).when(timer0).time();
      DAGSchedulerSource dAGSchedulerSource0 = mock(DAGSchedulerSource.class, new ViolatedAssumptionAnswer());
      doReturn(timer0).when(dAGSchedulerSource0).messageProcessingTimer();
      DAGScheduler dAGScheduler0 = mock(DAGScheduler.class, new ViolatedAssumptionAnswer());
      doReturn(dAGSchedulerSource0).when(dAGScheduler0).metricsSource();
      DAGSchedulerEventProcessLoop dAGSchedulerEventProcessLoop0 = new DAGSchedulerEventProcessLoop(dAGScheduler0);
      DAGSchedulerEvent dAGSchedulerEvent0 = mock(DAGSchedulerEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dAGSchedulerEventProcessLoop0.onReceive(dAGSchedulerEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.DAGSchedulerEventProcessLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DAGSchedulerSource dAGSchedulerSource0 = mock(DAGSchedulerSource.class, new ViolatedAssumptionAnswer());
      doReturn((Timer) null).when(dAGSchedulerSource0).messageProcessingTimer();
      DAGScheduler dAGScheduler0 = mock(DAGScheduler.class, new ViolatedAssumptionAnswer());
      doReturn(dAGSchedulerSource0).when(dAGScheduler0).metricsSource();
      DAGSchedulerEventProcessLoop dAGSchedulerEventProcessLoop0 = new DAGSchedulerEventProcessLoop(dAGScheduler0);
      dAGSchedulerEventProcessLoop0.onStop();
      assertFalse(dAGSchedulerEventProcessLoop0.isActive());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DAGSchedulerSource dAGSchedulerSource0 = mock(DAGSchedulerSource.class, new ViolatedAssumptionAnswer());
      doReturn((Timer) null).when(dAGSchedulerSource0).messageProcessingTimer();
      DAGScheduler dAGScheduler0 = mock(DAGScheduler.class, new ViolatedAssumptionAnswer());
      doReturn(dAGSchedulerSource0).when(dAGScheduler0).metricsSource();
      doReturn((SparkContext) null).when(dAGScheduler0).sc();
      DAGSchedulerEventProcessLoop dAGSchedulerEventProcessLoop0 = new DAGSchedulerEventProcessLoop(dAGScheduler0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dAGSchedulerEventProcessLoop0.onError(throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.DAGSchedulerEventProcessLoop", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DAGSchedulerEventProcessLoop dAGSchedulerEventProcessLoop0 = null;
      try {
        dAGSchedulerEventProcessLoop0 = new DAGSchedulerEventProcessLoop((DAGScheduler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.scheduler.DAGSchedulerEventProcessLoop", e);
      }
  }
}
