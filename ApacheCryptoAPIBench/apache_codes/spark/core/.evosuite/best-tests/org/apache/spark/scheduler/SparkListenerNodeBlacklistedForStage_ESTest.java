/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:14:18 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerNodeBlacklistedForStage_ESTest extends SparkListenerNodeBlacklistedForStage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741812, ")", 1073741812, 1073741812, 1073741812);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = new SparkListenerNodeBlacklistedForStage(1073741812, ")", 1073741812, 1073741812, (-3057));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage1.equals(sparkListenerNodeBlacklistedForStage0);
      assertEquals(1073741812, sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals(1073741812, sparkListenerNodeBlacklistedForStage1.executorFailures());
      assertEquals((-3057), sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertFalse(sparkListenerNodeBlacklistedForStage0.equals((Object)sparkListenerNodeBlacklistedForStage1));
      assertEquals(1073741812L, sparkListenerNodeBlacklistedForStage1.time());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(31, (String) null, 1807, 10, 1807);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = SparkListenerNodeBlacklistedForStage.apply(31, (String) null, 1807, 31, 10);
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage1);
      assertEquals(31, sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals(1807, sparkListenerNodeBlacklistedForStage1.executorFailures());
      assertEquals(31L, sparkListenerNodeBlacklistedForStage1.time());
      assertEquals(10, sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2688), "uSA", (-2659), (-2688), (-2688));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-2688), "uSA", (-2688), (-2688), (-2688));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage1.equals(sparkListenerNodeBlacklistedForStage0);
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage1.stageAttemptId());
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals((-2688L), sparkListenerNodeBlacklistedForStage1.time());
      assertFalse(sparkListenerNodeBlacklistedForStage0.equals((Object)sparkListenerNodeBlacklistedForStage1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(1558L, "", (-1), (-1), (-3417));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = SparkListenerNodeBlacklistedForStage.apply(651L, "", (-1), 1186, (-1));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage1);
      assertFalse(boolean0);
      assertEquals((-3417), sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(651L, sparkListenerNodeBlacklistedForStage1.copy$default$1());
      assertEquals(1186, sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals((-1), sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals((-1), sparkListenerNodeBlacklistedForStage1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(0L, "empty.tail", (-1948), (-1948), (-1948));
      long long0 = sparkListenerNodeBlacklistedForStage0.time();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(1959L, "-01*\"", (-1), (-1), (-1));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-1599L), "-01*\"", 536, 536, (-1));
      long long0 = sparkListenerNodeBlacklistedForStage1.time();
      assertEquals((-1), sparkListenerNodeBlacklistedForStage1.stageAttemptId());
      assertEquals((-1599L), long0);
      assertEquals((-1), sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(536, sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals(1959L, sparkListenerNodeBlacklistedForStage0.time());
      assertEquals((-1), sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals((-1), sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals(536, sparkListenerNodeBlacklistedForStage1.stageId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-3690L), ".1", (-2650), 0, (-2650));
      int int0 = sparkListenerNodeBlacklistedForStage0.stageId();
      assertEquals(0, int0);
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals((-3690L), sparkListenerNodeBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-1979L), "[*PhsJ", 1, (-421), (-1792));
      int int0 = sparkListenerNodeBlacklistedForStage0.stageId();
      assertEquals(1, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals((-1792), sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals((-1979L), sparkListenerNodeBlacklistedForStage0.time());
      assertEquals((-421), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(1359, "", (-2505), 1437, 0);
      int int0 = sparkListenerNodeBlacklistedForStage0.stageAttemptId();
      assertEquals(1437, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals((-2505), sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(0, int0);
      assertEquals(1359L, sparkListenerNodeBlacklistedForStage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-1979L), "[*PhsJ", 1, (-421), (-1792));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-421), "D(4DX|wgp<o^7<aq", 3738, 1294, 1294);
      int int0 = sparkListenerNodeBlacklistedForStage1.stageAttemptId();
      assertEquals((-1792), sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(1, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(3738, sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals((-421), sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(1294, sparkListenerNodeBlacklistedForStage1.copy$default$4());
      assertEquals((-421L), sparkListenerNodeBlacklistedForStage1.time());
      assertEquals(1294, int0);
      assertEquals((-1979L), sparkListenerNodeBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(0L, "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage$", (-27), 1, (-27));
      Object object0 = sparkListenerNodeBlacklistedForStage0.productElement(1);
      assertEquals("org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage$", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(31, (String) null, 1807, 31, 10);
      sparkListenerNodeBlacklistedForStage0.hostId();
      assertEquals(31, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(31L, sparkListenerNodeBlacklistedForStage0.time());
      assertEquals(10, sparkListenerNodeBlacklistedForStage0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-598L), "", 5, 5, 0);
      String string0 = sparkListenerNodeBlacklistedForStage0.hostId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(0L, (String) null, 0, 0, 0);
      int int0 = sparkListenerNodeBlacklistedForStage0.executorFailures();
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-3690L), ".1", (-2650), 0, (-2650));
      int int0 = sparkListenerNodeBlacklistedForStage0.executorFailures();
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals((-3690L), sparkListenerNodeBlacklistedForStage0.copy$default$1());
      assertEquals((-2650), int0);
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(0L, (String) null, 0, 0, 0);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy(3017L, "Rf:!p#6W2x", 0, 0, (-2139));
      assertEquals(0, sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals(0, sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals((-2139), sparkListenerNodeBlacklistedForStage1.stageAttemptId());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(3017L, sparkListenerNodeBlacklistedForStage1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(15, (String) null, 1807, 10, 1807);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy(0L, "SparkListenerNodeBlacklistedForStage(15,null,1807,10,1807)", (-943), (-2087831323), 2975);
      assertEquals(2975, sparkListenerNodeBlacklistedForStage1.stageAttemptId());
      assertEquals(10, sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals((-943), sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(15L, sparkListenerNodeBlacklistedForStage0.copy$default$1());
      assertEquals((-2087831323), sparkListenerNodeBlacklistedForStage1.stageId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-3690L), ".1", (-2650), 0, (-2650));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-2650), ": *fC^:<PjUSQ0%J0qO", (-2650), 0, 0);
      int int0 = sparkListenerNodeBlacklistedForStage1.copy$default$5();
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals((-2650L), sparkListenerNodeBlacklistedForStage1.time());
      assertEquals(0, int0);
      assertEquals((-3690L), sparkListenerNodeBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerNodeBlacklistedForStage1.copy$default$4());
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage0.executorFailures());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(0L, "Left", 1048576, 1207, 1841);
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$5();
      assertEquals(1841, int0);
      assertEquals(1048576, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(1207, sparkListenerNodeBlacklistedForStage0.stageId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-1039L), "SparkListenerNodeBlacklistedForStage", 1923, 0, 1923);
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$4();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(1959L, "-01*\"", (-1), (-1), (-1));
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$4();
      assertEquals(1959L, sparkListenerNodeBlacklistedForStage0.copy$default$1());
      assertEquals((-1), int0);
      assertEquals((-1), sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals((-1), sparkListenerNodeBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(0L, (String) null, 0, 0, 0);
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$3();
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-1039L), "SparkListenerNodeBlacklistedForStage", 1923, 0, 1923);
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$3();
      assertEquals(1923, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-1L), "of class ", 0, 82, 82);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy(82, "", (-133), (-133), 82);
      sparkListenerNodeBlacklistedForStage1.copy$default$2();
      assertEquals((-133), sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals((-133), sparkListenerNodeBlacklistedForStage1.copy$default$4());
      assertEquals((-1L), sparkListenerNodeBlacklistedForStage0.copy$default$1());
      assertEquals(82L, sparkListenerNodeBlacklistedForStage1.copy$default$1());
      assertEquals(82, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(82, sparkListenerNodeBlacklistedForStage1.stageAttemptId());
      assertEquals(82, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(0L, "", (-1954), 46, (-1954));
      long long0 = sparkListenerNodeBlacklistedForStage0.copy$default$1();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-1L), "of class ", 0, 82, 82);
      long long0 = sparkListenerNodeBlacklistedForStage0.copy$default$1();
      assertEquals(82, sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals((-1L), long0);
      assertEquals(82, sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.executorFailures());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-598L), "", 5, 5, 0);
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.canEqual(sparkListenerNodeBlacklistedForStage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(0L, (String) null, 0, 0, 0);
      sparkListenerNodeBlacklistedForStage0.copy$default$2();
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(15, (String) null, 1807, 10, 1807);
      sparkListenerNodeBlacklistedForStage0.productElement(1);
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(10, sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals(15L, sparkListenerNodeBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-3690L), ".1", (-2650), 0, (-2650));
      Object object0 = sparkListenerNodeBlacklistedForStage0.productElement(4);
      assertEquals((-2650), object0);
      assertEquals((-2650), sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals((-3690L), sparkListenerNodeBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(3348L, "\"i)z`{tVtO# /Y:gy)H", 31, 31, (-2564));
      Object object0 = sparkListenerNodeBlacklistedForStage0.productElement(3);
      assertEquals(31, object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(0L, "(arR*K=`A@", (-213), (-2564), 2);
      Object object0 = sparkListenerNodeBlacklistedForStage0.productElement(2);
      assertEquals((-213), object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(31, (String) null, 1807, 10, 1807);
      Object object0 = sparkListenerNodeBlacklistedForStage0.productElement(0);
      assertEquals(31L, object0);
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(10, sparkListenerNodeBlacklistedForStage0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1L, "", (-1659), (-1659), (-1659));
      long long0 = sparkListenerNodeBlacklistedForStage0.time();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1468L, "`d!S4FXyqq`9+/|~62p", 1073741824, 1073741824, 15);
      String string0 = sparkListenerNodeBlacklistedForStage0.hostId();
      assertEquals("`d!S4FXyqq`9+/|~62p", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741816, "", 1073741816, 1073741816, 1073741816);
      String string0 = sparkListenerNodeBlacklistedForStage0.productPrefix();
      assertEquals("SparkListenerNodeBlacklistedForStage", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-1039L), "SparkListenerNodeBlacklistedForStage", 1923, 0, 1923);
      int int0 = sparkListenerNodeBlacklistedForStage0.executorFailures();
      assertEquals(1923, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-1979L), "[*PhsJ", 1, (-421), (-1792));
      int int0 = sparkListenerNodeBlacklistedForStage0.stageAttemptId();
      assertEquals((-1792), int0);
      assertEquals(1, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals((-1979L), sparkListenerNodeBlacklistedForStage0.copy$default$1());
      assertEquals((-421), sparkListenerNodeBlacklistedForStage0.stageId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741824, "", 1073741824, 1073741824, 1073741824);
      sparkListenerNodeBlacklistedForStage0.productIterator();
      assertEquals(5, sparkListenerNodeBlacklistedForStage0.productArity());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741824, "", 1073741824, 1073741824, 1073741824);
      int int0 = sparkListenerNodeBlacklistedForStage0.stageId();
      assertEquals(1073741824, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(2572L, "6Bzn.%@l\"J[", 484, 484, 2687);
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741816, "", 1073741816, 1073741816, 1073741816);
      int int0 = sparkListenerNodeBlacklistedForStage0.productArity();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741816, "", 1073741816, 1073741816, 1073741816);
      SparkListenerNodeBlacklistedForStage.unapply(sparkListenerNodeBlacklistedForStage0);
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(1073741816L, sparkListenerNodeBlacklistedForStage0.time());
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.stageId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741816, "", 1073741816, 1073741816, 1073741816);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = new SparkListenerNodeBlacklistedForStage(1073741816, "", 1073741816, 1073741816, (-3032));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage1);
      assertFalse(boolean0);
      assertEquals(1073741816L, sparkListenerNodeBlacklistedForStage1.copy$default$1());
      assertFalse(sparkListenerNodeBlacklistedForStage1.equals((Object)sparkListenerNodeBlacklistedForStage0));
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage1.copy$default$3());
      assertEquals((-3032), sparkListenerNodeBlacklistedForStage1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2688), "R", (-50), (-2688), (-2688));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-2688), "R", (-50), (-50), (-2688));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage1.equals(sparkListenerNodeBlacklistedForStage0);
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage1.stageAttemptId());
      assertFalse(sparkListenerNodeBlacklistedForStage0.equals((Object)sparkListenerNodeBlacklistedForStage1));
      assertFalse(boolean0);
      assertEquals((-2688L), sparkListenerNodeBlacklistedForStage1.copy$default$1());
      assertEquals((-50), sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals((-50), sparkListenerNodeBlacklistedForStage1.executorFailures());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2696), "R:O", (-2696), (-2696), (-2696));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-2696), "/fq}", (-2696), (-2696), (-2696));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage1.equals(sparkListenerNodeBlacklistedForStage0);
      assertFalse(boolean0);
      assertEquals((-2696), sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals((-2696), sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertEquals((-2696), sparkListenerNodeBlacklistedForStage1.executorFailures());
      assertEquals((-2696L), sparkListenerNodeBlacklistedForStage1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(2146875841, (String) null, 2146875841, (-1), 2146875841);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy(2146875841, (String) null, (-2164), (-1), (-2164));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage1);
      assertFalse(boolean0);
      assertEquals((-2164), sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertEquals((-2164), sparkListenerNodeBlacklistedForStage1.executorFailures());
      assertEquals(2146875841L, sparkListenerNodeBlacklistedForStage1.time());
      assertEquals((-1), sparkListenerNodeBlacklistedForStage1.stageId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2694), (String) null, (-2694), (-2694), (-2694));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-2694), "!=", (-2694), (-2694), (-2694));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage1);
      assertEquals((-2694), sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertFalse(boolean0);
      assertEquals((-2694L), sparkListenerNodeBlacklistedForStage1.time());
      assertFalse(sparkListenerNodeBlacklistedForStage1.equals((Object)sparkListenerNodeBlacklistedForStage0));
      assertEquals((-2694), sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals((-2694), sparkListenerNodeBlacklistedForStage1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(1048576L, "", 13, 13, 13);
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy(13, "", 13, 13, 13);
      boolean boolean0 = sparkListenerNodeBlacklistedForStage1.equals(sparkListenerNodeBlacklistedForStage0);
      assertFalse(boolean0);
      assertEquals(13, sparkListenerNodeBlacklistedForStage1.stageId());
      assertEquals(13, sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertEquals(13, sparkListenerNodeBlacklistedForStage1.executorFailures());
      assertFalse(sparkListenerNodeBlacklistedForStage0.equals((Object)sparkListenerNodeBlacklistedForStage1));
      assertEquals(13, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(13L, sparkListenerNodeBlacklistedForStage1.time());
      assertEquals(13, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(13, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(1048576L, sparkListenerNodeBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-3016), "Sv{a^NV", (-3016), (-3016), (-3016));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2688), "R", (-2688), (-2688), (-2688));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2688), "'i}o", (-2688), (-2688), (-2688));
      // Undeclared exception!
      try { 
        sparkListenerNodeBlacklistedForStage0.productElement((-2688));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply((-1L), "of class ", 0, 82, 82);
      sparkListenerNodeBlacklistedForStage0.copy$default$2();
      assertEquals(82, sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(82, sparkListenerNodeBlacklistedForStage0.stageId());
      assertEquals((-1L), sparkListenerNodeBlacklistedForStage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(2572L, "6Bzn.%@l\"J[", 484, 484, 2687);
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$4();
      assertEquals(484, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1L, "", (-1659), (-1659), (-1659));
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$3();
      assertEquals((-1659), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = SparkListenerNodeBlacklistedForStage.apply(31, (String) null, 1359, 10, 1807);
      long long0 = sparkListenerNodeBlacklistedForStage0.copy$default$1();
      assertEquals(31L, long0);
      assertEquals(1807, sparkListenerNodeBlacklistedForStage0.stageAttemptId());
      assertEquals(1359, sparkListenerNodeBlacklistedForStage0.executorFailures());
      assertEquals(10, sparkListenerNodeBlacklistedForStage0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option<Tuple5<Object, String, Object, Object, Object>> option0 = SparkListenerNodeBlacklistedForStage.unapply((SparkListenerNodeBlacklistedForStage) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Function1<Tuple5<Object, String, Object, Object, Object>, SparkListenerNodeBlacklistedForStage> function1_0 = SparkListenerNodeBlacklistedForStage.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2688), "uSA", (-2688), (-2688), (-2688));
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage1 = sparkListenerNodeBlacklistedForStage0.copy((-2688), "uSA", (-2688), (-2688), (-2688));
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.equals(sparkListenerNodeBlacklistedForStage1);
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage0.stageId());
      assertTrue(boolean0);
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage1.copy$default$5());
      assertEquals((-2688), sparkListenerNodeBlacklistedForStage1.executorFailures());
      assertEquals((-2688L), sparkListenerNodeBlacklistedForStage1.time());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741816, "", 1073741816, 1073741816, 1073741816);
      sparkListenerNodeBlacklistedForStage0.hashCode();
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.copy$default$3());
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.copy$default$4());
      assertEquals(1073741816, sparkListenerNodeBlacklistedForStage0.copy$default$5());
      assertEquals(1073741816L, sparkListenerNodeBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage((-2688), "", (-2688), (-2688), (-2688));
      String string0 = sparkListenerNodeBlacklistedForStage0.toString();
      assertEquals(5, sparkListenerNodeBlacklistedForStage0.productArity());
      assertEquals("SparkListenerNodeBlacklistedForStage(-2688,,-2688,-2688,-2688)", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(1073741824, "", 1073741824, 1073741824, 1073741824);
      boolean boolean0 = sparkListenerNodeBlacklistedForStage0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SparkListenerNodeBlacklistedForStage sparkListenerNodeBlacklistedForStage0 = new SparkListenerNodeBlacklistedForStage(0L, "empty.tail", (-1948), (-1948), (-1948));
      int int0 = sparkListenerNodeBlacklistedForStage0.copy$default$5();
      assertEquals((-1948), int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Function1<Object, Function1<String, Function1<Object, Function1<Object, Function1<Object, SparkListenerNodeBlacklistedForStage>>>>> function1_0 = SparkListenerNodeBlacklistedForStage.curried();
      assertNotNull(function1_0);
  }
}
