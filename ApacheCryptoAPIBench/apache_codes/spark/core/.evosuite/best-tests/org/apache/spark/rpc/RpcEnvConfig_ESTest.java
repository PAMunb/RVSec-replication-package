/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 21:47:58 GMT 2022
 */

package org.apache.spark.rpc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.SecurityManager;
import org.apache.spark.SparkConf;
import org.apache.spark.rpc.RpcEnvConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple8;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RpcEnvConfig_ESTest extends RpcEnvConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1864), securityManager0, (-1864), false);
      SecurityManager securityManager1 = rpcEnvConfig0.securityManager();
      RpcEnvConfig rpcEnvConfig1 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1864), securityManager1, 1529, true);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertEquals(1529, rpcEnvConfig1.copy$default$7());
      assertFalse(boolean0);
      assertEquals((-1864), rpcEnvConfig1.port());
      assertTrue(rpcEnvConfig1.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "#UUa?FU*Y7Z,G[=H").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", 156, securityManager0, 156, true);
      SecurityManager securityManager1 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager1).toString();
      RpcEnvConfig rpcEnvConfig1 = RpcEnvConfig.apply((SparkConf) null, "", "", "", 1, securityManager1, 156, true);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertFalse(boolean0);
      assertTrue(rpcEnvConfig1.clientMode());
      assertEquals(156, rpcEnvConfig1.copy$default$7());
      assertEquals(1, rpcEnvConfig1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "Precision option (", "Precision option (", "", 239, (SecurityManager) null, 239, false);
      rpcEnvConfig0.securityManager();
      assertEquals(239, rpcEnvConfig0.copy$default$7());
      assertEquals("Precision option (", rpcEnvConfig0.copy$default$2());
      assertEquals("Precision option (", rpcEnvConfig0.copy$default$3());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals(239, rpcEnvConfig0.port());
      assertEquals("", rpcEnvConfig0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf();
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("%Ngm", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", 0, securityManager0, 0, true);
      int int0 = rpcEnvConfig0.port();
      assertEquals(0, int0);
      assertEquals(0, rpcEnvConfig0.copy$default$7());
      assertTrue(rpcEnvConfig0.clientMode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "uU,S}", "uU,S}", (-12), securityManager0, 2899, true);
      int int0 = rpcEnvConfig0.port();
      assertEquals((-12), int0);
      assertEquals(2899, rpcEnvConfig0.numUsableCores());
      assertEquals("uU,S}", rpcEnvConfig0.bindAddress());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals("uU,S}", rpcEnvConfig0.advertiseAddress());
      assertEquals("", rpcEnvConfig0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, 793, true);
      int int0 = rpcEnvConfig0.numUsableCores();
      assertEquals((-376), rpcEnvConfig0.copy$default$5());
      assertEquals(793, int0);
      assertTrue(rpcEnvConfig0.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "iDOd%sMu/", "", "", 6, securityManager0, (-376), true);
      int int0 = rpcEnvConfig0.numUsableCores();
      assertEquals("", rpcEnvConfig0.copy$default$4());
      assertEquals((-376), int0);
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals(6, rpcEnvConfig0.port());
      assertEquals("iDOd%sMu/", rpcEnvConfig0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("T5}", "org.apache.spark.rpc.RpcEnvConfig$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, (String) null, "v7#@5LXo10&fCT", "*Lk?w", (-991), securityManager0, 719, false);
      String string0 = rpcEnvConfig0.name();
      assertEquals("*Lk?w", rpcEnvConfig0.advertiseAddress());
      assertEquals(719, rpcEnvConfig0.copy$default$7());
      assertEquals("v7#@5LXo10&fCT", rpcEnvConfig0.copy$default$3());
      assertEquals((-991), rpcEnvConfig0.port());
      assertNull(string0);
      assertFalse(rpcEnvConfig0.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, (-1272), true);
      rpcEnvConfig0.name();
      assertEquals((-1272), rpcEnvConfig0.numUsableCores());
      assertEquals((-376), rpcEnvConfig0.copy$default$5());
      assertTrue(rpcEnvConfig0.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf();
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "org.apache.spark.rpc.RpcEnvConfig", "", "org.apache.spark.rpc.RpcEnvConfig", 1335, securityManager0, 1335, true);
      SecurityManager securityManager1 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(securityManager1).toString();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "", "", "Map has no values type: ", 0, securityManager1, 0, true);
      assertEquals(0, rpcEnvConfig1.numUsableCores());
      assertEquals(1335, rpcEnvConfig0.copy$default$7());
      assertEquals("", rpcEnvConfig1.copy$default$2());
      assertEquals(0, rpcEnvConfig1.copy$default$5());
      assertEquals("", rpcEnvConfig0.copy$default$3());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals("org.apache.spark.rpc.RpcEnvConfig", rpcEnvConfig0.copy$default$2());
      assertEquals("org.apache.spark.rpc.RpcEnvConfig", rpcEnvConfig0.advertiseAddress());
      assertTrue(rpcEnvConfig1.copy$default$8());
      assertEquals("Map has no values type: ", rpcEnvConfig1.copy$default$4());
      assertEquals(1335, rpcEnvConfig0.port());
      assertEquals("", rpcEnvConfig1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(false);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("[wtD}/iuRP`", "RpcEnvConfig").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "[wtD}/iuRP`", "RpcEnvConfig", "^:@Xh4sq<iR!@'", (-1944), securityManager0, 0, false);
      boolean boolean0 = rpcEnvConfig0.copy$default$8();
      assertEquals((-1944), rpcEnvConfig0.port());
      assertEquals(0, rpcEnvConfig0.copy$default$7());
      assertFalse(boolean0);
      assertEquals("RpcEnvConfig", rpcEnvConfig0.copy$default$3());
      assertEquals("[wtD}/iuRP`", rpcEnvConfig0.copy$default$2());
      assertEquals("^:@Xh4sq<iR!@'", rpcEnvConfig0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, 793, true);
      int int0 = rpcEnvConfig0.copy$default$7();
      assertEquals((-376), rpcEnvConfig0.copy$default$5());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals(793, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 0, securityManager0, (-1900), true);
      int int0 = rpcEnvConfig0.copy$default$5();
      assertEquals((-1900), rpcEnvConfig0.copy$default$7());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.copy$default$2());
      assertEquals(0, int0);
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals("", rpcEnvConfig0.advertiseAddress());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "org.apache.spark.rpc.RpcEnvConfig$", "org.apache.spark.rpc.RpcEnvConfig$", "org.apache.spark.rpc.RpcEnvConfig$", (-1900), securityManager0, (-1900), false);
      int int0 = rpcEnvConfig0.copy$default$5();
      assertEquals((-1900), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 5, securityManager0, (-1900), false);
      SecurityManager securityManager1 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(securityManager1).toString();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "", "", (String) null, 5, securityManager1, (-376), true);
      String string0 = rpcEnvConfig1.copy$default$4();
      assertNull(string0);
      assertEquals((-376), rpcEnvConfig1.copy$default$7());
      assertEquals((-1900), rpcEnvConfig0.copy$default$7());
      assertEquals(5, rpcEnvConfig1.port());
      assertTrue(rpcEnvConfig1.copy$default$8());
      assertEquals("", rpcEnvConfig0.advertiseAddress());
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals(5, rpcEnvConfig0.port());
      assertFalse(rpcEnvConfig0.clientMode());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.name());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf();
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("%Ngm", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", 0, securityManager0, 0, true);
      rpcEnvConfig0.copy$default$4();
      assertEquals(0, rpcEnvConfig0.port());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals(0, rpcEnvConfig0.copy$default$7());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$", " \t\r\n", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 0, securityManager0, (-1900), false);
      SecurityManager securityManager1 = rpcEnvConfig0.securityManager();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "", (String) null, "", 719, securityManager1, 719, false);
      String string0 = rpcEnvConfig1.copy$default$3();
      assertEquals((-1900), rpcEnvConfig0.copy$default$7());
      assertEquals(719, rpcEnvConfig1.copy$default$5());
      assertEquals(0, rpcEnvConfig0.copy$default$5());
      assertEquals("", rpcEnvConfig0.advertiseAddress());
      assertFalse(rpcEnvConfig0.clientMode());
      assertFalse(rpcEnvConfig1.clientMode());
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertNull(string0);
      assertEquals(719, rpcEnvConfig1.numUsableCores());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.name());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("H0'SH';7}n<3gh", "org.apache.spark.rpc.RpcEnvConfig$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 0, securityManager0, (-1900), true);
      String string0 = rpcEnvConfig0.copy$default$3();
      assertEquals("", rpcEnvConfig0.copy$default$4());
      assertEquals(0, rpcEnvConfig0.port());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.name());
      assertEquals("", string0);
      assertEquals((-1900), rpcEnvConfig0.numUsableCores());
      assertTrue(rpcEnvConfig0.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "gm", "", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "gm", "", "", (-376), securityManager0, (-1272), true);
      SecurityManager securityManager1 = rpcEnvConfig0.securityManager();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, (String) null, "spark.yarn.access.namenodes", "java.vm.info", (-376), securityManager1, 115, true);
      String string0 = rpcEnvConfig1.copy$default$2();
      assertEquals("", rpcEnvConfig0.advertiseAddress());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals((-376), rpcEnvConfig1.port());
      assertEquals("", rpcEnvConfig0.copy$default$3());
      assertEquals("java.vm.info", rpcEnvConfig1.advertiseAddress());
      assertEquals("spark.yarn.access.namenodes", rpcEnvConfig1.bindAddress());
      assertEquals((-1272), rpcEnvConfig0.numUsableCores());
      assertTrue(rpcEnvConfig1.copy$default$8());
      assertEquals("gm", rpcEnvConfig0.name());
      assertEquals((-376), rpcEnvConfig0.port());
      assertEquals(115, rpcEnvConfig1.numUsableCores());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "AV;.b?t3$", 5, securityManager0, 5, false);
      String string0 = rpcEnvConfig0.copy$default$2();
      assertEquals(5, rpcEnvConfig0.port());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.advertiseAddress());
      assertEquals("", rpcEnvConfig0.copy$default$3());
      assertEquals(5, rpcEnvConfig0.copy$default$7());
      assertEquals("", string0);
      assertFalse(rpcEnvConfig0.clientMode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "fS").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "fS", "", "", (-376), securityManager0, 793, true);
      rpcEnvConfig0.copy$default$1();
      assertEquals("", rpcEnvConfig0.copy$default$3());
      assertEquals(793, rpcEnvConfig0.numUsableCores());
      assertEquals("fS", rpcEnvConfig0.copy$default$2());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals((-376), rpcEnvConfig0.copy$default$5());
      assertEquals("", rpcEnvConfig0.advertiseAddress());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, 793, true);
      rpcEnvConfig0.conf();
      assertEquals((-376), rpcEnvConfig0.port());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals(793, rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(false);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("RpcEnvConfig", "RpcEnvConfig").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "scala.PartialFunction$Lifted", "RpcEnvConfig", "[wtD}/iuRP`", 1844, securityManager0, 1844, true);
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy(sparkConf0, "RpcEnvConfig", "", "RpcEnvConfig", 233, (SecurityManager) null, 8, false);
      boolean boolean0 = rpcEnvConfig1.clientMode();
      assertEquals(1844, rpcEnvConfig0.copy$default$7());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals(233, rpcEnvConfig1.port());
      assertFalse(boolean0);
      assertEquals("RpcEnvConfig", rpcEnvConfig1.advertiseAddress());
      assertEquals("scala.PartialFunction$Lifted", rpcEnvConfig0.name());
      assertEquals(1844, rpcEnvConfig0.port());
      assertEquals("", rpcEnvConfig1.copy$default$3());
      assertEquals("RpcEnvConfig", rpcEnvConfig0.bindAddress());
      assertEquals(8, rpcEnvConfig1.numUsableCores());
      assertEquals("[wtD}/iuRP`", rpcEnvConfig0.advertiseAddress());
      assertEquals("RpcEnvConfig", rpcEnvConfig1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf();
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "XJ6wYSn*u", 0, securityManager0, 0, true);
      rpcEnvConfig0.canEqual(sparkConf0);
      assertEquals("XJ6wYSn*u", rpcEnvConfig0.copy$default$4());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals(0, rpcEnvConfig0.numUsableCores());
      assertEquals(0, rpcEnvConfig0.port());
      assertEquals("", rpcEnvConfig0.name());
      assertEquals("", rpcEnvConfig0.bindAddress());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "AV;.b?t3$", 5, securityManager0, 5, false);
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "", (String) null, "O(e", (-1552), (SecurityManager) null, 1316, true);
      String string0 = rpcEnvConfig1.bindAddress();
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals(1316, rpcEnvConfig1.copy$default$7());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.copy$default$4());
      assertEquals("O(e", rpcEnvConfig1.advertiseAddress());
      assertNull(string0);
      assertTrue(rpcEnvConfig1.copy$default$8());
      assertEquals(5, rpcEnvConfig0.numUsableCores());
      assertEquals(5, rpcEnvConfig0.copy$default$5());
      assertEquals("", rpcEnvConfig0.name());
      assertEquals((-1552), rpcEnvConfig1.port());
      assertEquals("", rpcEnvConfig1.name());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, 793, true);
      rpcEnvConfig0.bindAddress();
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals(793, rpcEnvConfig0.copy$default$7());
      assertEquals((-376), rpcEnvConfig0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(false);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("[wtD}/iuRP`", "RpcEnvConfig").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "[wtD}/iuRP`", "RpcEnvConfig", "^:@Xh4sq<iR!@'", (-1944), securityManager0, 0, false);
      int int0 = rpcEnvConfig0.copy$default$7();
      assertEquals(0, int0);
      assertEquals("^:@Xh4sq<iR!@'", rpcEnvConfig0.advertiseAddress());
      assertEquals((-1944), rpcEnvConfig0.copy$default$5());
      assertFalse(rpcEnvConfig0.clientMode());
      assertEquals("[wtD}/iuRP`", rpcEnvConfig0.copy$default$2());
      assertEquals("RpcEnvConfig", rpcEnvConfig0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "\" field must be", "\" field must be", 1706, securityManager0, 1706, false);
      SecurityManager securityManager1 = rpcEnvConfig0.securityManager();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy(securityManager1.org$apache$spark$SecurityManager$$sparkConf, "AV;.b?t3$", "", (String) null, 1706, securityManager1, 0, false);
      String string0 = rpcEnvConfig1.advertiseAddress();
      assertEquals("\" field must be", rpcEnvConfig0.bindAddress());
      assertEquals("\" field must be", rpcEnvConfig0.copy$default$4());
      assertEquals("", rpcEnvConfig0.copy$default$2());
      assertEquals("AV;.b?t3$", rpcEnvConfig1.name());
      assertEquals(1706, rpcEnvConfig0.numUsableCores());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals(1706, rpcEnvConfig1.copy$default$5());
      assertEquals("", rpcEnvConfig1.bindAddress());
      assertEquals(1706, rpcEnvConfig0.port());
      assertEquals(0, rpcEnvConfig1.numUsableCores());
      assertFalse(rpcEnvConfig1.clientMode());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "Xd41mMu4,", "", (-125), securityManager0, (-125), true);
      String string0 = rpcEnvConfig0.advertiseAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1857), securityManager0, (-1857), false);
      rpcEnvConfig0.productElement(2);
      assertEquals((-1857), rpcEnvConfig0.copy$default$7());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals((-1857), rpcEnvConfig0.port());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$", "", "AV;.b?t3$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 5, securityManager0, (-1900), false);
      rpcEnvConfig0.productElement(5);
      assertEquals("", rpcEnvConfig0.advertiseAddress());
      assertEquals(5, rpcEnvConfig0.port());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.copy$default$2());
      assertEquals("", rpcEnvConfig0.copy$default$3());
      assertFalse(rpcEnvConfig0.clientMode());
      assertEquals((-1900), rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", 0, securityManager0, (-1857), false);
      rpcEnvConfig0.productElement(0);
      assertEquals(0, rpcEnvConfig0.copy$default$5());
      assertEquals((-1857), rpcEnvConfig0.copy$default$7());
      assertFalse(rpcEnvConfig0.clientMode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "#UUa?$FU*Y7Z,G[=HC").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", 156, securityManager0, 156, false);
      rpcEnvConfig0.productElement(1);
      assertEquals(156, rpcEnvConfig0.copy$default$5());
      assertFalse(rpcEnvConfig0.clientMode());
      assertEquals(156, rpcEnvConfig0.copy$default$7());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, 793, true);
      Object object0 = rpcEnvConfig0.productElement(7);
      assertEquals(793, rpcEnvConfig0.copy$default$7());
      assertEquals((-376), rpcEnvConfig0.port());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "8", "8", "8", 6, securityManager0, 85, false);
      Object object0 = rpcEnvConfig0.productElement(6);
      assertEquals(85, object0);
      assertEquals(6, rpcEnvConfig0.port());
      assertFalse(rpcEnvConfig0.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      SparkConf sparkConf0 = new SparkConf();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "'h_|mL%7*>sv", 0, securityManager0, (-1857), true);
      Object object0 = rpcEnvConfig0.productElement(3);
      assertEquals("'h_|mL%7*>sv", object0);
      assertEquals((-1857), rpcEnvConfig0.copy$default$7());
      assertEquals(0, rpcEnvConfig0.port());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals("", rpcEnvConfig0.name());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("requirement failed: ", "!Be#Px<4t#{-EF}:m#\"").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "Ozeo{MI_y0<`E0", "Ozeo{MI_y0<`E0", "", 4281, securityManager0, 156, false);
      Object object0 = rpcEnvConfig0.productElement(4);
      assertEquals(4281, object0);
      assertEquals(156, rpcEnvConfig0.copy$default$7());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals("Ozeo{MI_y0<`E0", rpcEnvConfig0.copy$default$3());
      assertEquals("", rpcEnvConfig0.copy$default$4());
      assertEquals("Ozeo{MI_y0<`E0", rpcEnvConfig0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "Xd41mMu4,", "", (-125), securityManager0, (-125), true);
      SparkConf sparkConf0 = rpcEnvConfig0.conf();
      assertNull(sparkConf0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "=*]Ri/!*RH", "=*]Ri/!*RH", "=*]Ri/!*RH", 1946, (SecurityManager) null, 1946, false);
      int int0 = rpcEnvConfig0.productArity();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "bBZNxL?&Ft", "bBZNxL?&Ft", "", 393, securityManager0, 393, true);
      int int0 = rpcEnvConfig0.port();
      assertEquals(393, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "^+m4!a!:1wm*z@+", ",\"I*", "bBZNxL?&Ft", 0, securityManager0, 0, true);
      int int0 = rpcEnvConfig0.numUsableCores();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", (-376), securityManager0, 793, true);
      rpcEnvConfig0.canEqual(rpcEnvConfig0);
      assertEquals(793, rpcEnvConfig0.copy$default$7());
      assertEquals((-376), rpcEnvConfig0.port());
      assertTrue(rpcEnvConfig0.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 0, securityManager0, (-1900), true);
      boolean boolean0 = rpcEnvConfig0.clientMode();
      assertTrue(boolean0);
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals(0, rpcEnvConfig0.port());
      assertEquals("", rpcEnvConfig0.copy$default$4());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.name());
      assertEquals((-1900), rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, (String) null, (String) null, "", 2266, (SecurityManager) null, 2266, false);
      String string0 = rpcEnvConfig0.productPrefix();
      assertEquals(2266, rpcEnvConfig0.copy$default$7());
      assertEquals("RpcEnvConfig", string0);
      assertEquals(2266, rpcEnvConfig0.copy$default$5());
      assertFalse(rpcEnvConfig0.clientMode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "^+m4!a!:1wm*z@+", ",\"I*", "bBZNxL?&Ft", 0, securityManager0, 0, true);
      String string0 = rpcEnvConfig0.name();
      assertEquals("^+m4!a!:1wm*z@+", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "Precision option (", "Precision option (", "", 239, (SecurityManager) null, 239, false);
      rpcEnvConfig0.productIterator();
      assertEquals("Precision option (", rpcEnvConfig0.name());
      assertEquals(239, rpcEnvConfig0.copy$default$5());
      assertEquals(8, rpcEnvConfig0.productArity());
      assertEquals("", rpcEnvConfig0.advertiseAddress());
      assertEquals("Precision option (", rpcEnvConfig0.bindAddress());
      assertEquals(239, rpcEnvConfig0.copy$default$7());
      assertFalse(rpcEnvConfig0.clientMode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "uU,S}", "uU,S}", (-12), securityManager0, 2899, true);
      String string0 = rpcEnvConfig0.bindAddress();
      assertEquals("uU,S}", string0);
      assertEquals("", rpcEnvConfig0.name());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals((-12), rpcEnvConfig0.copy$default$5());
      assertEquals("uU,S}", rpcEnvConfig0.copy$default$4());
      assertEquals(2899, rpcEnvConfig0.copy$default$7());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "\"~9\"r,NS", "GZs]eG1-eP%44u", (-1900), securityManager0, 8, false);
      String string0 = rpcEnvConfig0.advertiseAddress();
      assertEquals("GZs]eG1-eP%44u", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "T", "T", "T", (-194), (SecurityManager) null, (-2678), false);
      RpcEnvConfig.unapply(rpcEnvConfig0);
      assertEquals((-2678), rpcEnvConfig0.numUsableCores());
      assertEquals((-194), rpcEnvConfig0.copy$default$5());
      assertEquals((-194), rpcEnvConfig0.port());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn(":.", ":.", ":.", ":.").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, ":.", ":.", ":.", (-1864), securityManager0, (-1864), false);
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, ":.", ":.", ":.", (-1864), securityManager0, (-1864), true);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertEquals((-1864), rpcEnvConfig0.copy$default$7());
      assertFalse(boolean0);
      assertEquals((-1864), rpcEnvConfig0.port());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1857), securityManager0, (-1857), false);
      SecurityManager securityManager1 = rpcEnvConfig0.securityManager();
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, "", "", "", (-1857), securityManager1, 2752, false);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertFalse(rpcEnvConfig0.equals((Object)rpcEnvConfig1));
      assertEquals((-1857), rpcEnvConfig0.copy$default$7());
      assertFalse(boolean0);
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals((-1857), rpcEnvConfig0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1858), securityManager0, (-1858), false);
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, "", "", "", (-1858), (SecurityManager) null, (-1858), false);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertFalse(boolean0);
      assertEquals((-1858), rpcEnvConfig0.port());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals((-1858), rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1840), securityManager0, (-1840), false);
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, "", "", "", (-1840), (SecurityManager) null, (-1840), false);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertEquals((-1840), rpcEnvConfig0.port());
      assertFalse(rpcEnvConfig0.clientMode());
      assertFalse(boolean0);
      assertEquals((-1840), rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("l/hO", "l/hO").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "l/hO", "l/hO", "l/hO", 1, securityManager0, 1, false);
      SecurityManager securityManager1 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(securityManager1).toString();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "l/hO", "l/hO", "l/hO", (-3653), securityManager1, 1, false);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertFalse(boolean0);
      assertEquals((-3653), rpcEnvConfig1.copy$default$5());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals(1, rpcEnvConfig0.copy$default$5());
      assertEquals(1, rpcEnvConfig0.numUsableCores());
      assertEquals(1, rpcEnvConfig1.numUsableCores());
      assertFalse(rpcEnvConfig1.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "", "", "", (-1857), securityManager0, (-1857), false);
      SecurityManager securityManager1 = rpcEnvConfig0.securityManager();
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "", "", (String) null, (-1857), securityManager1, (-1857), false);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertFalse(boolean0);
      assertFalse(rpcEnvConfig0.clientMode());
      assertEquals((-1857), rpcEnvConfig1.numUsableCores());
      assertEquals((-1857), rpcEnvConfig0.copy$default$7());
      assertEquals((-1857), rpcEnvConfig0.port());
      assertEquals((-1857), rpcEnvConfig1.copy$default$5());
      assertFalse(rpcEnvConfig1.copy$default$8());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, (String) null, (String) null, "", (-2756), (SecurityManager) null, (-2756), false);
      RpcEnvConfig rpcEnvConfig1 = RpcEnvConfig.apply((SparkConf) null, (String) null, "Th6Gv%EFfJ{\"qdxqiS", "org.apache.log4j.helpers.AppenderAttachableImpl", (-2756), (SecurityManager) null, (-2756), false);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertFalse(boolean0);
      assertEquals((-2756), rpcEnvConfig1.numUsableCores());
      assertFalse(rpcEnvConfig1.clientMode());
      assertEquals("Th6Gv%EFfJ{\"qdxqiS", rpcEnvConfig1.bindAddress());
      assertEquals((-2756), rpcEnvConfig1.copy$default$5());
      assertEquals("org.apache.log4j.helpers.AppenderAttachableImpl", rpcEnvConfig1.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "?", ":.", "?", (-1601), (SecurityManager) null, (-1601), false);
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, ":.", "?", ":.", 2865, (SecurityManager) null, 1349, false);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertFalse(boolean0);
      assertEquals("?", rpcEnvConfig0.name());
      assertEquals((-1601), rpcEnvConfig0.numUsableCores());
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals(":.", rpcEnvConfig0.copy$default$3());
      assertEquals((-1601), rpcEnvConfig0.copy$default$5());
      assertEquals("?", rpcEnvConfig0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, (String) null, (String) null, (String) null, (-1850), (SecurityManager) null, (-1850), true);
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig(sparkConf0, (String) null, (String) null, (String) null, (-1850), (SecurityManager) null, (-1850), true);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertEquals((-1850), rpcEnvConfig1.numUsableCores());
      assertTrue(boolean0);
      assertEquals((-1850), rpcEnvConfig1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(false);
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "?{d", "?{d", (String) null, (-3057), (SecurityManager) null, (-3057), false);
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy(sparkConf0, (String) null, "", "", (-3057), (SecurityManager) null, 1913, false);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertFalse(rpcEnvConfig0.copy$default$8());
      assertEquals((-3057), rpcEnvConfig0.copy$default$7());
      assertEquals((-3057), rpcEnvConfig0.port());
      assertEquals(1913, rpcEnvConfig1.copy$default$7());
      assertEquals((-3057), rpcEnvConfig1.port());
      assertFalse(rpcEnvConfig1.clientMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(false);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "", "", "", 3171, securityManager0, 3171, false);
      SecurityManager securityManager1 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, "", "VyAFb", "VyAFb", 3171, securityManager1, 3171, true);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertFalse(boolean0);
      assertEquals(3171, rpcEnvConfig0.port());
      assertFalse(rpcEnvConfig0.clientMode());
      assertEquals(3171, rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf();
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, (String) null, (String) null, "", 2436, securityManager0, 2436, true);
      SecurityManager securityManager1 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig((SparkConf) null, "", "", "", 2436, securityManager1, 2436, true);
      boolean boolean0 = rpcEnvConfig1.equals(rpcEnvConfig0);
      assertFalse(boolean0);
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals(2436, rpcEnvConfig0.port());
      assertEquals(2436, rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply(sparkConf0, "  ", "net.topology.script.file.name", "  ", 1237, (SecurityManager) null, 1237, true);
      RpcEnvConfig rpcEnvConfig1 = new RpcEnvConfig(sparkConf0, "  ", "net.topology.script.file.name", "", 1237, (SecurityManager) null, 2, true);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertFalse(boolean0);
      assertEquals("  ", rpcEnvConfig0.copy$default$2());
      assertEquals("  ", rpcEnvConfig0.advertiseAddress());
      assertEquals(1237, rpcEnvConfig0.copy$default$5());
      assertTrue(rpcEnvConfig0.clientMode());
      assertEquals("net.topology.script.file.name", rpcEnvConfig0.bindAddress());
      assertEquals(1237, rpcEnvConfig0.copy$default$7());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "", "", 1237, (SecurityManager) null, 1237, false);
      boolean boolean0 = rpcEnvConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, (String) null, (String) null, "", (-2756), (SecurityManager) null, (-2756), false);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "Fe*T|BARI1bKK", "Fe*T|BARI1bKK", "gw%9", 4451, (SecurityManager) null, 4451, true);
      rpcEnvConfig0.hashCode();
      assertEquals(4451, rpcEnvConfig0.numUsableCores());
      assertEquals(4451, rpcEnvConfig0.port());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, (String) null, "Y.", "Y.", (-1879), (SecurityManager) null, (-1879), false);
      rpcEnvConfig0.hashCode();
      assertEquals((-1879), rpcEnvConfig0.port());
      assertEquals((-1879), rpcEnvConfig0.copy$default$7());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "T", "T", "T", (-194), (SecurityManager) null, (-2678), false);
      // Undeclared exception!
      try { 
        rpcEnvConfig0.productElement((-2678));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.rpc.RpcEnvConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option<Tuple8<SparkConf, String, String, String, Object, SecurityManager, Object, Object>> option0 = RpcEnvConfig.unapply((RpcEnvConfig) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "", "", 1, (SecurityManager) null, (-358), false);
      RpcEnvConfig rpcEnvConfig1 = rpcEnvConfig0.copy((SparkConf) null, "", "~]R2B*r\"y=fFL.K%W6", "", (-358), (SecurityManager) null, (-358), false);
      boolean boolean0 = rpcEnvConfig0.equals(rpcEnvConfig1);
      assertEquals("", rpcEnvConfig1.copy$default$4());
      assertEquals((-358), rpcEnvConfig1.copy$default$7());
      assertEquals("", rpcEnvConfig1.name());
      assertFalse(boolean0);
      assertFalse(rpcEnvConfig1.copy$default$8());
      assertEquals((-358), rpcEnvConfig1.port());
      assertEquals("~]R2B*r\"y=fFL.K%W6", rpcEnvConfig1.bindAddress());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "f!3i99", "", 1974, securityManager0, 0, false);
      int int0 = rpcEnvConfig0.copy$default$5();
      assertEquals(1974, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig(sparkConf0, ",\"*", ",\"*", "bBZNxL?&Ft", (-125), securityManager0, (-125), true);
      String string0 = rpcEnvConfig0.copy$default$3();
      assertEquals(",\"*", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "", 0, securityManager0, (-1900), true);
      String string0 = rpcEnvConfig0.copy$default$2();
      assertEquals("", rpcEnvConfig0.bindAddress());
      assertEquals("", rpcEnvConfig0.copy$default$4());
      assertEquals(0, rpcEnvConfig0.port());
      assertEquals((-1900), rpcEnvConfig0.numUsableCores());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals("AV;.b?t3$", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Function1<Tuple8<SparkConf, String, String, String, Object, SecurityManager, Object, Object>, RpcEnvConfig> function1_0 = RpcEnvConfig.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "Xd41mMu4,", "", (-125), securityManager0, (-125), true);
      int int0 = rpcEnvConfig0.copy$default$7();
      assertEquals((-125), int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Function1<SparkConf, Function1<String, Function1<String, Function1<String, Function1<Object, Function1<SecurityManager, Function1<Object, Function1<Object, RpcEnvConfig>>>>>>>> function1_0 = RpcEnvConfig.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(true);
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig(sparkConf0, ",\"*", ",\"*", "bBZNxL?&Ft", (-125), securityManager0, (-125), true);
      boolean boolean0 = rpcEnvConfig0.copy$default$8();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SparkConf sparkConf0 = new SparkConf(false);
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig(sparkConf0, "4D;1[9,p{tvE~", "1GZcU@&sRO.W'`^", "1GZcU@&sRO.W'`^", 145, (SecurityManager) null, 145, false);
      SecurityManager securityManager0 = rpcEnvConfig0.copy$default$6();
      assertNull(securityManager0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      doReturn("AV;.b?t3$", "AV;.b?t3$").when(securityManager0).toString();
      RpcEnvConfig rpcEnvConfig0 = RpcEnvConfig.apply((SparkConf) null, "AV;.b?t3$", "", "d", 0, securityManager0, (-1900), true);
      rpcEnvConfig0.copy$default$1();
      assertEquals("d", rpcEnvConfig0.advertiseAddress());
      assertTrue(rpcEnvConfig0.copy$default$8());
      assertEquals("", rpcEnvConfig0.copy$default$3());
      assertEquals("AV;.b?t3$", rpcEnvConfig0.copy$default$2());
      assertEquals(0, rpcEnvConfig0.copy$default$5());
      assertEquals((-1900), rpcEnvConfig0.numUsableCores());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SecurityManager securityManager0 = mock(SecurityManager.class, new ViolatedAssumptionAnswer());
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "", "\"~9\"r,NS", "GZs]eG1-eP%44u", (-1900), securityManager0, 8, false);
      String string0 = rpcEnvConfig0.copy$default$4();
      assertEquals("GZs]eG1-eP%44u", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RpcEnvConfig rpcEnvConfig0 = new RpcEnvConfig((SparkConf) null, "^{=.g|3XtV/*#+", "^{=.g|3XtV/*#+", "@oy;,", 977, (SecurityManager) null, 1992, false);
      String string0 = rpcEnvConfig0.toString();
      assertEquals(8, rpcEnvConfig0.productArity());
      assertEquals("RpcEnvConfig(null,^{=.g|3XtV/*#+,^{=.g|3XtV/*#+,@oy;,,977,null,1992,false)", string0);
  }
}
