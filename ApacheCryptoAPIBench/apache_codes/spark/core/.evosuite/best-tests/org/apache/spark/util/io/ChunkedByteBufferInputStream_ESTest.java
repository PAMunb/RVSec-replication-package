/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:19:11 GMT 2022
 */

package org.apache.spark.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.spark.util.io.ChunkedByteBuffer;
import org.apache.spark.util.io.ChunkedByteBufferInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChunkedByteBufferInputStream_ESTest extends ChunkedByteBufferInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, true);
      chunkedByteBufferInputStream0.skip((-9223372036854775808L));
      ChunkedByteBuffer chunkedByteBuffer1 = chunkedByteBufferInputStream0.chunkedByteBuffer();
      assertNull(chunkedByteBuffer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[2];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      // Undeclared exception!
      try { 
        chunkedByteBufferInputStream0.skip((-3025L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = null;
      try {
        chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream((ChunkedByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.io.ChunkedByteBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[0];
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      chunkedByteBufferInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null, (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, true);
      chunkedByteBufferInputStream0.skip((-9223372036854775808L));
      chunkedByteBufferInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("Y? e`~et", (String) null, (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, true);
      chunkedByteBufferInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("Y? e`~et").when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, true);
      ChunkedByteBuffer chunkedByteBuffer1 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      chunkedByteBufferInputStream0.chunkedByteBuffer_$eq(chunkedByteBuffer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("<&&O$-&l)3jc^Il.E", (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      int int0 = chunkedByteBufferInputStream0.read();
      int int1 = chunkedByteBufferInputStream0.read((byte[]) null, 2690, 5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("e2eA!-v?g [x#La`5w").when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      long long0 = chunkedByteBufferInputStream0.skip(1154L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[2];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      int int0 = chunkedByteBufferInputStream0.read((byte[]) null, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      int int0 = chunkedByteBufferInputStream0.read((byte[]) null, 25, 25);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[5];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("e2eA!-v?g [x#La`5w", (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      int int0 = chunkedByteBufferInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      byteBufferArray0[0] = byteBuffer0;
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("", "", (String) null).when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, true);
      int int0 = chunkedByteBufferInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[1];
      ChunkedByteBuffer chunkedByteBuffer0 = mock(ChunkedByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(chunkedByteBuffer0).toString();
      doReturn(byteBufferArray0).when(chunkedByteBuffer0).getChunks();
      ChunkedByteBufferInputStream chunkedByteBufferInputStream0 = new ChunkedByteBufferInputStream(chunkedByteBuffer0, false);
      chunkedByteBufferInputStream0.skip((-1L));
  }
}
