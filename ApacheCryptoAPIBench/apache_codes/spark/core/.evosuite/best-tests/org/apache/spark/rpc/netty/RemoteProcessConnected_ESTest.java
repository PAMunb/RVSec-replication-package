/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:03:08 GMT 2022
 */

package org.apache.spark.rpc.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.rpc.RpcAddress;
import org.apache.spark.rpc.netty.RemoteProcessConnected;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RemoteProcessConnected_ESTest extends RemoteProcessConnected_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", ")cf0|sxp8`", (String) null, (String) null).when(rpcAddress0).toString();
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply(rpcAddress0);
      Object object0 = remoteProcessConnected0.productElement(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected(rpcAddress0);
      boolean boolean0 = remoteProcessConnected0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      Object object0 = remoteProcessConnected0.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected(rpcAddress0);
      String string0 = remoteProcessConnected0.productPrefix();
      assertEquals("RemoteProcessConnected", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      RpcAddress rpcAddress0 = remoteProcessConnected0.remoteAddress();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      int int0 = remoteProcessConnected0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      boolean boolean0 = remoteProcessConnected0.canEqual(remoteProcessConnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected(rpcAddress0);
      RpcAddress rpcAddress1 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "", "").when(rpcAddress1).toString();
      RemoteProcessConnected remoteProcessConnected1 = remoteProcessConnected0.copy(rpcAddress1);
      RemoteProcessConnected remoteProcessConnected2 = RemoteProcessConnected.apply(rpcAddress1);
      boolean boolean0 = remoteProcessConnected1.equals(remoteProcessConnected2);
      assertTrue(boolean0);
      assertFalse(remoteProcessConnected2.equals((Object)remoteProcessConnected0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(rpcAddress0).toString();
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected(rpcAddress0);
      RemoteProcessConnected remoteProcessConnected1 = remoteProcessConnected0.copy((RpcAddress) null);
      boolean boolean0 = remoteProcessConnected1.equals(remoteProcessConnected0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RpcAddress rpcAddress0 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(rpcAddress0).toString();
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply(rpcAddress0);
      RpcAddress rpcAddress1 = mock(RpcAddress.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(rpcAddress1).toString();
      RemoteProcessConnected remoteProcessConnected1 = remoteProcessConnected0.copy(rpcAddress1);
      boolean boolean0 = remoteProcessConnected0.equals(remoteProcessConnected1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      boolean boolean0 = remoteProcessConnected0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected((RpcAddress) null);
      boolean boolean0 = remoteProcessConnected0.equals(remoteProcessConnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      // Undeclared exception!
      try { 
        remoteProcessConnected0.productElement((-161));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000012
         //
         verifyException("org.apache.spark.rpc.netty.RemoteProcessConnected", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      Option<RpcAddress> option0 = RemoteProcessConnected.unapply(remoteProcessConnected0);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      RemoteProcessConnected remoteProcessConnected1 = new RemoteProcessConnected((RpcAddress) null);
      boolean boolean0 = remoteProcessConnected1.equals(remoteProcessConnected0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Function1<RemoteProcessConnected, RemoteProcessConnected> function1_0 = RemoteProcessConnected.compose((Function1<RemoteProcessConnected, RpcAddress>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected((RpcAddress) null);
      RpcAddress rpcAddress0 = remoteProcessConnected0.copy$default$1();
      assertNull(rpcAddress0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option<RpcAddress> option0 = RemoteProcessConnected.unapply((RemoteProcessConnected) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected((RpcAddress) null);
      String string0 = remoteProcessConnected0.toString();
      assertEquals("RemoteProcessConnected(null)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<RpcAddress, RemoteProcessConnected> function1_0 = RemoteProcessConnected.andThen((Function1<RemoteProcessConnected, RemoteProcessConnected>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = new RemoteProcessConnected((RpcAddress) null);
      remoteProcessConnected0.productIterator();
      assertEquals(1, remoteProcessConnected0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RemoteProcessConnected remoteProcessConnected0 = RemoteProcessConnected.apply((RpcAddress) null);
      remoteProcessConnected0.hashCode();
      assertEquals(1, remoteProcessConnected0.productArity());
  }
}
