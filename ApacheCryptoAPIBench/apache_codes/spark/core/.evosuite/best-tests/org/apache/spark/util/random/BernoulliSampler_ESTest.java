/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 23:16:15 GMT 2022
 */

package org.apache.spark.util.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.util.random.BernoulliSampler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.collection.Iterator;
import scala.reflect.ClassTag;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BernoulliSampler_ESTest extends BernoulliSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(1.000001, classTag0);
      int int0 = bernoulliSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassTag<Integer> classTag0 = (ClassTag<Integer>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      BernoulliSampler<Integer> bernoulliSampler0 = new BernoulliSampler<Integer>((-1.0E-6), classTag0);
      int int0 = bernoulliSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BernoulliSampler<Integer> bernoulliSampler0 = new BernoulliSampler<Integer>(1.0, (ClassTag<Integer>) null);
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(iterator0).filter(any(scala.Function1.class));
      Iterator<Integer> iterator1 = bernoulliSampler0.sample(iterator0);
      assertNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassTag<Object> classTag0 = (ClassTag<Object>) mock(ClassTag.class, new ViolatedAssumptionAnswer());
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(0.4699589183013278, classTag0);
      bernoulliSampler0.sample();
      int int0 = bernoulliSampler0.sample();
      bernoulliSampler0.sample();
      bernoulliSampler0.sample();
      bernoulliSampler0.sample();
      int int1 = bernoulliSampler0.sample();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(1.0, (ClassTag<Object>) null);
      int int0 = bernoulliSampler0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(0.0, (ClassTag<Object>) null);
      int int0 = bernoulliSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(0.4, (ClassTag<Object>) null);
      bernoulliSampler0.sample();
      int int0 = bernoulliSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = null;
      try {
        bernoulliSampler0 = new BernoulliSampler<Object>(1744.86178124, (ClassTag<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (1744.86178124) must be on interval [0, 1]
         //
         verifyException("scala.Predef$", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(0.4, (ClassTag<Object>) null);
      bernoulliSampler0.setSeed(3518L);
      assertEquals(0.4, bernoulliSampler0.org$apache$spark$util$random$BernoulliSampler$$fraction, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BernoulliSampler<Integer> bernoulliSampler0 = new BernoulliSampler<Integer>(1.0E-6, (ClassTag<Integer>) null);
      int int0 = bernoulliSampler0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(1.0, (ClassTag<Object>) null);
      // Undeclared exception!
      try { 
        bernoulliSampler0.sample((Iterator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.util.random.RandomSampler$class", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BernoulliSampler<Object> bernoulliSampler0 = new BernoulliSampler<Object>(1.0, (ClassTag<Object>) null);
      BernoulliSampler<Object> bernoulliSampler1 = bernoulliSampler0.clone();
      assertNotSame(bernoulliSampler1, bernoulliSampler0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BernoulliSampler<Integer> bernoulliSampler0 = null;
      try {
        bernoulliSampler0 = new BernoulliSampler<Integer>((-1777.68277090325), (ClassTag<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requirement failed: Sampling fraction (-1777.68277090325) must be on interval [0, 1]
         //
         verifyException("scala.Predef$", e);
      }
  }
}
