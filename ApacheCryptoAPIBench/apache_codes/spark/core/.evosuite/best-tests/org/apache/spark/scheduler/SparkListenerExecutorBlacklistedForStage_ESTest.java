/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:15:59 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple5;
import scala.collection.Iterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparkListenerExecutorBlacklistedForStage_ESTest extends SparkListenerExecutorBlacklistedForStage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "scala.collection.mutable.AbstractSeq", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(0, "scala.collection.mutable.AbstractSeq", 0, 0, 789);
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(789, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(789, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage1.equals(sparkListenerExecutorBlacklistedForStage0);
      assertFalse(boolean0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(789, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(789, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals("scala.collection.mutable.AbstractSeq", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = new SparkListenerExecutorBlacklistedForStage(0, "", 0, 2146062414, (-1123));
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-1123), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(2146062414, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(2146062414, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals((-1123), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertFalse(boolean0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-1123), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(2146062414, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(2146062414, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals((-1123), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(0L, "", (-517), 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertFalse(boolean0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply((-1416), "IVkSA\"k!lwC\"rE]", (-1416), (-322), (-287));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(1240L, "IVkSA\"k!lwC\"rE]", (-287), (-517), (-322));
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(1240L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(1240L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertFalse(boolean0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(1240L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(1240L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "}MGp{Up-pA$V11k.-N", 2096, 2096, 2096);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("}MGp{Up-pA$V11k.-N", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("}MGp{Up-pA$V11k.-N", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      
      long long0 = sparkListenerExecutorBlacklistedForStage0.time();
      assertEquals(0L, long0);
      assertEquals("}MGp{Up-pA$V11k.-N", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("}MGp{Up-pA$V11k.-N", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(2096, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage((-2607L), "X gs7QU#uw!#|5x", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.time());
      
      long long0 = sparkListenerExecutorBlacklistedForStage0.time();
      assertEquals((-2607L), long0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.taskFailures();
      assertEquals(0, int0);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(3061L, "scala.Tuple", 4278, 4278, 4278);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.taskFailures();
      assertEquals(4278, int0);
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(3201L, "t.@", 649, 649, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.stageId();
      assertEquals(649, int0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "++3IVcG9q>]`@K$", (-3423), (-3423), (-2550));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-2550), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("++3IVcG9q>]`@K$", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2550), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("++3IVcG9q>]`@K$", sparkListenerExecutorBlacklistedForStage0.executorId());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.stageId();
      assertEquals((-3423), int0);
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-2550), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals((-3423), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("++3IVcG9q>]`@K$", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2550), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("++3IVcG9q>]`@K$", sparkListenerExecutorBlacklistedForStage0.executorId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "w", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(0L, "", (-517), 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      int int0 = sparkListenerExecutorBlacklistedForStage1.stageAttemptId();
      assertEquals(0, int0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals((-517), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage((-1464L), "scala.MatchError", 1073741824, 1073741824, 2143431792);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.MatchError", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.MatchError", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(2143431792, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-1464L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1464L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(2143431792, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.stageAttemptId();
      assertEquals(2143431792, int0);
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.MatchError", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.MatchError", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(2143431792, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-1464L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1464L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(2143431792, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(764L, (String) null, 5, 5, 5);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(764L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(764L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      
      Object object0 = sparkListenerExecutorBlacklistedForStage0.productElement(1);
      assertNull(object0);
      assertEquals(764L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(764L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "", (-5163), 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(0, " 6;>vHrnrn/t*h", 0, 5, 46);
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(46, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals(" 6;>vHrnrn/t*h", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(46, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(" 6;>vHrnrn/t*h", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      String string0 = sparkListenerExecutorBlacklistedForStage1.executorId();
      assertNotNull(string0);
      assertEquals(" 6;>vHrnrn/t*h", string0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(46, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals(" 6;>vHrnrn/t*h", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(46, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(" 6;>vHrnrn/t*h", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "", (-5163), 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      
      String string0 = sparkListenerExecutorBlacklistedForStage0.executorId();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-5163), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(172L, "", (-2112), (-2112), (-2112));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(172L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(172L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(172L, "", 2437, (-2112), 2437);
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(172L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(172L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(172L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals(2437, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-2112), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(2437, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(2437, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(2437, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(172L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(575L, "", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.copy$default$5();
      assertEquals(0, int0);
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "MC$|jsKsMWuq%", 1069, 0, 1069);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("MC$|jsKsMWuq%", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("MC$|jsKsMWuq%", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.copy$default$5();
      assertEquals(1069, int0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("MC$|jsKsMWuq%", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("MC$|jsKsMWuq%", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1069, sparkListenerExecutorBlacklistedForStage0.taskFailures());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage((-2607L), "X gs7QU#uw!#|5x", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.copy$default$4();
      assertEquals(0, int0);
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals((-2607L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("X gs7QU#uw!#|5x", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(575L, "", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(0, "SparkListenerExecutorBlacklistedForStage(0,,2147483647,-746,0)", Integer.MAX_VALUE, 11, (-1));
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(11, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage(0,,2147483647,-746,0)", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(11, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals((-1), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals("SparkListenerExecutorBlacklistedForStage(0,,2147483647,-746,0)", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals((-1), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      int int0 = sparkListenerExecutorBlacklistedForStage1.copy$default$4();
      assertEquals(11, int0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(11, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage(0,,2147483647,-746,0)", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals(11, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals((-1), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals("SparkListenerExecutorBlacklistedForStage(0,,2147483647,-746,0)", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals((-1), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(575L, "", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy(0, "", Integer.MAX_VALUE, (-746), 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals((-746), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals((-746), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      int int0 = sparkListenerExecutorBlacklistedForStage1.copy$default$3();
      assertEquals(Integer.MAX_VALUE, int0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals((-746), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals((-746), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(Integer.MAX_VALUE, sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = sparkListenerExecutorBlacklistedForStage0.copy((-1416L), "", (-440), (-205), (-889));
      assertNotNull(sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-205), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals((-889), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals((-440), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-440), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals((-205), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals((-889), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      
      int int0 = sparkListenerExecutorBlacklistedForStage1.copy$default$3();
      assertEquals((-440), int0);
      assertNotSame(sparkListenerExecutorBlacklistedForStage0, sparkListenerExecutorBlacklistedForStage1);
      assertNotSame(sparkListenerExecutorBlacklistedForStage1, sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-205), sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.copy$default$2());
      assertEquals((-889), sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals((-440), sparkListenerExecutorBlacklistedForStage1.taskFailures());
      assertEquals((-440), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage1.time());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertEquals((-205), sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage1.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage1.productPrefix());
      assertEquals((-889), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage1.productArity());
      assertFalse(sparkListenerExecutorBlacklistedForStage0.equals((Object)sparkListenerExecutorBlacklistedForStage1));
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, (String) null, (-3100), 757, (-3100));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      
      String string0 = sparkListenerExecutorBlacklistedForStage0.copy$default$2();
      assertNull(string0);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      
      String string0 = sparkListenerExecutorBlacklistedForStage0.copy$default$2();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "w", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      
      long long0 = sparkListenerExecutorBlacklistedForStage0.copy$default$1();
      assertEquals(0L, long0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1L, "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", 32768, 1073741824, 32768);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(1L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(1L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      
      long long0 = sparkListenerExecutorBlacklistedForStage0.copy$default$1();
      assertEquals(1L, long0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(1L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(1L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(32768, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1073741824, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(3201L, "t.@", 649, 649, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.canEqual((Object) null);
      assertFalse(boolean0);
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(649, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("t.@", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(3201L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 1384, 2679, 2679);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(1384, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(1384, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      
      Object object0 = sparkListenerExecutorBlacklistedForStage0.productElement(3);
      assertNotNull(object0);
      assertEquals(2679, object0);
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(2679, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(1384, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(1384, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "", 1808, 2, 2);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      
      Object object0 = sparkListenerExecutorBlacklistedForStage0.productElement(2);
      assertNotNull(object0);
      assertEquals(1808, object0);
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(2, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "", 1808, 4, 4);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      
      Object object0 = sparkListenerExecutorBlacklistedForStage0.productElement(4);
      assertNotNull(object0);
      assertEquals(4, object0);
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(4, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(1808, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage$", 0, 0, (-2408));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage$", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2408), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-2408), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage$", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      
      Object object0 = sparkListenerExecutorBlacklistedForStage0.productElement(1);
      assertNotNull(object0);
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage$", object0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage$", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-2408), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-2408), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage$", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "w", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.stageAttemptId();
      assertEquals((-1012), int0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals("w", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, (String) null, (-3100), 757, (-3100));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      
      String string0 = sparkListenerExecutorBlacklistedForStage0.executorId();
      assertNull(string0);
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(757, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-3100), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.stageId();
      assertEquals(0, int0);
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      
      String string0 = sparkListenerExecutorBlacklistedForStage0.productPrefix();
      assertNotNull(string0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", string0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, (String) null, 9, 9, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      
      Iterator<Object> iterator0 = sparkListenerExecutorBlacklistedForStage0.productIterator();
      assertNotNull(iterator0);
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertNull(sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertNull(sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(9, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply((-1416), "IVkSA\"k!lwC\"rE]", (-1416), (-322), (-287));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.taskFailures();
      assertEquals((-1416), int0);
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals((-1416L), sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("IVkSA\"k!lwC\"rE]", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals((-287), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals((-322), sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals((-1416), sparkListenerExecutorBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1691L, "", 0, 0, 0);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(1691L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(1691L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      
      long long0 = sparkListenerExecutorBlacklistedForStage0.time();
      assertEquals(1691L, long0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(1691L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(1691L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(3061L, "scala.Tuple", 4278, 4278, 4278);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.canEqual(sparkListenerExecutorBlacklistedForStage0);
      assertTrue(boolean0);
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(3061L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(4278, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.Tuple", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(0L, "", 0, 0, (-1012));
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      
      int int0 = sparkListenerExecutorBlacklistedForStage0.productArity();
      assertEquals(5, int0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(0L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals((-1012), sparkListenerExecutorBlacklistedForStage0.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1518, "scala.Predef$SeqCharSequence", 1518, 1518, 1518);
      assertNotNull(sparkListenerExecutorBlacklistedForStage0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.Predef$SeqCharSequence", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1518L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.Predef$SeqCharSequence", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(1518L, sparkListenerExecutorBlacklistedForStage0.time());
      
      Option<Tuple5<Object, String, Object, Object, Object>> option0 = SparkListenerExecutorBlacklistedForStage.unapply(sparkListenerExecutorBlacklistedForStage0);
      assertNotNull(option0);
      assertEquals("SparkListenerExecutorBlacklistedForStage", sparkListenerExecutorBlacklistedForStage0.productPrefix());
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
      assertEquals("scala.Predef$SeqCharSequence", sparkListenerExecutorBlacklistedForStage0.executorId());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.copy$default$4());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(1518L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals("scala.Predef$SeqCharSequence", sparkListenerExecutorBlacklistedForStage0.copy$default$2());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(1518L, sparkListenerExecutorBlacklistedForStage0.time());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "cala.collection.mJtable.AbstractS1q", 0, 0, 0);
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(0L, "cala.collection.mJtable.AbstractS1q", 0, 0, 31);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertFalse(boolean0);
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      assertEquals(31, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "Mss)", 0, 27, 0);
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(0, "Mss)", 0, 0, 0);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertEquals(27, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "scala.collection.mutable.AbstractSeq", 0, 0, 0);
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(0, "empty.max", 0, 0, 0);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertFalse(boolean0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(6, (String) null, 6, 6, 6);
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(6, "scala.collection.mutable.AbstractSeq", 6, 6, 6);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertEquals(6, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(6L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
      assertFalse(boolean0);
      assertEquals(6, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
      assertEquals(6, sparkListenerExecutorBlacklistedForStage1.stageId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(1L, (String) null, (-2840), 11, (-2840));
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(1L, (String) null, (-631), 11, (-631));
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertFalse(boolean0);
      assertEquals((-631), sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(11, sparkListenerExecutorBlacklistedForStage1.stageId());
      assertEquals((-631), sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(1L, sparkListenerExecutorBlacklistedForStage1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(7L, "", 0, 0, 0);
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(0, "", 0, 0, 0);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertFalse(boolean0);
      assertEquals(7L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
      assertFalse(sparkListenerExecutorBlacklistedForStage1.equals((Object)sparkListenerExecutorBlacklistedForStage0));
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$3());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$5());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "Mss)", 0, 0, 0);
      Object object0 = sparkListenerExecutorBlacklistedForStage0.productElement(0);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(object0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertFalse(boolean0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "7poEQ9qz<d{kCk;pp.k", 0, 0, 0);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertTrue(boolean0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1518, "scala.Predef$SeqCharSequence", 1518, 1518, 1518);
      // Undeclared exception!
      try { 
        sparkListenerExecutorBlacklistedForStage0.productElement(1518);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0, "scala.collection.mutable.AbstractSeq", 0, 0, 0);
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage1 = SparkListenerExecutorBlacklistedForStage.apply(0, "scala.collection.mutable.AbstractSeq", 0, 0, 0);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.equals(sparkListenerExecutorBlacklistedForStage1);
      assertTrue(boolean0);
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.stageAttemptId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.copy$default$4());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage1.taskFailures());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(0L, "scala.MatchError", (-1363), (-1363), (-1667));
      int int0 = sparkListenerExecutorBlacklistedForStage0.copy$default$5();
      assertEquals((-1363), sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals((-1667), int0);
      assertEquals((-1363), sparkListenerExecutorBlacklistedForStage0.stageId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(172L, "", (-2112), (-2112), (-2112));
      int int0 = sparkListenerExecutorBlacklistedForStage0.copy$default$4();
      assertEquals((-2112), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1518, "scala.Predef$SeqCharSequence", 1518, 1518, 1518);
      boolean boolean0 = sparkListenerExecutorBlacklistedForStage0.logEvent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1L, "87mg3a\"-bTPr", (-879), (-879), (-879));
      String string0 = sparkListenerExecutorBlacklistedForStage0.copy$default$2();
      assertEquals("87mg3a\"-bTPr", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option<Tuple5<Object, String, Object, Object, Object>> option0 = SparkListenerExecutorBlacklistedForStage.unapply((SparkListenerExecutorBlacklistedForStage) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1518, "scala.Predef$SeqCharSequence", 1518, 1518, 1518);
      sparkListenerExecutorBlacklistedForStage0.hashCode();
      assertEquals(1518L, sparkListenerExecutorBlacklistedForStage0.time());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.taskFailures());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(1518, sparkListenerExecutorBlacklistedForStage0.stageAttemptId());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Function1<Object, Function1<String, Function1<Object, Function1<Object, Function1<Object, SparkListenerExecutorBlacklistedForStage>>>>> function1_0 = SparkListenerExecutorBlacklistedForStage.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = SparkListenerExecutorBlacklistedForStage.apply(575L, "", 0, 0, 0);
      int int0 = sparkListenerExecutorBlacklistedForStage0.copy$default$3();
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.stageId());
      assertEquals(0, sparkListenerExecutorBlacklistedForStage0.copy$default$5());
      assertEquals(0, int0);
      assertEquals(575L, sparkListenerExecutorBlacklistedForStage0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage(1461, "scala.Predef$SeqCharSequence", 1461, 1461, 1461);
      String string0 = sparkListenerExecutorBlacklistedForStage0.toString();
      assertEquals("SparkListenerExecutorBlacklistedForStage(1461,scala.Predef$SeqCharSequence,1461,1461,1461)", string0);
      assertEquals(5, sparkListenerExecutorBlacklistedForStage0.productArity());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SparkListenerExecutorBlacklistedForStage sparkListenerExecutorBlacklistedForStage0 = new SparkListenerExecutorBlacklistedForStage((-1012), "", (-1012), (-2130024430), (-1012));
      long long0 = sparkListenerExecutorBlacklistedForStage0.copy$default$1();
      assertEquals((-1012L), long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Function1<Tuple5<Object, String, Object, Object, Object>, SparkListenerExecutorBlacklistedForStage> function1_0 = SparkListenerExecutorBlacklistedForStage.tupled();
      assertNotNull(function1_0);
  }
}
