/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:40:21 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.ShuffleDataBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShuffleDataBlockId_ESTest extends ShuffleDataBlockId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply((-8), (-8), 1078);
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy((-8), (-8), (-8));
      boolean boolean0 = shuffleDataBlockId0.equals(shuffleDataBlockId1);
      assertEquals((-8), shuffleDataBlockId1.copy$default$1());
      assertEquals((-8), shuffleDataBlockId1.mapId());
      assertFalse(shuffleDataBlockId1.equals((Object)shuffleDataBlockId0));
      assertEquals((-8), shuffleDataBlockId0.copy$default$2());
      assertFalse(boolean0);
      assertEquals((-8), shuffleDataBlockId1.reduceId());
      assertEquals(1078, shuffleDataBlockId0.copy$default$3());
      assertEquals((-8), shuffleDataBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(4, (-4443), (-4443));
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy(4, 4, 3272);
      boolean boolean0 = shuffleDataBlockId0.equals(shuffleDataBlockId1);
      assertEquals(4, shuffleDataBlockId1.copy$default$2());
      assertEquals(4, shuffleDataBlockId1.copy$default$1());
      assertFalse(boolean0);
      assertEquals(3272, shuffleDataBlockId1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-1543), (-1543), 0);
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy(0, (-1543), 0);
      boolean boolean0 = shuffleDataBlockId0.equals(shuffleDataBlockId1);
      assertFalse(shuffleDataBlockId1.equals((Object)shuffleDataBlockId0));
      assertEquals((-1543), shuffleDataBlockId1.mapId());
      assertEquals(0, shuffleDataBlockId1.copy$default$1());
      assertFalse(boolean0);
      assertEquals(0, shuffleDataBlockId1.copy$default$3());
      assertEquals((-1543), shuffleDataBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(792, 792, 792);
      int int0 = shuffleDataBlockId0.shuffleId();
      assertEquals(792, int0);
      assertEquals(792, shuffleDataBlockId0.copy$default$3());
      assertEquals(792, shuffleDataBlockId0.mapId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(0, 0, 0);
      int int0 = shuffleDataBlockId0.reduceId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(10, 10, 1078);
      int int0 = shuffleDataBlockId0.reduceId();
      assertEquals(1078, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(1, 1, 1);
      int int0 = shuffleDataBlockId0.mapId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(0, (-889275714), 0);
      int int0 = shuffleDataBlockId0.mapId();
      assertEquals((-889275714), int0);
      assertEquals(0, shuffleDataBlockId0.shuffleId());
      assertEquals(0, shuffleDataBlockId0.reduceId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(0, 4, 0);
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy(0, 0, 0);
      assertEquals(0, shuffleDataBlockId0.copy$default$1());
      assertEquals(0, shuffleDataBlockId1.copy$default$1());
      assertEquals(4, shuffleDataBlockId0.copy$default$2());
      assertEquals(0, shuffleDataBlockId1.mapId());
      assertEquals(0, shuffleDataBlockId0.reduceId());
      assertEquals(0, shuffleDataBlockId1.reduceId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-2155), (-2155), (-2155));
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy(0, (-2155), 0);
      int int0 = shuffleDataBlockId1.shuffleId();
      assertEquals((-2155), shuffleDataBlockId1.mapId());
      assertEquals(0, shuffleDataBlockId1.reduceId());
      assertEquals(0, int0);
      assertEquals((-2155), shuffleDataBlockId0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(177, 1488, (-1852));
      int int0 = shuffleDataBlockId0.copy$default$3();
      assertEquals((-1852), int0);
      assertEquals(177, shuffleDataBlockId0.copy$default$1());
      assertEquals(1488, shuffleDataBlockId0.mapId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(516, 2939, 516);
      int int0 = shuffleDataBlockId0.copy$default$2();
      assertEquals(2939, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-1543), (-1543), 0);
      int int0 = shuffleDataBlockId0.copy$default$2();
      assertEquals((-1543), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(0, 0, 1);
      int int0 = shuffleDataBlockId0.copy$default$1();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-1349), (-889275714), (-889275714));
      int int0 = shuffleDataBlockId0.copy$default$1();
      assertEquals((-1349), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(0, 0, 1);
      Object object0 = shuffleDataBlockId0.productElement(1);
      assertEquals(0, object0);
      
      shuffleDataBlockId0.canEqual(object0);
      assertEquals(0, shuffleDataBlockId0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(2193, 0, (-266));
      assertEquals((-266), shuffleDataBlockId0.copy$default$3());
      assertEquals(2193, shuffleDataBlockId0.shuffleId());
      assertEquals(0, shuffleDataBlockId0.mapId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(0, 4, 0);
      int int0 = shuffleDataBlockId0.copy$default$3();
      assertEquals(4, shuffleDataBlockId0.copy$default$2());
      assertEquals(0, int0);
      assertEquals(0, shuffleDataBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(0, 0, 1);
      int int0 = shuffleDataBlockId0.mapId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(1196, 1196, 1196);
      int int0 = shuffleDataBlockId0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply((-1), (-341), (-4296));
      int int0 = shuffleDataBlockId0.reduceId();
      assertEquals((-1), shuffleDataBlockId0.shuffleId());
      assertEquals((-341), shuffleDataBlockId0.copy$default$2());
      assertEquals((-4296), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(2, 2, 2);
      shuffleDataBlockId0.canEqual(shuffleDataBlockId0);
      assertEquals(2, shuffleDataBlockId0.shuffleId());
      assertEquals(2, shuffleDataBlockId0.mapId());
      assertEquals(2, shuffleDataBlockId0.reduceId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-2155), (-2155), (-2155));
      int int0 = shuffleDataBlockId0.shuffleId();
      assertEquals((-2155), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(1, 1, 1);
      ShuffleDataBlockId.unapply(shuffleDataBlockId0);
      assertEquals(1, shuffleDataBlockId0.copy$default$1());
      assertEquals(1, shuffleDataBlockId0.mapId());
      assertEquals(1, shuffleDataBlockId0.copy$default$3());
      assertEquals(1, shuffleDataBlockId0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(2, 2, 2);
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy(2, 2, 2385);
      boolean boolean0 = shuffleDataBlockId0.equals(shuffleDataBlockId1);
      assertEquals(2, shuffleDataBlockId1.mapId());
      assertFalse(boolean0);
      assertEquals(2, shuffleDataBlockId1.shuffleId());
      assertEquals(2, shuffleDataBlockId0.copy$default$1());
      assertEquals(2, shuffleDataBlockId0.copy$default$2());
      assertEquals(2385, shuffleDataBlockId1.reduceId());
      assertEquals(2, shuffleDataBlockId0.copy$default$3());
      assertFalse(shuffleDataBlockId1.equals((Object)shuffleDataBlockId0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply((-3485), (-3485), (-3485));
      ShuffleDataBlockId shuffleDataBlockId1 = ShuffleDataBlockId.apply((-3485), (-686), (-686));
      boolean boolean0 = shuffleDataBlockId1.equals(shuffleDataBlockId0);
      assertEquals((-686), shuffleDataBlockId1.mapId());
      assertEquals((-3485), shuffleDataBlockId1.shuffleId());
      assertFalse(boolean0);
      assertEquals((-686), shuffleDataBlockId1.reduceId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(456, 456, 456);
      ShuffleDataBlockId shuffleDataBlockId1 = ShuffleDataBlockId.apply(1019, 1019, 1019);
      boolean boolean0 = shuffleDataBlockId1.equals(shuffleDataBlockId0);
      assertFalse(boolean0);
      assertEquals(1019, shuffleDataBlockId1.copy$default$2());
      assertEquals(1019, shuffleDataBlockId1.shuffleId());
      assertEquals(1019, shuffleDataBlockId1.reduceId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(75, 75, 75);
      boolean boolean0 = shuffleDataBlockId0.equals(shuffleDataBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-4), (-4), (-4));
      // Undeclared exception!
      try { 
        shuffleDataBlockId0.productElement((-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.storage.ShuffleDataBlockId", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(2, 2, 2);
      Object object0 = shuffleDataBlockId0.productElement(2);
      assertEquals(2, object0);
      assertEquals(2, shuffleDataBlockId0.copy$default$1());
      assertEquals(2, shuffleDataBlockId0.mapId());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(1, 1, 1);
      Object object0 = shuffleDataBlockId0.productElement(1);
      assertEquals(1, object0);
      
      boolean boolean0 = shuffleDataBlockId0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1, shuffleDataBlockId0.copy$default$3());
      assertEquals(1, shuffleDataBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(0, 0, 0);
      Object object0 = shuffleDataBlockId0.productElement(0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Function1<Object, Function1<Object, Function1<Object, ShuffleDataBlockId>>> function1_0 = ShuffleDataBlockId.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(811, 811, 811);
      shuffleDataBlockId0.hashCode();
      assertEquals(811, shuffleDataBlockId0.copy$default$2());
      assertEquals(811, shuffleDataBlockId0.copy$default$1());
      assertEquals(811, shuffleDataBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply((-8), (-8), (-8));
      String string0 = shuffleDataBlockId0.productPrefix();
      assertEquals("ShuffleDataBlockId", string0);
      assertEquals((-8), shuffleDataBlockId0.copy$default$1());
      assertEquals((-8), shuffleDataBlockId0.mapId());
      assertEquals((-8), shuffleDataBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Function1<Tuple3<Object, Object, Object>, ShuffleDataBlockId> function1_0 = ShuffleDataBlockId.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(65, 65, 65);
      ShuffleDataBlockId shuffleDataBlockId1 = shuffleDataBlockId0.copy(65, 65, 65);
      boolean boolean0 = shuffleDataBlockId0.equals(shuffleDataBlockId1);
      assertEquals(65, shuffleDataBlockId1.mapId());
      assertTrue(boolean0);
      assertEquals(65, shuffleDataBlockId1.copy$default$1());
      assertEquals(65, shuffleDataBlockId1.reduceId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(0, 0, 0);
      int int0 = shuffleDataBlockId0.copy$default$2();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId((-1908), 282, 1729);
      int int0 = shuffleDataBlockId0.copy$default$3();
      assertEquals(1729, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(18, 18, 18);
      shuffleDataBlockId0.productIterator();
      assertEquals(18, shuffleDataBlockId0.mapId());
      assertEquals(18, shuffleDataBlockId0.shuffleId());
      assertEquals(18, shuffleDataBlockId0.reduceId());
      assertEquals(3, shuffleDataBlockId0.productArity());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = ShuffleDataBlockId.apply(14, 14, 14);
      String string0 = shuffleDataBlockId0.name();
      assertEquals("shuffle_14_14_14.data", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShuffleDataBlockId shuffleDataBlockId0 = new ShuffleDataBlockId(3, 3, 3);
      int int0 = shuffleDataBlockId0.copy$default$1();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option<Tuple3<Object, Object, Object>> option0 = ShuffleDataBlockId.unapply((ShuffleDataBlockId) null);
      assertNotNull(option0);
  }
}
