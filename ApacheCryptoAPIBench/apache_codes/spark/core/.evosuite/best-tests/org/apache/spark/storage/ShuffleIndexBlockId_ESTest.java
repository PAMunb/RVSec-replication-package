/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:42:49 GMT 2022
 */

package org.apache.spark.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.storage.ShuffleIndexBlockId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShuffleIndexBlockId_ESTest extends ShuffleIndexBlockId_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, 0, 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy(0, 0, (-4494));
      boolean boolean0 = shuffleIndexBlockId1.equals(shuffleIndexBlockId0);
      assertFalse(shuffleIndexBlockId0.equals((Object)shuffleIndexBlockId1));
      assertFalse(boolean0);
      assertEquals(0, shuffleIndexBlockId1.copy$default$1());
      assertEquals((-4494), shuffleIndexBlockId1.reduceId());
      assertEquals(0, shuffleIndexBlockId1.mapId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(3, 0, 3);
      ShuffleIndexBlockId shuffleIndexBlockId1 = ShuffleIndexBlockId.apply(3, (-889275714), 0);
      boolean boolean0 = shuffleIndexBlockId0.equals(shuffleIndexBlockId1);
      assertEquals((-889275714), shuffleIndexBlockId1.copy$default$2());
      assertFalse(boolean0);
      assertEquals(3, shuffleIndexBlockId0.reduceId());
      assertEquals(0, shuffleIndexBlockId1.copy$default$3());
      assertEquals(3, shuffleIndexBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, 0, 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = new ShuffleIndexBlockId((-3125), (-1), 229);
      boolean boolean0 = shuffleIndexBlockId1.equals(shuffleIndexBlockId0);
      assertFalse(boolean0);
      assertEquals((-3125), shuffleIndexBlockId1.shuffleId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(0, 0, (-2928));
      int int0 = shuffleIndexBlockId0.shuffleId();
      assertEquals(0, int0);
      assertEquals((-2928), shuffleIndexBlockId0.copy$default$3());
      assertEquals(0, shuffleIndexBlockId0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(3, 3, (-1114));
      int int0 = shuffleIndexBlockId0.shuffleId();
      assertEquals(3, int0);
      assertEquals(3, shuffleIndexBlockId0.mapId());
      assertEquals((-1114), shuffleIndexBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, 0, 0);
      int int0 = shuffleIndexBlockId0.reduceId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(3, 0, 3);
      int int0 = shuffleIndexBlockId0.reduceId();
      assertEquals(3, int0);
      assertEquals(3, shuffleIndexBlockId0.shuffleId());
      assertEquals(0, shuffleIndexBlockId0.mapId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(1246, 16, 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy(0, 0, 0);
      int int0 = shuffleIndexBlockId1.mapId();
      assertEquals(0, shuffleIndexBlockId1.shuffleId());
      assertEquals(16, shuffleIndexBlockId0.copy$default$2());
      assertEquals(1246, shuffleIndexBlockId0.shuffleId());
      assertEquals(0, shuffleIndexBlockId1.reduceId());
      assertEquals(0, shuffleIndexBlockId0.copy$default$3());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(3, 3, (-1114));
      int int0 = shuffleIndexBlockId0.mapId();
      assertEquals(3, shuffleIndexBlockId0.shuffleId());
      assertEquals((-1114), shuffleIndexBlockId0.copy$default$3());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId((-1), (-83), 2641);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy((-536), (-1), 0);
      assertEquals((-536), shuffleIndexBlockId1.shuffleId());
      assertEquals((-1), shuffleIndexBlockId1.copy$default$2());
      assertEquals(0, shuffleIndexBlockId1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(1581, 0, 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy(0, 1, 4751);
      assertEquals(1, shuffleIndexBlockId1.copy$default$2());
      assertEquals(4751, shuffleIndexBlockId1.copy$default$3());
      assertEquals(0, shuffleIndexBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, (-899), 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy(1, 0, 1);
      int int0 = shuffleIndexBlockId1.copy$default$3();
      assertEquals(1, int0);
      assertEquals(0, shuffleIndexBlockId1.copy$default$2());
      assertEquals(1, shuffleIndexBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, (-899), (-899));
      int int0 = shuffleIndexBlockId0.copy$default$3();
      assertEquals((-899), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, (-899), 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy(1, 0, 1);
      int int0 = shuffleIndexBlockId1.copy$default$2();
      assertEquals(0, int0);
      assertEquals(1, shuffleIndexBlockId1.shuffleId());
      assertEquals(1, shuffleIndexBlockId1.copy$default$3());
      assertEquals((-899), shuffleIndexBlockId0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, (-899), 0);
      int int0 = shuffleIndexBlockId0.copy$default$2();
      assertEquals((-899), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(3, 3, (-1114));
      int int0 = shuffleIndexBlockId0.copy$default$1();
      assertEquals((-1114), shuffleIndexBlockId0.reduceId());
      assertEquals(3, shuffleIndexBlockId0.mapId());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(0, (-3966), 1243);
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy((-1639), (-606), (-1639));
      int int0 = shuffleIndexBlockId1.copy$default$1();
      assertEquals((-3966), shuffleIndexBlockId0.copy$default$2());
      assertEquals(1243, shuffleIndexBlockId0.reduceId());
      assertEquals(0, shuffleIndexBlockId0.shuffleId());
      assertEquals((-1639), shuffleIndexBlockId1.copy$default$3());
      assertEquals((-1639), int0);
      assertEquals((-606), shuffleIndexBlockId1.mapId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(0, 0, (-2928));
      Object object0 = shuffleIndexBlockId0.productElement(0);
      assertEquals(0, object0);
      
      shuffleIndexBlockId0.canEqual(object0);
      assertEquals(0, shuffleIndexBlockId0.mapId());
      assertEquals((-2928), shuffleIndexBlockId0.reduceId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply((-1386), (-2296), (-512));
      assertEquals((-1386), shuffleIndexBlockId0.shuffleId());
      assertEquals((-2296), shuffleIndexBlockId0.copy$default$2());
      assertEquals((-512), shuffleIndexBlockId0.reduceId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(2, 2, 2);
      int int0 = shuffleIndexBlockId0.productArity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId((-1), (-83), 2641);
      int int0 = shuffleIndexBlockId0.mapId();
      assertEquals((-83), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId((-1827), 3, (-1827));
      int int0 = shuffleIndexBlockId0.reduceId();
      assertEquals((-1827), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(1581, 0, 0);
      boolean boolean0 = shuffleIndexBlockId0.canEqual(shuffleIndexBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId((-1), (-83), 2641);
      int int0 = shuffleIndexBlockId0.shuffleId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(25, 25, 25);
      ShuffleIndexBlockId.unapply(shuffleIndexBlockId0);
      assertEquals(25, shuffleIndexBlockId0.copy$default$3());
      assertEquals(25, shuffleIndexBlockId0.copy$default$2());
      assertEquals(25, shuffleIndexBlockId0.copy$default$1());
      assertEquals(25, shuffleIndexBlockId0.reduceId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(612, 612, (-1773));
      ShuffleIndexBlockId shuffleIndexBlockId1 = new ShuffleIndexBlockId(612, 612, 612);
      boolean boolean0 = shuffleIndexBlockId1.equals(shuffleIndexBlockId0);
      assertEquals(612, shuffleIndexBlockId0.mapId());
      assertEquals(612, shuffleIndexBlockId0.copy$default$1());
      assertFalse(shuffleIndexBlockId0.equals((Object)shuffleIndexBlockId1));
      assertFalse(boolean0);
      assertEquals((-1773), shuffleIndexBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId((-4191), (-4191), (-4191));
      ShuffleIndexBlockId shuffleIndexBlockId1 = shuffleIndexBlockId0.copy((-4191), (-1743), (-4191));
      boolean boolean0 = shuffleIndexBlockId0.equals(shuffleIndexBlockId1);
      assertFalse(shuffleIndexBlockId1.equals((Object)shuffleIndexBlockId0));
      assertEquals((-1743), shuffleIndexBlockId1.copy$default$2());
      assertEquals((-4191), shuffleIndexBlockId1.shuffleId());
      assertFalse(boolean0);
      assertEquals((-4191), shuffleIndexBlockId1.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId((-1), (-1), (-1));
      ShuffleIndexBlockId shuffleIndexBlockId1 = ShuffleIndexBlockId.apply(0, 0, (-1));
      boolean boolean0 = shuffleIndexBlockId1.equals(shuffleIndexBlockId0);
      assertEquals((-1), shuffleIndexBlockId1.copy$default$3());
      assertEquals(0, shuffleIndexBlockId1.copy$default$1());
      assertEquals(0, shuffleIndexBlockId1.mapId());
      assertFalse(boolean0);
      assertEquals((-1), shuffleIndexBlockId0.shuffleId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(4628, 4628, 4628);
      boolean boolean0 = shuffleIndexBlockId0.equals(shuffleIndexBlockId0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(930, 930, 930);
      // Undeclared exception!
      try { 
        shuffleIndexBlockId0.productElement(930);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.storage.ShuffleIndexBlockId", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(2, 2, 2);
      Object object0 = shuffleIndexBlockId0.productElement(2);
      assertEquals(2, shuffleIndexBlockId0.copy$default$2());
      assertEquals(2, object0);
      assertEquals(2, shuffleIndexBlockId0.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(1, 1, 1);
      Object object0 = shuffleIndexBlockId0.productElement(1);
      assertEquals(1, shuffleIndexBlockId0.shuffleId());
      assertEquals(1, object0);
      assertEquals(1, shuffleIndexBlockId0.reduceId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, 0, 0);
      Object object0 = shuffleIndexBlockId0.productElement(0);
      assertEquals(0, object0);
      
      boolean boolean0 = shuffleIndexBlockId0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(3, 3, 3);
      String string0 = shuffleIndexBlockId0.productPrefix();
      assertEquals("ShuffleIndexBlockId", string0);
      assertEquals(3, shuffleIndexBlockId0.shuffleId());
      assertEquals(3, shuffleIndexBlockId0.copy$default$2());
      assertEquals(3, shuffleIndexBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(0, 0, 0);
      ShuffleIndexBlockId shuffleIndexBlockId1 = new ShuffleIndexBlockId(0, 0, 0);
      boolean boolean0 = shuffleIndexBlockId0.equals(shuffleIndexBlockId1);
      assertEquals(0, shuffleIndexBlockId1.reduceId());
      assertTrue(boolean0);
      assertEquals(0, shuffleIndexBlockId1.mapId());
      assertEquals(0, shuffleIndexBlockId1.copy$default$1());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(425, 1903, 1903);
      int int0 = shuffleIndexBlockId0.copy$default$2();
      assertEquals(1903, int0);
      assertEquals(425, shuffleIndexBlockId0.copy$default$1());
      assertEquals(1903, shuffleIndexBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Function1<Tuple3<Object, Object, Object>, ShuffleIndexBlockId> function1_0 = ShuffleIndexBlockId.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(32, 32, 0);
      int int0 = shuffleIndexBlockId0.copy$default$3();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(0, 0, 0);
      shuffleIndexBlockId0.hashCode();
      assertEquals(0, shuffleIndexBlockId0.shuffleId());
      assertEquals(0, shuffleIndexBlockId0.copy$default$2());
      assertEquals(0, shuffleIndexBlockId0.copy$default$3());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Function1<Object, Function1<Object, Function1<Object, ShuffleIndexBlockId>>> function1_0 = ShuffleIndexBlockId.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option<Tuple3<Object, Object, Object>> option0 = ShuffleIndexBlockId.unapply((ShuffleIndexBlockId) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, 0, 0);
      String string0 = shuffleIndexBlockId0.name();
      assertEquals("shuffle_0_0_0.index", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = ShuffleIndexBlockId.apply(0, 3, 0);
      int int0 = shuffleIndexBlockId0.copy$default$1();
      assertEquals(3, shuffleIndexBlockId0.mapId());
      assertEquals(0, shuffleIndexBlockId0.copy$default$3());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ShuffleIndexBlockId shuffleIndexBlockId0 = new ShuffleIndexBlockId(0, 0, 0);
      shuffleIndexBlockId0.productIterator();
      assertEquals(3, shuffleIndexBlockId0.productArity());
  }
}
