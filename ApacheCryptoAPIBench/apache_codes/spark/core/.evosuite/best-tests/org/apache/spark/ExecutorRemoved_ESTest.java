/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:54:20 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.ExecutorRemoved;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorRemoved_ESTest extends ExecutorRemoved_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("s.`vm]$R");
      ExecutorRemoved executorRemoved1 = executorRemoved0.copy((String) null);
      Object object0 = executorRemoved1.productElement(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved((String) null);
      String string0 = executorRemoved0.executorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved("^n");
      String string0 = executorRemoved0.executorId();
      assertEquals("^n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved((String) null);
      String string0 = executorRemoved0.copy$default$1();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("3mvC}M1rtq.0D|7");
      ExecutorRemoved executorRemoved1 = executorRemoved0.copy("");
      String string0 = executorRemoved1.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("s.`vm]$R");
      boolean boolean0 = executorRemoved0.canEqual(executorRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("s.`vm]$R");
      Object object0 = executorRemoved0.productElement(0);
      assertEquals("s.`vm]$R", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved("");
      String string0 = executorRemoved0.executorId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved("7Uy`W");
      int int0 = executorRemoved0.productArity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("s_(v7bt\"/QMhD3[");
      String string0 = executorRemoved0.productPrefix();
      assertEquals("ExecutorRemoved", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved("");
      executorRemoved0.productIterator();
      assertEquals(1, executorRemoved0.productArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("uo`4VR");
      ExecutorRemoved executorRemoved1 = executorRemoved0.copy(".`4mR");
      boolean boolean0 = executorRemoved1.equals(executorRemoved0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("s.`vm]$R");
      ExecutorRemoved executorRemoved1 = executorRemoved0.copy((String) null);
      boolean boolean0 = executorRemoved1.equals(executorRemoved0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply(".`vm]R");
      ExecutorRemoved executorRemoved1 = executorRemoved0.copy(".`vm]R");
      boolean boolean0 = executorRemoved1.equals(executorRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved((String) null);
      boolean boolean0 = executorRemoved0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply(".`vm]R");
      boolean boolean0 = executorRemoved0.equals(executorRemoved0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved((String) null);
      // Undeclared exception!
      try { 
        executorRemoved0.productElement((-1292));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.ExecutorRemoved", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved((String) null);
      Option<String> option0 = ExecutorRemoved.unapply(executorRemoved0);
      assertEquals(1, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply("ExecutorRemoved");
      String string0 = executorRemoved0.copy$default$1();
      assertEquals("ExecutorRemoved", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Function1<String, ExecutorRemoved> function1_0 = ExecutorRemoved.compose((Function1<String, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option<String> option0 = ExecutorRemoved.unapply((ExecutorRemoved) null);
      assertEquals(0, option0.productArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Function1<String, String> function1_0 = ExecutorRemoved.andThen((Function1<ExecutorRemoved, String>) null);
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply(">wJL");
      String string0 = executorRemoved0.toString();
      assertEquals("ExecutorRemoved(>wJL)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved("H<9k");
      executorRemoved0.hashCode();
      assertEquals(1, executorRemoved0.productArity());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = new ExecutorRemoved(".`vm$R");
      boolean boolean0 = executorRemoved0.canEqual(".`vm$R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExecutorRemoved executorRemoved0 = ExecutorRemoved.apply((String) null);
      ExecutorRemoved executorRemoved1 = ExecutorRemoved.apply((String) null);
      boolean boolean0 = executorRemoved1.equals(executorRemoved0);
      assertTrue(boolean0);
  }
}
