/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:13:52 GMT 2022
 */

package org.apache.spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.ExecutorLostFailure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutorLostFailure_ESTest extends ExecutorLostFailure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option<ExecutorLostFailure> option0 = (Option<ExecutorLostFailure>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(option0).getOrElse(any(scala.Function0.class));
      Option<String> option1 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("", "scala.reflect.ManifestFactory$", "non-empty").when(option1).toString();
      doReturn(option0).when(option1).map(any(scala.Function1.class));
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply((String) null, true, option1);
      String string0 = executorLostFailure0.toErrorString();
      assertEquals("ExecutorLostFailure (executor null exited caused by one of the running tasks)null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("\"uRi;WpktrS{./", true, option0);
      boolean boolean0 = executorLostFailure0.exitCausedByApp();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply((String) null, false, (Option<String>) null);
      executorLostFailure0.execId();
      assertFalse(executorLostFailure0.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("m>Xt7JX(", false, (Option<String>) null);
      String string0 = executorLostFailure0.execId();
      assertEquals("m>Xt7JX(", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("q1eEA L5Y-I$~}^}[Ta", false, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.countTowardsTaskFailures();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", false, (Option<String>) null);
      ExecutorLostFailure executorLostFailure1 = executorLostFailure0.copy("", false, (Option<String>) null);
      assertFalse(executorLostFailure1.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(option0).toString();
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", true, option0);
      Option<String> option1 = executorLostFailure0.copy$default$3();
      assertNull(option1.productPrefix());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", false, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.copy$default$2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply((String) null, true, (Option<String>) null);
      executorLostFailure0.copy$default$1();
      assertTrue(executorLostFailure0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.spark.ExecutorLostFailure$$anonfun$toErrorString$2", ")", "org.apache.spark.ExecutorLostFailure$$anonfun$toErrorString$2").when(option0).toString();
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("unrelated to the running tasks", true, option0);
      Option<String> option1 = executorLostFailure0.reason();
      ExecutorLostFailure executorLostFailure1 = ExecutorLostFailure.apply("", true, option1);
      executorLostFailure1.copy$default$1();
      assertTrue(executorLostFailure1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("z(q&`X>b", false, option0);
      boolean boolean0 = executorLostFailure0.canEqual(executorLostFailure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("q1eEA L5Y-I$~}^}[Ta", false, (Option<String>) null);
      executorLostFailure0.productElement(0);
      assertFalse(executorLostFailure0.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("y x5vsSrW5MzN|0", true, (Option<String>) null);
      Object object0 = executorLostFailure0.productElement(1);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("q1eEA L5Y-I$~}^}[Ta", false, (Option<String>) null);
      executorLostFailure0.productElement(2);
      assertFalse(executorLostFailure0.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", false, (Option<String>) null);
      Option<String> option0 = executorLostFailure0.reason();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", false, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("m>Xt7JX(", false, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.exitCausedByApp();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("scala.runtime.ScalaRunTime$", true, (Option<String>) null);
      int int0 = executorLostFailure0.productArity();
      assertEquals(3, int0);
      assertTrue(executorLostFailure0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("2CYMnZ\"1N***dTR)dt", false, (Option<String>) null);
      executorLostFailure0.productIterator();
      assertEquals(3, executorLostFailure0.productArity());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", true, option0);
      String string0 = executorLostFailure0.execId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("ExecutorLostFailure (executor ", true, (Option<String>) null);
      String string0 = executorLostFailure0.productPrefix();
      assertEquals("ExecutorLostFailure", string0);
      assertTrue(executorLostFailure0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("9\">:?Tu7{(zL", true, (Option<String>) null);
      // Undeclared exception!
      try { 
        executorLostFailure0.toErrorString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ExecutorLostFailure", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "").when(option0).toString();
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", true, option0);
      ExecutorLostFailure executorLostFailure1 = executorLostFailure0.copy("", true, option0);
      boolean boolean0 = executorLostFailure0.equals(executorLostFailure1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("%HQ", "%HQ").when(option0).toString();
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("%HQ", true, (Option<String>) null);
      ExecutorLostFailure executorLostFailure1 = executorLostFailure0.copy("%HQ", true, option0);
      boolean boolean0 = executorLostFailure0.equals(executorLostFailure1);
      assertFalse(boolean0);
      assertTrue(executorLostFailure1.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("").when(option0).toString();
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", true, option0);
      ExecutorLostFailure executorLostFailure1 = executorLostFailure0.copy("", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.equals(executorLostFailure1);
      assertFalse(boolean0);
      assertTrue(executorLostFailure1.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("$ zmkN$z,%Q&6Pm-)p", true, (Option<String>) null);
      ExecutorLostFailure executorLostFailure1 = ExecutorLostFailure.apply("M^b", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure1.equals(executorLostFailure0);
      assertFalse(boolean0);
      assertTrue(executorLostFailure1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply((String) null, true, (Option<String>) null);
      ExecutorLostFailure executorLostFailure1 = ExecutorLostFailure.apply("anx75Rlb[D", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.equals(executorLostFailure1);
      assertFalse(boolean0);
      assertTrue(executorLostFailure1.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", false, (Option<String>) null);
      ExecutorLostFailure executorLostFailure1 = executorLostFailure0.copy("", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.equals(executorLostFailure1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("'rot ,=w(5/ep>Ryt", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("^2", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.equals(executorLostFailure0);
      assertTrue(boolean0);
      assertTrue(executorLostFailure0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("", true, (Option<String>) null);
      executorLostFailure0.hashCode();
      assertTrue(executorLostFailure0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply((String) null, false, (Option<String>) null);
      executorLostFailure0.hashCode();
      assertFalse(executorLostFailure0.countTowardsTaskFailures());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("$ zmkN$z,%Q&6Pm-)p", true, (Option<String>) null);
      // Undeclared exception!
      try { 
        executorLostFailure0.productElement(2261);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.ExecutorLostFailure", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("U#tVZ V}9*FjG", true, (Option<String>) null);
      ExecutorLostFailure.unapply(executorLostFailure0);
      assertTrue(executorLostFailure0.countTowardsTaskFailures());
      assertTrue(executorLostFailure0.exitCausedByApp());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option<String> option0 = (Option<String>) mock(Option.class, new ViolatedAssumptionAnswer());
      doReturn("caused by one of the running tasks").when(option0).toString();
      doReturn((Option) null).when(option0).map(any(scala.Function1.class));
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("caused by one of the running tasks", false, option0);
      // Undeclared exception!
      try { 
        executorLostFailure0.toErrorString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.spark.ExecutorLostFailure", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Function1<Tuple3<String, Object, Option<String>>, ExecutorLostFailure> function1_0 = ExecutorLostFailure.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option<Tuple3<String, Object, Option<String>>> option0 = ExecutorLostFailure.unapply((ExecutorLostFailure) null);
      assertEquals("None", option0.productPrefix());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Function1<String, Function1<Object, Function1<Option<String>, ExecutorLostFailure>>> function1_0 = ExecutorLostFailure.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure((String) null, true, (Option<String>) null);
      ExecutorLostFailure executorLostFailure1 = executorLostFailure0.copy((String) null, true, (Option<String>) null);
      boolean boolean0 = executorLostFailure1.equals(executorLostFailure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("' m;uMtp$Ltnq!N", false, (Option<String>) null);
      String string0 = executorLostFailure0.copy$default$1();
      assertEquals("' m;uMtp$Ltnq!N", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", true, (Option<String>) null);
      Option<String> option0 = executorLostFailure0.copy$default$3();
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("e]QIn=!|~o ", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.countTowardsTaskFailures();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = new ExecutorLostFailure("", true, (Option<String>) null);
      boolean boolean0 = executorLostFailure0.copy$default$2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = ExecutorLostFailure.$lessinit$greater$default$2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = ExecutorLostFailure.apply$default$2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ExecutorLostFailure executorLostFailure0 = ExecutorLostFailure.apply("", true, (Option<String>) null);
      String string0 = executorLostFailure0.toString();
      assertEquals(3, executorLostFailure0.productArity());
      assertEquals("ExecutorLostFailure(,true,null)", string0);
  }
}
