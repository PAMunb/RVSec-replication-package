/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 22:36:42 GMT 2022
 */

package org.apache.spark.scheduler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.spark.scheduler.SlaveLost;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import scala.Function1;
import scala.Option;
import scala.Tuple2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SlaveLost_ESTest extends SlaveLost_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("", true);
      boolean boolean0 = slaveLost0.workerLost();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("", false);
      SlaveLost slaveLost1 = slaveLost0.copy((String) null, false);
      slaveLost1.productElement(0);
      assertFalse(slaveLost1.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost((String) null, true);
      SlaveLost slaveLost1 = slaveLost0.copy((String) null, true);
      assertTrue(slaveLost1.workerLost());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("size=%d and step=%d, but both must be positive", false);
      boolean boolean0 = slaveLost0.copy$default$2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply((String) null, false);
      slaveLost0.copy$default$1();
      assertFalse(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("", false);
      String string0 = slaveLost0.copy$default$1();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("@R6[!;i0]IPR(wf", true);
      boolean boolean0 = slaveLost0.canEqual(slaveLost0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost((String) null, false);
      String string0 = slaveLost0._message();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("", false);
      String string0 = slaveLost0._message();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("WK=Kq%ZtqLSeU", true);
      int int0 = slaveLost0.productArity();
      assertTrue(slaveLost0.workerLost());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("=S,~:7}[*\"lH#GKe", false);
      boolean boolean0 = slaveLost0.workerLost();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply(" k%XP*GL X", true);
      slaveLost0.canEqual(" k%XP*GL X");
      assertTrue(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("xYOQ0ZI|", true);
      String string0 = slaveLost0._message();
      assertEquals("xYOQ0ZI|", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("", false);
      SlaveLost slaveLost1 = new SlaveLost("", true);
      boolean boolean0 = slaveLost0.equals(slaveLost1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("", false);
      SlaveLost slaveLost1 = SlaveLost.apply("", false);
      boolean boolean0 = slaveLost0.equals(slaveLost1);
      assertTrue(boolean0);
      assertFalse(slaveLost1.workerLost());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("org.apache.spark.scheduler.SlaveLost", false);
      SlaveLost slaveLost1 = slaveLost0.copy((String) null, false);
      boolean boolean0 = slaveLost1.equals(slaveLost0);
      assertFalse(boolean0);
      assertFalse(slaveLost1.workerLost());
      assertFalse(slaveLost0.workerLost());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("7R8u_N9{lrdhg7p", false);
      SlaveLost slaveLost1 = new SlaveLost("scala.xml.MetaData", false);
      boolean boolean0 = slaveLost0.equals(slaveLost1);
      assertFalse(boolean0);
      assertFalse(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("0vb{U$n\"@O&d4", true);
      boolean boolean0 = slaveLost0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("", false);
      boolean boolean0 = slaveLost0.equals(slaveLost0);
      assertTrue(boolean0);
      assertFalse(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("(z!`j_Ll", true);
      slaveLost0.hashCode();
      assertTrue(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("~LRC7i0:O2z~C", false);
      slaveLost0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply((String) null, false);
      Object object0 = slaveLost0.productElement(1);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("", true);
      // Undeclared exception!
      try { 
        slaveLost0.productElement(712);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.Integer@0000000002
         //
         verifyException("org.apache.spark.scheduler.SlaveLost", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SlaveLost slaveLost0 = new SlaveLost("", false);
      Object object0 = slaveLost0.productElement(0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SlaveLost.$lessinit$greater$default$2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Function1<String, Function1<Object, SlaveLost>> function1_0 = SlaveLost.curried();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("WK=Kq%ZtqLSeU", true);
      boolean boolean0 = slaveLost0.copy$default$2();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("(z!`j_Ll", true);
      slaveLost0.copy$default$1();
      assertTrue(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = SlaveLost.apply$default$2();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply((String) null, false);
      SlaveLost slaveLost1 = new SlaveLost((String) null, false);
      boolean boolean0 = slaveLost0.equals(slaveLost1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SlaveLost.apply$default$1();
      assertEquals("Slave lost", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("", false);
      String string0 = slaveLost0.productPrefix();
      assertEquals("SlaveLost", string0);
      assertFalse(slaveLost0.copy$default$2());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SlaveLost.$lessinit$greater$default$1();
      assertEquals("Slave lost", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function1<Tuple2<String, Object>, SlaveLost> function1_0 = SlaveLost.tupled();
      assertNotNull(function1_0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply((String) null, false);
      SlaveLost.unapply(slaveLost0);
      assertFalse(slaveLost0.copy$default$2());
      assertFalse(slaveLost0.workerLost());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option<Tuple2<String, Object>> option0 = SlaveLost.unapply((SlaveLost) null);
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SlaveLost slaveLost0 = SlaveLost.apply("", false);
      slaveLost0.productIterator();
      assertFalse(slaveLost0.copy$default$2());
      assertEquals(2, slaveLost0.productArity());
  }
}
