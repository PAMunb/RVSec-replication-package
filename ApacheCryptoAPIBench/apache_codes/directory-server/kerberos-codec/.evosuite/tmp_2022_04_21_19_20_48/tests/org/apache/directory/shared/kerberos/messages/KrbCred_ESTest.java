/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:51:42 GMT 2022
 */

package org.apache.directory.shared.kerberos.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.LinkedList;
import java.util.List;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.messages.KrbCred;
import org.apache.directory.shared.kerberos.messages.Ticket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KrbCred_ESTest extends KrbCred_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        krbCred0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbCred", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      LinkedList<Ticket> linkedList0 = new LinkedList<Ticket>();
      krbCred0.setTickets(linkedList0);
      List<Ticket> list0 = krbCred0.getTickets();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      PrincipalName principalName0 = new PrincipalName();
      EncryptionType encryptionType0 = EncryptionType.MD5WITHRSAENCRYPTION_CMSOID;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, (byte[]) null);
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      krbCred0.addTicket(ticket0);
      List<Ticket> list0 = krbCred0.getTickets();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 903, (byte[]) null);
      encryptedData0.setKvno(0);
      krbCred0.setEncPart(encryptedData0);
      EncryptedData encryptedData1 = krbCred0.getEncPart();
      assertTrue(EncryptedData.HAS_KVNO);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 1, byteArray0);
      krbCred0.setEncPart(encryptedData0);
      EncryptedData encryptedData1 = krbCred0.getEncPart();
      assertTrue(encryptedData1.hasKvno());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      EncryptedData encryptedData0 = new EncryptedData();
      krbCred0.setEncPart(encryptedData0);
      EncryptedData encryptedData1 = krbCred0.getEncPart();
      assertEquals((-1), encryptedData1.getKvno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      LinkedList<Ticket> linkedList0 = new LinkedList<Ticket>();
      krbCred0.setTickets(linkedList0);
      EncryptionType encryptionType0 = EncryptionType.MD5WITHRSAENCRYPTION_CMSOID;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 903, (byte[]) null);
      krbCred0.setEncPart(encryptedData0);
      int int0 = krbCred0.computeLength();
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      krbCred0.addTicket(ticket0);
      // Undeclared exception!
      try { 
        krbCred0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(903);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        krbCred0.encode(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      LinkedList<Ticket> linkedList0 = new LinkedList<Ticket>();
      krbCred0.setTickets(linkedList0);
      Ticket ticket0 = new Ticket();
      krbCred0.addTicket(ticket0);
      assertEquals(5, krbCred0.getProtocolVersionNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      // Undeclared exception!
      try { 
        krbCred0.addTicket((Ticket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null ticket cannot be added
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbCred", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      LinkedList<Ticket> linkedList0 = new LinkedList<Ticket>();
      krbCred0.setTickets(linkedList0);
      EncryptionType encryptionType0 = EncryptionType.MD5WITHRSAENCRYPTION_CMSOID;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 903, (byte[]) null);
      krbCred0.setEncPart(encryptedData0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(903);
      krbCred0.encode(byteBuffer0);
      assertEquals(866, byteBuffer0.remaining());
      assertEquals(37, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      Ticket ticket0 = new Ticket();
      krbCred0.addTicket(ticket0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2499);
      // Undeclared exception!
      try { 
        krbCred0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      try { 
        krbCred0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbCred", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD;
      byte[] byteArray0 = new byte[0];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, (-1), byteArray0);
      PrincipalName principalName0 = new PrincipalName("I", (-797));
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      krbCred0.addTicket(ticket0);
      // Undeclared exception!
      try { 
        krbCred0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbCred", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      List<Ticket> list0 = krbCred0.getTickets();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      String string0 = krbCred0.toString();
      assertEquals("KRB-CRED : {\n    pvno: 5\n    msg-type: KRB_CRED\n    tickets: null\n    en-part: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KrbCred krbCred0 = new KrbCred();
      EncryptedData encryptedData0 = krbCred0.getEncPart();
      assertNull(encryptedData0);
  }
}
