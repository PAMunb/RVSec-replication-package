/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:43:15 GMT 2022
 */

package org.apache.directory.shared.kerberos.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.time.Clock;
import java.time.Instant;
import java.util.Date;
import org.apache.directory.shared.kerberos.KerberosMessageType;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.AuthorizationData;
import org.apache.directory.shared.kerberos.components.Checksum;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.crypto.checksum.ChecksumType;
import org.apache.directory.shared.kerberos.messages.Authenticator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Authenticator_ESTest extends Authenticator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNotNull(authenticator0);
      
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_MD5;
      byte[] byteArray0 = new byte[4];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(EncryptionType.DES3_CBC_MD5, encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertNotNull(encryptionKey0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      authenticator0.setSubKey(encryptionKey0);
      assertEquals(4, byteArray0.length);
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(EncryptionType.DES3_CBC_MD5, encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = authenticator0.toString();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNotNull(string0);
      assertEquals("Authenticator : \n    authenticator-vno : 5\n    crealm : null\n    cname : null\n    cusec : 0\n    ctime : null\n    subkey : des3-cbc-md5 (5) (5)\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNotNull(authenticator0);
      
      authenticator0.setCRealm("D0L5kea4m6");
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals("D0L5kea4m6", authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      
      // Undeclared exception!
      try { 
        authenticator0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Authenticator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNotNull(authenticator0);
      
      authenticator0.setVersionNumber((-1226));
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals((-1226), authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      
      int int0 = authenticator0.getVersionNumber();
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals((-1226), authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals((-1226), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNotNull(authenticator0);
      
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD5;
      byte[] byteArray0 = new byte[2];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(EncryptionType.DES_CBC_MD5, encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertNotNull(encryptionKey0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      authenticator0.setSubKey(encryptionKey0);
      assertEquals(2, byteArray0.length);
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(EncryptionType.DES_CBC_MD5, encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      EncryptionKey encryptionKey1 = authenticator0.getSubKey();
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(EncryptionType.DES_CBC_MD5, encryptionKey1.getKeyType());
      assertEquals(0, encryptionKey1.getKeyVersion());
      assertNotNull(encryptionKey1);
      assertSame(encryptionKey1, encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNotNull(authenticator0);
      
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      byte[] byteArray0 = new byte[7];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 2184);
      assertEquals(7, byteArray0.length);
      assertEquals(2184, encryptionKey0.getKeyVersion());
      assertEquals(EncryptionType.RSAENCRYPTION_ENVOID, encryptionKey0.getKeyType());
      assertNotNull(encryptionKey0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      authenticator0.setSubKey(encryptionKey0);
      assertEquals(7, byteArray0.length);
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(2184, encryptionKey0.getKeyVersion());
      assertEquals(EncryptionType.RSAENCRYPTION_ENVOID, encryptionKey0.getKeyType());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EncryptionKey encryptionKey1 = authenticator0.getSubKey();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(2184, encryptionKey1.getKeyVersion());
      assertEquals(EncryptionType.RSAENCRYPTION_ENVOID, encryptionKey1.getKeyType());
      assertNotNull(encryptionKey1);
      assertSame(encryptionKey1, encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[6];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, (byte) (-40));
      assertEquals(6, byteArray0.length);
      assertEquals((-40), encryptionKey0.getKeyVersion());
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionKey0.getKeyType());
      assertNotNull(encryptionKey0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      authenticator0.setSubKey(encryptionKey0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals((-40), encryptionKey0.getKeyVersion());
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionKey0.getKeyType());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EncryptionKey encryptionKey1 = authenticator0.getSubKey();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals((-40), encryptionKey1.getKeyVersion());
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionKey1.getKeyType());
      assertNotNull(encryptionKey1);
      assertSame(encryptionKey1, encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      authenticator0.setSeqNumber(0);
      assertEquals(0, (int)authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      
      Integer integer0 = authenticator0.getSeqNumber();
      assertEquals(0, (int)authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNotNull(authenticator0);
      
      authenticator0.setSeqNumber(866);
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(866, (int)authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      
      Integer integer0 = authenticator0.getSeqNumber();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(866, (int)authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(integer0);
      assertEquals(866, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      authenticator0.setSeqNumber((-1));
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals((-1), (int)authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      
      Integer integer0 = authenticator0.getSeqNumber();
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals((-1), (int)authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      authenticator0.setCusec(260);
      assertNull(authenticator0.getSeqNumber());
      assertEquals(260, authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      
      int int0 = authenticator0.getCusec();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(260, authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(260, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNotNull(authenticator0);
      
      authenticator0.setCusec((-2731));
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals((-2731), authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      
      int int0 = authenticator0.getCusec();
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals((-2731), authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals((-2731), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNotNull(authenticator0);
      
      KerberosTime kerberosTime0 = new KerberosTime((-623L));
      assertTrue(kerberosTime0.isZero());
      assertEquals("19691231235959Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19691231235959Z", kerberosTime0.getDate());
      assertNotNull(kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      
      authenticator0.setCTime(kerberosTime0);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertTrue(kerberosTime0.isZero());
      assertEquals("19691231235959Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19691231235959Z", kerberosTime0.getDate());
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      
      KerberosTime kerberosTime1 = authenticator0.getCtime();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals("19691231235959Z", kerberosTime1.getDate());
      assertEquals("19691231235959Z", kerberosTime1.toString());
      assertEquals(0L, kerberosTime1.getTime());
      assertTrue(kerberosTime1.isZero());
      assertNotNull(kerberosTime1);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      KerberosTime kerberosTime0 = new KerberosTime(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertNotNull(kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      
      authenticator0.setCTime(kerberosTime0);
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      
      KerberosTime kerberosTime1 = authenticator0.getCtime();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(1392409281000L, kerberosTime1.getTime());
      assertEquals("20140214202121Z", kerberosTime1.getDate());
      assertEquals("20140214202121Z", kerberosTime1.toString());
      assertFalse(kerberosTime1.isZero());
      assertNotNull(kerberosTime1);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      MockDate mockDate0 = new MockDate((-1342), (-91), (-1723));
      assertNotNull(mockDate0);
      
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      assertEquals("Mon Sep 11 00:00:00 GMT 545", mockDate0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals("05450911000000Z", kerberosTime0.getDate());
      assertEquals("05450911000000Z", kerberosTime0.toString());
      assertEquals((-44946576000000L), kerberosTime0.getTime());
      assertNotNull(kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      
      authenticator0.setCTime(kerberosTime0);
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals("Mon Sep 11 00:00:00 GMT 545", mockDate0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals("05450911000000Z", kerberosTime0.getDate());
      assertEquals("05450911000000Z", kerberosTime0.toString());
      assertEquals((-44946576000000L), kerberosTime0.getTime());
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      
      KerberosTime kerberosTime1 = authenticator0.getCtime();
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals("05450911000000Z", kerberosTime1.getDate());
      assertEquals("05450911000000Z", kerberosTime1.toString());
      assertEquals((-44946576000000L), kerberosTime1.getTime());
      assertFalse(kerberosTime1.isZero());
      assertNotNull(kerberosTime1);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      Checksum checksum0 = new Checksum();
      assertNull(checksum0.getChecksumType());
      assertNotNull(checksum0);
      
      authenticator0.setCksum(checksum0);
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(checksum0.getChecksumType());
      
      Checksum checksum1 = authenticator0.getCksum();
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(checksum1.getChecksumType());
      assertNotNull(checksum1);
      assertSame(checksum1, checksum0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      authenticator0.setCRealm("cp?P(VpC=e");
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals("cp?P(VpC=e", authenticator0.getCRealm());
      
      String string0 = authenticator0.getCRealm();
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals("cp?P(VpC=e", authenticator0.getCRealm());
      assertNotNull(string0);
      assertEquals("cp?P(VpC=e", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      authenticator0.setCRealm("");
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals("", authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      
      String string0 = authenticator0.getCRealm();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals("", authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      PrincipalName principalName0 = new PrincipalName("z||", 872);
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNotNull(principalName0);
      
      authenticator0.setCName(principalName0);
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      
      PrincipalName principalName1 = authenticator0.getCName();
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(principalName1.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName1.getNameType());
      assertNotNull(principalName1);
      assertSame(principalName1, principalName0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      AuthorizationData authorizationData0 = new AuthorizationData();
      assertNotNull(authorizationData0);
      
      authenticator0.setAuthorizationData(authorizationData0);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      
      AuthorizationData authorizationData1 = authenticator0.getAuthorizationData();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authorizationData1);
      assertSame(authorizationData1, authorizationData0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNotNull(authenticator0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      try { 
        authenticator0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Authenticator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNotNull(authenticator0);
      
      PrincipalName principalName0 = new PrincipalName("Authenticator : \n    authenticator-vno : 5\n    crealm : null\n    cname : null\n    cusec : 0\n    ctime : null\n", (-1342));
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNotNull(principalName0);
      
      authenticator0.setCName(principalName0);
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      
      AuthorizationData authorizationData0 = new AuthorizationData();
      assertNotNull(authorizationData0);
      
      authenticator0.setAuthorizationData(authorizationData0);
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      
      int int0 = authenticator0.computeLength();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(167, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNotNull(authenticator0);
      
      authenticator0.setSeqNumber(1296);
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(1296, (int)authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      
      PrincipalName principalName0 = new PrincipalName("8NRJ", 183);
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNotNull(principalName0);
      
      authenticator0.setCName(principalName0);
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(1296, (int)authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      
      int int0 = authenticator0.computeLength();
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(1296, (int)authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      PrincipalName principalName0 = new PrincipalName((String) null, 173);
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNotNull(principalName0);
      
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[3];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, (byte) (-5));
      assertEquals(3, byteArray0.length);
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionKey0.getKeyType());
      assertEquals((-5), encryptionKey0.getKeyVersion());
      assertNotNull(encryptionKey0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      authenticator0.setSubKey(encryptionKey0);
      assertEquals(3, byteArray0.length);
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionKey0.getKeyType());
      assertEquals((-5), encryptionKey0.getKeyVersion());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      authenticator0.setCName(principalName0);
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      
      int int0 = authenticator0.computeLength();
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      PrincipalName principalName0 = new PrincipalName("z||", 872);
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNotNull(principalName0);
      
      authenticator0.setCName(principalName0);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      
      ChecksumType checksumType0 = ChecksumType.SHA1_2;
      byte[] byteArray0 = new byte[4];
      Checksum checksum0 = new Checksum(checksumType0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(ChecksumType.SHA1_2, checksum0.getChecksumType());
      assertNotNull(checksum0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      authenticator0.setCksum(checksum0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(ChecksumType.SHA1_2, checksum0.getChecksumType());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = authenticator0.computeLength();
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertNull(authenticator0.getSeqNumber());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(72, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNotNull(authenticator0);
      
      int int0 = authenticator0.getVersionNumber();
      assertNull(authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(authenticator0);
      
      authenticator0.setSeqNumber((-2376));
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals((-2376), (int)authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      
      String string0 = authenticator0.toString();
      assertNull(authenticator0.getCRealm());
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertEquals((-2376), (int)authenticator0.getSeqNumber());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertNotNull(string0);
      assertEquals("Authenticator : \n    authenticator-vno : 5\n    crealm : null\n    cname : null\n    cusec : 0\n    ctime : null\n    seq-number : -2376\n", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNotNull(authenticator0);
      
      EncryptionKey encryptionKey0 = new EncryptionKey();
      assertNull(encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertNotNull(encryptionKey0);
      
      authenticator0.setSubKey(encryptionKey0);
      assertEquals(0, authenticator0.getCusec());
      assertEquals(5, authenticator0.getProtocolVersionNumber());
      assertNull(authenticator0.getSeqNumber());
      assertNull(authenticator0.getCRealm());
      assertEquals(KerberosMessageType.AUTHENTICATOR, authenticator0.getMessageType());
      assertEquals(5, authenticator0.getVersionNumber());
      assertNull(encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      
      // Undeclared exception!
      try { 
        authenticator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptionKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      PrincipalName principalName0 = new PrincipalName(",+>", (-39));
      authenticator0.setCName(principalName0);
      AuthorizationData authorizationData0 = new AuthorizationData();
      authenticator0.setAuthorizationData(authorizationData0);
      KerberosTime kerberosTime0 = new KerberosTime();
      authenticator0.setCTime(kerberosTime0);
      ByteBuffer byteBuffer0 = authenticator0.encode((ByteBuffer) null);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(59, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      authenticator0.setSeqNumber((-672));
      PrincipalName principalName0 = new PrincipalName("'L4lRT(LMXT.l|F:\"<", (-672));
      authenticator0.setCName(principalName0);
      KerberosTime kerberosTime0 = new KerberosTime();
      authenticator0.setCTime(kerberosTime0);
      ByteBuffer byteBuffer0 = authenticator0.encode((ByteBuffer) null);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals((-672), (int)authenticator0.getSeqNumber());
      assertFalse(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      PrincipalName principalName0 = new PrincipalName("ERR_10005", (-21));
      authenticator0.setCName(principalName0);
      EncryptionType encryptionType0 = EncryptionType.SUBKEY_KEYMATERIAL;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      authenticator0.setSubKey(encryptionKey0);
      KerberosTime kerberosTime0 = new KerberosTime();
      authenticator0.setCTime(kerberosTime0);
      ByteBuffer byteBuffer0 = authenticator0.encode((ByteBuffer) null);
      assertEquals(5, authenticator0.getVersionNumber());
      assertEquals(74, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(604800000);
      // Undeclared exception!
      try { 
        authenticator0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Authenticator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      PrincipalName principalName0 = new PrincipalName("Authenticator : \n    authenticator-vno : 5\n    crealm : null\n    cname : null\n    cusec : 0\n    ctime : null\n", (-1342));
      authenticator0.setCName(principalName0);
      ChecksumType checksumType0 = ChecksumType.SHA1_2;
      byte[] byteArray0 = new byte[0];
      Checksum checksum0 = new Checksum(checksumType0, byteArray0);
      authenticator0.setCksum(checksum0);
      // Undeclared exception!
      try { 
        authenticator0.encode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Authenticator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      int int0 = authenticator0.getCusec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      Integer integer0 = authenticator0.getSeqNumber();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      AuthorizationData authorizationData0 = authenticator0.getAuthorizationData();
      assertNull(authorizationData0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      AuthorizationData authorizationData0 = new AuthorizationData();
      authenticator0.setAuthorizationData(authorizationData0);
      String string0 = authenticator0.toString();
      assertEquals("Authenticator : \n    authenticator-vno : 5\n    crealm : null\n    cname : null\n    cusec : 0\n    ctime : null\n    authorization-data : AuthorizationData : \n\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      KerberosTime kerberosTime0 = authenticator0.getCtime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      PrincipalName principalName0 = authenticator0.getCName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      String string0 = authenticator0.getCRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      Checksum checksum0 = authenticator0.getCksum();
      assertNull(checksum0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      EncryptionKey encryptionKey0 = authenticator0.getSubKey();
      assertNull(encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      authenticator0.setVersionNumber(0);
      int int0 = authenticator0.getVersionNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Authenticator authenticator0 = new Authenticator();
      ChecksumType checksumType0 = ChecksumType.SHA1_2;
      byte[] byteArray0 = new byte[0];
      Checksum checksum0 = new Checksum(checksumType0, byteArray0);
      authenticator0.setCksum(checksum0);
      String string0 = authenticator0.toString();
      assertEquals("Authenticator : \n    authenticator-vno : 5\n    crealm : null\n    cname : null\n    cksum : Checksum : {\n    cksumtype: sha1 (14)\n    checksum:\n}\n\n    cusec : 0\n    ctime : null\n", string0);
  }
}
