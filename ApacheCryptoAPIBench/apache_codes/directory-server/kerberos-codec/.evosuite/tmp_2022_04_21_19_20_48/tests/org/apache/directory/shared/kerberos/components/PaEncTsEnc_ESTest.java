/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:52:06 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.components.PaEncTsEnc;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaEncTsEnc_ESTest extends PaEncTsEnc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 86400000);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      try { 
        paEncTsEnc0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.PaEncTsEnc", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, (byte)0);
      int int0 = paEncTsEnc0.getPausec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      KerberosTime kerberosTime0 = paEncTsEnc0.getPaTimestamp();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 717);
      paEncTsEnc0.getPaTimestamp();
      assertEquals(717, paEncTsEnc0.getPausec());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1014), (-1014), (-2806));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, (-1014));
      paEncTsEnc0.getPaTimestamp();
      assertEquals((-1014), paEncTsEnc0.getPausec());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(21);
      // Undeclared exception!
      try { 
        paEncTsEnc0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PaEncTsEnc", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      String string0 = paEncTsEnc0.toString("");
      assertEquals("PA-ENC-TS-ENC : {\n    patimestamp : null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 60000);
      String string0 = paEncTsEnc0.toString("PA-ENC-TS-ENC : {\n    patimestamp : 20140214202121Z\n    pausec :60000\n}\n");
      assertEquals("PA-ENC-TS-ENC : {\n    patimestamp : 20140214202121Z\n    pausec :60000\n}\nPA-ENC-TS-ENC : {\nPA-ENC-TS-ENC : {\n    patimestamp : 20140214202121Z\n    pausec :60000\n}\n    patimestamp : 20140214202121Z\nPA-ENC-TS-ENC : {\n    patimestamp : 20140214202121Z\n    pausec :60000\n}\n    pausec :60000\nPA-ENC-TS-ENC : {\n    patimestamp : 20140214202121Z\n    pausec :60000\n}\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      String string0 = paEncTsEnc0.toString();
      assertEquals("PA-ENC-TS-ENC : {\n    patimestamp : null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      try { 
        paEncTsEnc0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.PaEncTsEnc", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 60000);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(86400000);
      paEncTsEnc0.encode(byteBuffer0);
      assertEquals(28, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=28 lim=86400000 cap=86400000]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 60000);
      int int0 = paEncTsEnc0.computeLength();
      assertEquals(60000, paEncTsEnc0.getPausec());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      paEncTsEnc0.computeLength();
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        paEncTsEnc0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.PaEncTsEnc", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      int int0 = paEncTsEnc0.getPausec();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 60000);
      int int0 = paEncTsEnc0.getPausec();
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 60000);
      paEncTsEnc0.setPausec(419);
      assertEquals(419, paEncTsEnc0.getPausec());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc(kerberosTime0, 60000);
      paEncTsEnc0.getPaTimestamp();
      assertEquals(60000, paEncTsEnc0.getPausec());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaEncTsEnc paEncTsEnc0 = new PaEncTsEnc();
      KerberosTime kerberosTime0 = new KerberosTime();
      paEncTsEnc0.setPaTimestamp(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(86400000);
      paEncTsEnc0.encode(byteBuffer0);
      assertEquals(86399979, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=21 lim=86400000 cap=86400000]", byteBuffer0.toString());
  }
}
