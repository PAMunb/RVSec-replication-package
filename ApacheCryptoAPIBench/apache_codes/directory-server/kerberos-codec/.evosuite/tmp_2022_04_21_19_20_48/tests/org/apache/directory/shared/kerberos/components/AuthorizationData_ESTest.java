/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:43:44 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.List;
import org.apache.directory.shared.kerberos.codec.types.AuthorizationType;
import org.apache.directory.shared.kerberos.components.AuthorizationData;
import org.apache.directory.shared.kerberos.components.AuthorizationDataEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AuthorizationData_ESTest extends AuthorizationData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      String string0 = authorizationData0.toString();
      assertEquals("AuthorizationData : \n    AuthorizationDataEntry : {\n        adType : null\n        adData : \n    }", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        authorizationData0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      authorizationData0.getCurrentAdType();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      AuthorizationType authorizationType0 = AuthorizationType.NULL;
      authorizationData0.setCurrentAdType(authorizationType0);
      AuthorizationType authorizationType1 = authorizationData0.getCurrentAdType();
      assertEquals(0, authorizationType1.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_TICKET_EXTENSIONS;
      authorizationData0.createNewAD();
      authorizationData0.setCurrentAdType(authorizationType0);
      AuthorizationType authorizationType1 = authorizationData0.getCurrentAdType();
      assertSame(authorizationType1, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      byte[] byteArray0 = new byte[9];
      authorizationData0.setCurrentAdData(byteArray0);
      byte[] byteArray1 = authorizationData0.getCurrentAdData();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      byte[] byteArray0 = authorizationData0.getCurrentAdData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      AuthorizationDataEntry authorizationDataEntry0 = authorizationData0.getCurrentAD();
      assertNull(authorizationDataEntry0.getAdType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      List<AuthorizationDataEntry> list0 = authorizationData0.getAuthorizationData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        authorizationData0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.directory.shared.kerberos.components.AuthorizationData
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      // Undeclared exception!
      try { 
        authorizationData0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.addEntry((AuthorizationDataEntry) null);
      // Undeclared exception!
      try { 
        authorizationData0.toString("5'%T{]&Pjn/l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      String string0 = authorizationData0.toString("/zn");
      assertEquals("/znAuthorizationData : \n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.addEntry((AuthorizationDataEntry) null);
      // Undeclared exception!
      try { 
        authorizationData0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      AuthorizationData authorizationData1 = new AuthorizationData();
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      authorizationData1.addEntry(authorizationDataEntry0);
      boolean boolean0 = authorizationData0.equals(authorizationData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      AuthorizationData authorizationData1 = new AuthorizationData();
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      authorizationData1.addEntry(authorizationDataEntry0);
      boolean boolean0 = authorizationData1.equals(authorizationData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      boolean boolean0 = authorizationData0.equals(authorizationData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      AuthorizationData authorizationData1 = new AuthorizationData();
      assertTrue(authorizationData1.equals((Object)authorizationData0));
      
      authorizationData1.addEntry((AuthorizationDataEntry) null);
      boolean boolean0 = authorizationData1.equals(authorizationData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      boolean boolean0 = authorizationData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      boolean boolean0 = authorizationData0.equals(authorizationData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_TICKET_EXTENSIONS;
      byte[] byteArray0 = new byte[6];
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      authorizationData0.addEntry(authorizationDataEntry0);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        authorizationData0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      try { 
        authorizationData0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      authorizationData0.encode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.computeLength();
      authorizationData0.createNewAD();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(619);
      // Undeclared exception!
      try { 
        authorizationData0.encode(byteBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      // Undeclared exception!
      try { 
        authorizationData0.getCurrentAdData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      // Undeclared exception!
      try { 
        authorizationData0.getCurrentAdType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      List<AuthorizationDataEntry> list0 = authorizationData0.getAuthorizationData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      AuthorizationType authorizationType0 = AuthorizationType.AD_KDC_ISSUED;
      // Undeclared exception!
      try { 
        authorizationData0.setCurrentAdType(authorizationType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      authorizationData0.createNewAD();
      authorizationData0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      AuthorizationDataEntry authorizationDataEntry0 = authorizationData0.getCurrentAD();
      assertNull(authorizationDataEntry0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_TICKET_EXTENSIONS;
      byte[] byteArray0 = new byte[6];
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      authorizationData0.addEntry(authorizationDataEntry0);
      authorizationData0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        authorizationData0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_00004_PDU_BUFFER_SIZE_TOO_SMALL The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.api.asn1.ber.tlv.BerValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AuthorizationData authorizationData0 = new AuthorizationData();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        authorizationData0.setCurrentAdData(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationData", e);
      }
  }
}
