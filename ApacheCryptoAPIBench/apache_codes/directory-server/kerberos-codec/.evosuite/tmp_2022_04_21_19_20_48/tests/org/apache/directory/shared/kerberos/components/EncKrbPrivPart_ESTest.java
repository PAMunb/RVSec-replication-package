/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:40:47 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.text.ParseException;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.HostAddrType;
import org.apache.directory.shared.kerberos.components.EncKrbPrivPart;
import org.apache.directory.shared.kerberos.components.HostAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncKrbPrivPart_ESTest extends EncKrbPrivPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-2147483648L));
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setRecipientAddress((HostAddress) null);
      encKrbPrivPart0.setUsec((-772));
      KerberosTime kerberosTime0 = new KerberosTime();
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      encKrbPrivPart0.getTimestamp();
      encKrbPrivPart0.toString();
      encKrbPrivPart0.getTimestamp();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(604800000);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      kerberosTime0.toDate();
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      kerberosTime0.toDate();
      encKrbPrivPart0.toString();
      encKrbPrivPart0.toString();
      KerberosTime kerberosTime1 = encKrbPrivPart0.getTimestamp();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      encKrbPrivPart0.getTimestamp();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)120;
      try { 
        kerberosTime1.setDate("h/;io");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"h/;io\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      assertEquals(0, encKrbPrivPart0.getUsec());
      
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart1.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart1.setSenderAddress(hostAddress0);
      encKrbPrivPart1.setTimestamp(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      encKrbPrivPart1.encode(byteBuffer0);
      encKrbPrivPart1.computeLength();
      encKrbPrivPart1.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      int int0 = 0;
      encKrbPrivPart0.setSeqNumber(0);
      encKrbPrivPart0.setUsec(181);
      encKrbPrivPart0.setUsec((-95));
      encKrbPrivPart0.setUsec((-95));
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_DECNET;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-27);
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart0.getUsec();
      encKrbPrivPart0.getUsec();
      encKrbPrivPart0.getUsec();
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart1.setUsec(60000);
      encKrbPrivPart1.setSenderAddress(hostAddress0);
      ByteBuffer.allocateDirect(86400000);
      ByteBuffer.allocate(604800000);
      encKrbPrivPart1.computeLength();
      encKrbPrivPart1.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      encKrbPrivPart0.encode(byteBuffer0);
      encKrbPrivPart0.computeLength();
      encKrbPrivPart0.toString();
      encKrbPrivPart0.toString();
      encKrbPrivPart0.getUsec();
      encKrbPrivPart0.computeLength();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart0.computeLength();
      encKrbPrivPart0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart1.setUsec((-1616));
      encKrbPrivPart1.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart1.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      encKrbPrivPart1.setSeqNumber((-93));
      encKrbPrivPart1.encode(byteBuffer0);
      encKrbPrivPart1.computeLength();
      encKrbPrivPart1.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      hostAddress0.setAddress(byteArray0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.setUsec(604800000);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      ByteBuffer.allocateDirect(86400000);
      encKrbPrivPart0.setSeqNumber(86400000);
      encKrbPrivPart0.computeLength();
      encKrbPrivPart0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart1.setUsec((-1616));
      encKrbPrivPart1.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart1.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      encKrbPrivPart1.encode(byteBuffer0);
      encKrbPrivPart1.computeLength();
      encKrbPrivPart1.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setUsec(98);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setRecipientAddress((HostAddress) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(93);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      MockInetAddress.getLocalHost();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.setUsec(86400000);
      HostAddress hostAddress1 = new HostAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      encKrbPrivPart0.encode(byteBuffer0);
      encKrbPrivPart0.computeLength();
      encKrbPrivPart0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setSeqNumber((-2008));
      encKrbPrivPart0.toString();
      encKrbPrivPart0.getUsec();
      encKrbPrivPart0.getSeqNumber();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-120);
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.getUserData();
      encKrbPrivPart0.getUserData();
      System.setCurrentTimeMillis((-404L));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setSeqNumber((-103));
      encKrbPrivPart0.getTimestamp();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(604800000);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      HostAddress hostAddress1 = new HostAddress(inetAddress0);
      encKrbPrivPart1.setRecipientAddress(hostAddress1);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart2 = new EncKrbPrivPart();
      encKrbPrivPart2.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress1);
      HostAddress hostAddress2 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart2.getSenderAddress();
      encKrbPrivPart1.setSenderAddress(hostAddress1);
      encKrbPrivPart2.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(604800000);
      encKrbPrivPart2.encode(byteBuffer0);
      encKrbPrivPart2.computeLength();
      encKrbPrivPart2.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      byte[] byteArray0 = new byte[1];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      MockInetAddress.getLocalHost();
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart1.getSenderAddress();
      encKrbPrivPart1.setSenderAddress(hostAddress0);
      encKrbPrivPart1.computeLength();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress1);
      HostAddrType hostAddrType1 = HostAddrType.ADDRTYPE_INET6;
      HostAddress hostAddress2 = new HostAddress(hostAddrType1, byteArray0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress2);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(604800000);
      encKrbPrivPart0.encode(byteBuffer0);
      encKrbPrivPart0.toString();
      encKrbPrivPart0.encode(byteBuffer0);
      encKrbPrivPart0.toString();
      encKrbPrivPart1.getUserData();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: null\n}\n", string0);
      
      encKrbPrivPart0.setSeqNumber(124);
      encKrbPrivPart0.toString();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_CHAOS;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-40);
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      encKrbPrivPart0.setSeqNumber(0);
      encKrbPrivPart0.toString();
      encKrbPrivPart0.getSeqNumber();
      encKrbPrivPart0.getUserData();
      encKrbPrivPart0.getTimestamp();
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setSeqNumber(743);
      encKrbPrivPart0.getSeqNumber();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress1);
      HostAddrType hostAddrType1 = HostAddrType.ADDRTYPE_INET6;
      HostAddress hostAddress2 = new HostAddress(hostAddrType1, byteArray0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress2);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(604800000);
      encKrbPrivPart0.encode(byteBuffer0);
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: Unknow host : \n    r-address: Unknow host : \n}\n", string0);
      
      String string1 = encKrbPrivPart1.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: null\n}\n", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[0];
      KerberosTime kerberosTime0 = new KerberosTime();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(60000);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      encKrbPrivPart0.encode(byteBuffer0);
      assertEquals(59966, byteBuffer0.remaining());
      
      encKrbPrivPart0.getUsec();
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: Unknow host : \n    r-address: Unknow host : \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      int int0 = 301;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(301);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_XNS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      HostAddress hostAddress2 = new HostAddress();
      hostAddress0.setAddrType(604800000);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      HostAddrType hostAddrType1 = HostAddrType.ADDRTYPE_INET6;
      HostAddress hostAddress3 = new HostAddress(hostAddrType1, byteArray0);
      HostAddress hostAddress4 = encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart1.setSenderAddress(hostAddress4);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(338);
      encKrbPrivPart1.encode(byteBuffer0);
      assertEquals(317, byteBuffer0.remaining());
      
      encKrbPrivPart0.toString();
      encKrbPrivPart1.setUsec(0);
      assertEquals(0, encKrbPrivPart1.getUsec());
      
      KerberosTime kerberosTime1 = encKrbPrivPart0.getTimestamp();
      assertNull(kerberosTime1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.toString();
      encKrbPrivPart0.getSeqNumber();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_CHAOS;
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)0;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.getRecipientAddress();
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_XNS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      encKrbPrivPart0.setSenderAddress(hostAddress1);
      encKrbPrivPart0.toString();
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    timestamp: 2922789940817071255Z\n    s-address: Unknow host : \n    r-address: Unknow host : \n}\n", string0);
      
      int int0 = encKrbPrivPart0.getSeqNumber();
      assertEquals(0, int0);
      
      encKrbPrivPart0.getRecipientAddress();
      assertEquals(0, encKrbPrivPart0.getSeqNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[0];
      KerberosTime kerberosTime0 = new KerberosTime();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(604800000);
      encKrbPrivPart0.encode(byteBuffer0);
      assertEquals(604799979, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=21 lim=604800000 cap=604800000]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      int int0 = encKrbPrivPart0.getUsec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      KerberosTime kerberosTime0 = encKrbPrivPart0.getTimestamp();
      assertNull(kerberosTime0);
      
      encKrbPrivPart0.setTimestamp((KerberosTime) null);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setRecipientAddress((HostAddress) null);
      int int0 = encKrbPrivPart0.getSeqNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.getSenderAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-67);
      encKrbPrivPart0.setUserData(byteArray0);
      assertEquals(0, encKrbPrivPart0.getUsec());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    timestamp: 20140214202121Z\n    s-address: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddress hostAddress0 = new HostAddress();
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: null\n    r-address: Unknow host : \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-123);
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.setTimestamp((KerberosTime) null);
      assertEquals(0, encKrbPrivPart0.getSeqNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setUsec(1301);
      encKrbPrivPart0.getUsec();
      int int0 = encKrbPrivPart0.getUsec();
      assertEquals(1301, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setUsec((-412));
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    usec: -412\n    s-address: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-120);
      encKrbPrivPart0.setUserData(byteArray0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      encKrbPrivPart0.setUserData(byteArray0);
      encKrbPrivPart0.getTimestamp();
      encKrbPrivPart0.getTimestamp();
      int int0 = encKrbPrivPart0.getUsec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setSeqNumber(2767);
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    seq-number: 2767\n    s-address: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = encKrbPrivPart0.getUserData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.toString();
      byte[] byteArray0 = encKrbPrivPart0.getUserData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[0];
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      EncKrbPrivPart encKrbPrivPart1 = new EncKrbPrivPart();
      encKrbPrivPart1.setUserData(byteArray0);
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      encKrbPrivPart0.setSeqNumber(1276);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(604800000);
      encKrbPrivPart0.encode(byteBuffer0);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_XNS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = new HostAddress();
      encKrbPrivPart0.setUserData(byteArray0);
      HostAddress hostAddress2 = new HostAddress();
      HostAddrType hostAddrType1 = HostAddrType.ADDRTYPE_INET6;
      HostAddress hostAddress3 = new HostAddress(hostAddrType1, byteArray0);
      MockDate mockDate0 = new MockDate((-1799), (-1799), (-1799));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      encKrbPrivPart0.setTimestamp(kerberosTime0);
      encKrbPrivPart0.getSenderAddress();
      encKrbPrivPart0.setSenderAddress((HostAddress) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(338);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(15);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_DECNET;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)0;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1131);
      byteBuffer0.getShort();
      // Undeclared exception!
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[0];
      encKrbPrivPart0.setUserData(byteArray0);
      assertEquals(0, encKrbPrivPart0.getSeqNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setSeqNumber(0);
      int int0 = encKrbPrivPart0.getUsec();
      assertEquals(0, encKrbPrivPart0.getSeqNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setSeqNumber(0);
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: null\n}\n", string0);
      
      int int0 = encKrbPrivPart0.getSeqNumber();
      assertEquals(0, int0);
      
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_CHAOS;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-3);
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbPrivPart0.setRecipientAddress(hostAddress0);
      assertEquals(0, encKrbPrivPart0.getSeqNumber());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setRecipientAddress((HostAddress) null);
      assertEquals(0, encKrbPrivPart0.getUsec());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      int int0 = encKrbPrivPart0.getSeqNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      try { 
        encKrbPrivPart0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.asLongBuffer();
      byteBuffer0.asIntBuffer();
      encKrbPrivPart0.setUsec((byte) (-92));
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.setUsec((-2638));
      int int0 = encKrbPrivPart0.getSeqNumber();
      assertEquals((-2638), encKrbPrivPart0.getUsec());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddress hostAddress0 = encKrbPrivPart0.getRecipientAddress();
      assertNull(hostAddress0);
      
      encKrbPrivPart0.setRecipientAddress((HostAddress) null);
      encKrbPrivPart0.setSeqNumber(0);
      encKrbPrivPart0.setUsec(0);
      encKrbPrivPart0.getUsec();
      encKrbPrivPart0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        encKrbPrivPart0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_00004_PDU_BUFFER_SIZE_TOO_SMALL The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.api.asn1.ber.tlv.BerValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      HostAddress hostAddress0 = new HostAddress();
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      String string0 = encKrbPrivPart0.toString();
      assertEquals("EncKrbPrivPart : {\n    user-data: \n    s-address: Unknow host : \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      encKrbPrivPart0.setSenderAddress(hostAddress0);
      String string0 = "YRpe7nyl1x^";
      // Undeclared exception!
      try { 
        Charset.forName("YRpe7nyl1x^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // YRpe7nyl1x^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      encKrbPrivPart0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)0;
      encKrbPrivPart0.toString();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EncKrbPrivPart encKrbPrivPart0 = new EncKrbPrivPart();
      // Undeclared exception!
      try { 
        encKrbPrivPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbPrivPart", e);
      }
  }
}
