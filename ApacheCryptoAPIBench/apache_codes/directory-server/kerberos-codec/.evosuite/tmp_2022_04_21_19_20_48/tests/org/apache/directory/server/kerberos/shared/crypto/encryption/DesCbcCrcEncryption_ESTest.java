/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:51:53 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.crypto.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.server.kerberos.shared.crypto.encryption.DesCbcCrcEncryption;
import org.apache.directory.server.kerberos.shared.crypto.encryption.KeyUsage;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DesCbcCrcEncryption_ESTest extends DesCbcCrcEncryption_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[7];
      EncryptionType encryptionType0 = EncryptionType.DES_EDE3_CBC_ENV_OID;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 5193);
      KeyUsage keyUsage0 = KeyUsage.AS_REP_ENC_PART_WITH_CKEY;
      desCbcCrcEncryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
      assertEquals(8, desCbcCrcEncryption0.getConfounderLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = desCbcCrcEncryption0.encrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray2 = desCbcCrcEncryption0.encrypt(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      KeyUsage keyUsage0 = KeyUsage.KRB_PRIV_ENC_PART_CHOSEN_KEY;
      byte[] byteArray1 = desCbcCrcEncryption0.calculateIntegrity(byteArray0, byteArray0, keyUsage0);
      byte[] byteArray2 = desCbcCrcEncryption0.decrypt(byteArray1, byteArray0);
      assertNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)101, (byte)34, (byte) (-33), (byte)105}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = desCbcCrcEncryption0.decrypt(byteArray1, byteArray0);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      KeyUsage keyUsage0 = KeyUsage.AS_OR_TGS_REP_TICKET_WITH_SRVKEY;
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.getEncryptedData(encryptionKey0, (byte[]) null, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      KeyUsage keyUsage0 = KeyUsage.AP_REP_ENC_PART_SESS_KEY;
      EncryptionKey encryptionKey0 = new EncryptionKey();
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.getDecryptedData(encryptionKey0, (EncryptedData) null, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.DesCbcCrcEncryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      EncryptedData encryptedData0 = new EncryptedData();
      KeyUsage keyUsage0 = KeyUsage.TGS_REP_ENC_PART_TGS_AUTHNT_SUB_KEY;
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_PA_TGS_REQ_PADATA_AP_REQ_AUTHNT_CKSUM_TGS_SESS_KEY;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.encrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.decrypt(byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      KeyUsage keyUsage0 = KeyUsage.AS_OR_TGS_REP_TICKET_WITH_SRVKEY;
      // Undeclared exception!
      try { 
        desCbcCrcEncryption0.calculateIntegrity((byte[]) null, (byte[]) null, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      EncryptionType encryptionType0 = desCbcCrcEncryption0.getEncryptionType();
      assertEquals(EncryptionType.DES_CBC_CRC, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      int int0 = desCbcCrcEncryption0.getChecksumLength();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      int int0 = desCbcCrcEncryption0.getConfounderLength();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = desCbcCrcEncryption0.encrypt(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = desCbcCrcEncryption0.decrypt(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-90), (byte)77, (byte) (-23), (byte) (-63), (byte) (-79), (byte)35, (byte) (-89)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_AUTHNT_SUB_KEY;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)8;
      EncryptedData encryptedData0 = desCbcCrcEncryption0.getEncryptedData(encryptionKey0, byteArray1, keyUsage0);
      EncryptionKey encryptionKey1 = new EncryptionKey(encryptionType0, byteArray1, (-15));
      try { 
        desCbcCrcEncryption0.getDecryptedData(encryptionKey1, encryptedData0, keyUsage0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integrity check on decrypted field failed
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.DesCbcCrcEncryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DesCbcCrcEncryption desCbcCrcEncryption0 = new DesCbcCrcEncryption();
      byte[] byteArray0 = new byte[8];
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_AUTHNT_SUB_KEY;
      EncryptedData encryptedData0 = desCbcCrcEncryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
      assertEquals(4, desCbcCrcEncryption0.getChecksumLength());
      
      byte[] byteArray1 = desCbcCrcEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
      assertEquals(12, byteArray1.length);
      assertEquals(8, desCbcCrcEncryption0.getConfounderLength());
  }
}
