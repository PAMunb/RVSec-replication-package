/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:42:12 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.time.Instant;
import java.util.Date;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.codec.types.TransitedEncodingType;
import org.apache.directory.shared.kerberos.components.AuthorizationData;
import org.apache.directory.shared.kerberos.components.EncTicketPart;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.components.HostAddresses;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.components.TransitedEncoding;
import org.apache.directory.shared.kerberos.flags.TicketFlag;
import org.apache.directory.shared.kerberos.flags.TicketFlags;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncTicketPart_ESTest extends EncTicketPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      byte[] byteArray0 = new byte[2];
      encTicketPart0.setCRealm("PcN0I=}]0(`8lPp");
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_EXP;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, (byte)2);
      encTicketPart0.setKey(encryptionKey0);
      // Undeclared exception!
      try { 
        encTicketPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncTicketPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3533);
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD5;
      byte[] byteArray0 = new byte[6];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, (-3639));
      encTicketPart0.setKey(encryptionKey0);
      // Undeclared exception!
      try { 
        encTicketPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncTicketPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_ENTERPRISE;
      PrincipalName principalName0 = new PrincipalName("FpJ'", principalNameType0);
      EncryptionType encryptionType0 = EncryptionType.SUBKEY_KEYMATERIAL;
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      encTicketPart0.setTransited(transitedEncoding0);
      byte[] byteArray0 = new byte[0];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 239);
      encTicketPart0.setKey(encryptionKey0);
      encTicketPart0.setCName(principalName0);
      // Undeclared exception!
      try { 
        encTicketPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncTicketPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encTicketPart0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getStartTime();
      assertEquals(60000, KerberosTime.MINUTE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      MockDate mockDate0 = new MockDate(0, 0, 0, (-1383), 0);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      encTicketPart0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getStartTime();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = new KerberosTime(1L);
      encTicketPart0.setRenewTill(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getRenewTill();
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encTicketPart0.setRenewTill(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getRenewTill();
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      MockDate mockDate0 = new MockDate(32, (-1442), 0, (-1442), (-1442));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      encTicketPart0.setRenewTill(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getRenewTill();
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      byte[] byteArray0 = new byte[8];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 0);
      encTicketPart0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = encTicketPart0.getKey();
      assertEquals(0, encryptionKey1.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD_EXP;
      byte[] byteArray0 = new byte[0];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 3190);
      encTicketPart0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = encTicketPart0.getKey();
      assertEquals(3190, encryptionKey1.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD_EXP;
      byte[] byteArray0 = new byte[0];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, (-86));
      encTicketPart0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = encTicketPart0.getKey();
      assertEquals(EncryptionType.RC4_HMAC_OLD_EXP, encryptionKey1.getKeyType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      encTicketPart0.setFlags((TicketFlags) null);
      TicketFlags ticketFlags0 = encTicketPart0.getFlags();
      assertNull(ticketFlags0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      TicketFlag ticketFlag0 = TicketFlag.FORWARDED;
      encTicketPart0.setFlag(ticketFlag0);
      TicketFlags ticketFlags0 = encTicketPart0.getFlags();
      assertEquals((byte)0, ticketFlags0.getUnusedBits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      TicketFlags ticketFlags0 = new TicketFlags((-1875));
      encTicketPart0.setFlags(ticketFlags0);
      TicketFlags ticketFlags1 = encTicketPart0.getFlags();
      assertEquals(32, ticketFlags1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = new KerberosTime((-343L));
      encTicketPart0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getEndTime();
      assertEquals(60000, KerberosTime.MINUTE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encTicketPart0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getEndTime();
      assertEquals("2922690551202164705Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      HostAddresses hostAddresses0 = new HostAddresses();
      encTicketPart0.setClientAddresses(hostAddresses0);
      HostAddresses hostAddresses1 = encTicketPart0.getClientAddresses();
      assertSame(hostAddresses1, hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      encTicketPart0.setCRealm("']11gxBru05A'h");
      String string0 = encTicketPart0.getCRealm();
      assertEquals("']11gxBru05A'h", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      encTicketPart0.setCRealm("");
      String string0 = encTicketPart0.getCRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_UNKNOWN;
      PrincipalName principalName0 = new PrincipalName("org.apache.directory.api.asn1.ber.tlv.TLV", principalNameType0);
      encTicketPart0.setCName(principalName0);
      PrincipalName principalName1 = encTicketPart0.getCName();
      assertSame(principalName1, principalName0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      AuthorizationData authorizationData0 = new AuthorizationData();
      encTicketPart0.setAuthorizationData(authorizationData0);
      AuthorizationData authorizationData1 = encTicketPart0.getAuthorizationData();
      assertSame(authorizationData1, authorizationData0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encTicketPart0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getAuthTime();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = new KerberosTime((-3347L));
      encTicketPart0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getAuthTime();
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      encTicketPart0.setKey(encryptionKey0);
      // Undeclared exception!
      try { 
        encTicketPart0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptionKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      // Undeclared exception!
      try { 
        encTicketPart0.setFlag((TicketFlag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncTicketPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      TicketFlag ticketFlag0 = TicketFlag.MAX_VALUE;
      // Undeclared exception!
      try { 
        encTicketPart0.setFlag(ticketFlag0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.directory.api.asn1.util.BitString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        encTicketPart0.encode(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encTicketPart0.setStartTime(kerberosTime0);
      String string0 = encTicketPart0.toString();
      assertEquals("EncTicketPart : {\n    flags: \n    key: null\n    cRealm: null\n    cName: null\n    transited: null\n    authTime: null\n    startTime: 2922789940817071255Z\n    endTime: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      String string0 = encTicketPart0.toString();
      assertEquals("EncTicketPart : {\n    flags: \n    key: null\n    cRealm: null\n    cName: null\n    transited: null\n    authTime: null\n    endTime: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      encTicketPart0.setFlags((TicketFlags) null);
      TicketFlag ticketFlag0 = TicketFlag.PROXY;
      encTicketPart0.setFlag(ticketFlag0);
      assertNull(encTicketPart0.getCRealm());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      try { 
        encTicketPart0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncTicketPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      try { 
        encTicketPart0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncTicketPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      TransitedEncoding transitedEncoding0 = encTicketPart0.getTransited();
      assertNull(transitedEncoding0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      KerberosTime kerberosTime0 = new KerberosTime(date0);
      encTicketPart0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getAuthTime();
      assertEquals(0L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = encTicketPart0.getEndTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      PrincipalName principalName0 = encTicketPart0.getCName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      EncryptionKey encryptionKey0 = encTicketPart0.getKey();
      assertNull(encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      encTicketPart0.setTransited(transitedEncoding0);
      TransitedEncoding transitedEncoding1 = encTicketPart0.getTransited();
      assertEquals(TransitedEncodingType.NULL, transitedEncoding1.getTrType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      AuthorizationData authorizationData0 = new AuthorizationData();
      encTicketPart0.setAuthorizationData(authorizationData0);
      String string0 = encTicketPart0.toString();
      assertEquals("EncTicketPart : {\n    flags: \n    key: null\n    cRealm: null\n    cName: null\n    transited: null\n    authTime: null\n    endTime: null\n    authzData: AuthorizationData : \n\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      HostAddresses hostAddresses0 = encTicketPart0.getClientAddresses();
      assertNull(hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      TicketFlags ticketFlags0 = encTicketPart0.getFlags();
      ticketFlags0.setData((byte[]) null);
      TicketFlag ticketFlag0 = TicketFlag.FORWARDED;
      // Undeclared exception!
      try { 
        encTicketPart0.setFlag(ticketFlag0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // ERR_00030_BIT_NUMBER_OUT_OF_BOUND Bad bit number : out of bound
         //
         verifyException("org.apache.directory.api.asn1.util.BitString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encTicketPart0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getEndTime();
      assertEquals(86400000, KerberosTime.DAY);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encTicketPart0.setRenewTill(kerberosTime0);
      String string0 = encTicketPart0.toString();
      assertEquals("EncTicketPart : {\n    flags: \n    key: null\n    cRealm: null\n    cName: null\n    transited: null\n    authTime: null\n    endTime: null\n    renewtill: 2922789940817071255Z\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      MockDate mockDate0 = new MockDate((-143L));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      encTicketPart0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = encTicketPart0.getStartTime();
      assertEquals(86400000, KerberosTime.DAY);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = encTicketPart0.getStartTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = encTicketPart0.getAuthTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      String string0 = encTicketPart0.getCRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      KerberosTime kerberosTime0 = encTicketPart0.getRenewTill();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      AuthorizationData authorizationData0 = encTicketPart0.getAuthorizationData();
      assertNull(authorizationData0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EncTicketPart encTicketPart0 = new EncTicketPart();
      HostAddresses hostAddresses0 = new HostAddresses();
      encTicketPart0.setClientAddresses(hostAddresses0);
      String string0 = encTicketPart0.toString();
      assertEquals("EncTicketPart : {\n    flags: \n    key: null\n    cRealm: null\n    cName: null\n    transited: null\n    authTime: null\n    endTime: null\n    clientAddresses: \n}\n", string0);
  }
}
