/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:40:52 GMT 2022
 */

package org.apache.directory.shared.kerberos.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.EncTicketPart;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.messages.Ticket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ticket_ESTest extends Ticket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_ENTERPRISE;
      PrincipalName principalName0 = new PrincipalName("5ptL1", principalNameType0);
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(1065, principalName0, encryptedData0);
      ticket0.setRealm("rsaEncryption-EnvOID");
      // Undeclared exception!
      try { 
        ticket0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      int int0 = ticket0.getTktVno();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 2);
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      byte[] byteArray0 = new byte[6];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket((-1701), principalName0, encryptedData0);
      int int0 = ticket0.getTktVno();
      assertEquals((-1701), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD_EXP;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, (-93), byteArray0);
      Ticket ticket0 = new Ticket((-93), principalName0, encryptedData0);
      PrincipalName principalName1 = ticket0.getSName();
      assertNull(principalName1.getRealm());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 3472);
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      byte[] byteArray0 = new byte[3];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 3472, byteArray0);
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.setRealm("ISDw>:9d");
      String string0 = ticket0.getRealm();
      assertEquals("ISDw>:9d", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 2150);
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      byte[] byteArray0 = new byte[3];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, (byte) (-20), byteArray0);
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.setRealm("");
      String string0 = ticket0.getRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      EncTicketPart encTicketPart0 = new EncTicketPart();
      ticket0.setEncTicketPart(encTicketPart0);
      EncTicketPart encTicketPart1 = ticket0.getEncTicketPart();
      assertNull(encTicketPart1.getCRealm());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket((PrincipalName) null, encryptedData0);
      encryptedData0.setKvno((byte)0);
      EncryptedData encryptedData1 = ticket0.getEncPart();
      assertSame(encryptedData0, encryptedData1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      byte[] byteArray0 = new byte[1];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket((PrincipalName) null, encryptedData0);
      encryptedData0.setKvno(180);
      EncryptedData encryptedData1 = ticket0.getEncPart();
      assertSame(encryptedData1, encryptedData0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD_EXP;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, (-93), byteArray0);
      Ticket ticket0 = new Ticket((-93), principalName0, encryptedData0);
      EncryptedData encryptedData1 = ticket0.getEncPart();
      assertSame(encryptedData1, encryptedData0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 2);
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      byte[] byteArray0 = new byte[6];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket((-1701), principalName0, encryptedData0);
      int int0 = ticket0.computeLength();
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      Ticket ticket0 = new Ticket(principalName0, (EncryptedData) null);
      // Undeclared exception!
      try { 
        ticket0.toString("ERR_387");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      PrincipalName principalName0 = new PrincipalName();
      ticket0.setSName(principalName0);
      // Undeclared exception!
      try { 
        ticket0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ticket0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.directory.shared.kerberos.messages.Ticket
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      // Undeclared exception!
      try { 
        ticket0.encode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      byte[] byteArray0 = new byte[1];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket((PrincipalName) null, encryptedData0);
      String string0 = ticket0.toString("");
      assertEquals("Ticket :\n  tkt-vno : 5\n  realm : null\n  sname : null\n  enc-part : EncryptedData : {\n    etype: des3-cbc-sha1-kd (16)\n    cipher: 0x00 \n}\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      PrincipalName principalName0 = new PrincipalName();
      Ticket ticket1 = new Ticket(principalName0, (EncryptedData) null);
      boolean boolean0 = ticket0.equals(ticket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket((PrincipalName) null, encryptedData0);
      Ticket ticket1 = new Ticket(5, (PrincipalName) null, encryptedData0);
      boolean boolean0 = ticket0.equals(ticket1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.setRealm("ISDwQ:9d");
      Ticket ticket1 = new Ticket(5, principalName0, encryptedData0);
      assertFalse(ticket1.equals((Object)ticket0));
      
      ticket1.setRealm("ISDwQ:9d");
      boolean boolean0 = ticket0.equals(ticket1);
      assertTrue(ticket1.equals((Object)ticket0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      ticket0.setRealm("S_yB/%");
      Ticket ticket1 = new Ticket();
      boolean boolean0 = ticket1.equals(ticket0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.setRealm("ISDwQ:9d");
      Ticket ticket1 = new Ticket(5, principalName0, encryptedData0);
      boolean boolean0 = ticket0.equals(ticket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      byte[] byteArray0 = new byte[1];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket((PrincipalName) null, encryptedData0);
      EncryptedData encryptedData1 = new EncryptedData();
      Ticket ticket1 = new Ticket(690, (PrincipalName) null, encryptedData1);
      boolean boolean0 = ticket0.equals(ticket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      PrincipalName principalName0 = new PrincipalName();
      Ticket ticket1 = new Ticket(5, principalName0, (EncryptedData) null);
      boolean boolean0 = ticket1.equals(ticket0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      PrincipalName principalName0 = new PrincipalName();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[1];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, (-2660), byteArray0);
      Ticket ticket1 = new Ticket(6780, principalName0, encryptedData0);
      boolean boolean0 = ticket0.equals(ticket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      boolean boolean0 = ticket0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      boolean boolean0 = ticket0.equals(ticket0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      ticket0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[2];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 3472);
      Ticket ticket0 = new Ticket(271, principalName0, (EncryptedData) null);
      ticket0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5);
      try { 
        ticket0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.messages.Ticket", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      String string0 = ticket0.toString();
      assertEquals("Ticket :\n  tkt-vno : 5\n  realm : null\n  sname : null\n  enc-part : null\n", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      String string0 = ticket0.getRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      EncryptedData encryptedData0 = ticket0.getEncPart();
      assertNull(encryptedData0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.setEncPart(encryptedData0);
      assertNull(encryptedData0.getEType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ticket0.setRealm("ISDwQ:9d");
      ticket0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      byte[] byteArray0 = new byte[1];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket(0, (PrincipalName) null, encryptedData0);
      int int0 = ticket0.getTktVno();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      PrincipalName principalName0 = ticket0.getSName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      EncTicketPart encTicketPart0 = ticket0.getEncTicketPart();
      assertNull(encTicketPart0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName("ERR_53", (-728));
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      byte[] byteArray0 = new byte[0];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      ByteBuffer byteBuffer0 = ticket0.encode((ByteBuffer) null);
      assertEquals(47, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      ticket0.setTktVno((-2660));
      assertEquals((-2660), ticket0.getProtocolVersionNumber());
  }
}
