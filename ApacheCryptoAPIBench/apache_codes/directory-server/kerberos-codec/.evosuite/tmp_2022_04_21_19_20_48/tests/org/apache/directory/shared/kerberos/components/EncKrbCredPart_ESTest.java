/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:34:11 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.HostAddrType;
import org.apache.directory.shared.kerberos.components.EncKrbCredPart;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.components.HostAddress;
import org.apache.directory.shared.kerberos.components.KrbCredInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncKrbCredPart_ESTest extends EncKrbCredPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      try { 
        encKrbCredPart0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbCredPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      byte[] byteArray0 = new byte[0];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setKey(encryptionKey0);
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      encKrbCredPart0.encode(byteBuffer0);
      assertEquals(23, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=23 lim=86400000 cap=86400000]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbCredPart0.setSenderAddress(hostAddress0);
      encKrbCredPart0.setTicketInfo(linkedList0);
      int int0 = encKrbCredPart0.computeLength();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[8];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      krbCredInfo0.setKey(encryptionKey0);
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      int int0 = encKrbCredPart0.computeLength();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer(0);
      encKrbCredPart0.setUsec(integer0);
      Integer integer1 = encKrbCredPart0.getUsec();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = krbCredInfo0.getStartTime();
      encKrbCredPart0.setUsec((Integer) kerberosTime0.MINUTE);
      Integer integer0 = encKrbCredPart0.getUsec();
      assertEquals(60000, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer((-1412));
      encKrbCredPart0.setUsec(integer0);
      Integer integer1 = encKrbCredPart0.getUsec();
      assertEquals((-1412), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      encKrbCredPart0.setTimestamp(kerberosTime0);
      KerberosTime kerberosTime1 = encKrbCredPart0.getTimestamp();
      assertTrue(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encKrbCredPart0.setTimestamp(kerberosTime0);
      KerberosTime kerberosTime1 = encKrbCredPart0.getTimestamp();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      Instant instant1 = MockInstant.minusSeconds(instant0, 1L);
      Date date0 = Date.from(instant1);
      KerberosTime kerberosTime0 = new KerberosTime(date0);
      encKrbCredPart0.setTimestamp(kerberosTime0);
      KerberosTime kerberosTime1 = encKrbCredPart0.getTimestamp();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      List<KrbCredInfo> list0 = encKrbCredPart0.getTicketInfo();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      List<KrbCredInfo> list0 = encKrbCredPart0.getTicketInfo();
      assertTrue(list0.contains(krbCredInfo0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      encKrbCredPart0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = encKrbCredPart0.getSenderAddress();
      assertSame(hostAddress1, hostAddress0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer((byte)0);
      encKrbCredPart0.setNonce(integer0);
      Integer integer1 = encKrbCredPart0.getNonce();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      encKrbCredPart0.setNonce((Integer) 604800000);
      Integer integer0 = encKrbCredPart0.getNonce();
      assertEquals(604800000, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer((-93));
      encKrbCredPart0.setNonce(integer0);
      Integer integer1 = encKrbCredPart0.getNonce();
      assertEquals((-93), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      krbCredInfo0.setKey(encryptionKey0);
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      // Undeclared exception!
      try { 
        encKrbCredPart0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptionKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        encKrbCredPart0.encode(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbCredPart0.setRecipientAddress(hostAddress0);
      String string0 = encKrbCredPart0.toString();
      assertEquals("EncKrbCredPart : {\n    ticketInfo: null\n    recipientAddress: Unknow host : \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      encKrbCredPart0.setSenderAddress(hostAddress0);
      String string0 = encKrbCredPart0.toString();
      assertEquals("EncKrbCredPart : {\n    ticketInfo: null\n    senderAddress: Unknow host : \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer(166);
      encKrbCredPart0.setUsec(integer0);
      String string0 = encKrbCredPart0.toString();
      assertEquals("EncKrbCredPart : {\n    ticketInfo: null\n    usec: 166\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      encKrbCredPart0.setNonce((Integer) 604800000);
      String string0 = encKrbCredPart0.toString();
      assertEquals("EncKrbCredPart : {\n    ticketInfo: null\n    nonce: 604800000\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      assertNull(encKrbCredPart0.getUsec());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      // Undeclared exception!
      try { 
        encKrbCredPart0.addTicketInfo((KrbCredInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbCredPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      HostAddress hostAddress0 = new HostAddress();
      encKrbCredPart0.setRecipientAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1646);
      // Undeclared exception!
      try { 
        encKrbCredPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      HostAddress hostAddress0 = new HostAddress();
      encKrbCredPart0.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1207);
      // Undeclared exception!
      try { 
        encKrbCredPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer(952);
      encKrbCredPart0.setUsec(integer0);
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2275);
      encKrbCredPart0.encode(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=14 lim=2275 cap=2275]", byteBuffer0.toString());
      assertEquals(14, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      KerberosTime kerberosTime0 = new KerberosTime();
      encKrbCredPart0.setTimestamp(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(25);
      // Undeclared exception!
      try { 
        encKrbCredPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      Integer integer0 = new Integer(2255);
      encKrbCredPart0.setNonce(integer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2255);
      encKrbCredPart0.encode(byteBuffer0);
      assertEquals(2241, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=14 lim=2255 cap=2255]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      try { 
        encKrbCredPart0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKrbCredPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      encKrbCredPart0.setRecipientAddress(hostAddress0);
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      int int0 = encKrbCredPart0.computeLength();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer(952);
      encKrbCredPart0.setUsec(integer0);
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      int int0 = encKrbCredPart0.computeLength();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      KerberosTime kerberosTime0 = new KerberosTime(223);
      encKrbCredPart0.setTimestamp(kerberosTime0);
      int int0 = encKrbCredPart0.computeLength();
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = new Integer(1);
      encKrbCredPart0.setNonce(integer0);
      LinkedList<KrbCredInfo> linkedList0 = new LinkedList<KrbCredInfo>();
      encKrbCredPart0.setTicketInfo(linkedList0);
      int int0 = encKrbCredPart0.computeLength();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      encKrbCredPart0.addTicketInfo(krbCredInfo0);
      // Undeclared exception!
      try { 
        encKrbCredPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbCredInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      HostAddress hostAddress0 = encKrbCredPart0.getSenderAddress();
      assertNull(hostAddress0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      List<KrbCredInfo> list0 = encKrbCredPart0.getTicketInfo();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      HostAddress hostAddress0 = new HostAddress();
      encKrbCredPart0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = encKrbCredPart0.getRecipientAddress();
      assertSame(hostAddress1, hostAddress0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = encKrbCredPart0.getNonce();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      HostAddress hostAddress0 = encKrbCredPart0.getRecipientAddress();
      assertNull(hostAddress0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KerberosTime kerberosTime0 = encKrbCredPart0.getTimestamp();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      Integer integer0 = encKrbCredPart0.getUsec();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncKrbCredPart encKrbCredPart0 = new EncKrbCredPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKrbCredPart0.setTimestamp(kerberosTime0);
      String string0 = encKrbCredPart0.toString();
      assertEquals("EncKrbCredPart : {\n    ticketInfo: null\n    timestamp: 20140214202121Z\n}\n", string0);
  }
}
