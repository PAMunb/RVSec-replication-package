/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:34:08 GMT 2022
 */

package org.apache.directory.shared.kerberos.codec.types;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.directory.shared.kerberos.codec.types.AuthorizationType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AuthorizationType_ESTest extends AuthorizationType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthorizationType[] authorizationTypeArray0 = AuthorizationType.values();
      assertEquals(14, authorizationTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.valueOf("NULL");
      assertEquals(0, authorizationType0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.valueOf("AD_MANDATORY_TICKET_EXTENSIONS");
      assertEquals(AuthorizationType.AD_MANDATORY_TICKET_EXTENSIONS, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue((-836));
      int int0 = authorizationType0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_ETYPE_NEGOTIATION;
      String string0 = authorizationType0.toString();
      assertEquals("etype negociation(129)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_WIN2K_PAC;
      String string0 = authorizationType0.toString();
      assertEquals("win 2000 PAC(128)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.OSF_DCE;
      String string0 = authorizationType0.toString();
      assertEquals("OSF DCE(64)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_FOR_KDC;
      String string0 = authorizationType0.toString();
      assertEquals("mandatory-for-kdc(8)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_IN_TICKET_EXTENSIONS;
      String string0 = authorizationType0.toString();
      assertEquals("in ticket extensions(7)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_TICKET_EXTENSIONS;
      String string0 = authorizationType0.toString();
      assertEquals("mandatory ticket extensions(6)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_KDC_ISSUED;
      String string0 = authorizationType0.toString();
      assertEquals("kdc issued(4)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_INTENDED_FOR_APPLICATION_CLASS;
      String string0 = authorizationType0.toString();
      assertEquals("intended for application class(3)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_INTENDED_FOR_SERVER;
      String string0 = authorizationType0.toString();
      assertEquals("intended for server(2)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_IF_RELEVANT;
      String string0 = authorizationType0.toString();
      assertEquals("if relevant(1)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(12);
      String string0 = authorizationType0.toString();
      assertEquals("null(0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(129);
      assertEquals(AuthorizationType.AD_ETYPE_NEGOTIATION, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(128);
      assertEquals(AuthorizationType.AD_WIN2K_PAC, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(66);
      String string0 = authorizationType0.toString();
      assertEquals("OSF DCE pki certid(66)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(65);
      String string0 = authorizationType0.toString();
      assertEquals("sesame(65)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(64);
      assertEquals(AuthorizationType.OSF_DCE, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(8);
      assertEquals(AuthorizationType.AD_MANDATORY_FOR_KDC, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(6);
      assertEquals(AuthorizationType.AD_MANDATORY_TICKET_EXTENSIONS, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(5);
      String string0 = authorizationType0.toString();
      assertEquals("or(5)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(4);
      assertEquals(AuthorizationType.AD_KDC_ISSUED, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(3);
      assertEquals(AuthorizationType.AD_INTENDED_FOR_APPLICATION_CLASS, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(2);
      assertEquals(AuthorizationType.AD_INTENDED_FOR_SERVER, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(1);
      assertEquals(AuthorizationType.AD_IF_RELEVANT, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.getTypeByValue(7);
      int int0 = authorizationType0.getValue();
      assertEquals(7, int0);
  }
}
