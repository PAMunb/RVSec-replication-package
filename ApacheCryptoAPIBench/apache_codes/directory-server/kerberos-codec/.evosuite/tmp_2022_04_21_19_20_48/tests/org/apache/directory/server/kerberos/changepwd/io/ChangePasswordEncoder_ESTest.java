/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:19:03 GMT 2022
 */

package org.apache.directory.server.kerberos.changepwd.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import org.apache.directory.server.kerberos.changepwd.io.ChangePasswordEncoder;
import org.apache.directory.server.kerberos.changepwd.messages.AbstractPasswordMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangePasswordEncoder_ESTest extends ChangePasswordEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractPasswordMessage abstractPasswordMessage0 = mock(AbstractPasswordMessage.class, new ViolatedAssumptionAnswer());
      doReturn((short) (-1)).when(abstractPasswordMessage0).computeLength();
      // Undeclared exception!
      try { 
        ChangePasswordEncoder.encode(abstractPasswordMessage0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractPasswordMessage abstractPasswordMessage0 = mock(AbstractPasswordMessage.class, new ViolatedAssumptionAnswer());
      doReturn((short)0).when(abstractPasswordMessage0).computeLength();
      doReturn((ByteBuffer) null).when(abstractPasswordMessage0).encode(any(java.nio.ByteBuffer.class));
      // Undeclared exception!
      try { 
        ChangePasswordEncoder.encode(abstractPasswordMessage0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.io.ChangePasswordEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteBuffer0).toString();
      AbstractPasswordMessage abstractPasswordMessage0 = mock(AbstractPasswordMessage.class, new ViolatedAssumptionAnswer());
      doReturn((short)2556).when(abstractPasswordMessage0).computeLength();
      doReturn(byteBuffer0).when(abstractPasswordMessage0).encode(any(java.nio.ByteBuffer.class));
      ByteBuffer byteBuffer1 = ChangePasswordEncoder.encode(abstractPasswordMessage0, true);
      assertEquals(0, byteBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractPasswordMessage abstractPasswordMessage0 = mock(AbstractPasswordMessage.class, new ViolatedAssumptionAnswer());
      doReturn((short) (-1)).when(abstractPasswordMessage0).computeLength();
      // Undeclared exception!
      try { 
        ChangePasswordEncoder.encode(abstractPasswordMessage0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChangePasswordEncoder changePasswordEncoder0 = new ChangePasswordEncoder();
  }
}
