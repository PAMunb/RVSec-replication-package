/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:29:18 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.time.Instant;
import java.util.Date;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.components.HostAddresses;
import org.apache.directory.shared.kerberos.components.KrbCredInfo;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.flags.TicketFlags;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KrbCredInfo_ESTest extends KrbCredInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalName principalName0 = new PrincipalName();
      principalName0.setNameType(1394);
      krbCredInfo0.setpName(principalName0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    pName: { name-type: KRB_NT_UNKNOWN no name-string }\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[6];
      krbCredInfo0.setpRealm("ubU1 k!>y6(");
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbCredInfo0.setRenewtill(kerberosTime0);
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1166);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      MockDate mockDate0 = new MockDate(283, (-759), (-759), 699, 0, (-65));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setEndTime(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(34);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      Instant instant0 = MockInstant.ofEpochSecond(1667L, (-1219L));
      Date date0 = Date.from(instant0);
      KerberosTime kerberosTime0 = new KerberosTime(date0);
      krbCredInfo0.setStartTime(kerberosTime0);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(34);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      MockDate mockDate0 = new MockDate(0, 2576, 0, 0, 2094);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setAuthTime(kerberosTime0);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(34);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setsRealm("ERR_04076");
      String string0 = krbCredInfo0.getsRealm();
      assertEquals("ERR_04076", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setsRealm("");
      String string0 = krbCredInfo0.getsRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalName principalName0 = new PrincipalName();
      krbCredInfo0.setsName(principalName0);
      PrincipalName principalName1 = krbCredInfo0.getsName();
      assertNull(principalName1.getNameType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setpRealm("|2BY");
      String string0 = krbCredInfo0.getpRealm();
      assertEquals("|2BY", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setpRealm("");
      String string0 = krbCredInfo0.getpRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalName principalName0 = new PrincipalName();
      krbCredInfo0.setpName(principalName0);
      PrincipalName principalName1 = krbCredInfo0.getpName();
      assertNull(principalName1.getRealm());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      byte[] byteArray0 = new byte[1];
      TicketFlags ticketFlags0 = new TicketFlags();
      ticketFlags0.setData(byteArray0);
      krbCredInfo0.setTicketFlags(ticketFlags0);
      TicketFlags ticketFlags1 = krbCredInfo0.getTicketFlags();
      assertFalse(ticketFlags1.isReserved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      byte[] byteArray0 = new byte[0];
      TicketFlags ticketFlags0 = new TicketFlags();
      ticketFlags0.setData(byteArray0);
      krbCredInfo0.setTicketFlags(ticketFlags0);
      TicketFlags ticketFlags1 = krbCredInfo0.getTicketFlags();
      assertFalse(ticketFlags1.isMayPosdate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      TicketFlags ticketFlags0 = new TicketFlags(byteArray0);
      krbCredInfo0.setTicketFlags(ticketFlags0);
      TicketFlags ticketFlags1 = krbCredInfo0.getTicketFlags();
      assertEquals((byte)5, ticketFlags1.getUnusedBits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      TicketFlags ticketFlags0 = new TicketFlags(604800000);
      krbCredInfo0.setTicketFlags(ticketFlags0);
      TicketFlags ticketFlags1 = krbCredInfo0.getTicketFlags();
      assertTrue(ticketFlags1.isMayPosdate());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      TicketFlags ticketFlags0 = new TicketFlags((-3283));
      krbCredInfo0.setTicketFlags(ticketFlags0);
      TicketFlags ticketFlags1 = krbCredInfo0.getTicketFlags();
      assertEquals((-3283), ticketFlags1.getIntValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime(448L);
      krbCredInfo0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getStartTime();
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbCredInfo0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getStartTime();
      assertEquals("2922789940817071255Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      MockDate mockDate0 = new MockDate((-89), (-89), (-89), 436, (-1492), (-1492));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getStartTime();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime(264L);
      krbCredInfo0.setRenewtill(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getRenewtill();
      assertEquals(86400000, KerberosTime.DAY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime();
      krbCredInfo0.setRenewtill(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getRenewtill();
      assertEquals("20140214202121Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      MockDate mockDate0 = new MockDate((-51), (-51), (-1966), (-51), (-51));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setRenewtill(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getRenewtill();
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[0];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      krbCredInfo0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = krbCredInfo0.getKey();
      assertEquals(0, encryptionKey1.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      byte[] byteArray0 = new byte[1];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 1202);
      krbCredInfo0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = krbCredInfo0.getKey();
      assertEquals(EncryptionType.RSAENCRYPTION_ENVOID, encryptionKey1.getKeyType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, (-669));
      krbCredInfo0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = krbCredInfo0.getKey();
      assertEquals(EncryptionType.RC2CBC_ENVOID, encryptionKey1.getKeyType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      krbCredInfo0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getEndTime();
      assertEquals("19700101000000Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime();
      krbCredInfo0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getEndTime();
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      MockDate mockDate0 = new MockDate(0, 0, 1061, 0, 1061, 1435);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getEndTime();
      assertEquals(60000, KerberosTime.MINUTE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      HostAddresses hostAddresses0 = new HostAddresses();
      krbCredInfo0.setClientAddresses(hostAddresses0);
      HostAddresses hostAddresses1 = krbCredInfo0.getClientAddresses();
      assertSame(hostAddresses1, hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      MockDate mockDate0 = new MockDate();
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getAuthTime();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime();
      krbCredInfo0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getAuthTime();
      assertEquals("20140214202121Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      Instant instant0 = MockInstant.ofEpochSecond((-1047L), 0L);
      Date date0 = Date.from(instant0);
      KerberosTime kerberosTime0 = new KerberosTime(date0);
      krbCredInfo0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbCredInfo0.getAuthTime();
      assertEquals(86400000, KerberosTime.DAY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      // Undeclared exception!
      try { 
        krbCredInfo0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbCredInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      String string0 = krbCredInfo0.getsRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setsRealm("cv.|WVjLVx");
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    sRealm: cv.|WVjLVx\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = new KerberosTime();
      krbCredInfo0.setEndTime(kerberosTime0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    endTime: 20140214202121Z\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbCredInfo0.setStartTime(kerberosTime0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    startTime: 2922789940817071255Z\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbCredInfo0.setAuthTime(kerberosTime0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    authTime: 2922789940817071255Z\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      TicketFlags ticketFlags0 = new TicketFlags();
      krbCredInfo0.setTicketFlags(ticketFlags0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    ticketFlags: \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setpRealm("    ticketFlags: ");
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    pRealm:     ticketFlags: \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      HostAddresses hostAddresses0 = new HostAddresses();
      krbCredInfo0.setClientAddresses(hostAddresses0);
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(19);
      ByteBuffer byteBuffer1 = krbCredInfo0.encode(byteBuffer0);
      assertEquals(19, byteBuffer1.limit());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_ENTERPRISE;
      PrincipalName principalName0 = new PrincipalName("KrbCredInfo initial value : {}", principalNameType0);
      krbCredInfo0.setsName(principalName0);
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(60);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setsRealm("*j<<XL.ul");
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(28);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbCredInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      KerberosTime kerberosTime0 = new KerberosTime();
      krbCredInfo0.setRenewtill(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbCredInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      TicketFlags ticketFlags0 = new TicketFlags();
      krbCredInfo0.setTicketFlags(ticketFlags0);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(24);
      ByteBuffer byteBuffer1 = krbCredInfo0.encode(byteBuffer0);
      assertEquals(24, byteBuffer1.position());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_UID;
      PrincipalName principalName0 = new PrincipalName("fj^xHm?h6]j2,BLke", principalNameType0);
      krbCredInfo0.setpName(principalName0);
      krbCredInfo0.setKey(encryptionKey0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(47);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      krbCredInfo0.setpRealm("?/");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(21);
      // Undeclared exception!
      try { 
        krbCredInfo0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbCredInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      try { 
        krbCredInfo0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbCredInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      HostAddresses hostAddresses0 = new HostAddresses();
      krbCredInfo0.setClientAddresses(hostAddresses0);
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_ENTERPRISE;
      PrincipalName principalName0 = new PrincipalName("KrbCredInfo initial value : {}", principalNameType0);
      krbCredInfo0.setsName(principalName0);
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      krbCredInfo0.setsRealm("*j<<XL.ul");
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      krbCredInfo0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(28);
      ByteBuffer byteBuffer1 = krbCredInfo0.encode(byteBuffer0);
      assertTrue(byteBuffer1.hasArray());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      KerberosTime kerberosTime0 = new KerberosTime();
      krbCredInfo0.setRenewtill(kerberosTime0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      MockDate mockDate0 = new MockDate(283, (-759), (-759), 699, 0, (-65));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setEndTime(kerberosTime0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      Instant instant0 = MockInstant.ofEpochSecond(1667L, (-1219L));
      Date date0 = Date.from(instant0);
      KerberosTime kerberosTime0 = new KerberosTime(date0);
      krbCredInfo0.setStartTime(kerberosTime0);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      MockDate mockDate0 = new MockDate(0, 2576, 0, 0, 2094);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbCredInfo0.setAuthTime(kerberosTime0);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      TicketFlags ticketFlags0 = new TicketFlags();
      krbCredInfo0.setTicketFlags(ticketFlags0);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_UID;
      PrincipalName principalName0 = new PrincipalName("fj^xHm?h6]j2,BLke", principalNameType0);
      krbCredInfo0.setpName(principalName0);
      krbCredInfo0.setKey(encryptionKey0);
      int int0 = krbCredInfo0.computeLength();
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null);
      krbCredInfo0.setKey(encryptionKey0);
      krbCredInfo0.setpRealm("?/");
      krbCredInfo0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(21);
      krbCredInfo0.encode(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=21 lim=21 cap=21]", byteBuffer0.toString());
      assertEquals(21, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      String string0 = krbCredInfo0.getpRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      HostAddresses hostAddresses0 = krbCredInfo0.getClientAddresses();
      assertNull(hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      HostAddresses hostAddresses0 = new HostAddresses();
      krbCredInfo0.setClientAddresses(hostAddresses0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    clientAddresses: \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      EncryptionKey encryptionKey0 = krbCredInfo0.getKey();
      assertNull(encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbCredInfo0.setRenewtill(kerberosTime0);
      String string0 = krbCredInfo0.toString();
      assertEquals("KrbCredInfo : {\n    key: null\n    renewtill: 2922789940817071255Z\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalName principalName0 = krbCredInfo0.getsName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = krbCredInfo0.getEndTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = krbCredInfo0.getStartTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalName principalName0 = krbCredInfo0.getpName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = krbCredInfo0.getRenewtill();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      KerberosTime kerberosTime0 = krbCredInfo0.getAuthTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      TicketFlags ticketFlags0 = krbCredInfo0.getTicketFlags();
      assertNull(ticketFlags0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      KrbCredInfo krbCredInfo0 = new KrbCredInfo();
      PrincipalName principalName0 = new PrincipalName();
      krbCredInfo0.setsName(principalName0);
      // Undeclared exception!
      try { 
        krbCredInfo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }
}
